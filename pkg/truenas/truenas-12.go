// Package Truenas12Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package Truenas12Openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicScopes = "basic.Scopes"
)

// Defines values for ActivedirectoryUpdate0NssInfo.
const (
	ActivedirectoryUpdate0NssInfoRFC2307 ActivedirectoryUpdate0NssInfo = "RFC2307"
	ActivedirectoryUpdate0NssInfoSFU     ActivedirectoryUpdate0NssInfo = "SFU"
	ActivedirectoryUpdate0NssInfoSFU20   ActivedirectoryUpdate0NssInfo = "SFU20"
)

// Defines values for AfpUpdate0ChmodRequest.
const (
	AfpUpdate0ChmodRequestIGNORE   AfpUpdate0ChmodRequest = "IGNORE"
	AfpUpdate0ChmodRequestPRESERVE AfpUpdate0ChmodRequest = "PRESERVE"
	AfpUpdate0ChmodRequestSIMPLE   AfpUpdate0ChmodRequest = "SIMPLE"
)

// Defines values for AfpUpdate0Loglevel.
const (
	AfpUpdate0LoglevelDEBUG   AfpUpdate0Loglevel = "DEBUG"
	AfpUpdate0LoglevelFULL    AfpUpdate0Loglevel = "FULL"
	AfpUpdate0LoglevelMINIMUM AfpUpdate0Loglevel = "MINIMUM"
	AfpUpdate0LoglevelNONE    AfpUpdate0Loglevel = "NONE"
	AfpUpdate0LoglevelNORMAL  AfpUpdate0Loglevel = "NORMAL"
)

// Defines values for AfpUpdate0MapAcls.
const (
	AfpUpdate0MapAclsMODE   AfpUpdate0MapAcls = "MODE"
	AfpUpdate0MapAclsNONE   AfpUpdate0MapAcls = "NONE"
	AfpUpdate0MapAclsRIGHTS AfpUpdate0MapAcls = "RIGHTS"
)

// Defines values for AlertserviceCreate0Level.
const (
	AlertserviceCreate0LevelALERT     AlertserviceCreate0Level = "ALERT"
	AlertserviceCreate0LevelCRITICAL  AlertserviceCreate0Level = "CRITICAL"
	AlertserviceCreate0LevelEMERGENCY AlertserviceCreate0Level = "EMERGENCY"
	AlertserviceCreate0LevelERROR     AlertserviceCreate0Level = "ERROR"
	AlertserviceCreate0LevelINFO      AlertserviceCreate0Level = "INFO"
	AlertserviceCreate0LevelNOTICE    AlertserviceCreate0Level = "NOTICE"
	AlertserviceCreate0LevelWARNING   AlertserviceCreate0Level = "WARNING"
)

// Defines values for AlertserviceTest0Level.
const (
	AlertserviceTest0LevelALERT     AlertserviceTest0Level = "ALERT"
	AlertserviceTest0LevelCRITICAL  AlertserviceTest0Level = "CRITICAL"
	AlertserviceTest0LevelEMERGENCY AlertserviceTest0Level = "EMERGENCY"
	AlertserviceTest0LevelERROR     AlertserviceTest0Level = "ERROR"
	AlertserviceTest0LevelINFO      AlertserviceTest0Level = "INFO"
	AlertserviceTest0LevelNOTICE    AlertserviceTest0Level = "NOTICE"
	AlertserviceTest0LevelWARNING   AlertserviceTest0Level = "WARNING"
)

// Defines values for AlertserviceUpdate1Level.
const (
	AlertserviceUpdate1LevelALERT     AlertserviceUpdate1Level = "ALERT"
	AlertserviceUpdate1LevelCRITICAL  AlertserviceUpdate1Level = "CRITICAL"
	AlertserviceUpdate1LevelEMERGENCY AlertserviceUpdate1Level = "EMERGENCY"
	AlertserviceUpdate1LevelERROR     AlertserviceUpdate1Level = "ERROR"
	AlertserviceUpdate1LevelINFO      AlertserviceUpdate1Level = "INFO"
	AlertserviceUpdate1LevelNOTICE    AlertserviceUpdate1Level = "NOTICE"
	AlertserviceUpdate1LevelWARNING   AlertserviceUpdate1Level = "WARNING"
)

// Defines values for CertificateCreate0CreateType.
const (
	CERTIFICATECREATEACME        CertificateCreate0CreateType = "CERTIFICATE_CREATE_ACME"
	CERTIFICATECREATECSR         CertificateCreate0CreateType = "CERTIFICATE_CREATE_CSR"
	CERTIFICATECREATEIMPORTED    CertificateCreate0CreateType = "CERTIFICATE_CREATE_IMPORTED"
	CERTIFICATECREATEIMPORTEDCSR CertificateCreate0CreateType = "CERTIFICATE_CREATE_IMPORTED_CSR"
	CERTIFICATECREATEINTERNAL    CertificateCreate0CreateType = "CERTIFICATE_CREATE_INTERNAL"
)

// Defines values for CertificateCreate0DigestAlgorithm.
const (
	CertificateCreate0DigestAlgorithmSHA1   CertificateCreate0DigestAlgorithm = "SHA1"
	CertificateCreate0DigestAlgorithmSHA224 CertificateCreate0DigestAlgorithm = "SHA224"
	CertificateCreate0DigestAlgorithmSHA256 CertificateCreate0DigestAlgorithm = "SHA256"
	CertificateCreate0DigestAlgorithmSHA384 CertificateCreate0DigestAlgorithm = "SHA384"
	CertificateCreate0DigestAlgorithmSHA512 CertificateCreate0DigestAlgorithm = "SHA512"
)

// Defines values for CertificateCreate0EcCurve.
const (
	CertificateCreate0EcCurveBrainpoolP256R1 CertificateCreate0EcCurve = "BrainpoolP256R1"
	CertificateCreate0EcCurveBrainpoolP384R1 CertificateCreate0EcCurve = "BrainpoolP384R1"
	CertificateCreate0EcCurveBrainpoolP512R1 CertificateCreate0EcCurve = "BrainpoolP512R1"
	CertificateCreate0EcCurveEd25519         CertificateCreate0EcCurve = "ed25519"
	CertificateCreate0EcCurveSECP256K1       CertificateCreate0EcCurve = "SECP256K1"
)

// Defines values for CertificateCreate0KeyType.
const (
	CertificateCreate0KeyTypeEC  CertificateCreate0KeyType = "EC"
	CertificateCreate0KeyTypeRSA CertificateCreate0KeyType = "RSA"
)

// Defines values for CertificateauthorityCreate0CreateType.
const (
	CACREATEIMPORTED     CertificateauthorityCreate0CreateType = "CA_CREATE_IMPORTED"
	CACREATEINTERMEDIATE CertificateauthorityCreate0CreateType = "CA_CREATE_INTERMEDIATE"
	CACREATEINTERNAL     CertificateauthorityCreate0CreateType = "CA_CREATE_INTERNAL"
)

// Defines values for CertificateauthorityCreate0DigestAlgorithm.
const (
	CertificateauthorityCreate0DigestAlgorithmSHA1   CertificateauthorityCreate0DigestAlgorithm = "SHA1"
	CertificateauthorityCreate0DigestAlgorithmSHA224 CertificateauthorityCreate0DigestAlgorithm = "SHA224"
	CertificateauthorityCreate0DigestAlgorithmSHA256 CertificateauthorityCreate0DigestAlgorithm = "SHA256"
	CertificateauthorityCreate0DigestAlgorithmSHA384 CertificateauthorityCreate0DigestAlgorithm = "SHA384"
	CertificateauthorityCreate0DigestAlgorithmSHA512 CertificateauthorityCreate0DigestAlgorithm = "SHA512"
)

// Defines values for CertificateauthorityCreate0EcCurve.
const (
	CertificateauthorityCreate0EcCurveBrainpoolP256R1 CertificateauthorityCreate0EcCurve = "BrainpoolP256R1"
	CertificateauthorityCreate0EcCurveBrainpoolP384R1 CertificateauthorityCreate0EcCurve = "BrainpoolP384R1"
	CertificateauthorityCreate0EcCurveBrainpoolP512R1 CertificateauthorityCreate0EcCurve = "BrainpoolP512R1"
	CertificateauthorityCreate0EcCurveEd25519         CertificateauthorityCreate0EcCurve = "ed25519"
	CertificateauthorityCreate0EcCurveSECP256K1       CertificateauthorityCreate0EcCurve = "SECP256K1"
)

// Defines values for CertificateauthorityCreate0KeyType.
const (
	CertificateauthorityCreate0KeyTypeEC  CertificateauthorityCreate0KeyType = "EC"
	CertificateauthorityCreate0KeyTypeRSA CertificateauthorityCreate0KeyType = "RSA"
)

// Defines values for CertificateauthorityUpdate1CreateType.
const (
	CASIGNCSR CertificateauthorityUpdate1CreateType = "CA_SIGN_CSR"
)

// Defines values for CloudsyncCreate0Direction.
const (
	CloudsyncCreate0DirectionPULL CloudsyncCreate0Direction = "PULL"
	CloudsyncCreate0DirectionPUSH CloudsyncCreate0Direction = "PUSH"
)

// Defines values for CloudsyncCreate0TransferMode.
const (
	CloudsyncCreate0TransferModeCOPY CloudsyncCreate0TransferMode = "COPY"
	CloudsyncCreate0TransferModeMOVE CloudsyncCreate0TransferMode = "MOVE"
	CloudsyncCreate0TransferModeSYNC CloudsyncCreate0TransferMode = "SYNC"
)

// Defines values for CloudsyncRestore1TransferMode.
const (
	CloudsyncRestore1TransferModeCOPY CloudsyncRestore1TransferMode = "COPY"
	CloudsyncRestore1TransferModeSYNC CloudsyncRestore1TransferMode = "SYNC"
)

// Defines values for CloudsyncSyncOnetime0Direction.
const (
	CloudsyncSyncOnetime0DirectionPULL CloudsyncSyncOnetime0Direction = "PULL"
	CloudsyncSyncOnetime0DirectionPUSH CloudsyncSyncOnetime0Direction = "PUSH"
)

// Defines values for CloudsyncSyncOnetime0TransferMode.
const (
	CloudsyncSyncOnetime0TransferModeCOPY CloudsyncSyncOnetime0TransferMode = "COPY"
	CloudsyncSyncOnetime0TransferModeMOVE CloudsyncSyncOnetime0TransferMode = "MOVE"
	CloudsyncSyncOnetime0TransferModeSYNC CloudsyncSyncOnetime0TransferMode = "SYNC"
)

// Defines values for CloudsyncUpdate1Direction.
const (
	CloudsyncUpdate1DirectionPULL CloudsyncUpdate1Direction = "PULL"
	CloudsyncUpdate1DirectionPUSH CloudsyncUpdate1Direction = "PUSH"
)

// Defines values for CloudsyncUpdate1TransferMode.
const (
	CloudsyncUpdate1TransferModeCOPY CloudsyncUpdate1TransferMode = "COPY"
	CloudsyncUpdate1TransferModeMOVE CloudsyncUpdate1TransferMode = "MOVE"
	CloudsyncUpdate1TransferModeSYNC CloudsyncUpdate1TransferMode = "SYNC"
)

// Defines values for CoreDebug0.
const (
	PTVS      CoreDebug0 = "PTVS"
	PYDEV     CoreDebug0 = "PYDEV"
	REMOTEPDB CoreDebug0 = "REMOTE_PDB"
)

// Defines values for CorePingRemote0Type.
const (
	ICMP   CorePingRemote0Type = "ICMP"
	ICMPV4 CorePingRemote0Type = "ICMPV4"
	ICMPV6 CorePingRemote0Type = "ICMPV6"
)

// Defines values for DeviceGetInfo0.
const (
	DeviceGetInfo0DISK   DeviceGetInfo0 = "DISK"
	DeviceGetInfo0SERIAL DeviceGetInfo0 = "SERIAL"
)

// Defines values for DiskTemperature1.
const (
	DiskTemperature1IDLE    DiskTemperature1 = "IDLE"
	DiskTemperature1NEVER   DiskTemperature1 = "NEVER"
	DiskTemperature1SLEEP   DiskTemperature1 = "SLEEP"
	DiskTemperature1STANDBY DiskTemperature1 = "STANDBY"
)

// Defines values for DiskTemperatures1.
const (
	DiskTemperatures1IDLE    DiskTemperatures1 = "IDLE"
	DiskTemperatures1NEVER   DiskTemperatures1 = "NEVER"
	DiskTemperatures1SLEEP   DiskTemperatures1 = "SLEEP"
	DiskTemperatures1STANDBY DiskTemperatures1 = "STANDBY"
)

// Defines values for DiskUpdate1Acousticlevel.
const (
	DiskUpdate1AcousticlevelDISABLED DiskUpdate1Acousticlevel = "DISABLED"
	DiskUpdate1AcousticlevelMAXIMUM  DiskUpdate1Acousticlevel = "MAXIMUM"
	DiskUpdate1AcousticlevelMEDIUM   DiskUpdate1Acousticlevel = "MEDIUM"
	DiskUpdate1AcousticlevelMINIMUM  DiskUpdate1Acousticlevel = "MINIMUM"
)

// Defines values for DiskUpdate1Advpowermgmt.
const (
	DiskUpdate1AdvpowermgmtDISABLED DiskUpdate1Advpowermgmt = "DISABLED"
	DiskUpdate1AdvpowermgmtN1       DiskUpdate1Advpowermgmt = "1"
	DiskUpdate1AdvpowermgmtN127     DiskUpdate1Advpowermgmt = "127"
	DiskUpdate1AdvpowermgmtN128     DiskUpdate1Advpowermgmt = "128"
	DiskUpdate1AdvpowermgmtN192     DiskUpdate1Advpowermgmt = "192"
	DiskUpdate1AdvpowermgmtN254     DiskUpdate1Advpowermgmt = "254"
	DiskUpdate1AdvpowermgmtN64      DiskUpdate1Advpowermgmt = "64"
)

// Defines values for DiskUpdate1Hddstandby.
const (
	ALWAYSON DiskUpdate1Hddstandby = "ALWAYS ON"
	N10      DiskUpdate1Hddstandby = "10"
	N120     DiskUpdate1Hddstandby = "120"
	N180     DiskUpdate1Hddstandby = "180"
	N20      DiskUpdate1Hddstandby = "20"
	N240     DiskUpdate1Hddstandby = "240"
	N30      DiskUpdate1Hddstandby = "30"
	N300     DiskUpdate1Hddstandby = "300"
	N330     DiskUpdate1Hddstandby = "330"
	N5       DiskUpdate1Hddstandby = "5"
	N60      DiskUpdate1Hddstandby = "60"
)

// Defines values for DiskWipe1.
const (
	DiskWipe1FULL       DiskWipe1 = "FULL"
	DiskWipe1FULLRANDOM DiskWipe1 = "FULL_RANDOM"
	DiskWipe1QUICK      DiskWipe1 = "QUICK"
)

// Defines values for EnclosureSetSlotStatus2.
const (
	CLEAR    EnclosureSetSlotStatus2 = "CLEAR"
	FAULT    EnclosureSetSlotStatus2 = "FAULT"
	IDENTIFY EnclosureSetSlotStatus2 = "IDENTIFY"
)

// Defines values for FailoverControl0.
const (
	DISABLE FailoverControl0 = "DISABLE"
	ENABLE  FailoverControl0 = "ENABLE"
)

// Defines values for FcportUpdate1Mode.
const (
	FcportUpdate1ModeDISABLED  FcportUpdate1Mode = "DISABLED"
	FcportUpdate1ModeINITIATOR FcportUpdate1Mode = "INITIATOR"
	FcportUpdate1ModeTARGET    FcportUpdate1Mode = "TARGET"
)

// Defines values for FilesystemGetDefaultAcl0.
const (
	FilesystemGetDefaultAcl0DOMAINHOME FilesystemGetDefaultAcl0 = "DOMAIN_HOME"
	FilesystemGetDefaultAcl0HOME       FilesystemGetDefaultAcl0 = "HOME"
	FilesystemGetDefaultAcl0OPEN       FilesystemGetDefaultAcl0 = "OPEN"
	FilesystemGetDefaultAcl0RESTRICTED FilesystemGetDefaultAcl0 = "RESTRICTED"
)

// Defines values for FilesystemGetDefaultAcl1.
const (
	FilesystemGetDefaultAcl1AFP  FilesystemGetDefaultAcl1 = "AFP"
	FilesystemGetDefaultAcl1NFS  FilesystemGetDefaultAcl1 = "NFS"
	FilesystemGetDefaultAcl1NONE FilesystemGetDefaultAcl1 = "NONE"
	FilesystemGetDefaultAcl1SMB  FilesystemGetDefaultAcl1 = "SMB"
)

// Defines values for FilesystemSetacl0Acltype.
const (
	NFS4    FilesystemSetacl0Acltype = "NFS4"
	POSIX1E FilesystemSetacl0Acltype = "POSIX1E"
	RICH    FilesystemSetacl0Acltype = "RICH"
)

// Defines values for FtpUpdate0TlsPolicy.
const (
	Auth      FtpUpdate0TlsPolicy = "auth"
	AuthData  FtpUpdate0TlsPolicy = "auth+data"
	AuthData1 FtpUpdate0TlsPolicy = "auth+!data"
	Ctrl      FtpUpdate0TlsPolicy = "ctrl"
	CtrlData  FtpUpdate0TlsPolicy = "ctrl+data"
	CtrlData1 FtpUpdate0TlsPolicy = "ctrl+!data"
	Data      FtpUpdate0TlsPolicy = "data"
	Data1     FtpUpdate0TlsPolicy = "!data"
	Off       FtpUpdate0TlsPolicy = "off"
	On        FtpUpdate0TlsPolicy = "on"
)

// Defines values for IdmapCreate0IdmapBackend.
const (
	IdmapCreate0IdmapBackendAD      IdmapCreate0IdmapBackend = "AD"
	IdmapCreate0IdmapBackendAUTORID IdmapCreate0IdmapBackend = "AUTORID"
	IdmapCreate0IdmapBackendLDAP    IdmapCreate0IdmapBackend = "LDAP"
	IdmapCreate0IdmapBackendNSS     IdmapCreate0IdmapBackend = "NSS"
	IdmapCreate0IdmapBackendRFC2307 IdmapCreate0IdmapBackend = "RFC2307"
	IdmapCreate0IdmapBackendRID     IdmapCreate0IdmapBackend = "RID"
	IdmapCreate0IdmapBackendTDB     IdmapCreate0IdmapBackend = "TDB"
)

// Defines values for IdmapCreate0OptionsLinkedService.
const (
	IdmapCreate0OptionsLinkedServiceLDAP         IdmapCreate0OptionsLinkedService = "LDAP"
	IdmapCreate0OptionsLinkedServiceLOCALACCOUNT IdmapCreate0OptionsLinkedService = "LOCAL_ACCOUNT"
	IdmapCreate0OptionsLinkedServiceNIS          IdmapCreate0OptionsLinkedService = "NIS"
)

// Defines values for IdmapCreate0OptionsSchemaMode.
const (
	IdmapCreate0OptionsSchemaModeRFC2307 IdmapCreate0OptionsSchemaMode = "RFC2307"
	IdmapCreate0OptionsSchemaModeSFU     IdmapCreate0OptionsSchemaMode = "SFU"
	IdmapCreate0OptionsSchemaModeSFU20   IdmapCreate0OptionsSchemaMode = "SFU20"
)

// Defines values for IdmapCreate0OptionsSsl.
const (
	IdmapCreate0OptionsSslOFF      IdmapCreate0OptionsSsl = "OFF"
	IdmapCreate0OptionsSslON       IdmapCreate0OptionsSsl = "ON"
	IdmapCreate0OptionsSslSTARTTLS IdmapCreate0OptionsSsl = "START_TLS"
)

// Defines values for IdmapOptionsChoices0.
const (
	IdmapOptionsChoices0AD      IdmapOptionsChoices0 = "AD"
	IdmapOptionsChoices0AUTORID IdmapOptionsChoices0 = "AUTORID"
	IdmapOptionsChoices0LDAP    IdmapOptionsChoices0 = "LDAP"
	IdmapOptionsChoices0NSS     IdmapOptionsChoices0 = "NSS"
	IdmapOptionsChoices0RFC2307 IdmapOptionsChoices0 = "RFC2307"
	IdmapOptionsChoices0RID     IdmapOptionsChoices0 = "RID"
	IdmapOptionsChoices0TDB     IdmapOptionsChoices0 = "TDB"
)

// Defines values for IdmapUpdate1IdmapBackend.
const (
	IdmapUpdate1IdmapBackendAD      IdmapUpdate1IdmapBackend = "AD"
	IdmapUpdate1IdmapBackendAUTORID IdmapUpdate1IdmapBackend = "AUTORID"
	IdmapUpdate1IdmapBackendLDAP    IdmapUpdate1IdmapBackend = "LDAP"
	IdmapUpdate1IdmapBackendNSS     IdmapUpdate1IdmapBackend = "NSS"
	IdmapUpdate1IdmapBackendRFC2307 IdmapUpdate1IdmapBackend = "RFC2307"
	IdmapUpdate1IdmapBackendRID     IdmapUpdate1IdmapBackend = "RID"
	IdmapUpdate1IdmapBackendTDB     IdmapUpdate1IdmapBackend = "TDB"
)

// Defines values for IdmapUpdate1OptionsLinkedService.
const (
	LDAP         IdmapUpdate1OptionsLinkedService = "LDAP"
	LOCALACCOUNT IdmapUpdate1OptionsLinkedService = "LOCAL_ACCOUNT"
	NIS          IdmapUpdate1OptionsLinkedService = "NIS"
)

// Defines values for IdmapUpdate1OptionsSchemaMode.
const (
	IdmapUpdate1OptionsSchemaModeRFC2307 IdmapUpdate1OptionsSchemaMode = "RFC2307"
	IdmapUpdate1OptionsSchemaModeSFU     IdmapUpdate1OptionsSchemaMode = "SFU"
	IdmapUpdate1OptionsSchemaModeSFU20   IdmapUpdate1OptionsSchemaMode = "SFU20"
)

// Defines values for IdmapUpdate1OptionsSsl.
const (
	IdmapUpdate1OptionsSslOFF      IdmapUpdate1OptionsSsl = "OFF"
	IdmapUpdate1OptionsSslON       IdmapUpdate1OptionsSsl = "ON"
	IdmapUpdate1OptionsSslSTARTTLS IdmapUpdate1OptionsSsl = "START_TLS"
)

// Defines values for InitshutdownscriptCreate0Type.
const (
	InitshutdownscriptCreate0TypeCOMMAND InitshutdownscriptCreate0Type = "COMMAND"
	InitshutdownscriptCreate0TypeSCRIPT  InitshutdownscriptCreate0Type = "SCRIPT"
)

// Defines values for InitshutdownscriptCreate0When.
const (
	InitshutdownscriptCreate0WhenPOSTINIT InitshutdownscriptCreate0When = "POSTINIT"
	InitshutdownscriptCreate0WhenPREINIT  InitshutdownscriptCreate0When = "PREINIT"
	InitshutdownscriptCreate0WhenSHUTDOWN InitshutdownscriptCreate0When = "SHUTDOWN"
)

// Defines values for InitshutdownscriptUpdate1Type.
const (
	InitshutdownscriptUpdate1TypeCOMMAND InitshutdownscriptUpdate1Type = "COMMAND"
	InitshutdownscriptUpdate1TypeSCRIPT  InitshutdownscriptUpdate1Type = "SCRIPT"
)

// Defines values for InitshutdownscriptUpdate1When.
const (
	InitshutdownscriptUpdate1WhenPOSTINIT InitshutdownscriptUpdate1When = "POSTINIT"
	InitshutdownscriptUpdate1WhenPREINIT  InitshutdownscriptUpdate1When = "PREINIT"
	InitshutdownscriptUpdate1WhenSHUTDOWN InitshutdownscriptUpdate1When = "SHUTDOWN"
)

// Defines values for InterfaceCreate0LagProtocol.
const (
	InterfaceCreate0LagProtocolFAILOVER    InterfaceCreate0LagProtocol = "FAILOVER"
	InterfaceCreate0LagProtocolLACP        InterfaceCreate0LagProtocol = "LACP"
	InterfaceCreate0LagProtocolLOADBALANCE InterfaceCreate0LagProtocol = "LOADBALANCE"
	InterfaceCreate0LagProtocolNONE        InterfaceCreate0LagProtocol = "NONE"
	InterfaceCreate0LagProtocolROUNDROBIN  InterfaceCreate0LagProtocol = "ROUNDROBIN"
)

// Defines values for InterfaceCreate0Type.
const (
	BRIDGE          InterfaceCreate0Type = "BRIDGE"
	LINKAGGREGATION InterfaceCreate0Type = "LINK_AGGREGATION"
	VLAN            InterfaceCreate0Type = "VLAN"
)

// Defines values for InterfaceUpdate1LagProtocol.
const (
	InterfaceUpdate1LagProtocolFAILOVER    InterfaceUpdate1LagProtocol = "FAILOVER"
	InterfaceUpdate1LagProtocolLACP        InterfaceUpdate1LagProtocol = "LACP"
	InterfaceUpdate1LagProtocolLOADBALANCE InterfaceUpdate1LagProtocol = "LOADBALANCE"
	InterfaceUpdate1LagProtocolNONE        InterfaceUpdate1LagProtocol = "NONE"
	InterfaceUpdate1LagProtocolROUNDROBIN  InterfaceUpdate1LagProtocol = "ROUNDROBIN"
)

// Defines values for IscsiExtentCreate0Rpm.
const (
	IscsiExtentCreate0RpmN10000  IscsiExtentCreate0Rpm = "10000"
	IscsiExtentCreate0RpmN15000  IscsiExtentCreate0Rpm = "15000"
	IscsiExtentCreate0RpmN5400   IscsiExtentCreate0Rpm = "5400"
	IscsiExtentCreate0RpmN7200   IscsiExtentCreate0Rpm = "7200"
	IscsiExtentCreate0RpmSSD     IscsiExtentCreate0Rpm = "SSD"
	IscsiExtentCreate0RpmUNKNOWN IscsiExtentCreate0Rpm = "UNKNOWN"
)

// Defines values for IscsiExtentCreate0Type.
const (
	IscsiExtentCreate0TypeDISK IscsiExtentCreate0Type = "DISK"
	IscsiExtentCreate0TypeFILE IscsiExtentCreate0Type = "FILE"
)

// Defines values for IscsiExtentUpdate1Rpm.
const (
	IscsiExtentUpdate1RpmN10000  IscsiExtentUpdate1Rpm = "10000"
	IscsiExtentUpdate1RpmN15000  IscsiExtentUpdate1Rpm = "15000"
	IscsiExtentUpdate1RpmN5400   IscsiExtentUpdate1Rpm = "5400"
	IscsiExtentUpdate1RpmN7200   IscsiExtentUpdate1Rpm = "7200"
	IscsiExtentUpdate1RpmSSD     IscsiExtentUpdate1Rpm = "SSD"
	IscsiExtentUpdate1RpmUNKNOWN IscsiExtentUpdate1Rpm = "UNKNOWN"
)

// Defines values for IscsiExtentUpdate1Type.
const (
	IscsiExtentUpdate1TypeDISK IscsiExtentUpdate1Type = "DISK"
	IscsiExtentUpdate1TypeFILE IscsiExtentUpdate1Type = "FILE"
)

// Defines values for IscsiPortalCreate0DiscoveryAuthmethod.
const (
	IscsiPortalCreate0DiscoveryAuthmethodCHAP       IscsiPortalCreate0DiscoveryAuthmethod = "CHAP"
	IscsiPortalCreate0DiscoveryAuthmethodCHAPMUTUAL IscsiPortalCreate0DiscoveryAuthmethod = "CHAP_MUTUAL"
	IscsiPortalCreate0DiscoveryAuthmethodNONE       IscsiPortalCreate0DiscoveryAuthmethod = "NONE"
)

// Defines values for IscsiPortalUpdate1DiscoveryAuthmethod.
const (
	IscsiPortalUpdate1DiscoveryAuthmethodCHAP       IscsiPortalUpdate1DiscoveryAuthmethod = "CHAP"
	IscsiPortalUpdate1DiscoveryAuthmethodCHAPMUTUAL IscsiPortalUpdate1DiscoveryAuthmethod = "CHAP_MUTUAL"
	IscsiPortalUpdate1DiscoveryAuthmethodNONE       IscsiPortalUpdate1DiscoveryAuthmethod = "NONE"
)

// Defines values for IscsiTargetCreate0Mode.
const (
	IscsiTargetCreate0ModeBOTH  IscsiTargetCreate0Mode = "BOTH"
	IscsiTargetCreate0ModeFC    IscsiTargetCreate0Mode = "FC"
	IscsiTargetCreate0ModeISCSI IscsiTargetCreate0Mode = "ISCSI"
)

// Defines values for IscsiTargetUpdate1Mode.
const (
	IscsiTargetUpdate1ModeBOTH  IscsiTargetUpdate1Mode = "BOTH"
	IscsiTargetUpdate1ModeFC    IscsiTargetUpdate1Mode = "FC"
	IscsiTargetUpdate1ModeISCSI IscsiTargetUpdate1Mode = "ISCSI"
)

// Defines values for JailClean0.
const (
	JailClean0ALL      JailClean0 = "ALL"
	JailClean0JAIL     JailClean0 = "JAIL"
	JailClean0RELEASE  JailClean0 = "RELEASE"
	JailClean0TEMPLATE JailClean0 = "TEMPLATE"
)

// Defines values for JailExport0CompressionAlgorithm.
const (
	JailExport0CompressionAlgorithmLZMA JailExport0CompressionAlgorithm = "LZMA"
	JailExport0CompressionAlgorithmZIP  JailExport0CompressionAlgorithm = "ZIP"
)

// Defines values for JailFstab1Action.
const (
	ADD     JailFstab1Action = "ADD"
	LIST    JailFstab1Action = "LIST"
	REMOVE  JailFstab1Action = "REMOVE"
	REPLACE JailFstab1Action = "REPLACE"
)

// Defines values for JailImportImage0CompressionAlgorithm.
const (
	JailImportImage0CompressionAlgorithmLZMA        JailImportImage0CompressionAlgorithm = "LZMA"
	JailImportImage0CompressionAlgorithmLessThannil JailImportImage0CompressionAlgorithm = "<nil>"
	JailImportImage0CompressionAlgorithmZIP         JailImportImage0CompressionAlgorithm = "ZIP"
)

// Defines values for JailRcAction0.
const (
	JailRcAction0RESTART JailRcAction0 = "RESTART"
	JailRcAction0START   JailRcAction0 = "START"
	JailRcAction0STOP    JailRcAction0 = "STOP"
)

// Defines values for KeychaincredentialRemoteSshSemiautomaticSetup0Cipher.
const (
	KeychaincredentialRemoteSshSemiautomaticSetup0CipherDISABLED KeychaincredentialRemoteSshSemiautomaticSetup0Cipher = "DISABLED"
	KeychaincredentialRemoteSshSemiautomaticSetup0CipherFAST     KeychaincredentialRemoteSshSemiautomaticSetup0Cipher = "FAST"
	KeychaincredentialRemoteSshSemiautomaticSetup0CipherSTANDARD KeychaincredentialRemoteSshSemiautomaticSetup0Cipher = "STANDARD"
)

// Defines values for LdapUpdate0Schema.
const (
	LdapUpdate0SchemaRFC2307    LdapUpdate0Schema = "RFC2307"
	LdapUpdate0SchemaRFC2307BIS LdapUpdate0Schema = "RFC2307BIS"
)

// Defines values for LdapUpdate0Ssl.
const (
	LdapUpdate0SslOFF      LdapUpdate0Ssl = "OFF"
	LdapUpdate0SslON       LdapUpdate0Ssl = "ON"
	LdapUpdate0SslSTARTTLS LdapUpdate0Ssl = "START_TLS"
)

// Defines values for MailSend1Security.
const (
	MailSend1SecurityPLAIN MailSend1Security = "PLAIN"
	MailSend1SecuritySSL   MailSend1Security = "SSL"
	MailSend1SecurityTLS   MailSend1Security = "TLS"
)

// Defines values for MailUpdate0Security.
const (
	MailUpdate0SecurityPLAIN MailUpdate0Security = "PLAIN"
	MailUpdate0SecuritySSL   MailUpdate0Security = "SSL"
	MailUpdate0SecurityTLS   MailUpdate0Security = "TLS"
)

// Defines values for OpenvpnClientUpdate0Compression.
const (
	OpenvpnClientUpdate0CompressionLZ4 OpenvpnClientUpdate0Compression = "LZ4"
	OpenvpnClientUpdate0CompressionLZO OpenvpnClientUpdate0Compression = "LZO"
)

// Defines values for OpenvpnClientUpdate0DeviceType.
const (
	OpenvpnClientUpdate0DeviceTypeTAP OpenvpnClientUpdate0DeviceType = "TAP"
	OpenvpnClientUpdate0DeviceTypeTUN OpenvpnClientUpdate0DeviceType = "TUN"
)

// Defines values for OpenvpnClientUpdate0Protocol.
const (
	OpenvpnClientUpdate0ProtocolTCP  OpenvpnClientUpdate0Protocol = "TCP"
	OpenvpnClientUpdate0ProtocolTCP4 OpenvpnClientUpdate0Protocol = "TCP4"
	OpenvpnClientUpdate0ProtocolTCP6 OpenvpnClientUpdate0Protocol = "TCP6"
	OpenvpnClientUpdate0ProtocolUDP  OpenvpnClientUpdate0Protocol = "UDP"
	OpenvpnClientUpdate0ProtocolUDP4 OpenvpnClientUpdate0Protocol = "UDP4"
	OpenvpnClientUpdate0ProtocolUDP6 OpenvpnClientUpdate0Protocol = "UDP6"
)

// Defines values for OpenvpnServerUpdate0Compression.
const (
	OpenvpnServerUpdate0CompressionLZ4 OpenvpnServerUpdate0Compression = "LZ4"
	OpenvpnServerUpdate0CompressionLZO OpenvpnServerUpdate0Compression = "LZO"
)

// Defines values for OpenvpnServerUpdate0DeviceType.
const (
	OpenvpnServerUpdate0DeviceTypeTAP OpenvpnServerUpdate0DeviceType = "TAP"
	OpenvpnServerUpdate0DeviceTypeTUN OpenvpnServerUpdate0DeviceType = "TUN"
)

// Defines values for OpenvpnServerUpdate0Protocol.
const (
	OpenvpnServerUpdate0ProtocolTCP  OpenvpnServerUpdate0Protocol = "TCP"
	OpenvpnServerUpdate0ProtocolTCP4 OpenvpnServerUpdate0Protocol = "TCP4"
	OpenvpnServerUpdate0ProtocolTCP6 OpenvpnServerUpdate0Protocol = "TCP6"
	OpenvpnServerUpdate0ProtocolUDP  OpenvpnServerUpdate0Protocol = "UDP"
	OpenvpnServerUpdate0ProtocolUDP4 OpenvpnServerUpdate0Protocol = "UDP4"
	OpenvpnServerUpdate0ProtocolUDP6 OpenvpnServerUpdate0Protocol = "UDP6"
)

// Defines values for OpenvpnServerUpdate0Topology.
const (
	NET30  OpenvpnServerUpdate0Topology = "NET30"
	P2P    OpenvpnServerUpdate0Topology = "P2P"
	SUBNET OpenvpnServerUpdate0Topology = "SUBNET"
)

// Defines values for PoolCreate0Deduplication.
const (
	PoolCreate0DeduplicationLessThannil PoolCreate0Deduplication = "<nil>"
	PoolCreate0DeduplicationOFF         PoolCreate0Deduplication = "OFF"
	PoolCreate0DeduplicationON          PoolCreate0Deduplication = "ON"
	PoolCreate0DeduplicationVERIFY      PoolCreate0Deduplication = "VERIFY"
)

// Defines values for PoolCreate0EncryptionOptionsAlgorithm.
const (
	PoolCreate0EncryptionOptionsAlgorithmAES128CCM PoolCreate0EncryptionOptionsAlgorithm = "AES-128-CCM"
	PoolCreate0EncryptionOptionsAlgorithmAES128GCM PoolCreate0EncryptionOptionsAlgorithm = "AES-128-GCM"
	PoolCreate0EncryptionOptionsAlgorithmAES192CCM PoolCreate0EncryptionOptionsAlgorithm = "AES-192-CCM"
	PoolCreate0EncryptionOptionsAlgorithmAES192GCM PoolCreate0EncryptionOptionsAlgorithm = "AES-192-GCM"
	PoolCreate0EncryptionOptionsAlgorithmAES256CCM PoolCreate0EncryptionOptionsAlgorithm = "AES-256-CCM"
	PoolCreate0EncryptionOptionsAlgorithmAES256GCM PoolCreate0EncryptionOptionsAlgorithm = "AES-256-GCM"
)

// Defines values for PoolDatasetCreate0Aclmode.
const (
	PoolDatasetCreate0AclmodePASSTHROUGH PoolDatasetCreate0Aclmode = "PASSTHROUGH"
	PoolDatasetCreate0AclmodeRESTRICTED  PoolDatasetCreate0Aclmode = "RESTRICTED"
)

// Defines values for PoolDatasetCreate0Acltype.
const (
	PoolDatasetCreate0AcltypeNFS4ACL  PoolDatasetCreate0Acltype = "NFS4ACL"
	PoolDatasetCreate0AcltypeNOACL    PoolDatasetCreate0Acltype = "NOACL"
	PoolDatasetCreate0AcltypePOSIXACL PoolDatasetCreate0Acltype = "POSIXACL"
)

// Defines values for PoolDatasetCreate0Atime.
const (
	PoolDatasetCreate0AtimeOFF PoolDatasetCreate0Atime = "OFF"
	PoolDatasetCreate0AtimeON  PoolDatasetCreate0Atime = "ON"
)

// Defines values for PoolDatasetCreate0Casesensitivity.
const (
	INSENSITIVE PoolDatasetCreate0Casesensitivity = "INSENSITIVE"
	MIXED       PoolDatasetCreate0Casesensitivity = "MIXED"
	SENSITIVE   PoolDatasetCreate0Casesensitivity = "SENSITIVE"
)

// Defines values for PoolDatasetCreate0Compression.
const (
	PoolDatasetCreate0CompressionGZIP         PoolDatasetCreate0Compression = "GZIP"
	PoolDatasetCreate0CompressionGZIP1        PoolDatasetCreate0Compression = "GZIP-1"
	PoolDatasetCreate0CompressionGZIP9        PoolDatasetCreate0Compression = "GZIP-9"
	PoolDatasetCreate0CompressionLZ4          PoolDatasetCreate0Compression = "LZ4"
	PoolDatasetCreate0CompressionLZJB         PoolDatasetCreate0Compression = "LZJB"
	PoolDatasetCreate0CompressionOFF          PoolDatasetCreate0Compression = "OFF"
	PoolDatasetCreate0CompressionZLE          PoolDatasetCreate0Compression = "ZLE"
	PoolDatasetCreate0CompressionZSTD         PoolDatasetCreate0Compression = "ZSTD"
	PoolDatasetCreate0CompressionZSTD1        PoolDatasetCreate0Compression = "ZSTD-1"
	PoolDatasetCreate0CompressionZSTD10       PoolDatasetCreate0Compression = "ZSTD-10"
	PoolDatasetCreate0CompressionZSTD11       PoolDatasetCreate0Compression = "ZSTD-11"
	PoolDatasetCreate0CompressionZSTD12       PoolDatasetCreate0Compression = "ZSTD-12"
	PoolDatasetCreate0CompressionZSTD13       PoolDatasetCreate0Compression = "ZSTD-13"
	PoolDatasetCreate0CompressionZSTD14       PoolDatasetCreate0Compression = "ZSTD-14"
	PoolDatasetCreate0CompressionZSTD15       PoolDatasetCreate0Compression = "ZSTD-15"
	PoolDatasetCreate0CompressionZSTD16       PoolDatasetCreate0Compression = "ZSTD-16"
	PoolDatasetCreate0CompressionZSTD17       PoolDatasetCreate0Compression = "ZSTD-17"
	PoolDatasetCreate0CompressionZSTD18       PoolDatasetCreate0Compression = "ZSTD-18"
	PoolDatasetCreate0CompressionZSTD19       PoolDatasetCreate0Compression = "ZSTD-19"
	PoolDatasetCreate0CompressionZSTD2        PoolDatasetCreate0Compression = "ZSTD-2"
	PoolDatasetCreate0CompressionZSTD3        PoolDatasetCreate0Compression = "ZSTD-3"
	PoolDatasetCreate0CompressionZSTD4        PoolDatasetCreate0Compression = "ZSTD-4"
	PoolDatasetCreate0CompressionZSTD5        PoolDatasetCreate0Compression = "ZSTD-5"
	PoolDatasetCreate0CompressionZSTD6        PoolDatasetCreate0Compression = "ZSTD-6"
	PoolDatasetCreate0CompressionZSTD7        PoolDatasetCreate0Compression = "ZSTD-7"
	PoolDatasetCreate0CompressionZSTD8        PoolDatasetCreate0Compression = "ZSTD-8"
	PoolDatasetCreate0CompressionZSTD9        PoolDatasetCreate0Compression = "ZSTD-9"
	PoolDatasetCreate0CompressionZSTDFAST     PoolDatasetCreate0Compression = "ZSTD-FAST"
	PoolDatasetCreate0CompressionZSTDFAST1    PoolDatasetCreate0Compression = "ZSTD-FAST-1"
	PoolDatasetCreate0CompressionZSTDFAST10   PoolDatasetCreate0Compression = "ZSTD-FAST-10"
	PoolDatasetCreate0CompressionZSTDFAST100  PoolDatasetCreate0Compression = "ZSTD-FAST-100"
	PoolDatasetCreate0CompressionZSTDFAST1000 PoolDatasetCreate0Compression = "ZSTD-FAST-1000"
	PoolDatasetCreate0CompressionZSTDFAST2    PoolDatasetCreate0Compression = "ZSTD-FAST-2"
	PoolDatasetCreate0CompressionZSTDFAST20   PoolDatasetCreate0Compression = "ZSTD-FAST-20"
	PoolDatasetCreate0CompressionZSTDFAST3    PoolDatasetCreate0Compression = "ZSTD-FAST-3"
	PoolDatasetCreate0CompressionZSTDFAST30   PoolDatasetCreate0Compression = "ZSTD-FAST-30"
	PoolDatasetCreate0CompressionZSTDFAST4    PoolDatasetCreate0Compression = "ZSTD-FAST-4"
	PoolDatasetCreate0CompressionZSTDFAST40   PoolDatasetCreate0Compression = "ZSTD-FAST-40"
	PoolDatasetCreate0CompressionZSTDFAST5    PoolDatasetCreate0Compression = "ZSTD-FAST-5"
	PoolDatasetCreate0CompressionZSTDFAST50   PoolDatasetCreate0Compression = "ZSTD-FAST-50"
	PoolDatasetCreate0CompressionZSTDFAST500  PoolDatasetCreate0Compression = "ZSTD-FAST-500"
	PoolDatasetCreate0CompressionZSTDFAST6    PoolDatasetCreate0Compression = "ZSTD-FAST-6"
	PoolDatasetCreate0CompressionZSTDFAST60   PoolDatasetCreate0Compression = "ZSTD-FAST-60"
	PoolDatasetCreate0CompressionZSTDFAST7    PoolDatasetCreate0Compression = "ZSTD-FAST-7"
	PoolDatasetCreate0CompressionZSTDFAST70   PoolDatasetCreate0Compression = "ZSTD-FAST-70"
	PoolDatasetCreate0CompressionZSTDFAST8    PoolDatasetCreate0Compression = "ZSTD-FAST-8"
	PoolDatasetCreate0CompressionZSTDFAST80   PoolDatasetCreate0Compression = "ZSTD-FAST-80"
	PoolDatasetCreate0CompressionZSTDFAST9    PoolDatasetCreate0Compression = "ZSTD-FAST-9"
	PoolDatasetCreate0CompressionZSTDFAST90   PoolDatasetCreate0Compression = "ZSTD-FAST-90"
)

// Defines values for PoolDatasetCreate0Deduplication.
const (
	PoolDatasetCreate0DeduplicationOFF    PoolDatasetCreate0Deduplication = "OFF"
	PoolDatasetCreate0DeduplicationON     PoolDatasetCreate0Deduplication = "ON"
	PoolDatasetCreate0DeduplicationVERIFY PoolDatasetCreate0Deduplication = "VERIFY"
)

// Defines values for PoolDatasetCreate0EncryptionOptionsAlgorithm.
const (
	PoolDatasetCreate0EncryptionOptionsAlgorithmAES128CCM PoolDatasetCreate0EncryptionOptionsAlgorithm = "AES-128-CCM"
	PoolDatasetCreate0EncryptionOptionsAlgorithmAES128GCM PoolDatasetCreate0EncryptionOptionsAlgorithm = "AES-128-GCM"
	PoolDatasetCreate0EncryptionOptionsAlgorithmAES192CCM PoolDatasetCreate0EncryptionOptionsAlgorithm = "AES-192-CCM"
	PoolDatasetCreate0EncryptionOptionsAlgorithmAES192GCM PoolDatasetCreate0EncryptionOptionsAlgorithm = "AES-192-GCM"
	PoolDatasetCreate0EncryptionOptionsAlgorithmAES256CCM PoolDatasetCreate0EncryptionOptionsAlgorithm = "AES-256-CCM"
	PoolDatasetCreate0EncryptionOptionsAlgorithmAES256GCM PoolDatasetCreate0EncryptionOptionsAlgorithm = "AES-256-GCM"
)

// Defines values for PoolDatasetCreate0Exec.
const (
	PoolDatasetCreate0ExecOFF PoolDatasetCreate0Exec = "OFF"
	PoolDatasetCreate0ExecON  PoolDatasetCreate0Exec = "ON"
)

// Defines values for PoolDatasetCreate0Readonly.
const (
	PoolDatasetCreate0ReadonlyOFF PoolDatasetCreate0Readonly = "OFF"
	PoolDatasetCreate0ReadonlyON  PoolDatasetCreate0Readonly = "ON"
)

// Defines values for PoolDatasetCreate0Recordsize.
const (
	PoolDatasetCreate0RecordsizeN1024K PoolDatasetCreate0Recordsize = "1024K"
	PoolDatasetCreate0RecordsizeN128K  PoolDatasetCreate0Recordsize = "128K"
	PoolDatasetCreate0RecordsizeN16K   PoolDatasetCreate0Recordsize = "16K"
	PoolDatasetCreate0RecordsizeN1K    PoolDatasetCreate0Recordsize = "1K"
	PoolDatasetCreate0RecordsizeN256K  PoolDatasetCreate0Recordsize = "256K"
	PoolDatasetCreate0RecordsizeN2K    PoolDatasetCreate0Recordsize = "2K"
	PoolDatasetCreate0RecordsizeN32K   PoolDatasetCreate0Recordsize = "32K"
	PoolDatasetCreate0RecordsizeN4K    PoolDatasetCreate0Recordsize = "4K"
	PoolDatasetCreate0RecordsizeN512   PoolDatasetCreate0Recordsize = "512"
	PoolDatasetCreate0RecordsizeN512K  PoolDatasetCreate0Recordsize = "512K"
	PoolDatasetCreate0RecordsizeN64K   PoolDatasetCreate0Recordsize = "64K"
	PoolDatasetCreate0RecordsizeN8K    PoolDatasetCreate0Recordsize = "8K"
)

// Defines values for PoolDatasetCreate0ShareType.
const (
	PoolDatasetCreate0ShareTypeGENERIC PoolDatasetCreate0ShareType = "GENERIC"
	PoolDatasetCreate0ShareTypeSMB     PoolDatasetCreate0ShareType = "SMB"
)

// Defines values for PoolDatasetCreate0Snapdir.
const (
	PoolDatasetCreate0SnapdirHIDDEN  PoolDatasetCreate0Snapdir = "HIDDEN"
	PoolDatasetCreate0SnapdirVISIBLE PoolDatasetCreate0Snapdir = "VISIBLE"
)

// Defines values for PoolDatasetCreate0Sync.
const (
	PoolDatasetCreate0SyncALWAYS   PoolDatasetCreate0Sync = "ALWAYS"
	PoolDatasetCreate0SyncDISABLED PoolDatasetCreate0Sync = "DISABLED"
	PoolDatasetCreate0SyncSTANDARD PoolDatasetCreate0Sync = "STANDARD"
)

// Defines values for PoolDatasetCreate0Type.
const (
	FILESYSTEM PoolDatasetCreate0Type = "FILESYSTEM"
	VOLUME     PoolDatasetCreate0Type = "VOLUME"
)

// Defines values for PoolDatasetCreate0Volblocksize.
const (
	PoolDatasetCreate0VolblocksizeN128K PoolDatasetCreate0Volblocksize = "128K"
	PoolDatasetCreate0VolblocksizeN16K  PoolDatasetCreate0Volblocksize = "16K"
	PoolDatasetCreate0VolblocksizeN1K   PoolDatasetCreate0Volblocksize = "1K"
	PoolDatasetCreate0VolblocksizeN2K   PoolDatasetCreate0Volblocksize = "2K"
	PoolDatasetCreate0VolblocksizeN32K  PoolDatasetCreate0Volblocksize = "32K"
	PoolDatasetCreate0VolblocksizeN4K   PoolDatasetCreate0Volblocksize = "4K"
	PoolDatasetCreate0VolblocksizeN512  PoolDatasetCreate0Volblocksize = "512"
	PoolDatasetCreate0VolblocksizeN64K  PoolDatasetCreate0Volblocksize = "64K"
	PoolDatasetCreate0VolblocksizeN8K   PoolDatasetCreate0Volblocksize = "8K"
)

// Defines values for PoolDatasetCreate0Xattr.
const (
	PoolDatasetCreate0XattrON PoolDatasetCreate0Xattr = "ON"
	PoolDatasetCreate0XattrSA PoolDatasetCreate0Xattr = "SA"
)

// Defines values for PoolDatasetGetQuota1.
const (
	PoolDatasetGetQuota1DATASET PoolDatasetGetQuota1 = "DATASET"
	PoolDatasetGetQuota1GROUP   PoolDatasetGetQuota1 = "GROUP"
	PoolDatasetGetQuota1USER    PoolDatasetGetQuota1 = "USER"
)

// Defines values for PoolDatasetUpdate1Aclmode.
const (
	PASSTHROUGH PoolDatasetUpdate1Aclmode = "PASSTHROUGH"
	RESTRICTED  PoolDatasetUpdate1Aclmode = "RESTRICTED"
)

// Defines values for PoolDatasetUpdate1Acltype.
const (
	PoolDatasetUpdate1AcltypeNFS4ACL  PoolDatasetUpdate1Acltype = "NFS4ACL"
	PoolDatasetUpdate1AcltypeNOACL    PoolDatasetUpdate1Acltype = "NOACL"
	PoolDatasetUpdate1AcltypePOSIXACL PoolDatasetUpdate1Acltype = "POSIXACL"
)

// Defines values for PoolDatasetUpdate1Atime.
const (
	PoolDatasetUpdate1AtimeINHERIT PoolDatasetUpdate1Atime = "INHERIT"
	PoolDatasetUpdate1AtimeOFF     PoolDatasetUpdate1Atime = "OFF"
	PoolDatasetUpdate1AtimeON      PoolDatasetUpdate1Atime = "ON"
)

// Defines values for PoolDatasetUpdate1Compression.
const (
	PoolDatasetUpdate1CompressionGZIP         PoolDatasetUpdate1Compression = "GZIP"
	PoolDatasetUpdate1CompressionGZIP1        PoolDatasetUpdate1Compression = "GZIP-1"
	PoolDatasetUpdate1CompressionGZIP9        PoolDatasetUpdate1Compression = "GZIP-9"
	PoolDatasetUpdate1CompressionINHERIT      PoolDatasetUpdate1Compression = "INHERIT"
	PoolDatasetUpdate1CompressionLZ4          PoolDatasetUpdate1Compression = "LZ4"
	PoolDatasetUpdate1CompressionLZJB         PoolDatasetUpdate1Compression = "LZJB"
	PoolDatasetUpdate1CompressionOFF          PoolDatasetUpdate1Compression = "OFF"
	PoolDatasetUpdate1CompressionZLE          PoolDatasetUpdate1Compression = "ZLE"
	PoolDatasetUpdate1CompressionZSTD         PoolDatasetUpdate1Compression = "ZSTD"
	PoolDatasetUpdate1CompressionZSTD1        PoolDatasetUpdate1Compression = "ZSTD-1"
	PoolDatasetUpdate1CompressionZSTD10       PoolDatasetUpdate1Compression = "ZSTD-10"
	PoolDatasetUpdate1CompressionZSTD11       PoolDatasetUpdate1Compression = "ZSTD-11"
	PoolDatasetUpdate1CompressionZSTD12       PoolDatasetUpdate1Compression = "ZSTD-12"
	PoolDatasetUpdate1CompressionZSTD13       PoolDatasetUpdate1Compression = "ZSTD-13"
	PoolDatasetUpdate1CompressionZSTD14       PoolDatasetUpdate1Compression = "ZSTD-14"
	PoolDatasetUpdate1CompressionZSTD15       PoolDatasetUpdate1Compression = "ZSTD-15"
	PoolDatasetUpdate1CompressionZSTD16       PoolDatasetUpdate1Compression = "ZSTD-16"
	PoolDatasetUpdate1CompressionZSTD17       PoolDatasetUpdate1Compression = "ZSTD-17"
	PoolDatasetUpdate1CompressionZSTD18       PoolDatasetUpdate1Compression = "ZSTD-18"
	PoolDatasetUpdate1CompressionZSTD19       PoolDatasetUpdate1Compression = "ZSTD-19"
	PoolDatasetUpdate1CompressionZSTD2        PoolDatasetUpdate1Compression = "ZSTD-2"
	PoolDatasetUpdate1CompressionZSTD3        PoolDatasetUpdate1Compression = "ZSTD-3"
	PoolDatasetUpdate1CompressionZSTD4        PoolDatasetUpdate1Compression = "ZSTD-4"
	PoolDatasetUpdate1CompressionZSTD5        PoolDatasetUpdate1Compression = "ZSTD-5"
	PoolDatasetUpdate1CompressionZSTD6        PoolDatasetUpdate1Compression = "ZSTD-6"
	PoolDatasetUpdate1CompressionZSTD7        PoolDatasetUpdate1Compression = "ZSTD-7"
	PoolDatasetUpdate1CompressionZSTD8        PoolDatasetUpdate1Compression = "ZSTD-8"
	PoolDatasetUpdate1CompressionZSTD9        PoolDatasetUpdate1Compression = "ZSTD-9"
	PoolDatasetUpdate1CompressionZSTDFAST     PoolDatasetUpdate1Compression = "ZSTD-FAST"
	PoolDatasetUpdate1CompressionZSTDFAST1    PoolDatasetUpdate1Compression = "ZSTD-FAST-1"
	PoolDatasetUpdate1CompressionZSTDFAST10   PoolDatasetUpdate1Compression = "ZSTD-FAST-10"
	PoolDatasetUpdate1CompressionZSTDFAST100  PoolDatasetUpdate1Compression = "ZSTD-FAST-100"
	PoolDatasetUpdate1CompressionZSTDFAST1000 PoolDatasetUpdate1Compression = "ZSTD-FAST-1000"
	PoolDatasetUpdate1CompressionZSTDFAST2    PoolDatasetUpdate1Compression = "ZSTD-FAST-2"
	PoolDatasetUpdate1CompressionZSTDFAST20   PoolDatasetUpdate1Compression = "ZSTD-FAST-20"
	PoolDatasetUpdate1CompressionZSTDFAST3    PoolDatasetUpdate1Compression = "ZSTD-FAST-3"
	PoolDatasetUpdate1CompressionZSTDFAST30   PoolDatasetUpdate1Compression = "ZSTD-FAST-30"
	PoolDatasetUpdate1CompressionZSTDFAST4    PoolDatasetUpdate1Compression = "ZSTD-FAST-4"
	PoolDatasetUpdate1CompressionZSTDFAST40   PoolDatasetUpdate1Compression = "ZSTD-FAST-40"
	PoolDatasetUpdate1CompressionZSTDFAST5    PoolDatasetUpdate1Compression = "ZSTD-FAST-5"
	PoolDatasetUpdate1CompressionZSTDFAST50   PoolDatasetUpdate1Compression = "ZSTD-FAST-50"
	PoolDatasetUpdate1CompressionZSTDFAST500  PoolDatasetUpdate1Compression = "ZSTD-FAST-500"
	PoolDatasetUpdate1CompressionZSTDFAST6    PoolDatasetUpdate1Compression = "ZSTD-FAST-6"
	PoolDatasetUpdate1CompressionZSTDFAST60   PoolDatasetUpdate1Compression = "ZSTD-FAST-60"
	PoolDatasetUpdate1CompressionZSTDFAST7    PoolDatasetUpdate1Compression = "ZSTD-FAST-7"
	PoolDatasetUpdate1CompressionZSTDFAST70   PoolDatasetUpdate1Compression = "ZSTD-FAST-70"
	PoolDatasetUpdate1CompressionZSTDFAST8    PoolDatasetUpdate1Compression = "ZSTD-FAST-8"
	PoolDatasetUpdate1CompressionZSTDFAST80   PoolDatasetUpdate1Compression = "ZSTD-FAST-80"
	PoolDatasetUpdate1CompressionZSTDFAST9    PoolDatasetUpdate1Compression = "ZSTD-FAST-9"
	PoolDatasetUpdate1CompressionZSTDFAST90   PoolDatasetUpdate1Compression = "ZSTD-FAST-90"
)

// Defines values for PoolDatasetUpdate1Deduplication.
const (
	PoolDatasetUpdate1DeduplicationINHERIT PoolDatasetUpdate1Deduplication = "INHERIT"
	PoolDatasetUpdate1DeduplicationOFF     PoolDatasetUpdate1Deduplication = "OFF"
	PoolDatasetUpdate1DeduplicationON      PoolDatasetUpdate1Deduplication = "ON"
	PoolDatasetUpdate1DeduplicationVERIFY  PoolDatasetUpdate1Deduplication = "VERIFY"
)

// Defines values for PoolDatasetUpdate1Exec.
const (
	PoolDatasetUpdate1ExecINHERIT PoolDatasetUpdate1Exec = "INHERIT"
	PoolDatasetUpdate1ExecOFF     PoolDatasetUpdate1Exec = "OFF"
	PoolDatasetUpdate1ExecON      PoolDatasetUpdate1Exec = "ON"
)

// Defines values for PoolDatasetUpdate1QuotaCritical1.
const (
	PoolDatasetUpdate1QuotaCritical1INHERIT PoolDatasetUpdate1QuotaCritical1 = "INHERIT"
)

// Defines values for PoolDatasetUpdate1QuotaWarning1.
const (
	PoolDatasetUpdate1QuotaWarning1INHERIT PoolDatasetUpdate1QuotaWarning1 = "INHERIT"
)

// Defines values for PoolDatasetUpdate1Readonly.
const (
	PoolDatasetUpdate1ReadonlyINHERIT PoolDatasetUpdate1Readonly = "INHERIT"
	PoolDatasetUpdate1ReadonlyOFF     PoolDatasetUpdate1Readonly = "OFF"
	PoolDatasetUpdate1ReadonlyON      PoolDatasetUpdate1Readonly = "ON"
)

// Defines values for PoolDatasetUpdate1Recordsize.
const (
	PoolDatasetUpdate1RecordsizeINHERIT PoolDatasetUpdate1Recordsize = "INHERIT"
	PoolDatasetUpdate1RecordsizeN1024K  PoolDatasetUpdate1Recordsize = "1024K"
	PoolDatasetUpdate1RecordsizeN128K   PoolDatasetUpdate1Recordsize = "128K"
	PoolDatasetUpdate1RecordsizeN16K    PoolDatasetUpdate1Recordsize = "16K"
	PoolDatasetUpdate1RecordsizeN1K     PoolDatasetUpdate1Recordsize = "1K"
	PoolDatasetUpdate1RecordsizeN256K   PoolDatasetUpdate1Recordsize = "256K"
	PoolDatasetUpdate1RecordsizeN2K     PoolDatasetUpdate1Recordsize = "2K"
	PoolDatasetUpdate1RecordsizeN32K    PoolDatasetUpdate1Recordsize = "32K"
	PoolDatasetUpdate1RecordsizeN4K     PoolDatasetUpdate1Recordsize = "4K"
	PoolDatasetUpdate1RecordsizeN512    PoolDatasetUpdate1Recordsize = "512"
	PoolDatasetUpdate1RecordsizeN512K   PoolDatasetUpdate1Recordsize = "512K"
	PoolDatasetUpdate1RecordsizeN64K    PoolDatasetUpdate1Recordsize = "64K"
	PoolDatasetUpdate1RecordsizeN8K     PoolDatasetUpdate1Recordsize = "8K"
)

// Defines values for PoolDatasetUpdate1RefquotaCritical1.
const (
	PoolDatasetUpdate1RefquotaCritical1INHERIT PoolDatasetUpdate1RefquotaCritical1 = "INHERIT"
)

// Defines values for PoolDatasetUpdate1RefquotaWarning1.
const (
	PoolDatasetUpdate1RefquotaWarning1INHERIT PoolDatasetUpdate1RefquotaWarning1 = "INHERIT"
)

// Defines values for PoolDatasetUpdate1Snapdir.
const (
	PoolDatasetUpdate1SnapdirHIDDEN  PoolDatasetUpdate1Snapdir = "HIDDEN"
	PoolDatasetUpdate1SnapdirINHERIT PoolDatasetUpdate1Snapdir = "INHERIT"
	PoolDatasetUpdate1SnapdirVISIBLE PoolDatasetUpdate1Snapdir = "VISIBLE"
)

// Defines values for PoolDatasetUpdate1Sync.
const (
	PoolDatasetUpdate1SyncALWAYS   PoolDatasetUpdate1Sync = "ALWAYS"
	PoolDatasetUpdate1SyncDISABLED PoolDatasetUpdate1Sync = "DISABLED"
	PoolDatasetUpdate1SyncINHERIT  PoolDatasetUpdate1Sync = "INHERIT"
	PoolDatasetUpdate1SyncSTANDARD PoolDatasetUpdate1Sync = "STANDARD"
)

// Defines values for PoolDatasetUpdate1Xattr.
const (
	PoolDatasetUpdate1XattrON PoolDatasetUpdate1Xattr = "ON"
	PoolDatasetUpdate1XattrSA PoolDatasetUpdate1Xattr = "SA"
)

// Defines values for PoolScrub1.
const (
	PoolScrub1PAUSE PoolScrub1 = "PAUSE"
	PoolScrub1START PoolScrub1 = "START"
	PoolScrub1STOP  PoolScrub1 = "STOP"
)

// Defines values for PoolSnapshottaskCreate0LifetimeUnit.
const (
	PoolSnapshottaskCreate0LifetimeUnitDAY   PoolSnapshottaskCreate0LifetimeUnit = "DAY"
	PoolSnapshottaskCreate0LifetimeUnitHOUR  PoolSnapshottaskCreate0LifetimeUnit = "HOUR"
	PoolSnapshottaskCreate0LifetimeUnitMONTH PoolSnapshottaskCreate0LifetimeUnit = "MONTH"
	PoolSnapshottaskCreate0LifetimeUnitWEEK  PoolSnapshottaskCreate0LifetimeUnit = "WEEK"
	PoolSnapshottaskCreate0LifetimeUnitYEAR  PoolSnapshottaskCreate0LifetimeUnit = "YEAR"
)

// Defines values for PoolSnapshottaskUpdate1LifetimeUnit.
const (
	PoolSnapshottaskUpdate1LifetimeUnitDAY   PoolSnapshottaskUpdate1LifetimeUnit = "DAY"
	PoolSnapshottaskUpdate1LifetimeUnitHOUR  PoolSnapshottaskUpdate1LifetimeUnit = "HOUR"
	PoolSnapshottaskUpdate1LifetimeUnitMONTH PoolSnapshottaskUpdate1LifetimeUnit = "MONTH"
	PoolSnapshottaskUpdate1LifetimeUnitWEEK  PoolSnapshottaskUpdate1LifetimeUnit = "WEEK"
	PoolSnapshottaskUpdate1LifetimeUnitYEAR  PoolSnapshottaskUpdate1LifetimeUnit = "YEAR"
)

// Defines values for PoolUpdate1Autotrim.
const (
	PoolUpdate1AutotrimOFF PoolUpdate1Autotrim = "OFF"
	PoolUpdate1AutotrimON  PoolUpdate1Autotrim = "ON"
)

// Defines values for PoolUpdate1EncryptionOptionsAlgorithm.
const (
	AES128CCM PoolUpdate1EncryptionOptionsAlgorithm = "AES-128-CCM"
	AES128GCM PoolUpdate1EncryptionOptionsAlgorithm = "AES-128-GCM"
	AES192CCM PoolUpdate1EncryptionOptionsAlgorithm = "AES-192-CCM"
	AES192GCM PoolUpdate1EncryptionOptionsAlgorithm = "AES-192-GCM"
	AES256CCM PoolUpdate1EncryptionOptionsAlgorithm = "AES-256-CCM"
	AES256GCM PoolUpdate1EncryptionOptionsAlgorithm = "AES-256-GCM"
)

// Defines values for ReplicationCountEligibleManualSnapshots2.
const (
	ReplicationCountEligibleManualSnapshots2LOCAL     ReplicationCountEligibleManualSnapshots2 = "LOCAL"
	ReplicationCountEligibleManualSnapshots2SSH       ReplicationCountEligibleManualSnapshots2 = "SSH"
	ReplicationCountEligibleManualSnapshots2SSHNETCAT ReplicationCountEligibleManualSnapshots2 = "SSH+NETCAT"
)

// Defines values for ReplicationCreate0Compression.
const (
	ReplicationCreate0CompressionLZ4   ReplicationCreate0Compression = "LZ4"
	ReplicationCreate0CompressionPIGZ  ReplicationCreate0Compression = "PIGZ"
	ReplicationCreate0CompressionPLZIP ReplicationCreate0Compression = "PLZIP"
)

// Defines values for ReplicationCreate0Direction.
const (
	ReplicationCreate0DirectionPULL ReplicationCreate0Direction = "PULL"
	ReplicationCreate0DirectionPUSH ReplicationCreate0Direction = "PUSH"
)

// Defines values for ReplicationCreate0EncryptionKeyFormat.
const (
	ReplicationCreate0EncryptionKeyFormatHEX        ReplicationCreate0EncryptionKeyFormat = "HEX"
	ReplicationCreate0EncryptionKeyFormatPASSPHRASE ReplicationCreate0EncryptionKeyFormat = "PASSPHRASE"
)

// Defines values for ReplicationCreate0LifetimeUnit.
const (
	ReplicationCreate0LifetimeUnitDAY   ReplicationCreate0LifetimeUnit = "DAY"
	ReplicationCreate0LifetimeUnitHOUR  ReplicationCreate0LifetimeUnit = "HOUR"
	ReplicationCreate0LifetimeUnitMONTH ReplicationCreate0LifetimeUnit = "MONTH"
	ReplicationCreate0LifetimeUnitWEEK  ReplicationCreate0LifetimeUnit = "WEEK"
	ReplicationCreate0LifetimeUnitYEAR  ReplicationCreate0LifetimeUnit = "YEAR"
)

// Defines values for ReplicationCreate0LoggingLevel.
const (
	ReplicationCreate0LoggingLevelDEBUG   ReplicationCreate0LoggingLevel = "DEBUG"
	ReplicationCreate0LoggingLevelERROR   ReplicationCreate0LoggingLevel = "ERROR"
	ReplicationCreate0LoggingLevelINFO    ReplicationCreate0LoggingLevel = "INFO"
	ReplicationCreate0LoggingLevelWARNING ReplicationCreate0LoggingLevel = "WARNING"
)

// Defines values for ReplicationCreate0NetcatActiveSide.
const (
	ReplicationCreate0NetcatActiveSideLOCAL  ReplicationCreate0NetcatActiveSide = "LOCAL"
	ReplicationCreate0NetcatActiveSideREMOTE ReplicationCreate0NetcatActiveSide = "REMOTE"
)

// Defines values for ReplicationCreate0Readonly.
const (
	ReplicationCreate0ReadonlyIGNORE  ReplicationCreate0Readonly = "IGNORE"
	ReplicationCreate0ReadonlyREQUIRE ReplicationCreate0Readonly = "REQUIRE"
	ReplicationCreate0ReadonlySET     ReplicationCreate0Readonly = "SET"
)

// Defines values for ReplicationCreate0RetentionPolicy.
const (
	ReplicationCreate0RetentionPolicyCUSTOM ReplicationCreate0RetentionPolicy = "CUSTOM"
	ReplicationCreate0RetentionPolicyNONE   ReplicationCreate0RetentionPolicy = "NONE"
	ReplicationCreate0RetentionPolicySOURCE ReplicationCreate0RetentionPolicy = "SOURCE"
)

// Defines values for ReplicationCreate0Transport.
const (
	ReplicationCreate0TransportLOCAL     ReplicationCreate0Transport = "LOCAL"
	ReplicationCreate0TransportSSH       ReplicationCreate0Transport = "SSH"
	ReplicationCreate0TransportSSHNETCAT ReplicationCreate0Transport = "SSH+NETCAT"
)

// Defines values for ReplicationCreateDataset1.
const (
	ReplicationCreateDataset1LOCAL     ReplicationCreateDataset1 = "LOCAL"
	ReplicationCreateDataset1SSH       ReplicationCreateDataset1 = "SSH"
	ReplicationCreateDataset1SSHNETCAT ReplicationCreateDataset1 = "SSH+NETCAT"
)

// Defines values for ReplicationListDatasets0.
const (
	ReplicationListDatasets0LOCAL     ReplicationListDatasets0 = "LOCAL"
	ReplicationListDatasets0SSH       ReplicationListDatasets0 = "SSH"
	ReplicationListDatasets0SSHNETCAT ReplicationListDatasets0 = "SSH+NETCAT"
)

// Defines values for ReplicationTargetUnmatchedSnapshots0.
const (
	ReplicationTargetUnmatchedSnapshots0PULL ReplicationTargetUnmatchedSnapshots0 = "PULL"
	ReplicationTargetUnmatchedSnapshots0PUSH ReplicationTargetUnmatchedSnapshots0 = "PUSH"
)

// Defines values for ReplicationTargetUnmatchedSnapshots3.
const (
	ReplicationTargetUnmatchedSnapshots3LEGACY    ReplicationTargetUnmatchedSnapshots3 = "LEGACY"
	ReplicationTargetUnmatchedSnapshots3LOCAL     ReplicationTargetUnmatchedSnapshots3 = "LOCAL"
	ReplicationTargetUnmatchedSnapshots3SSH       ReplicationTargetUnmatchedSnapshots3 = "SSH"
	ReplicationTargetUnmatchedSnapshots3SSHNETCAT ReplicationTargetUnmatchedSnapshots3 = "SSH+NETCAT"
)

// Defines values for ReplicationUpdate1Compression.
const (
	ReplicationUpdate1CompressionLZ4   ReplicationUpdate1Compression = "LZ4"
	ReplicationUpdate1CompressionPIGZ  ReplicationUpdate1Compression = "PIGZ"
	ReplicationUpdate1CompressionPLZIP ReplicationUpdate1Compression = "PLZIP"
)

// Defines values for ReplicationUpdate1Direction.
const (
	ReplicationUpdate1DirectionPULL ReplicationUpdate1Direction = "PULL"
	ReplicationUpdate1DirectionPUSH ReplicationUpdate1Direction = "PUSH"
)

// Defines values for ReplicationUpdate1EncryptionKeyFormat.
const (
	ReplicationUpdate1EncryptionKeyFormatHEX        ReplicationUpdate1EncryptionKeyFormat = "HEX"
	ReplicationUpdate1EncryptionKeyFormatPASSPHRASE ReplicationUpdate1EncryptionKeyFormat = "PASSPHRASE"
)

// Defines values for ReplicationUpdate1LifetimeUnit.
const (
	ReplicationUpdate1LifetimeUnitDAY   ReplicationUpdate1LifetimeUnit = "DAY"
	ReplicationUpdate1LifetimeUnitHOUR  ReplicationUpdate1LifetimeUnit = "HOUR"
	ReplicationUpdate1LifetimeUnitMONTH ReplicationUpdate1LifetimeUnit = "MONTH"
	ReplicationUpdate1LifetimeUnitWEEK  ReplicationUpdate1LifetimeUnit = "WEEK"
	ReplicationUpdate1LifetimeUnitYEAR  ReplicationUpdate1LifetimeUnit = "YEAR"
)

// Defines values for ReplicationUpdate1LoggingLevel.
const (
	ReplicationUpdate1LoggingLevelDEBUG   ReplicationUpdate1LoggingLevel = "DEBUG"
	ReplicationUpdate1LoggingLevelERROR   ReplicationUpdate1LoggingLevel = "ERROR"
	ReplicationUpdate1LoggingLevelINFO    ReplicationUpdate1LoggingLevel = "INFO"
	ReplicationUpdate1LoggingLevelWARNING ReplicationUpdate1LoggingLevel = "WARNING"
)

// Defines values for ReplicationUpdate1NetcatActiveSide.
const (
	ReplicationUpdate1NetcatActiveSideLOCAL  ReplicationUpdate1NetcatActiveSide = "LOCAL"
	ReplicationUpdate1NetcatActiveSideREMOTE ReplicationUpdate1NetcatActiveSide = "REMOTE"
)

// Defines values for ReplicationUpdate1Readonly.
const (
	IGNORE  ReplicationUpdate1Readonly = "IGNORE"
	REQUIRE ReplicationUpdate1Readonly = "REQUIRE"
	SET     ReplicationUpdate1Readonly = "SET"
)

// Defines values for ReplicationUpdate1RetentionPolicy.
const (
	ReplicationUpdate1RetentionPolicyCUSTOM ReplicationUpdate1RetentionPolicy = "CUSTOM"
	ReplicationUpdate1RetentionPolicyNONE   ReplicationUpdate1RetentionPolicy = "NONE"
	ReplicationUpdate1RetentionPolicySOURCE ReplicationUpdate1RetentionPolicy = "SOURCE"
)

// Defines values for ReplicationUpdate1Transport.
const (
	ReplicationUpdate1TransportLOCAL     ReplicationUpdate1Transport = "LOCAL"
	ReplicationUpdate1TransportSSH       ReplicationUpdate1Transport = "SSH"
	ReplicationUpdate1TransportSSHNETCAT ReplicationUpdate1Transport = "SSH+NETCAT"
)

// Defines values for ReportingGetData1Unit.
const (
	DAY   ReportingGetData1Unit = "DAY"
	HOUR  ReportingGetData1Unit = "HOUR"
	MONTH ReportingGetData1Unit = "MONTH"
	WEEK  ReportingGetData1Unit = "WEEK"
	YEAR  ReportingGetData1Unit = "YEAR"
)

// Defines values for RsyncmodCreate0Mode.
const (
	RsyncmodCreate0ModeRO RsyncmodCreate0Mode = "RO"
	RsyncmodCreate0ModeRW RsyncmodCreate0Mode = "RW"
	RsyncmodCreate0ModeWO RsyncmodCreate0Mode = "WO"
)

// Defines values for RsyncmodUpdate1Mode.
const (
	RsyncmodUpdate1ModeRO RsyncmodUpdate1Mode = "RO"
	RsyncmodUpdate1ModeRW RsyncmodUpdate1Mode = "RW"
	RsyncmodUpdate1ModeWO RsyncmodUpdate1Mode = "WO"
)

// Defines values for RsynctaskCreate0Direction.
const (
	RsynctaskCreate0DirectionPULL RsynctaskCreate0Direction = "PULL"
	RsynctaskCreate0DirectionPUSH RsynctaskCreate0Direction = "PUSH"
)

// Defines values for RsynctaskCreate0Mode.
const (
	RsynctaskCreate0ModeMODULE RsynctaskCreate0Mode = "MODULE"
	RsynctaskCreate0ModeSSH    RsynctaskCreate0Mode = "SSH"
)

// Defines values for RsynctaskUpdate1Direction.
const (
	RsynctaskUpdate1DirectionPULL RsynctaskUpdate1Direction = "PULL"
	RsynctaskUpdate1DirectionPUSH RsynctaskUpdate1Direction = "PUSH"
)

// Defines values for RsynctaskUpdate1Mode.
const (
	RsynctaskUpdate1ModeMODULE RsynctaskUpdate1Mode = "MODULE"
	RsynctaskUpdate1ModeSSH    RsynctaskUpdate1Mode = "SSH"
)

// Defines values for SharingSmbCreate0Purpose.
const (
	SharingSmbCreate0PurposeDEFAULTSHARE        SharingSmbCreate0Purpose = "DEFAULT_SHARE"
	SharingSmbCreate0PurposeENHANCEDTIMEMACHINE SharingSmbCreate0Purpose = "ENHANCED_TIMEMACHINE"
	SharingSmbCreate0PurposeMULTIPROTOCOLAFP    SharingSmbCreate0Purpose = "MULTI_PROTOCOL_AFP"
	SharingSmbCreate0PurposeMULTIPROTOCOLNFS    SharingSmbCreate0Purpose = "MULTI_PROTOCOL_NFS"
	SharingSmbCreate0PurposeNOPRESET            SharingSmbCreate0Purpose = "NO_PRESET"
	SharingSmbCreate0PurposePRIVATEDATASETS     SharingSmbCreate0Purpose = "PRIVATE_DATASETS"
	SharingSmbCreate0PurposeWORMDROPBOX         SharingSmbCreate0Purpose = "WORM_DROPBOX"
)

// Defines values for SharingSmbUpdate1Purpose.
const (
	SharingSmbUpdate1PurposeDEFAULTSHARE        SharingSmbUpdate1Purpose = "DEFAULT_SHARE"
	SharingSmbUpdate1PurposeENHANCEDTIMEMACHINE SharingSmbUpdate1Purpose = "ENHANCED_TIMEMACHINE"
	SharingSmbUpdate1PurposeMULTIPROTOCOLAFP    SharingSmbUpdate1Purpose = "MULTI_PROTOCOL_AFP"
	SharingSmbUpdate1PurposeMULTIPROTOCOLNFS    SharingSmbUpdate1Purpose = "MULTI_PROTOCOL_NFS"
	SharingSmbUpdate1PurposeNOPRESET            SharingSmbUpdate1Purpose = "NO_PRESET"
	SharingSmbUpdate1PurposePRIVATEDATASETS     SharingSmbUpdate1Purpose = "PRIVATE_DATASETS"
	SharingSmbUpdate1PurposeWORMDROPBOX         SharingSmbUpdate1Purpose = "WORM_DROPBOX"
)

// Defines values for SmartTestCreate0Type.
const (
	SmartTestCreate0TypeCONVEYANCE SmartTestCreate0Type = "CONVEYANCE"
	SmartTestCreate0TypeLONG       SmartTestCreate0Type = "LONG"
	SmartTestCreate0TypeOFFLINE    SmartTestCreate0Type = "OFFLINE"
	SmartTestCreate0TypeSHORT      SmartTestCreate0Type = "SHORT"
)

// Defines values for SmartTestUpdate1Type.
const (
	SmartTestUpdate1TypeCONVEYANCE SmartTestUpdate1Type = "CONVEYANCE"
	SmartTestUpdate1TypeLONG       SmartTestUpdate1Type = "LONG"
	SmartTestUpdate1TypeOFFLINE    SmartTestUpdate1Type = "OFFLINE"
	SmartTestUpdate1TypeSHORT      SmartTestUpdate1Type = "SHORT"
)

// Defines values for SmartUpdate0Powermode.
const (
	IDLE    SmartUpdate0Powermode = "IDLE"
	NEVER   SmartUpdate0Powermode = "NEVER"
	SLEEP   SmartUpdate0Powermode = "SLEEP"
	STANDBY SmartUpdate0Powermode = "STANDBY"
)

// Defines values for SmbGetRemoteAcl0OptionsOutputFormat.
const (
	SmbGetRemoteAcl0OptionsOutputFormatLOCAL SmbGetRemoteAcl0OptionsOutputFormat = "LOCAL"
	SmbGetRemoteAcl0OptionsOutputFormatSMB   SmbGetRemoteAcl0OptionsOutputFormat = "SMB"
)

// Defines values for SmbStatus0.
const (
	SmbStatus0ALL           SmbStatus0 = "ALL"
	SmbStatus0AUTHLOG       SmbStatus0 = "AUTH_LOG"
	SmbStatus0BYTERANGE     SmbStatus0 = "BYTERANGE"
	SmbStatus0LOCKS         SmbStatus0 = "LOCKS"
	SmbStatus0NOTIFICATIONS SmbStatus0 = "NOTIFICATIONS"
	SmbStatus0SESSIONS      SmbStatus0 = "SESSIONS"
	SmbStatus0SHARES        SmbStatus0 = "SHARES"
)

// Defines values for SmbUpdate0Loglevel.
const (
	SmbUpdate0LoglevelDEBUG   SmbUpdate0Loglevel = "DEBUG"
	SmbUpdate0LoglevelFULL    SmbUpdate0Loglevel = "FULL"
	SmbUpdate0LoglevelMINIMUM SmbUpdate0Loglevel = "MINIMUM"
	SmbUpdate0LoglevelNONE    SmbUpdate0Loglevel = "NONE"
	SmbUpdate0LoglevelNORMAL  SmbUpdate0Loglevel = "NORMAL"
)

// Defines values for SnmpUpdate0V3Authtype.
const (
	Empty SnmpUpdate0V3Authtype = ""
	MD5   SnmpUpdate0V3Authtype = "MD5"
	SHA   SnmpUpdate0V3Authtype = "SHA"
)

// Defines values for SnmpUpdate0V3Privproto.
const (
	AES         SnmpUpdate0V3Privproto = "AES"
	DES         SnmpUpdate0V3Privproto = "DES"
	LessThannil SnmpUpdate0V3Privproto = "<nil>"
)

// Defines values for SshUpdate0SftpLogFacility.
const (
	SshUpdate0SftpLogFacilityAUTH   SshUpdate0SftpLogFacility = "AUTH"
	SshUpdate0SftpLogFacilityDAEMON SshUpdate0SftpLogFacility = "DAEMON"
	SshUpdate0SftpLogFacilityEmpty  SshUpdate0SftpLogFacility = ""
	SshUpdate0SftpLogFacilityLOCAL0 SshUpdate0SftpLogFacility = "LOCAL0"
	SshUpdate0SftpLogFacilityLOCAL1 SshUpdate0SftpLogFacility = "LOCAL1"
	SshUpdate0SftpLogFacilityLOCAL2 SshUpdate0SftpLogFacility = "LOCAL2"
	SshUpdate0SftpLogFacilityLOCAL3 SshUpdate0SftpLogFacility = "LOCAL3"
	SshUpdate0SftpLogFacilityLOCAL4 SshUpdate0SftpLogFacility = "LOCAL4"
	SshUpdate0SftpLogFacilityLOCAL5 SshUpdate0SftpLogFacility = "LOCAL5"
	SshUpdate0SftpLogFacilityLOCAL6 SshUpdate0SftpLogFacility = "LOCAL6"
	SshUpdate0SftpLogFacilityLOCAL7 SshUpdate0SftpLogFacility = "LOCAL7"
	SshUpdate0SftpLogFacilityUSER   SshUpdate0SftpLogFacility = "USER"
)

// Defines values for SshUpdate0SftpLogLevel.
const (
	SshUpdate0SftpLogLevelDEBUG   SshUpdate0SftpLogLevel = "DEBUG"
	SshUpdate0SftpLogLevelDEBUG2  SshUpdate0SftpLogLevel = "DEBUG2"
	SshUpdate0SftpLogLevelDEBUG3  SshUpdate0SftpLogLevel = "DEBUG3"
	SshUpdate0SftpLogLevelERROR   SshUpdate0SftpLogLevel = "ERROR"
	SshUpdate0SftpLogLevelEmpty   SshUpdate0SftpLogLevel = ""
	SshUpdate0SftpLogLevelFATAL   SshUpdate0SftpLogLevel = "FATAL"
	SshUpdate0SftpLogLevelINFO    SshUpdate0SftpLogLevel = "INFO"
	SshUpdate0SftpLogLevelQUIET   SshUpdate0SftpLogLevel = "QUIET"
	SshUpdate0SftpLogLevelVERBOSE SshUpdate0SftpLogLevel = "VERBOSE"
)

// Defines values for SupportNewTicket0Type.
const (
	BUG     SupportNewTicket0Type = "BUG"
	FEATURE SupportNewTicket0Type = "FEATURE"
)

// Defines values for SystemAdvancedUpdate0SedUser.
const (
	SystemAdvancedUpdate0SedUserMASTER SystemAdvancedUpdate0SedUser = "MASTER"
	SystemAdvancedUpdate0SedUserUSER   SystemAdvancedUpdate0SedUser = "USER"
)

// Defines values for SystemAdvancedUpdate0Serialspeed.
const (
	N115200 SystemAdvancedUpdate0Serialspeed = "115200"
	N19200  SystemAdvancedUpdate0Serialspeed = "19200"
	N38400  SystemAdvancedUpdate0Serialspeed = "38400"
	N57600  SystemAdvancedUpdate0Serialspeed = "57600"
	N9600   SystemAdvancedUpdate0Serialspeed = "9600"
)

// Defines values for SystemAdvancedUpdate0SyslogTransport.
const (
	TCP SystemAdvancedUpdate0SyslogTransport = "TCP"
	TLS SystemAdvancedUpdate0SyslogTransport = "TLS"
	UDP SystemAdvancedUpdate0SyslogTransport = "UDP"
)

// Defines values for SystemAdvancedUpdate0Sysloglevel.
const (
	SystemAdvancedUpdate0SysloglevelFALERT   SystemAdvancedUpdate0Sysloglevel = "F_ALERT"
	SystemAdvancedUpdate0SysloglevelFCRIT    SystemAdvancedUpdate0Sysloglevel = "F_CRIT"
	SystemAdvancedUpdate0SysloglevelFDEBUG   SystemAdvancedUpdate0Sysloglevel = "F_DEBUG"
	SystemAdvancedUpdate0SysloglevelFEMERG   SystemAdvancedUpdate0Sysloglevel = "F_EMERG"
	SystemAdvancedUpdate0SysloglevelFERR     SystemAdvancedUpdate0Sysloglevel = "F_ERR"
	SystemAdvancedUpdate0SysloglevelFINFO    SystemAdvancedUpdate0Sysloglevel = "F_INFO"
	SystemAdvancedUpdate0SysloglevelFISDEBUG SystemAdvancedUpdate0Sysloglevel = "F_IS_DEBUG"
	SystemAdvancedUpdate0SysloglevelFNOTICE  SystemAdvancedUpdate0Sysloglevel = "F_NOTICE"
	SystemAdvancedUpdate0SysloglevelFWARNING SystemAdvancedUpdate0Sysloglevel = "F_WARNING"
)

// Defines values for SystemFeatureEnabled0.
const (
	DEDUP        SystemFeatureEnabled0 = "DEDUP"
	FIBRECHANNEL SystemFeatureEnabled0 = "FIBRECHANNEL"
	JAILS        SystemFeatureEnabled0 = "JAILS"
	VM           SystemFeatureEnabled0 = "VM"
)

// Defines values for SystemGeneralUpdate0Sysloglevel.
const (
	SystemGeneralUpdate0SysloglevelFALERT   SystemGeneralUpdate0Sysloglevel = "F_ALERT"
	SystemGeneralUpdate0SysloglevelFCRIT    SystemGeneralUpdate0Sysloglevel = "F_CRIT"
	SystemGeneralUpdate0SysloglevelFDEBUG   SystemGeneralUpdate0Sysloglevel = "F_DEBUG"
	SystemGeneralUpdate0SysloglevelFEMERG   SystemGeneralUpdate0Sysloglevel = "F_EMERG"
	SystemGeneralUpdate0SysloglevelFERR     SystemGeneralUpdate0Sysloglevel = "F_ERR"
	SystemGeneralUpdate0SysloglevelFINFO    SystemGeneralUpdate0Sysloglevel = "F_INFO"
	SystemGeneralUpdate0SysloglevelFISDEBUG SystemGeneralUpdate0Sysloglevel = "F_IS_DEBUG"
	SystemGeneralUpdate0SysloglevelFNOTICE  SystemGeneralUpdate0Sysloglevel = "F_NOTICE"
	SystemGeneralUpdate0SysloglevelFWARNING SystemGeneralUpdate0Sysloglevel = "F_WARNING"
)

// Defines values for TunableCreate0Type.
const (
	TunableCreate0TypeLOADER TunableCreate0Type = "LOADER"
	TunableCreate0TypeRC     TunableCreate0Type = "RC"
	TunableCreate0TypeSYSCTL TunableCreate0Type = "SYSCTL"
)

// Defines values for TunableUpdate1Type.
const (
	TunableUpdate1TypeLOADER TunableUpdate1Type = "LOADER"
	TunableUpdate1TypeRC     TunableUpdate1Type = "RC"
	TunableUpdate1TypeSYSCTL TunableUpdate1Type = "SYSCTL"
)

// Defines values for UpsUpdate0Mode.
const (
	UpsUpdate0ModeMASTER UpsUpdate0Mode = "MASTER"
	UpsUpdate0ModeSLAVE  UpsUpdate0Mode = "SLAVE"
)

// Defines values for UpsUpdate0Shutdown.
const (
	BATT    UpsUpdate0Shutdown = "BATT"
	LOWBATT UpsUpdate0Shutdown = "LOWBATT"
)

// Defines values for VmCreate0Bootloader.
const (
	VmCreate0BootloaderGRUB    VmCreate0Bootloader = "GRUB"
	VmCreate0BootloaderUEFI    VmCreate0Bootloader = "UEFI"
	VmCreate0BootloaderUEFICSM VmCreate0Bootloader = "UEFI_CSM"
)

// Defines values for VmCreate0Time.
const (
	VmCreate0TimeLOCAL VmCreate0Time = "LOCAL"
	VmCreate0TimeUTC   VmCreate0Time = "UTC"
)

// Defines values for VmDeviceCreate0Dtype.
const (
	VmDeviceCreate0DtypeCDROM VmDeviceCreate0Dtype = "CDROM"
	VmDeviceCreate0DtypeDISK  VmDeviceCreate0Dtype = "DISK"
	VmDeviceCreate0DtypeNIC   VmDeviceCreate0Dtype = "NIC"
	VmDeviceCreate0DtypePCI   VmDeviceCreate0Dtype = "PCI"
	VmDeviceCreate0DtypeRAW   VmDeviceCreate0Dtype = "RAW"
	VmDeviceCreate0DtypeVNC   VmDeviceCreate0Dtype = "VNC"
)

// Defines values for VmDeviceUpdate1Dtype.
const (
	CDROM VmDeviceUpdate1Dtype = "CDROM"
	DISK  VmDeviceUpdate1Dtype = "DISK"
	NIC   VmDeviceUpdate1Dtype = "NIC"
	PCI   VmDeviceUpdate1Dtype = "PCI"
	RAW   VmDeviceUpdate1Dtype = "RAW"
	VNC   VmDeviceUpdate1Dtype = "VNC"
)

// Defines values for VmUpdate1Bootloader.
const (
	VmUpdate1BootloaderGRUB    VmUpdate1Bootloader = "GRUB"
	VmUpdate1BootloaderUEFI    VmUpdate1Bootloader = "UEFI"
	VmUpdate1BootloaderUEFICSM VmUpdate1Bootloader = "UEFI_CSM"
)

// Defines values for VmUpdate1Time.
const (
	VmUpdate1TimeLOCAL VmUpdate1Time = "LOCAL"
	VmUpdate1TimeUTC   VmUpdate1Time = "UTC"
)

// Defines values for WebdavUpdate0Htauth.
const (
	WebdavUpdate0HtauthBASIC  WebdavUpdate0Htauth = "BASIC"
	WebdavUpdate0HtauthDIGEST WebdavUpdate0Htauth = "DIGEST"
	WebdavUpdate0HtauthNONE   WebdavUpdate0Htauth = "NONE"
)

// Defines values for WebdavUpdate0Protocol.
const (
	HTTP      WebdavUpdate0Protocol = "HTTP"
	HTTPHTTPS WebdavUpdate0Protocol = "HTTPHTTPS"
	HTTPS     WebdavUpdate0Protocol = "HTTPS"
)

// AcmeDnsAuthenticatorCreate0 defines model for acme_dns_authenticator_create_0.
type AcmeDnsAuthenticatorCreate0 struct {
	Attributes    *map[string]interface{} `json:"attributes,omitempty"`
	Authenticator *string                 `json:"authenticator,omitempty"`
	Name          *string                 `json:"name,omitempty"`
}

// AcmeDnsAuthenticatorUpdate1 defines model for acme_dns_authenticator_update_1.
type AcmeDnsAuthenticatorUpdate1 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Name       *string                 `json:"name,omitempty"`
}

// ActivedirectoryLeave0 defines model for activedirectory_leave_0.
type ActivedirectoryLeave0 struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ActivedirectoryUpdate0 defines model for activedirectory_update_0.
type ActivedirectoryUpdate0 struct {
	AllowDnsUpdates     *bool                          `json:"allow_dns_updates,omitempty"`
	AllowTrustedDoms    *bool                          `json:"allow_trusted_doms,omitempty"`
	Bindname            *string                        `json:"bindname,omitempty"`
	Bindpw              *string                        `json:"bindpw,omitempty"`
	Createcomputer      *string                        `json:"createcomputer,omitempty"`
	DisableFreenasCache *bool                          `json:"disable_freenas_cache,omitempty"`
	DnsTimeout          *int                           `json:"dns_timeout,omitempty"`
	Domainname          *string                        `json:"domainname,omitempty"`
	Enable              *bool                          `json:"enable,omitempty"`
	KerberosPrincipal   *string                        `json:"kerberos_principal"`
	KerberosRealm       *int                           `json:"kerberos_realm"`
	Netbiosalias        *[]interface{}                 `json:"netbiosalias,omitempty"`
	Netbiosname         *string                        `json:"netbiosname,omitempty"`
	NetbiosnameB        *string                        `json:"netbiosname_b,omitempty"`
	NssInfo             *ActivedirectoryUpdate0NssInfo `json:"nss_info"`
	RestrictPam         *bool                          `json:"restrict_pam,omitempty"`
	Site                *string                        `json:"site"`
	Timeout             *int                           `json:"timeout,omitempty"`
	UseDefaultDomain    *bool                          `json:"use_default_domain,omitempty"`
	VerboseLogging      *bool                          `json:"verbose_logging,omitempty"`
}

// ActivedirectoryUpdate0NssInfo defines model for ActivedirectoryUpdate0.NssInfo.
type ActivedirectoryUpdate0NssInfo string

// AfpUpdate0 defines model for afp_update_0.
type AfpUpdate0 struct {
	Bindip           *[]string               `json:"bindip,omitempty"`
	ChmodRequest     *AfpUpdate0ChmodRequest `json:"chmod_request,omitempty"`
	ConnectionsLimit *int                    `json:"connections_limit,omitempty"`
	Dbpath           *string                 `json:"dbpath,omitempty"`
	GlobalAux        *string                 `json:"global_aux,omitempty"`
	Guest            *bool                   `json:"guest,omitempty"`
	GuestUser        *string                 `json:"guest_user,omitempty"`
	Loglevel         *AfpUpdate0Loglevel     `json:"loglevel,omitempty"`
	MapAcls          *AfpUpdate0MapAcls      `json:"map_acls,omitempty"`
}

// AfpUpdate0ChmodRequest defines model for AfpUpdate0.ChmodRequest.
type AfpUpdate0ChmodRequest string

// AfpUpdate0Loglevel defines model for AfpUpdate0.Loglevel.
type AfpUpdate0Loglevel string

// AfpUpdate0MapAcls defines model for AfpUpdate0.MapAcls.
type AfpUpdate0MapAcls string

// AlertDismiss0 defines model for alert_dismiss_0.
type AlertDismiss0 = string

// AlertRestore0 defines model for alert_restore_0.
type AlertRestore0 = string

// AlertclassesUpdate0 defines model for alertclasses_update_0.
type AlertclassesUpdate0 struct {
	Classes *map[string]interface{} `json:"classes,omitempty"`
}

// AlertserviceCreate0 defines model for alertservice_create_0.
type AlertserviceCreate0 struct {
	Attributes *map[string]interface{}   `json:"attributes,omitempty"`
	Enabled    *bool                     `json:"enabled,omitempty"`
	Level      *AlertserviceCreate0Level `json:"level,omitempty"`
	Name       *string                   `json:"name,omitempty"`
	Type       *string                   `json:"type,omitempty"`
}

// AlertserviceCreate0Level defines model for AlertserviceCreate0.Level.
type AlertserviceCreate0Level string

// AlertserviceTest0 defines model for alertservice_test_0.
type AlertserviceTest0 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Enabled    *bool                   `json:"enabled,omitempty"`
	Level      *AlertserviceTest0Level `json:"level,omitempty"`
	Name       *string                 `json:"name,omitempty"`
	Type       *string                 `json:"type,omitempty"`
}

// AlertserviceTest0Level defines model for AlertserviceTest0.Level.
type AlertserviceTest0Level string

// AlertserviceUpdate1 defines model for alertservice_update_1.
type AlertserviceUpdate1 struct {
	Attributes *map[string]interface{}   `json:"attributes,omitempty"`
	Enabled    *bool                     `json:"enabled,omitempty"`
	Level      *AlertserviceUpdate1Level `json:"level,omitempty"`
	Name       *string                   `json:"name,omitempty"`
	Type       *string                   `json:"type,omitempty"`
}

// AlertserviceUpdate1Level defines model for AlertserviceUpdate1.Level.
type AlertserviceUpdate1Level string

// ApiKeyCreate0 defines model for api_key_create_0.
type ApiKeyCreate0 struct {
	Name *string `json:"name,omitempty"`
}

// ApiKeyUpdate1 defines model for api_key_update_1.
type ApiKeyUpdate1 struct {
	Name  *string `json:"name,omitempty"`
	Reset *bool   `json:"reset,omitempty"`
}

// AuthCheckUser defines model for auth_check_user.
type AuthCheckUser struct {
	Password *AuthCheckUser1 `json:"password,omitempty"`
	Username *AuthCheckUser0 `json:"username,omitempty"`
}

// AuthCheckUser0 defines model for auth_check_user_0.
type AuthCheckUser0 = string

// AuthCheckUser1 defines model for auth_check_user_1.
type AuthCheckUser1 = string

// AuthGenerateToken defines model for auth_generate_token.
type AuthGenerateToken struct {
	Attrs *AuthGenerateToken1 `json:"attrs,omitempty"`
	Ttl   *AuthGenerateToken0 `json:"ttl"`
}

// AuthGenerateToken0 defines model for auth_generate_token_0.
type AuthGenerateToken0 = int

// AuthGenerateToken1 defines model for auth_generate_token_1.
type AuthGenerateToken1 map[string]interface{}

// AuthTwofactorUpdate0 defines model for auth_twofactor_update_0.
type AuthTwofactorUpdate0 struct {
	Enabled   *bool `json:"enabled,omitempty"`
	Interval  *int  `json:"interval,omitempty"`
	OtpDigits *int  `json:"otp_digits,omitempty"`
	Services  *struct {
		Ssh *bool `json:"ssh,omitempty"`
	} `json:"services,omitempty"`
	Window *int `json:"window,omitempty"`
}

// AuthTwofactorVerify0 defines model for auth_twofactor_verify_0.
type AuthTwofactorVerify0 = string

// BootAttach defines model for boot_attach.
type BootAttach struct {
	Dev     *BootAttach0 `json:"dev,omitempty"`
	Options *BootAttach1 `json:"options,omitempty"`
}

// BootAttach0 defines model for boot_attach_0.
type BootAttach0 = string

// BootAttach1 defines model for boot_attach_1.
type BootAttach1 struct {
	Expand *bool `json:"expand,omitempty"`
}

// BootDetach0 defines model for boot_detach_0.
type BootDetach0 = string

// BootReplace defines model for boot_replace.
type BootReplace struct {
	Dev   *BootReplace1 `json:"dev,omitempty"`
	Label *BootReplace0 `json:"label,omitempty"`
}

// BootReplace0 defines model for boot_replace_0.
type BootReplace0 = string

// BootReplace1 defines model for boot_replace_1.
type BootReplace1 = string

// BootSetScrubInterval0 defines model for boot_set_scrub_interval_0.
type BootSetScrubInterval0 = int

// BootenvActivate defines model for bootenv_activate.
type BootenvActivate = map[string]interface{}

// BootenvCreate0 defines model for bootenv_create_0.
type BootenvCreate0 struct {
	Name   *string `json:"name,omitempty"`
	Source *string `json:"source,omitempty"`
}

// BootenvSetAttribute1 defines model for bootenv_set_attribute_1.
type BootenvSetAttribute1 struct {
	Keep *bool `json:"keep,omitempty"`
}

// BootenvUpdate1 defines model for bootenv_update_1.
type BootenvUpdate1 struct {
	Name *string `json:"name,omitempty"`
}

// CertificateCreate0 defines model for certificate_create_0.
type CertificateCreate0 struct {
	CSR              *string `json:"CSR,omitempty"`
	AcmeDirectoryUri *string `json:"acme_directory_uri,omitempty"`
	CertExtensions   *struct {
		AuthorityKeyIdentifier *struct {
			AuthorityCertIssuer *bool `json:"authority_cert_issuer,omitempty"`
			Enabled             *bool `json:"enabled,omitempty"`
			ExtensionCritical   *bool `json:"extension_critical,omitempty"`
		} `json:"AuthorityKeyIdentifier,omitempty"`
		BasicConstraints *struct {
			Ca                *bool `json:"ca,omitempty"`
			Enabled           *bool `json:"enabled,omitempty"`
			ExtensionCritical *bool `json:"extension_critical,omitempty"`
			PathLength        *int  `json:"path_length"`
		} `json:"BasicConstraints,omitempty"`
		ExtendedKeyUsage *struct {
			Enabled           *bool     `json:"enabled,omitempty"`
			ExtensionCritical *bool     `json:"extension_critical,omitempty"`
			Usages            *[]string `json:"usages,omitempty"`
		} `json:"ExtendedKeyUsage,omitempty"`
		KeyUsage *struct {
			ContentCommitment *bool `json:"content_commitment,omitempty"`
			CrlSign           *bool `json:"crl_sign,omitempty"`
			DataEncipherment  *bool `json:"data_encipherment,omitempty"`
			DecipherOnly      *bool `json:"decipher_only,omitempty"`
			DigitalSignature  *bool `json:"digital_signature,omitempty"`
			Enabled           *bool `json:"enabled,omitempty"`
			EncipherOnly      *bool `json:"encipher_only,omitempty"`
			ExtensionCritical *bool `json:"extension_critical,omitempty"`
			KeyAgreement      *bool `json:"key_agreement,omitempty"`
			KeyCertSign       *bool `json:"key_cert_sign,omitempty"`
			KeyEncipherment   *bool `json:"key_encipherment,omitempty"`
		} `json:"KeyUsage,omitempty"`
	} `json:"cert_extensions,omitempty"`
	Certificate        *string                            `json:"certificate,omitempty"`
	City               *string                            `json:"city,omitempty"`
	Common             *string                            `json:"common"`
	Country            *string                            `json:"country,omitempty"`
	CreateType         *CertificateCreate0CreateType      `json:"create_type,omitempty"`
	CsrId              *int                               `json:"csr_id,omitempty"`
	DigestAlgorithm    *CertificateCreate0DigestAlgorithm `json:"digest_algorithm,omitempty"`
	DnsMapping         *map[string]interface{}            `json:"dns_mapping,omitempty"`
	EcCurve            *CertificateCreate0EcCurve         `json:"ec_curve,omitempty"`
	Email              *string                            `json:"email,omitempty"`
	KeyLength          *int                               `json:"key_length,omitempty"`
	KeyType            *CertificateCreate0KeyType         `json:"key_type,omitempty"`
	Lifetime           *int                               `json:"lifetime,omitempty"`
	Name               *string                            `json:"name,omitempty"`
	Organization       *string                            `json:"organization,omitempty"`
	OrganizationalUnit *string                            `json:"organizational_unit,omitempty"`
	Passphrase         *string                            `json:"passphrase,omitempty"`
	Privatekey         *string                            `json:"privatekey,omitempty"`
	RenewDays          *int                               `json:"renew_days,omitempty"`
	San                *[]string                          `json:"san,omitempty"`
	Serial             *int                               `json:"serial,omitempty"`
	Signedby           *int                               `json:"signedby,omitempty"`
	State              *string                            `json:"state,omitempty"`
	Tos                *bool                              `json:"tos,omitempty"`
	Type               *int                               `json:"type,omitempty"`
}

// CertificateCreate0CreateType defines model for CertificateCreate0.CreateType.
type CertificateCreate0CreateType string

// CertificateCreate0DigestAlgorithm defines model for CertificateCreate0.DigestAlgorithm.
type CertificateCreate0DigestAlgorithm string

// CertificateCreate0EcCurve defines model for CertificateCreate0.EcCurve.
type CertificateCreate0EcCurve string

// CertificateCreate0KeyType defines model for CertificateCreate0.KeyType.
type CertificateCreate0KeyType string

// CertificateDelete1 defines model for certificate_delete_1.
type CertificateDelete1 = bool

// CertificateUpdate1 defines model for certificate_update_1.
type CertificateUpdate1 struct {
	Name    *string `json:"name,omitempty"`
	Revoked *bool   `json:"revoked,omitempty"`
}

// CertificateauthorityCaSignCsr0 defines model for certificateauthority_ca_sign_csr_0.
type CertificateauthorityCaSignCsr0 struct {
	CaId           *int `json:"ca_id,omitempty"`
	CertExtensions *struct {
		AuthorityKeyIdentifier *struct {
			AuthorityCertIssuer *bool `json:"authority_cert_issuer,omitempty"`
			Enabled             *bool `json:"enabled,omitempty"`
			ExtensionCritical   *bool `json:"extension_critical,omitempty"`
		} `json:"AuthorityKeyIdentifier,omitempty"`
		BasicConstraints *struct {
			Ca                *bool `json:"ca,omitempty"`
			Enabled           *bool `json:"enabled,omitempty"`
			ExtensionCritical *bool `json:"extension_critical,omitempty"`
			PathLength        *int  `json:"path_length"`
		} `json:"BasicConstraints,omitempty"`
		ExtendedKeyUsage *struct {
			Enabled           *bool     `json:"enabled,omitempty"`
			ExtensionCritical *bool     `json:"extension_critical,omitempty"`
			Usages            *[]string `json:"usages,omitempty"`
		} `json:"ExtendedKeyUsage,omitempty"`
		KeyUsage *struct {
			ContentCommitment *bool `json:"content_commitment,omitempty"`
			CrlSign           *bool `json:"crl_sign,omitempty"`
			DataEncipherment  *bool `json:"data_encipherment,omitempty"`
			DecipherOnly      *bool `json:"decipher_only,omitempty"`
			DigitalSignature  *bool `json:"digital_signature,omitempty"`
			Enabled           *bool `json:"enabled,omitempty"`
			EncipherOnly      *bool `json:"encipher_only,omitempty"`
			ExtensionCritical *bool `json:"extension_critical,omitempty"`
			KeyAgreement      *bool `json:"key_agreement,omitempty"`
			KeyCertSign       *bool `json:"key_cert_sign,omitempty"`
			KeyEncipherment   *bool `json:"key_encipherment,omitempty"`
		} `json:"KeyUsage,omitempty"`
	} `json:"cert_extensions,omitempty"`
	CsrCertId *int    `json:"csr_cert_id,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// CertificateauthorityCreate0 defines model for certificateauthority_create_0.
type CertificateauthorityCreate0 struct {
	CSR              *string `json:"CSR,omitempty"`
	AcmeDirectoryUri *string `json:"acme_directory_uri,omitempty"`
	CertExtensions   *struct {
		AuthorityKeyIdentifier *struct {
			AuthorityCertIssuer *bool `json:"authority_cert_issuer,omitempty"`
			Enabled             *bool `json:"enabled,omitempty"`
			ExtensionCritical   *bool `json:"extension_critical,omitempty"`
		} `json:"AuthorityKeyIdentifier,omitempty"`
		BasicConstraints *struct {
			Ca                *bool `json:"ca,omitempty"`
			Enabled           *bool `json:"enabled,omitempty"`
			ExtensionCritical *bool `json:"extension_critical,omitempty"`
			PathLength        *int  `json:"path_length"`
		} `json:"BasicConstraints,omitempty"`
		ExtendedKeyUsage *struct {
			Enabled           *bool     `json:"enabled,omitempty"`
			ExtensionCritical *bool     `json:"extension_critical,omitempty"`
			Usages            *[]string `json:"usages,omitempty"`
		} `json:"ExtendedKeyUsage,omitempty"`
		KeyUsage *struct {
			ContentCommitment *bool `json:"content_commitment,omitempty"`
			CrlSign           *bool `json:"crl_sign,omitempty"`
			DataEncipherment  *bool `json:"data_encipherment,omitempty"`
			DecipherOnly      *bool `json:"decipher_only,omitempty"`
			DigitalSignature  *bool `json:"digital_signature,omitempty"`
			Enabled           *bool `json:"enabled,omitempty"`
			EncipherOnly      *bool `json:"encipher_only,omitempty"`
			ExtensionCritical *bool `json:"extension_critical,omitempty"`
			KeyAgreement      *bool `json:"key_agreement,omitempty"`
			KeyCertSign       *bool `json:"key_cert_sign,omitempty"`
			KeyEncipherment   *bool `json:"key_encipherment,omitempty"`
		} `json:"KeyUsage,omitempty"`
	} `json:"cert_extensions,omitempty"`
	Certificate        *string                                     `json:"certificate,omitempty"`
	City               *string                                     `json:"city,omitempty"`
	Common             *string                                     `json:"common"`
	Country            *string                                     `json:"country,omitempty"`
	CreateType         *CertificateauthorityCreate0CreateType      `json:"create_type,omitempty"`
	CsrId              *int                                        `json:"csr_id,omitempty"`
	DigestAlgorithm    *CertificateauthorityCreate0DigestAlgorithm `json:"digest_algorithm,omitempty"`
	EcCurve            *CertificateauthorityCreate0EcCurve         `json:"ec_curve,omitempty"`
	Email              *string                                     `json:"email,omitempty"`
	KeyLength          *int                                        `json:"key_length,omitempty"`
	KeyType            *CertificateauthorityCreate0KeyType         `json:"key_type,omitempty"`
	Lifetime           *int                                        `json:"lifetime,omitempty"`
	Name               *string                                     `json:"name,omitempty"`
	Organization       *string                                     `json:"organization,omitempty"`
	OrganizationalUnit *string                                     `json:"organizational_unit,omitempty"`
	Passphrase         *string                                     `json:"passphrase,omitempty"`
	Privatekey         *string                                     `json:"privatekey,omitempty"`
	RenewDays          *int                                        `json:"renew_days,omitempty"`
	San                *[]string                                   `json:"san,omitempty"`
	Serial             *int                                        `json:"serial,omitempty"`
	Signedby           *int                                        `json:"signedby,omitempty"`
	State              *string                                     `json:"state,omitempty"`
	Tos                *bool                                       `json:"tos,omitempty"`
	Type               *int                                        `json:"type,omitempty"`
}

// CertificateauthorityCreate0CreateType defines model for CertificateauthorityCreate0.CreateType.
type CertificateauthorityCreate0CreateType string

// CertificateauthorityCreate0DigestAlgorithm defines model for CertificateauthorityCreate0.DigestAlgorithm.
type CertificateauthorityCreate0DigestAlgorithm string

// CertificateauthorityCreate0EcCurve defines model for CertificateauthorityCreate0.EcCurve.
type CertificateauthorityCreate0EcCurve string

// CertificateauthorityCreate0KeyType defines model for CertificateauthorityCreate0.KeyType.
type CertificateauthorityCreate0KeyType string

// CertificateauthorityUpdate1 defines model for certificateauthority_update_1.
type CertificateauthorityUpdate1 struct {
	CaId       *int                                   `json:"ca_id,omitempty"`
	CreateType *CertificateauthorityUpdate1CreateType `json:"create_type,omitempty"`
	CsrCertId  *int                                   `json:"csr_cert_id,omitempty"`
	Name       *string                                `json:"name,omitempty"`
	Revoked    *bool                                  `json:"revoked,omitempty"`
}

// CertificateauthorityUpdate1CreateType defines model for CertificateauthorityUpdate1.CreateType.
type CertificateauthorityUpdate1CreateType string

// CloudsyncAbort defines model for cloudsync_abort.
type CloudsyncAbort = map[string]interface{}

// CloudsyncCreate0 defines model for cloudsync_create_0.
type CloudsyncCreate0 struct {
	Args               *string                    `json:"args,omitempty"`
	Attributes         *map[string]interface{}    `json:"attributes,omitempty"`
	Bwlimit            *[]map[string]interface{}  `json:"bwlimit,omitempty"`
	Credentials        *int                       `json:"credentials,omitempty"`
	Description        *string                    `json:"description,omitempty"`
	Direction          *CloudsyncCreate0Direction `json:"direction,omitempty"`
	Enabled            *bool                      `json:"enabled,omitempty"`
	Encryption         *bool                      `json:"encryption,omitempty"`
	EncryptionPassword *string                    `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                    `json:"encryption_salt,omitempty"`
	Exclude            *[]string                  `json:"exclude,omitempty"`
	FilenameEncryption *bool                      `json:"filename_encryption,omitempty"`
	FollowSymlinks     *bool                      `json:"follow_symlinks,omitempty"`
	Path               *string                    `json:"path,omitempty"`
	PostScript         *string                    `json:"post_script,omitempty"`
	PreScript          *string                    `json:"pre_script,omitempty"`
	Schedule           *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Snapshot     *bool                         `json:"snapshot,omitempty"`
	TransferMode *CloudsyncCreate0TransferMode `json:"transfer_mode,omitempty"`
	Transfers    *int                          `json:"transfers"`
}

// CloudsyncCreate0Direction defines model for CloudsyncCreate0.Direction.
type CloudsyncCreate0Direction string

// CloudsyncCreate0TransferMode defines model for CloudsyncCreate0.TransferMode.
type CloudsyncCreate0TransferMode string

// CloudsyncCredentialsCreate0 defines model for cloudsync_credentials_create_0.
type CloudsyncCredentialsCreate0 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Name       *string                 `json:"name,omitempty"`
	Provider   *string                 `json:"provider,omitempty"`
}

// CloudsyncCredentialsUpdate1 defines model for cloudsync_credentials_update_1.
type CloudsyncCredentialsUpdate1 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Name       *string                 `json:"name,omitempty"`
	Provider   *string                 `json:"provider,omitempty"`
}

// CloudsyncCredentialsVerify0 defines model for cloudsync_credentials_verify_0.
type CloudsyncCredentialsVerify0 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Provider   *string                 `json:"provider,omitempty"`
}

// CloudsyncListBuckets0 defines model for cloudsync_list_buckets_0.
type CloudsyncListBuckets0 = int

// CloudsyncListDirectory0 defines model for cloudsync_list_directory_0.
type CloudsyncListDirectory0 struct {
	Args               *string                 `json:"args,omitempty"`
	Attributes         *map[string]interface{} `json:"attributes,omitempty"`
	Credentials        *int                    `json:"credentials,omitempty"`
	Encryption         *bool                   `json:"encryption,omitempty"`
	EncryptionPassword *string                 `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                 `json:"encryption_salt,omitempty"`
	FilenameEncryption *bool                   `json:"filename_encryption,omitempty"`
}

// CloudsyncOnedriveListDrives0 defines model for cloudsync_onedrive_list_drives_0.
type CloudsyncOnedriveListDrives0 struct {
	ClientId     *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`
	Token        *string `json:"token,omitempty"`
}

// CloudsyncRestore1 defines model for cloudsync_restore_1.
type CloudsyncRestore1 struct {
	Description  *string                        `json:"description,omitempty"`
	Path         *string                        `json:"path,omitempty"`
	TransferMode *CloudsyncRestore1TransferMode `json:"transfer_mode,omitempty"`
}

// CloudsyncRestore1TransferMode defines model for CloudsyncRestore1.TransferMode.
type CloudsyncRestore1TransferMode string

// CloudsyncSync1 defines model for cloudsync_sync_1.
type CloudsyncSync1 struct {
	DryRun *bool `json:"dry_run,omitempty"`
}

// CloudsyncSyncOnetime defines model for cloudsync_sync_onetime.
type CloudsyncSyncOnetime struct {
	CloudSyncCreate      *CloudsyncSyncOnetime0 `json:"cloud_sync_create,omitempty"`
	CloudSyncSyncOptions *CloudsyncSyncOnetime1 `json:"cloud_sync_sync_options,omitempty"`
}

// CloudsyncSyncOnetime0 defines model for cloudsync_sync_onetime_0.
type CloudsyncSyncOnetime0 struct {
	Args               *string                         `json:"args,omitempty"`
	Attributes         *map[string]interface{}         `json:"attributes,omitempty"`
	Bwlimit            *[]map[string]interface{}       `json:"bwlimit,omitempty"`
	Credentials        *int                            `json:"credentials,omitempty"`
	Description        *string                         `json:"description,omitempty"`
	Direction          *CloudsyncSyncOnetime0Direction `json:"direction,omitempty"`
	Enabled            *bool                           `json:"enabled,omitempty"`
	Encryption         *bool                           `json:"encryption,omitempty"`
	EncryptionPassword *string                         `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                         `json:"encryption_salt,omitempty"`
	Exclude            *[]string                       `json:"exclude,omitempty"`
	FilenameEncryption *bool                           `json:"filename_encryption,omitempty"`
	FollowSymlinks     *bool                           `json:"follow_symlinks,omitempty"`
	Path               *string                         `json:"path,omitempty"`
	PostScript         *string                         `json:"post_script,omitempty"`
	PreScript          *string                         `json:"pre_script,omitempty"`
	Schedule           *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Snapshot     *bool                              `json:"snapshot,omitempty"`
	TransferMode *CloudsyncSyncOnetime0TransferMode `json:"transfer_mode,omitempty"`
	Transfers    *int                               `json:"transfers"`
}

// CloudsyncSyncOnetime0Direction defines model for CloudsyncSyncOnetime0.Direction.
type CloudsyncSyncOnetime0Direction string

// CloudsyncSyncOnetime0TransferMode defines model for CloudsyncSyncOnetime0.TransferMode.
type CloudsyncSyncOnetime0TransferMode string

// CloudsyncSyncOnetime1 defines model for cloudsync_sync_onetime_1.
type CloudsyncSyncOnetime1 struct {
	DryRun *bool `json:"dry_run,omitempty"`
}

// CloudsyncUpdate1 defines model for cloudsync_update_1.
type CloudsyncUpdate1 struct {
	Args               *string                    `json:"args,omitempty"`
	Attributes         *map[string]interface{}    `json:"attributes,omitempty"`
	Bwlimit            *[]map[string]interface{}  `json:"bwlimit,omitempty"`
	Credentials        *int                       `json:"credentials,omitempty"`
	Description        *string                    `json:"description,omitempty"`
	Direction          *CloudsyncUpdate1Direction `json:"direction,omitempty"`
	Enabled            *bool                      `json:"enabled,omitempty"`
	Encryption         *bool                      `json:"encryption,omitempty"`
	EncryptionPassword *string                    `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                    `json:"encryption_salt,omitempty"`
	Exclude            *[]string                  `json:"exclude,omitempty"`
	FilenameEncryption *bool                      `json:"filename_encryption,omitempty"`
	FollowSymlinks     *bool                      `json:"follow_symlinks,omitempty"`
	Path               *string                    `json:"path,omitempty"`
	PostScript         *string                    `json:"post_script,omitempty"`
	PreScript          *string                    `json:"pre_script,omitempty"`
	Schedule           *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Snapshot     *bool                         `json:"snapshot,omitempty"`
	TransferMode *CloudsyncUpdate1TransferMode `json:"transfer_mode,omitempty"`
	Transfers    *int                          `json:"transfers"`
}

// CloudsyncUpdate1Direction defines model for CloudsyncUpdate1.Direction.
type CloudsyncUpdate1Direction string

// CloudsyncUpdate1TransferMode defines model for CloudsyncUpdate1.TransferMode.
type CloudsyncUpdate1TransferMode string

// ConfigReset0 defines model for config_reset_0.
type ConfigReset0 struct {
	Reboot *bool `json:"reboot,omitempty"`
}

// CoreBulk defines model for core_bulk.
type CoreBulk struct {
	Description *CoreBulk2 `json:"description"`
	Method      *CoreBulk0 `json:"method,omitempty"`
	Params      *CoreBulk1 `json:"params,omitempty"`
}

// CoreBulk0 defines model for core_bulk_0.
type CoreBulk0 = string

// CoreBulk1 defines model for core_bulk_1.
type CoreBulk1 = []interface{}

// CoreBulk2 defines model for core_bulk_2.
type CoreBulk2 = string

// CoreDebug defines model for core_debug.
type CoreDebug struct {
	Engine  *CoreDebug0 `json:"engine,omitempty"`
	Options *CoreDebug1 `json:"options,omitempty"`
}

// CoreDebug0 defines model for core_debug_0.
type CoreDebug0 string

// CoreDebug1 defines model for core_debug_1.
type CoreDebug1 struct {
	BindAddress *string `json:"bind_address,omitempty"`
	BindPort    *int    `json:"bind_port,omitempty"`
	Host        *string `json:"host,omitempty"`
	LocalPath   *string `json:"local_path,omitempty"`
	Secret      *string `json:"secret,omitempty"`
	Threaded    *bool   `json:"threaded,omitempty"`
	WaitAttach  *bool   `json:"wait_attach,omitempty"`
}

// CoreDownload defines model for core_download.
type CoreDownload struct {
	Args     *CoreDownload1 `json:"args,omitempty"`
	Buffered *CoreDownload3 `json:"buffered,omitempty"`
	Filename *CoreDownload2 `json:"filename,omitempty"`
	Method   *CoreDownload0 `json:"method,omitempty"`
}

// CoreDownload0 defines model for core_download_0.
type CoreDownload0 = string

// CoreDownload1 defines model for core_download_1.
type CoreDownload1 = []interface{}

// CoreDownload2 defines model for core_download_2.
type CoreDownload2 = string

// CoreDownload3 defines model for core_download_3.
type CoreDownload3 = bool

// CoreGetMethods0 defines model for core_get_methods_0.
type CoreGetMethods0 = string

// CoreJobAbort0 defines model for core_job_abort_0.
type CoreJobAbort0 = int

// CoreJobUpdate defines model for core_job_update.
type CoreJobUpdate struct {
	Id        *CoreJobUpdate0 `json:"id,omitempty"`
	JobUpdate *CoreJobUpdate1 `json:"job-update,omitempty"`
}

// CoreJobUpdate0 defines model for core_job_update_0.
type CoreJobUpdate0 = int

// CoreJobUpdate1 defines model for core_job_update_1.
type CoreJobUpdate1 struct {
	Progress *map[string]interface{} `json:"progress,omitempty"`
}

// CoreJobWait0 defines model for core_job_wait_0.
type CoreJobWait0 = int

// CorePingRemote0 defines model for core_ping_remote_0.
type CorePingRemote0 struct {
	Hostname *string              `json:"hostname,omitempty"`
	Timeout  *int                 `json:"timeout,omitempty"`
	Type     *CorePingRemote0Type `json:"type,omitempty"`
}

// CorePingRemote0Type defines model for CorePingRemote0.Type.
type CorePingRemote0Type string

// CoreResizeShell defines model for core_resize_shell.
type CoreResizeShell struct {
	Cols *CoreResizeShell1 `json:"cols,omitempty"`
	Id   *CoreResizeShell0 `json:"id,omitempty"`
	Rows *CoreResizeShell2 `json:"rows,omitempty"`
}

// CoreResizeShell0 defines model for core_resize_shell_0.
type CoreResizeShell0 = string

// CoreResizeShell1 defines model for core_resize_shell_1.
type CoreResizeShell1 = int

// CoreResizeShell2 defines model for core_resize_shell_2.
type CoreResizeShell2 = int

// CronjobCreate0 defines model for cronjob_create_0.
type CronjobCreate0 struct {
	Command     *string `json:"command,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Schedule    *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Stderr *bool   `json:"stderr,omitempty"`
	Stdout *bool   `json:"stdout,omitempty"`
	User   *string `json:"user,omitempty"`
}

// CronjobRun defines model for cronjob_run.
type CronjobRun struct {
	Id           *CronjobRun0 `json:"id,omitempty"`
	SkipDisabled *CronjobRun1 `json:"skip_disabled,omitempty"`
}

// CronjobRun0 defines model for cronjob_run_0.
type CronjobRun0 = int

// CronjobRun1 defines model for cronjob_run_1.
type CronjobRun1 = bool

// CronjobUpdate1 defines model for cronjob_update_1.
type CronjobUpdate1 struct {
	Command     *string `json:"command,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Schedule    *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Stderr *bool   `json:"stderr,omitempty"`
	Stdout *bool   `json:"stdout,omitempty"`
	User   *string `json:"user,omitempty"`
}

// DeviceGetInfo0 defines model for device_get_info_0.
type DeviceGetInfo0 string

// DiskGetEncrypted0 defines model for disk_get_encrypted_0.
type DiskGetEncrypted0 struct {
	Unused *bool `json:"unused,omitempty"`
}

// DiskGetUnused0 defines model for disk_get_unused_0.
type DiskGetUnused0 = bool

// DiskOverprovision defines model for disk_overprovision.
type DiskOverprovision struct {
	Devname *DiskOverprovision0 `json:"devname,omitempty"`
	Size    *DiskOverprovision1 `json:"size,omitempty"`
}

// DiskOverprovision0 defines model for disk_overprovision_0.
type DiskOverprovision0 = string

// DiskOverprovision1 defines model for disk_overprovision_1.
type DiskOverprovision1 = int

// DiskSmartAttributes0 defines model for disk_smart_attributes_0.
type DiskSmartAttributes0 = string

// DiskSpindown0 defines model for disk_spindown_0.
type DiskSpindown0 = string

// DiskTemperature defines model for disk_temperature.
type DiskTemperature struct {
	Name      *DiskTemperature0 `json:"name,omitempty"`
	Powermode *DiskTemperature1 `json:"powermode,omitempty"`
}

// DiskTemperature0 defines model for disk_temperature_0.
type DiskTemperature0 = string

// DiskTemperature1 defines model for disk_temperature_1.
type DiskTemperature1 string

// DiskTemperatures defines model for disk_temperatures.
type DiskTemperatures struct {
	Names     *DiskTemperatures0 `json:"names,omitempty"`
	Powermode *DiskTemperatures1 `json:"powermode,omitempty"`
}

// DiskTemperatures0 defines model for disk_temperatures_0.
type DiskTemperatures0 = []string

// DiskTemperatures1 defines model for disk_temperatures_1.
type DiskTemperatures1 string

// DiskUnoverprovision0 defines model for disk_unoverprovision_0.
type DiskUnoverprovision0 = string

// DiskUpdate1 defines model for disk_update_1.
type DiskUpdate1 struct {
	Acousticlevel *DiskUpdate1Acousticlevel `json:"acousticlevel,omitempty"`
	Advpowermgmt  *DiskUpdate1Advpowermgmt  `json:"advpowermgmt,omitempty"`
	Critical      *int                      `json:"critical"`
	Description   *string                   `json:"description,omitempty"`
	Difference    *int                      `json:"difference"`
	Enclosure     *struct {
		Number *int `json:"number,omitempty"`
		Slot   *int `json:"slot,omitempty"`
	} `json:"enclosure,omitempty"`
	Hddstandby      *DiskUpdate1Hddstandby `json:"hddstandby,omitempty"`
	HddstandbyForce *bool                  `json:"hddstandby_force,omitempty"`
	Informational   *int                   `json:"informational"`
	Passwd          *string                `json:"passwd,omitempty"`
	Smartoptions    *string                `json:"smartoptions,omitempty"`
	Togglesmart     *bool                  `json:"togglesmart,omitempty"`
}

// DiskUpdate1Acousticlevel defines model for DiskUpdate1.Acousticlevel.
type DiskUpdate1Acousticlevel string

// DiskUpdate1Advpowermgmt defines model for DiskUpdate1.Advpowermgmt.
type DiskUpdate1Advpowermgmt string

// DiskUpdate1Hddstandby defines model for DiskUpdate1.Hddstandby.
type DiskUpdate1Hddstandby string

// DiskWipe defines model for disk_wipe.
type DiskWipe struct {
	Dev                *DiskWipe0 `json:"dev,omitempty"`
	Mode               *DiskWipe1 `json:"mode,omitempty"`
	SwapRemovalOptions *DiskWipe3 `json:"swap_removal_options,omitempty"`
	Synccache          *DiskWipe2 `json:"synccache,omitempty"`
}

// DiskWipe0 defines model for disk_wipe_0.
type DiskWipe0 = string

// DiskWipe1 defines model for disk_wipe_1.
type DiskWipe1 string

// DiskWipe2 defines model for disk_wipe_2.
type DiskWipe2 = bool

// DiskWipe3 defines model for disk_wipe_3.
type DiskWipe3 struct {
	ConfigureSwap *bool `json:"configure_swap,omitempty"`
}

// DyndnsUpdate0 defines model for dyndns_update_0.
type DyndnsUpdate0 struct {
	CheckipPath      *string   `json:"checkip_path,omitempty"`
	CheckipServer    *string   `json:"checkip_server,omitempty"`
	CheckipSsl       *bool     `json:"checkip_ssl,omitempty"`
	CustomDdnsPath   *string   `json:"custom_ddns_path,omitempty"`
	CustomDdnsServer *string   `json:"custom_ddns_server,omitempty"`
	Domain           *[]string `json:"domain,omitempty"`
	Password         *string   `json:"password,omitempty"`
	Period           *int      `json:"period,omitempty"`
	Provider         *string   `json:"provider,omitempty"`
	Ssl              *bool     `json:"ssl,omitempty"`
	Username         *string   `json:"username,omitempty"`
}

// EnclosureSetSlotStatus defines model for enclosure_set_slot_status.
type EnclosureSetSlotStatus struct {
	EnclosureId *EnclosureSetSlotStatus0 `json:"enclosure_id,omitempty"`
	Slot        *EnclosureSetSlotStatus1 `json:"slot,omitempty"`
	Status      *EnclosureSetSlotStatus2 `json:"status,omitempty"`
}

// EnclosureSetSlotStatus0 defines model for enclosure_set_slot_status_0.
type EnclosureSetSlotStatus0 = string

// EnclosureSetSlotStatus1 defines model for enclosure_set_slot_status_1.
type EnclosureSetSlotStatus1 = int

// EnclosureSetSlotStatus2 defines model for enclosure_set_slot_status_2.
type EnclosureSetSlotStatus2 string

// EnclosureUpdate1 defines model for enclosure_update_1.
type EnclosureUpdate1 struct {
	Label *string `json:"label,omitempty"`
}

// FailoverCallRemote defines model for failover_call_remote.
type FailoverCallRemote struct {
	Args    *FailoverCallRemote1 `json:"args,omitempty"`
	Method  *FailoverCallRemote0 `json:"method,omitempty"`
	Options *FailoverCallRemote2 `json:"options,omitempty"`
}

// FailoverCallRemote0 defines model for failover_call_remote_0.
type FailoverCallRemote0 = string

// FailoverCallRemote1 defines model for failover_call_remote_1.
type FailoverCallRemote1 = []interface{}

// FailoverCallRemote2 defines model for failover_call_remote_2.
type FailoverCallRemote2 struct {
	Callback  *FailoverCallRemote2_Callback `json:"callback,omitempty"`
	Job       *bool                         `json:"job,omitempty"`
	JobReturn *bool                         `json:"job_return"`
	Timeout   *int                          `json:"timeout,omitempty"`
}

// FailoverCallRemote2Callback0 defines model for .
type FailoverCallRemote2Callback0 = string

// FailoverCallRemote2Callback1 defines model for .
type FailoverCallRemote2Callback1 = int

// FailoverCallRemote2Callback2 defines model for .
type FailoverCallRemote2Callback2 = bool

// FailoverCallRemote2Callback3 defines model for .
type FailoverCallRemote2Callback3 = map[string]interface{}

// FailoverCallRemote2Callback4 defines model for .
type FailoverCallRemote2Callback4 = []interface{}

// FailoverCallRemote2_Callback defines model for FailoverCallRemote2.Callback.
type FailoverCallRemote2_Callback struct {
	union json.RawMessage
}

// FailoverControl defines model for failover_control.
type FailoverControl struct {
	Action  *FailoverControl0 `json:"action,omitempty"`
	Options *FailoverControl1 `json:"options,omitempty"`
}

// FailoverControl0 defines model for failover_control_0.
type FailoverControl0 string

// FailoverControl1 defines model for failover_control_1.
type FailoverControl1 struct {
	Active *bool `json:"active,omitempty"`
}

// FailoverSyncToPeer0 defines model for failover_sync_to_peer_0.
type FailoverSyncToPeer0 struct {
	Reboot *bool `json:"reboot,omitempty"`
}

// FailoverUnlock0 defines model for failover_unlock_0.
type FailoverUnlock0 struct {
	Datasets *[]map[string]interface{} `json:"datasets,omitempty"`
	Pools    *[]map[string]interface{} `json:"pools,omitempty"`
}

// FailoverUpdate0 defines model for failover_update_0.
type FailoverUpdate0 struct {
	Disabled *bool `json:"disabled,omitempty"`
	Master   *bool `json:"master"`
	Timeout  *int  `json:"timeout,omitempty"`
}

// FailoverUpgrade0 defines model for failover_upgrade_0.
type FailoverUpgrade0 struct {
	Train *string `json:"train,omitempty"`
}

// FcportUpdate1 defines model for fcport_update_1.
type FcportUpdate1 struct {
	Mode   *FcportUpdate1Mode `json:"mode,omitempty"`
	Target *int               `json:"target"`
}

// FcportUpdate1Mode defines model for FcportUpdate1.Mode.
type FcportUpdate1Mode string

// FilesystemAclIsTrivial0 defines model for filesystem_acl_is_trivial_0.
type FilesystemAclIsTrivial0 = string

// FilesystemChown0 defines model for filesystem_chown_0.
type FilesystemChown0 struct {
	Gid     *int `json:"gid"`
	Options *struct {
		Recursive *bool `json:"recursive,omitempty"`
		Traverse  *bool `json:"traverse,omitempty"`
	} `json:"options,omitempty"`
	Path *string `json:"path,omitempty"`
	Uid  *int    `json:"uid"`
}

// FilesystemGetDefaultAcl defines model for filesystem_get_default_acl.
type FilesystemGetDefaultAcl struct {
	AclType   *FilesystemGetDefaultAcl0 `json:"acl_type,omitempty"`
	ShareType *FilesystemGetDefaultAcl1 `json:"share_type,omitempty"`
}

// FilesystemGetDefaultAcl0 defines model for filesystem_get_default_acl_0.
type FilesystemGetDefaultAcl0 string

// FilesystemGetDefaultAcl1 defines model for filesystem_get_default_acl_1.
type FilesystemGetDefaultAcl1 string

// FilesystemGetacl defines model for filesystem_getacl.
type FilesystemGetacl struct {
	Path       *FilesystemGetacl0 `json:"path,omitempty"`
	Simplified *FilesystemGetacl1 `json:"simplified,omitempty"`
}

// FilesystemGetacl0 defines model for filesystem_getacl_0.
type FilesystemGetacl0 = string

// FilesystemGetacl1 defines model for filesystem_getacl_1.
type FilesystemGetacl1 = bool

// FilesystemListdir defines model for filesystem_listdir.
type FilesystemListdir struct {
	Path         *FilesystemListdir0 `json:"path,omitempty"`
	QueryFilters *FilesystemListdir1 `json:"query-filters,omitempty"`
	QueryOptions *FilesystemListdir2 `json:"query-options,omitempty"`
}

// FilesystemListdir0 defines model for filesystem_listdir_0.
type FilesystemListdir0 = string

// FilesystemListdir1 defines model for filesystem_listdir_1.
type FilesystemListdir1 = []interface{}

// FilesystemListdir2 defines model for filesystem_listdir_2.
type FilesystemListdir2 struct {
	Count           *bool                   `json:"count,omitempty"`
	Extend          *string                 `json:"extend"`
	ExtendContext   *string                 `json:"extend_context"`
	Extra           *map[string]interface{} `json:"extra,omitempty"`
	ForceSqlFilters *bool                   `json:"force_sql_filters,omitempty"`
	Get             *bool                   `json:"get,omitempty"`
	Limit           *int                    `json:"limit,omitempty"`
	Offset          *int                    `json:"offset,omitempty"`
	OrderBy         *[]interface{}          `json:"order_by,omitempty"`
	Prefix          *string                 `json:"prefix"`
	Relationships   *bool                   `json:"relationships,omitempty"`
	Select          *[]interface{}          `json:"select,omitempty"`
}

// FilesystemSetacl0 defines model for filesystem_setacl_0.
type FilesystemSetacl0 struct {
	Acltype    *FilesystemSetacl0Acltype      `json:"acltype,omitempty"`
	Dacl       *[]FilesystemSetacl0_Dacl_Item `json:"dacl,omitempty"`
	Gid        *int                           `json:"gid"`
	Nfs41Flags *struct {
		Autoinherit *bool `json:"autoinherit,omitempty"`
		Protected   *bool `json:"protected,omitempty"`
	} `json:"nfs41_flags,omitempty"`
	Options *struct {
		Canonicalize *bool `json:"canonicalize,omitempty"`
		Recursive    *bool `json:"recursive,omitempty"`
		Stripacl     *bool `json:"stripacl,omitempty"`
		Traverse     *bool `json:"traverse,omitempty"`
	} `json:"options,omitempty"`
	Path *string `json:"path,omitempty"`
	Uid  *int    `json:"uid"`
}

// FilesystemSetacl0Acltype defines model for FilesystemSetacl0.Acltype.
type FilesystemSetacl0Acltype string

// FilesystemSetacl0Dacl0 defines model for .
type FilesystemSetacl0Dacl0 = map[string]interface{}

// FilesystemSetacl0Dacl1 defines model for .
type FilesystemSetacl0Dacl1 = map[string]interface{}

// FilesystemSetacl0_Dacl_Item defines model for filesystem_setacl_0.dacl.Item.
type FilesystemSetacl0_Dacl_Item struct {
	union json.RawMessage
}

// FilesystemSetperm0 defines model for filesystem_setperm_0.
type FilesystemSetperm0 struct {
	Gid     *int    `json:"gid"`
	Mode    *string `json:"mode"`
	Options *struct {
		Recursive *bool `json:"recursive,omitempty"`
		Stripacl  *bool `json:"stripacl,omitempty"`
		Traverse  *bool `json:"traverse,omitempty"`
	} `json:"options,omitempty"`
	Path *string `json:"path,omitempty"`
	Uid  *int    `json:"uid"`
}

// FilesystemStat0 defines model for filesystem_stat_0.
type FilesystemStat0 = string

// FilesystemStatfs0 defines model for filesystem_statfs_0.
type FilesystemStatfs0 = string

// FtpUpdate0 defines model for ftp_update_0.
type FtpUpdate0 struct {
	Anonpath                        *string              `json:"anonpath"`
	Anonuserbw                      *int                 `json:"anonuserbw,omitempty"`
	Anonuserdlbw                    *int                 `json:"anonuserdlbw,omitempty"`
	Banner                          *string              `json:"banner,omitempty"`
	Clients                         *int                 `json:"clients,omitempty"`
	Defaultroot                     *bool                `json:"defaultroot,omitempty"`
	Dirmask                         *string              `json:"dirmask,omitempty"`
	Filemask                        *string              `json:"filemask,omitempty"`
	Fxp                             *bool                `json:"fxp,omitempty"`
	Ident                           *bool                `json:"ident,omitempty"`
	Ipconnections                   *int                 `json:"ipconnections,omitempty"`
	Localuserbw                     *int                 `json:"localuserbw,omitempty"`
	Localuserdlbw                   *int                 `json:"localuserdlbw,omitempty"`
	Loginattempt                    *int                 `json:"loginattempt,omitempty"`
	Masqaddress                     *string              `json:"masqaddress,omitempty"`
	Onlyanonymous                   *bool                `json:"onlyanonymous,omitempty"`
	Onlylocal                       *bool                `json:"onlylocal,omitempty"`
	Options                         *string              `json:"options,omitempty"`
	Passiveportsmax                 *int                 `json:"passiveportsmax,omitempty"`
	Passiveportsmin                 *int                 `json:"passiveportsmin,omitempty"`
	Port                            *int                 `json:"port,omitempty"`
	Resume                          *bool                `json:"resume,omitempty"`
	Reversedns                      *bool                `json:"reversedns,omitempty"`
	Rootlogin                       *bool                `json:"rootlogin,omitempty"`
	SsltlsCertificate               *int                 `json:"ssltls_certificate"`
	Timeout                         *int                 `json:"timeout,omitempty"`
	Tls                             *bool                `json:"tls,omitempty"`
	TlsOptAllowClientRenegotiations *bool                `json:"tls_opt_allow_client_renegotiations,omitempty"`
	TlsOptAllowDotLogin             *bool                `json:"tls_opt_allow_dot_login,omitempty"`
	TlsOptAllowPerUser              *bool                `json:"tls_opt_allow_per_user,omitempty"`
	TlsOptCommonNameRequired        *bool                `json:"tls_opt_common_name_required,omitempty"`
	TlsOptDnsNameRequired           *bool                `json:"tls_opt_dns_name_required,omitempty"`
	TlsOptEnableDiags               *bool                `json:"tls_opt_enable_diags,omitempty"`
	TlsOptExportCertData            *bool                `json:"tls_opt_export_cert_data,omitempty"`
	TlsOptIpAddressRequired         *bool                `json:"tls_opt_ip_address_required,omitempty"`
	TlsOptNoCertRequest             *bool                `json:"tls_opt_no_cert_request,omitempty"`
	TlsOptNoEmptyFragments          *bool                `json:"tls_opt_no_empty_fragments,omitempty"`
	TlsOptNoSessionReuseRequired    *bool                `json:"tls_opt_no_session_reuse_required,omitempty"`
	TlsOptStdenvvars                *bool                `json:"tls_opt_stdenvvars,omitempty"`
	TlsPolicy                       *FtpUpdate0TlsPolicy `json:"tls_policy,omitempty"`
}

// FtpUpdate0TlsPolicy defines model for FtpUpdate0.TlsPolicy.
type FtpUpdate0TlsPolicy string

// GroupCreate0 defines model for group_create_0.
type GroupCreate0 struct {
	AllowDuplicateGid *bool     `json:"allow_duplicate_gid,omitempty"`
	Gid               *int      `json:"gid,omitempty"`
	Name              *string   `json:"name,omitempty"`
	Smb               *bool     `json:"smb,omitempty"`
	Sudo              *bool     `json:"sudo,omitempty"`
	SudoCommands      *[]string `json:"sudo_commands,omitempty"`
	SudoNopasswd      *bool     `json:"sudo_nopasswd,omitempty"`
	Users             *[]int    `json:"users,omitempty"`
}

// GroupDelete1 defines model for group_delete_1.
type GroupDelete1 struct {
	DeleteUsers *bool `json:"delete_users,omitempty"`
}

// GroupGetGroupObj0 defines model for group_get_group_obj_0.
type GroupGetGroupObj0 struct {
	Gid       *int    `json:"gid,omitempty"`
	Groupname *string `json:"groupname,omitempty"`
}

// GroupUpdate1 defines model for group_update_1.
type GroupUpdate1 struct {
	AllowDuplicateGid *bool     `json:"allow_duplicate_gid,omitempty"`
	Gid               *int      `json:"gid,omitempty"`
	Name              *string   `json:"name,omitempty"`
	Smb               *bool     `json:"smb,omitempty"`
	Sudo              *bool     `json:"sudo,omitempty"`
	SudoCommands      *[]string `json:"sudo_commands,omitempty"`
	SudoNopasswd      *bool     `json:"sudo_nopasswd,omitempty"`
	Users             *[]int    `json:"users,omitempty"`
}

// IdmapCreate0 defines model for idmap_create_0.
type IdmapCreate0 struct {
	Certificate   *int                      `json:"certificate"`
	DnsDomainName *string                   `json:"dns_domain_name,omitempty"`
	IdmapBackend  *IdmapCreate0IdmapBackend `json:"idmap_backend,omitempty"`
	Name          *string                   `json:"name,omitempty"`
	Options       *struct {
		BindPathGroup      *string                           `json:"bind_path_group,omitempty"`
		BindPathUser       *string                           `json:"bind_path_user,omitempty"`
		CnRealm            *string                           `json:"cn_realm,omitempty"`
		IgnoreBuiltin      *bool                             `json:"ignore_builtin,omitempty"`
		LdapBaseDn         *string                           `json:"ldap_base_dn,omitempty"`
		LdapDomain         *string                           `json:"ldap_domain,omitempty"`
		LdapRealm          *bool                             `json:"ldap_realm,omitempty"`
		LdapServer         *string                           `json:"ldap_server,omitempty"`
		LdapUrl            *string                           `json:"ldap_url,omitempty"`
		LdapUserDn         *string                           `json:"ldap_user_dn,omitempty"`
		LdapUserDnPassword *string                           `json:"ldap_user_dn_password,omitempty"`
		LinkedService      *IdmapCreate0OptionsLinkedService `json:"linked_service,omitempty"`
		Rangesize          *int                              `json:"rangesize,omitempty"`
		Readonly           *bool                             `json:"readonly,omitempty"`
		SchemaMode         *IdmapCreate0OptionsSchemaMode    `json:"schema_mode,omitempty"`
		Ssl                *IdmapCreate0OptionsSsl           `json:"ssl,omitempty"`
		SssdCompat         *bool                             `json:"sssd_compat,omitempty"`
		UnixNssInfo        *bool                             `json:"unix_nss_info,omitempty"`
		UnixPrimaryGroup   *bool                             `json:"unix_primary_group,omitempty"`
		UserCn             *bool                             `json:"user_cn,omitempty"`
	} `json:"options,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// IdmapCreate0IdmapBackend defines model for IdmapCreate0.IdmapBackend.
type IdmapCreate0IdmapBackend string

// IdmapCreate0OptionsLinkedService defines model for IdmapCreate0.Options.LinkedService.
type IdmapCreate0OptionsLinkedService string

// IdmapCreate0OptionsSchemaMode defines model for IdmapCreate0.Options.SchemaMode.
type IdmapCreate0OptionsSchemaMode string

// IdmapCreate0OptionsSsl defines model for IdmapCreate0.Options.Ssl.
type IdmapCreate0OptionsSsl string

// IdmapOptionsChoices0 defines model for idmap_options_choices_0.
type IdmapOptionsChoices0 string

// IdmapUpdate1 defines model for idmap_update_1.
type IdmapUpdate1 struct {
	Certificate   *int                      `json:"certificate"`
	DnsDomainName *string                   `json:"dns_domain_name,omitempty"`
	IdmapBackend  *IdmapUpdate1IdmapBackend `json:"idmap_backend,omitempty"`
	Name          *string                   `json:"name,omitempty"`
	Options       *struct {
		BindPathGroup      *string                           `json:"bind_path_group,omitempty"`
		BindPathUser       *string                           `json:"bind_path_user,omitempty"`
		CnRealm            *string                           `json:"cn_realm,omitempty"`
		IgnoreBuiltin      *bool                             `json:"ignore_builtin,omitempty"`
		LdapBaseDn         *string                           `json:"ldap_base_dn,omitempty"`
		LdapDomain         *string                           `json:"ldap_domain,omitempty"`
		LdapRealm          *bool                             `json:"ldap_realm,omitempty"`
		LdapServer         *string                           `json:"ldap_server,omitempty"`
		LdapUrl            *string                           `json:"ldap_url,omitempty"`
		LdapUserDn         *string                           `json:"ldap_user_dn,omitempty"`
		LdapUserDnPassword *string                           `json:"ldap_user_dn_password,omitempty"`
		LinkedService      *IdmapUpdate1OptionsLinkedService `json:"linked_service,omitempty"`
		Rangesize          *int                              `json:"rangesize,omitempty"`
		Readonly           *bool                             `json:"readonly,omitempty"`
		SchemaMode         *IdmapUpdate1OptionsSchemaMode    `json:"schema_mode,omitempty"`
		Ssl                *IdmapUpdate1OptionsSsl           `json:"ssl,omitempty"`
		SssdCompat         *bool                             `json:"sssd_compat,omitempty"`
		UnixNssInfo        *bool                             `json:"unix_nss_info,omitempty"`
		UnixPrimaryGroup   *bool                             `json:"unix_primary_group,omitempty"`
		UserCn             *bool                             `json:"user_cn,omitempty"`
	} `json:"options,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// IdmapUpdate1IdmapBackend defines model for IdmapUpdate1.IdmapBackend.
type IdmapUpdate1IdmapBackend string

// IdmapUpdate1OptionsLinkedService defines model for IdmapUpdate1.Options.LinkedService.
type IdmapUpdate1OptionsLinkedService string

// IdmapUpdate1OptionsSchemaMode defines model for IdmapUpdate1.Options.SchemaMode.
type IdmapUpdate1OptionsSchemaMode string

// IdmapUpdate1OptionsSsl defines model for IdmapUpdate1.Options.Ssl.
type IdmapUpdate1OptionsSsl string

// InitshutdownscriptCreate0 defines model for initshutdownscript_create_0.
type InitshutdownscriptCreate0 struct {
	Command    *string                        `json:"command"`
	Comment    *string                        `json:"comment,omitempty"`
	Enabled    *bool                          `json:"enabled,omitempty"`
	Script     *string                        `json:"script"`
	ScriptText *string                        `json:"script_text"`
	Timeout    *int                           `json:"timeout,omitempty"`
	Type       *InitshutdownscriptCreate0Type `json:"type,omitempty"`
	When       *InitshutdownscriptCreate0When `json:"when,omitempty"`
}

// InitshutdownscriptCreate0Type defines model for InitshutdownscriptCreate0.Type.
type InitshutdownscriptCreate0Type string

// InitshutdownscriptCreate0When defines model for InitshutdownscriptCreate0.When.
type InitshutdownscriptCreate0When string

// InitshutdownscriptUpdate1 defines model for initshutdownscript_update_1.
type InitshutdownscriptUpdate1 struct {
	Command    *string                        `json:"command"`
	Comment    *string                        `json:"comment,omitempty"`
	Enabled    *bool                          `json:"enabled,omitempty"`
	Script     *string                        `json:"script"`
	ScriptText *string                        `json:"script_text"`
	Timeout    *int                           `json:"timeout,omitempty"`
	Type       *InitshutdownscriptUpdate1Type `json:"type,omitempty"`
	When       *InitshutdownscriptUpdate1When `json:"when,omitempty"`
}

// InitshutdownscriptUpdate1Type defines model for InitshutdownscriptUpdate1.Type.
type InitshutdownscriptUpdate1Type string

// InitshutdownscriptUpdate1When defines model for InitshutdownscriptUpdate1.When.
type InitshutdownscriptUpdate1When string

// InterfaceBridgeMembersChoices0 defines model for interface_bridge_members_choices_0.
type InterfaceBridgeMembersChoices0 = string

// InterfaceChoices0 defines model for interface_choices_0.
type InterfaceChoices0 struct {
	BridgeMembers *bool          `json:"bridge_members,omitempty"`
	Exclude       *[]interface{} `json:"exclude,omitempty"`
	ExcludeTypes  *[]string      `json:"exclude_types,omitempty"`
	Include       *[]interface{} `json:"include,omitempty"`
	LagPorts      *bool          `json:"lag_ports,omitempty"`
	VlanParent    *bool          `json:"vlan_parent,omitempty"`
}

// InterfaceCommit0 defines model for interface_commit_0.
type InterfaceCommit0 struct {
	CheckinTimeout *int  `json:"checkin_timeout,omitempty"`
	Rollback       *bool `json:"rollback,omitempty"`
}

// InterfaceCreate0 defines model for interface_create_0.
type InterfaceCreate0 struct {
	Aliases                    *[]map[string]interface{}    `json:"aliases,omitempty"`
	BridgeMembers              *[]interface{}               `json:"bridge_members,omitempty"`
	Description                *string                      `json:"description"`
	DisableOffloadCapabilities *bool                        `json:"disable_offload_capabilities,omitempty"`
	FailoverAliases            *[]map[string]interface{}    `json:"failover_aliases,omitempty"`
	FailoverCritical           *bool                        `json:"failover_critical,omitempty"`
	FailoverGroup              *int                         `json:"failover_group"`
	FailoverVhid               *int                         `json:"failover_vhid"`
	FailoverVirtualAliases     *[]map[string]interface{}    `json:"failover_virtual_aliases,omitempty"`
	Ipv4Dhcp                   *bool                        `json:"ipv4_dhcp,omitempty"`
	Ipv6Auto                   *bool                        `json:"ipv6_auto,omitempty"`
	LagPorts                   *[]string                    `json:"lag_ports,omitempty"`
	LagProtocol                *InterfaceCreate0LagProtocol `json:"lag_protocol,omitempty"`
	Mtu                        *int                         `json:"mtu"`
	Name                       *string                      `json:"name,omitempty"`
	Options                    *string                      `json:"options,omitempty"`
	Type                       *InterfaceCreate0Type        `json:"type,omitempty"`
	VlanParentInterface        *string                      `json:"vlan_parent_interface,omitempty"`
	VlanPcp                    *int                         `json:"vlan_pcp"`
	VlanTag                    *int                         `json:"vlan_tag,omitempty"`
}

// InterfaceCreate0LagProtocol defines model for InterfaceCreate0.LagProtocol.
type InterfaceCreate0LagProtocol string

// InterfaceCreate0Type defines model for InterfaceCreate0.Type.
type InterfaceCreate0Type string

// InterfaceIpInUse0 defines model for interface_ip_in_use_0.
type InterfaceIpInUse0 struct {
	Any           *bool `json:"any,omitempty"`
	Ipv4          *bool `json:"ipv4,omitempty"`
	Ipv6          *bool `json:"ipv6,omitempty"`
	Ipv6LinkLocal *bool `json:"ipv6_link_local,omitempty"`
	Loopback      *bool `json:"loopback,omitempty"`
	Static        *bool `json:"static,omitempty"`
}

// InterfaceLagPortsChoices0 defines model for interface_lag_ports_choices_0.
type InterfaceLagPortsChoices0 = string

// InterfaceUpdate1 defines model for interface_update_1.
type InterfaceUpdate1 struct {
	Aliases                    *[]map[string]interface{}    `json:"aliases,omitempty"`
	BridgeMembers              *[]interface{}               `json:"bridge_members,omitempty"`
	Description                *string                      `json:"description"`
	DisableOffloadCapabilities *bool                        `json:"disable_offload_capabilities,omitempty"`
	FailoverAliases            *[]map[string]interface{}    `json:"failover_aliases,omitempty"`
	FailoverCritical           *bool                        `json:"failover_critical,omitempty"`
	FailoverGroup              *int                         `json:"failover_group"`
	FailoverVhid               *int                         `json:"failover_vhid"`
	FailoverVirtualAliases     *[]map[string]interface{}    `json:"failover_virtual_aliases,omitempty"`
	Ipv4Dhcp                   *bool                        `json:"ipv4_dhcp,omitempty"`
	Ipv6Auto                   *bool                        `json:"ipv6_auto,omitempty"`
	LagPorts                   *[]string                    `json:"lag_ports,omitempty"`
	LagProtocol                *InterfaceUpdate1LagProtocol `json:"lag_protocol,omitempty"`
	Mtu                        *int                         `json:"mtu"`
	Name                       *string                      `json:"name,omitempty"`
	Options                    *string                      `json:"options,omitempty"`
	VlanParentInterface        *string                      `json:"vlan_parent_interface,omitempty"`
	VlanPcp                    *int                         `json:"vlan_pcp"`
	VlanTag                    *int                         `json:"vlan_tag,omitempty"`
}

// InterfaceUpdate1LagProtocol defines model for InterfaceUpdate1.LagProtocol.
type InterfaceUpdate1LagProtocol string

// IpmiIdentify0 defines model for ipmi_identify_0.
type IpmiIdentify0 struct {
	Force   *bool `json:"force,omitempty"`
	Seconds *int  `json:"seconds,omitempty"`
}

// IpmiUpdate1 defines model for ipmi_update_1.
type IpmiUpdate1 struct {
	Dhcp      *bool   `json:"dhcp,omitempty"`
	Gateway   *string `json:"gateway,omitempty"`
	Ipaddress *string `json:"ipaddress,omitempty"`
	Netmask   *string `json:"netmask,omitempty"`
	Password  *string `json:"password,omitempty"`
	Vlan      *int    `json:"vlan"`
}

// IscsiAuthCreate0 defines model for iscsi_auth_create_0.
type IscsiAuthCreate0 struct {
	Peersecret *string `json:"peersecret,omitempty"`
	Peeruser   *string `json:"peeruser,omitempty"`
	Secret     *string `json:"secret,omitempty"`
	Tag        *int    `json:"tag,omitempty"`
	User       *string `json:"user,omitempty"`
}

// IscsiAuthUpdate1 defines model for iscsi_auth_update_1.
type IscsiAuthUpdate1 struct {
	Peersecret *string `json:"peersecret,omitempty"`
	Peeruser   *string `json:"peeruser,omitempty"`
	Secret     *string `json:"secret,omitempty"`
	Tag        *int    `json:"tag,omitempty"`
	User       *string `json:"user,omitempty"`
}

// IscsiExtentCreate0 defines model for iscsi_extent_create_0.
type IscsiExtentCreate0 struct {
	AvailThreshold *int                    `json:"avail_threshold"`
	Blocksize      *int                    `json:"blocksize,omitempty"`
	Comment        *string                 `json:"comment,omitempty"`
	Disk           *string                 `json:"disk"`
	Enabled        *bool                   `json:"enabled,omitempty"`
	Filesize       *int                    `json:"filesize,omitempty"`
	InsecureTpc    *bool                   `json:"insecure_tpc,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	Path           *string                 `json:"path"`
	Pblocksize     *bool                   `json:"pblocksize,omitempty"`
	Ro             *bool                   `json:"ro,omitempty"`
	Rpm            *IscsiExtentCreate0Rpm  `json:"rpm,omitempty"`
	Serial         *string                 `json:"serial"`
	Type           *IscsiExtentCreate0Type `json:"type,omitempty"`
	Xen            *bool                   `json:"xen,omitempty"`
}

// IscsiExtentCreate0Rpm defines model for IscsiExtentCreate0.Rpm.
type IscsiExtentCreate0Rpm string

// IscsiExtentCreate0Type defines model for IscsiExtentCreate0.Type.
type IscsiExtentCreate0Type string

// IscsiExtentDelete defines model for iscsi_extent_delete.
type IscsiExtentDelete struct {
	Force  *IscsiExtentDelete2 `json:"force,omitempty"`
	Remove *IscsiExtentDelete1 `json:"remove,omitempty"`
}

// IscsiExtentDelete1 defines model for iscsi_extent_delete_1.
type IscsiExtentDelete1 = bool

// IscsiExtentDelete2 defines model for iscsi_extent_delete_2.
type IscsiExtentDelete2 = bool

// IscsiExtentDiskChoices0 defines model for iscsi_extent_disk_choices_0.
type IscsiExtentDiskChoices0 = []interface{}

// IscsiExtentUpdate1 defines model for iscsi_extent_update_1.
type IscsiExtentUpdate1 struct {
	AvailThreshold *int                    `json:"avail_threshold"`
	Blocksize      *int                    `json:"blocksize,omitempty"`
	Comment        *string                 `json:"comment,omitempty"`
	Disk           *string                 `json:"disk"`
	Enabled        *bool                   `json:"enabled,omitempty"`
	Filesize       *int                    `json:"filesize,omitempty"`
	InsecureTpc    *bool                   `json:"insecure_tpc,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	Path           *string                 `json:"path"`
	Pblocksize     *bool                   `json:"pblocksize,omitempty"`
	Ro             *bool                   `json:"ro,omitempty"`
	Rpm            *IscsiExtentUpdate1Rpm  `json:"rpm,omitempty"`
	Serial         *string                 `json:"serial"`
	Type           *IscsiExtentUpdate1Type `json:"type,omitempty"`
	Xen            *bool                   `json:"xen,omitempty"`
}

// IscsiExtentUpdate1Rpm defines model for IscsiExtentUpdate1.Rpm.
type IscsiExtentUpdate1Rpm string

// IscsiExtentUpdate1Type defines model for IscsiExtentUpdate1.Type.
type IscsiExtentUpdate1Type string

// IscsiGlobalUpdate0 defines model for iscsi_global_update_0.
type IscsiGlobalUpdate0 struct {
	Alua               *bool     `json:"alua,omitempty"`
	Basename           *string   `json:"basename,omitempty"`
	IsnsServers        *[]string `json:"isns_servers,omitempty"`
	PoolAvailThreshold *int      `json:"pool_avail_threshold"`
}

// IscsiInitiatorCreate0 defines model for iscsi_initiator_create_0.
type IscsiInitiatorCreate0 struct {
	AuthNetwork *[]string      `json:"auth_network,omitempty"`
	Comment     *string        `json:"comment,omitempty"`
	Initiators  *[]interface{} `json:"initiators,omitempty"`
}

// IscsiInitiatorUpdate1 defines model for iscsi_initiator_update_1.
type IscsiInitiatorUpdate1 struct {
	AuthNetwork *[]string      `json:"auth_network,omitempty"`
	Comment     *string        `json:"comment,omitempty"`
	Initiators  *[]interface{} `json:"initiators,omitempty"`
}

// IscsiPortalCreate0 defines model for iscsi_portal_create_0.
type IscsiPortalCreate0 struct {
	Comment             *string                                `json:"comment,omitempty"`
	DiscoveryAuthgroup  *int                                   `json:"discovery_authgroup"`
	DiscoveryAuthmethod *IscsiPortalCreate0DiscoveryAuthmethod `json:"discovery_authmethod,omitempty"`
	Listen              *[]map[string]interface{}              `json:"listen,omitempty"`
}

// IscsiPortalCreate0DiscoveryAuthmethod defines model for IscsiPortalCreate0.DiscoveryAuthmethod.
type IscsiPortalCreate0DiscoveryAuthmethod string

// IscsiPortalUpdate1 defines model for iscsi_portal_update_1.
type IscsiPortalUpdate1 struct {
	Comment             *string                                `json:"comment,omitempty"`
	DiscoveryAuthgroup  *int                                   `json:"discovery_authgroup"`
	DiscoveryAuthmethod *IscsiPortalUpdate1DiscoveryAuthmethod `json:"discovery_authmethod,omitempty"`
	Listen              *[]map[string]interface{}              `json:"listen,omitempty"`
}

// IscsiPortalUpdate1DiscoveryAuthmethod defines model for IscsiPortalUpdate1.DiscoveryAuthmethod.
type IscsiPortalUpdate1DiscoveryAuthmethod string

// IscsiTargetCreate0 defines model for iscsi_target_create_0.
type IscsiTargetCreate0 struct {
	Alias  *string                   `json:"alias"`
	Groups *[]map[string]interface{} `json:"groups,omitempty"`
	Mode   *IscsiTargetCreate0Mode   `json:"mode,omitempty"`
	Name   *string                   `json:"name,omitempty"`
}

// IscsiTargetCreate0Mode defines model for IscsiTargetCreate0.Mode.
type IscsiTargetCreate0Mode string

// IscsiTargetDelete1 defines model for iscsi_target_delete_1.
type IscsiTargetDelete1 = bool

// IscsiTargetUpdate1 defines model for iscsi_target_update_1.
type IscsiTargetUpdate1 struct {
	Alias  *string                   `json:"alias"`
	Groups *[]map[string]interface{} `json:"groups,omitempty"`
	Mode   *IscsiTargetUpdate1Mode   `json:"mode,omitempty"`
	Name   *string                   `json:"name,omitempty"`
}

// IscsiTargetUpdate1Mode defines model for IscsiTargetUpdate1.Mode.
type IscsiTargetUpdate1Mode string

// IscsiTargetextentCreate0 defines model for iscsi_targetextent_create_0.
type IscsiTargetextentCreate0 struct {
	Extent *int `json:"extent,omitempty"`
	Lunid  *int `json:"lunid"`
	Target *int `json:"target,omitempty"`
}

// IscsiTargetextentDelete1 defines model for iscsi_targetextent_delete_1.
type IscsiTargetextentDelete1 = bool

// IscsiTargetextentUpdate1 defines model for iscsi_targetextent_update_1.
type IscsiTargetextentUpdate1 struct {
	Extent *int `json:"extent,omitempty"`
	Lunid  *int `json:"lunid,omitempty"`
	Target *int `json:"target,omitempty"`
}

// JailActivate0 defines model for jail_activate_0.
type JailActivate0 = string

// JailClean0 defines model for jail_clean_0.
type JailClean0 string

// JailClone1 defines model for jail_clone_1.
type JailClone1 struct {
	Pkglist   *[]string      `json:"pkglist,omitempty"`
	Props     *[]interface{} `json:"props,omitempty"`
	Thickjail *bool          `json:"thickjail,omitempty"`
	Uuid      *string        `json:"uuid,omitempty"`
}

// JailCreate0 defines model for jail_create_0.
type JailCreate0 struct {
	Basejail *bool          `json:"basejail,omitempty"`
	Empty    *bool          `json:"empty,omitempty"`
	Https    *bool          `json:"https,omitempty"`
	Pkglist  *[]string      `json:"pkglist,omitempty"`
	Props    *[]interface{} `json:"props,omitempty"`
	Release  *string        `json:"release,omitempty"`
	Short    *bool          `json:"short,omitempty"`
	Template *string        `json:"template,omitempty"`
	Uuid     *string        `json:"uuid,omitempty"`
}

// JailDelete1 defines model for jail_delete_1.
type JailDelete1 struct {
	Force *bool `json:"force,omitempty"`
}

// JailExec defines model for jail_exec.
type JailExec struct {
	Command *JailExec1 `json:"command,omitempty"`
	Jail    *JailExec0 `json:"jail,omitempty"`
	Options *JailExec2 `json:"options,omitempty"`
}

// JailExec0 defines model for jail_exec_0.
type JailExec0 = string

// JailExec1 defines model for jail_exec_1.
type JailExec1 = []interface{}

// JailExec2 defines model for jail_exec_2.
type JailExec2 struct {
	HostUser *string `json:"host_user,omitempty"`
	JailUser *string `json:"jail_user,omitempty"`
}

// JailExport0 defines model for jail_export_0.
type JailExport0 struct {
	CompressionAlgorithm *JailExport0CompressionAlgorithm `json:"compression_algorithm,omitempty"`
	Jail                 *string                          `json:"jail,omitempty"`
}

// JailExport0CompressionAlgorithm defines model for JailExport0.CompressionAlgorithm.
type JailExport0CompressionAlgorithm string

// JailFetch0 defines model for jail_fetch_0.
type JailFetch0 struct {
	Accept   *bool          `json:"accept,omitempty"`
	Branch   *string        `json:"branch"`
	Files    *[]interface{} `json:"files,omitempty"`
	Https    *bool          `json:"https,omitempty"`
	JailName *string        `json:"jail_name,omitempty"`
	Name     *string        `json:"name"`
	Password *string        `json:"password,omitempty"`
	Props    *[]interface{} `json:"props,omitempty"`
	Release  *string        `json:"release,omitempty"`
	Server   *string        `json:"server,omitempty"`
	User     *string        `json:"user,omitempty"`
}

// JailFstab defines model for jail_fstab.
type JailFstab struct {
	Jail    *JailFstab0 `json:"jail,omitempty"`
	Options *JailFstab1 `json:"options,omitempty"`
}

// JailFstab0 defines model for jail_fstab_0.
type JailFstab0 = string

// JailFstab1 defines model for jail_fstab_1.
type JailFstab1 struct {
	Action      *JailFstab1Action `json:"action,omitempty"`
	Destination *string           `json:"destination,omitempty"`
	Dump        *string           `json:"dump,omitempty"`
	Fsoptions   *string           `json:"fsoptions,omitempty"`
	Fstype      *string           `json:"fstype,omitempty"`
	Index       *int              `json:"index,omitempty"`
	Pass        *string           `json:"pass,omitempty"`
	Source      *string           `json:"source,omitempty"`
}

// JailFstab1Action defines model for JailFstab1.Action.
type JailFstab1Action string

// JailImportImage0 defines model for jail_import_image_0.
type JailImportImage0 struct {
	CompressionAlgorithm *JailImportImage0CompressionAlgorithm `json:"compression_algorithm"`
	Jail                 *string                               `json:"jail,omitempty"`
	Path                 *string                               `json:"path"`
}

// JailImportImage0CompressionAlgorithm defines model for JailImportImage0.CompressionAlgorithm.
type JailImportImage0CompressionAlgorithm string

// JailRcAction0 defines model for jail_rc_action_0.
type JailRcAction0 string

// JailReleasesChoices0 defines model for jail_releases_choices_0.
type JailReleasesChoices0 = bool

// JailRestart0 defines model for jail_restart_0.
type JailRestart0 = string

// JailStart0 defines model for jail_start_0.
type JailStart0 = string

// JailStop defines model for jail_stop.
type JailStop struct {
	Force *JailStop1 `json:"force,omitempty"`
	Jail  *JailStop0 `json:"jail,omitempty"`
}

// JailStop0 defines model for jail_stop_0.
type JailStop0 = string

// JailStop1 defines model for jail_stop_1.
type JailStop1 = bool

// JailUpdate1 defines model for jail_update_1.
type JailUpdate1 struct {
	Plugin               *bool                  `json:"plugin,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// JailUpdateDefaults0 defines model for jail_update_defaults_0.
type JailUpdateDefaults0 map[string]interface{}

// JailUpdateToLatestPatch defines model for jail_update_to_latest_patch.
type JailUpdateToLatestPatch struct {
	Jail       *JailUpdateToLatestPatch0 `json:"jail,omitempty"`
	UpdatePkgs *JailUpdateToLatestPatch1 `json:"update_pkgs,omitempty"`
}

// JailUpdateToLatestPatch0 defines model for jail_update_to_latest_patch_0.
type JailUpdateToLatestPatch0 = string

// JailUpdateToLatestPatch1 defines model for jail_update_to_latest_patch_1.
type JailUpdateToLatestPatch1 = bool

// KerberosKeytabCreate0 defines model for kerberos_keytab_create_0.
type KerberosKeytabCreate0 struct {
	File *string `json:"file,omitempty"`
	Name *string `json:"name,omitempty"`
}

// KerberosKeytabUpdate1 defines model for kerberos_keytab_update_1.
type KerberosKeytabUpdate1 struct {
	File *string `json:"file,omitempty"`
	Name *string `json:"name,omitempty"`
}

// KerberosRealmCreate0 defines model for kerberos_realm_create_0.
type KerberosRealmCreate0 struct {
	AdminServer   *[]interface{} `json:"admin_server,omitempty"`
	Kdc           *[]interface{} `json:"kdc,omitempty"`
	KpasswdServer *[]interface{} `json:"kpasswd_server,omitempty"`
	Realm         *string        `json:"realm,omitempty"`
}

// KerberosRealmUpdate1 defines model for kerberos_realm_update_1.
type KerberosRealmUpdate1 struct {
	AdminServer   *[]interface{} `json:"admin_server,omitempty"`
	Kdc           *[]interface{} `json:"kdc,omitempty"`
	KpasswdServer *[]interface{} `json:"kpasswd_server,omitempty"`
	Realm         *string        `json:"realm,omitempty"`
}

// KerberosUpdate0 defines model for kerberos_update_0.
type KerberosUpdate0 struct {
	AppdefaultsAux *string `json:"appdefaults_aux,omitempty"`
	LibdefaultsAux *string `json:"libdefaults_aux,omitempty"`
}

// KeychaincredentialCreate0 defines model for keychaincredential_create_0.
type KeychaincredentialCreate0 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Name       *string                 `json:"name,omitempty"`
	Type       *string                 `json:"type,omitempty"`
}

// KeychaincredentialDelete1 defines model for keychaincredential_delete_1.
type KeychaincredentialDelete1 struct {
	Cascade *bool `json:"cascade,omitempty"`
}

// KeychaincredentialRemoteSshHostKeyScan0 defines model for keychaincredential_remote_ssh_host_key_scan_0.
type KeychaincredentialRemoteSshHostKeyScan0 struct {
	ConnectTimeout *int    `json:"connect_timeout,omitempty"`
	Host           *string `json:"host,omitempty"`
	Port           *string `json:"port,omitempty"`
}

// KeychaincredentialRemoteSshSemiautomaticSetup0 defines model for keychaincredential_remote_ssh_semiautomatic_setup_0.
type KeychaincredentialRemoteSshSemiautomaticSetup0 struct {
	Cipher         *KeychaincredentialRemoteSshSemiautomaticSetup0Cipher `json:"cipher,omitempty"`
	ConnectTimeout *int                                                  `json:"connect_timeout,omitempty"`
	Name           *string                                               `json:"name,omitempty"`
	Password       *string                                               `json:"password,omitempty"`
	PrivateKey     *int                                                  `json:"private_key,omitempty"`
	Token          *string                                               `json:"token,omitempty"`
	Url            *string                                               `json:"url,omitempty"`
	Username       *string                                               `json:"username,omitempty"`
}

// KeychaincredentialRemoteSshSemiautomaticSetup0Cipher defines model for KeychaincredentialRemoteSshSemiautomaticSetup0.Cipher.
type KeychaincredentialRemoteSshSemiautomaticSetup0Cipher string

// KeychaincredentialUpdate1 defines model for keychaincredential_update_1.
type KeychaincredentialUpdate1 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Name       *string                 `json:"name,omitempty"`
}

// KeychaincredentialUsedBy0 defines model for keychaincredential_used_by_0.
type KeychaincredentialUsedBy0 = int

// KmipUpdate0 defines model for kmip_update_0.
type KmipUpdate0 struct {
	Certificate          *int    `json:"certificate"`
	CertificateAuthority *int    `json:"certificate_authority"`
	ChangeServer         *bool   `json:"change_server,omitempty"`
	Enabled              *bool   `json:"enabled,omitempty"`
	ForceClear           *bool   `json:"force_clear,omitempty"`
	ManageSedDisks       *bool   `json:"manage_sed_disks,omitempty"`
	ManageZfsKeys        *bool   `json:"manage_zfs_keys,omitempty"`
	Port                 *int    `json:"port,omitempty"`
	Server               *string `json:"server,omitempty"`
	Validate             *bool   `json:"validate,omitempty"`
}

// LdapUpdate0 defines model for ldap_update_0.
type LdapUpdate0 struct {
	Anonbind             *bool              `json:"anonbind,omitempty"`
	AuxiliaryParameters  *string            `json:"auxiliary_parameters,omitempty"`
	Basedn               *string            `json:"basedn,omitempty"`
	Binddn               *string            `json:"binddn,omitempty"`
	Bindpw               *string            `json:"bindpw,omitempty"`
	Certificate          *int               `json:"certificate"`
	DisableFreenasCache  *bool              `json:"disable_freenas_cache,omitempty"`
	DnsTimeout           *int               `json:"dns_timeout,omitempty"`
	Enable               *bool              `json:"enable,omitempty"`
	HasSambaSchema       *bool              `json:"has_samba_schema,omitempty"`
	Hostname             *[]interface{}     `json:"hostname,omitempty"`
	KerberosPrincipal    *string            `json:"kerberos_principal,omitempty"`
	KerberosRealm        *int               `json:"kerberos_realm"`
	Schema               *LdapUpdate0Schema `json:"schema,omitempty"`
	Ssl                  *LdapUpdate0Ssl    `json:"ssl,omitempty"`
	Timeout              *int               `json:"timeout,omitempty"`
	ValidateCertificates *bool              `json:"validate_certificates,omitempty"`
}

// LdapUpdate0Schema defines model for LdapUpdate0.Schema.
type LdapUpdate0Schema string

// LdapUpdate0Ssl defines model for LdapUpdate0.Ssl.
type LdapUpdate0Ssl string

// LldpUpdate0 defines model for lldp_update_0.
type LldpUpdate0 struct {
	Country  *string `json:"country,omitempty"`
	Intdesc  *bool   `json:"intdesc,omitempty"`
	Location *string `json:"location,omitempty"`
}

// MailSend defines model for mail_send.
type MailSend struct {
	MailMessage *MailSend0 `json:"mail_message,omitempty"`
	MailUpdate  *MailSend1 `json:"mail_update,omitempty"`
}

// MailSend0 defines model for mail_send_0.
type MailSend0 struct {
	Attachments  *bool                   `json:"attachments,omitempty"`
	Cc           *[]string               `json:"cc,omitempty"`
	Channel      *string                 `json:"channel"`
	ExtraHeaders *map[string]interface{} `json:"extra_headers,omitempty"`
	Html         *string                 `json:"html"`
	Interval     *int                    `json:"interval"`
	Queue        *bool                   `json:"queue,omitempty"`
	Subject      *string                 `json:"subject,omitempty"`
	Text         *string                 `json:"text,omitempty"`
	Timeout      *int                    `json:"timeout,omitempty"`
	To           *[]string               `json:"to,omitempty"`
}

// MailSend1 defines model for mail_send_1.
type MailSend1 struct {
	Fromemail *string `json:"fromemail,omitempty"`
	Fromname  *string `json:"fromname,omitempty"`
	Oauth     *struct {
		ClientId     *string `json:"client_id,omitempty"`
		ClientSecret *string `json:"client_secret,omitempty"`
		RefreshToken *string `json:"refresh_token,omitempty"`
	} `json:"oauth,omitempty"`
	Outgoingserver *string            `json:"outgoingserver,omitempty"`
	Pass           *string            `json:"pass,omitempty"`
	Port           *int               `json:"port,omitempty"`
	Security       *MailSend1Security `json:"security,omitempty"`
	Smtp           *bool              `json:"smtp,omitempty"`
	User           *string            `json:"user,omitempty"`
}

// MailSend1Security defines model for MailSend1.Security.
type MailSend1Security string

// MailUpdate0 defines model for mail_update_0.
type MailUpdate0 struct {
	Fromemail *string `json:"fromemail,omitempty"`
	Fromname  *string `json:"fromname,omitempty"`
	Oauth     *struct {
		ClientId     *string `json:"client_id,omitempty"`
		ClientSecret *string `json:"client_secret,omitempty"`
		RefreshToken *string `json:"refresh_token,omitempty"`
	} `json:"oauth,omitempty"`
	Outgoingserver *string              `json:"outgoingserver,omitempty"`
	Pass           *string              `json:"pass,omitempty"`
	Port           *int                 `json:"port,omitempty"`
	Security       *MailUpdate0Security `json:"security,omitempty"`
	Smtp           *bool                `json:"smtp,omitempty"`
	User           *string              `json:"user,omitempty"`
}

// MailUpdate0Security defines model for MailUpdate0.Security.
type MailUpdate0Security string

// NetworkConfigurationUpdate0 defines model for network_configuration_update_0.
type NetworkConfigurationUpdate0 struct {
	Domain              *string   `json:"domain,omitempty"`
	Domains             *[]string `json:"domains,omitempty"`
	Hostname            *string   `json:"hostname,omitempty"`
	HostnameB           *string   `json:"hostname_b,omitempty"`
	HostnameVirtual     *string   `json:"hostname_virtual,omitempty"`
	Hosts               *string   `json:"hosts,omitempty"`
	Httpproxy           *string   `json:"httpproxy,omitempty"`
	Ipv4gateway         *string   `json:"ipv4gateway,omitempty"`
	Ipv6gateway         *string   `json:"ipv6gateway,omitempty"`
	Nameserver1         *string   `json:"nameserver1,omitempty"`
	Nameserver2         *string   `json:"nameserver2,omitempty"`
	Nameserver3         *string   `json:"nameserver3,omitempty"`
	NetwaitEnabled      *bool     `json:"netwait_enabled,omitempty"`
	NetwaitIp           *[]string `json:"netwait_ip,omitempty"`
	ServiceAnnouncement *struct {
		Mdns    *bool `json:"mdns,omitempty"`
		Netbios *bool `json:"netbios,omitempty"`
		Wsd     *bool `json:"wsd,omitempty"`
	} `json:"service_announcement,omitempty"`
}

// NfsAddPrincipal0 defines model for nfs_add_principal_0.
type NfsAddPrincipal0 struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NfsUpdate0 defines model for nfs_update_0.
type NfsUpdate0 struct {
	AllowNonroot    *bool     `json:"allow_nonroot,omitempty"`
	Bindip          *[]string `json:"bindip,omitempty"`
	MountdLog       *bool     `json:"mountd_log,omitempty"`
	MountdPort      *int      `json:"mountd_port"`
	RpclockdPort    *int      `json:"rpclockd_port"`
	RpcstatdPort    *int      `json:"rpcstatd_port"`
	Servers         *int      `json:"servers,omitempty"`
	StatdLockdLog   *bool     `json:"statd_lockd_log,omitempty"`
	Udp             *bool     `json:"udp,omitempty"`
	UserdManageGids *bool     `json:"userd_manage_gids,omitempty"`
	V4              *bool     `json:"v4,omitempty"`
	V4Domain        *string   `json:"v4_domain,omitempty"`
	V4Krb           *bool     `json:"v4_krb,omitempty"`
	V4V3owner       *bool     `json:"v4_v3owner,omitempty"`
}

// NisUpdate0 defines model for nis_update_0.
type NisUpdate0 struct {
	Domain     *string        `json:"domain,omitempty"`
	Enable     *bool          `json:"enable,omitempty"`
	Manycast   *bool          `json:"manycast,omitempty"`
	SecureMode *bool          `json:"secure_mode,omitempty"`
	Servers    *[]interface{} `json:"servers,omitempty"`
}

// OpenvpnClientUpdate0 defines model for openvpn_client_update_0.
type OpenvpnClientUpdate0 struct {
	AdditionalParameters    *string                          `json:"additional_parameters,omitempty"`
	AuthenticationAlgorithm *string                          `json:"authentication_algorithm"`
	Cipher                  *string                          `json:"cipher"`
	ClientCertificate       *int                             `json:"client_certificate"`
	Compression             *OpenvpnClientUpdate0Compression `json:"compression"`
	DeviceType              *OpenvpnClientUpdate0DeviceType  `json:"device_type,omitempty"`
	Nobind                  *bool                            `json:"nobind,omitempty"`
	Port                    *int                             `json:"port,omitempty"`
	Protocol                *OpenvpnClientUpdate0Protocol    `json:"protocol,omitempty"`
	Remote                  *string                          `json:"remote,omitempty"`
	RootCa                  *int                             `json:"root_ca"`
	TlsCryptAuth            *string                          `json:"tls_crypt_auth"`
	TlsCryptAuthEnabled     *bool                            `json:"tls_crypt_auth_enabled,omitempty"`
}

// OpenvpnClientUpdate0Compression defines model for OpenvpnClientUpdate0.Compression.
type OpenvpnClientUpdate0Compression string

// OpenvpnClientUpdate0DeviceType defines model for OpenvpnClientUpdate0.DeviceType.
type OpenvpnClientUpdate0DeviceType string

// OpenvpnClientUpdate0Protocol defines model for OpenvpnClientUpdate0.Protocol.
type OpenvpnClientUpdate0Protocol string

// OpenvpnServerClientConfigurationGeneration defines model for openvpn_server_client_configuration_generation.
type OpenvpnServerClientConfigurationGeneration struct {
	ClientCertificateId *OpenvpnServerClientConfigurationGeneration0 `json:"client_certificate_id,omitempty"`
	ServerAddress       *OpenvpnServerClientConfigurationGeneration1 `json:"server_address"`
}

// OpenvpnServerClientConfigurationGeneration0 defines model for openvpn_server_client_configuration_generation_0.
type OpenvpnServerClientConfigurationGeneration0 = int

// OpenvpnServerClientConfigurationGeneration1 defines model for openvpn_server_client_configuration_generation_1.
type OpenvpnServerClientConfigurationGeneration1 = string

// OpenvpnServerUpdate0 defines model for openvpn_server_update_0.
type OpenvpnServerUpdate0 struct {
	AdditionalParameters    *string                          `json:"additional_parameters,omitempty"`
	AuthenticationAlgorithm *string                          `json:"authentication_algorithm"`
	Cipher                  *string                          `json:"cipher"`
	Compression             *OpenvpnServerUpdate0Compression `json:"compression"`
	DeviceType              *OpenvpnServerUpdate0DeviceType  `json:"device_type,omitempty"`
	Netmask                 *int                             `json:"netmask,omitempty"`
	Port                    *int                             `json:"port,omitempty"`
	Protocol                *OpenvpnServerUpdate0Protocol    `json:"protocol,omitempty"`
	RootCa                  *int                             `json:"root_ca"`
	Server                  *string                          `json:"server,omitempty"`
	ServerCertificate       *int                             `json:"server_certificate"`
	TlsCryptAuth            *string                          `json:"tls_crypt_auth"`
	TlsCryptAuthEnabled     *bool                            `json:"tls_crypt_auth_enabled,omitempty"`
	Topology                *OpenvpnServerUpdate0Topology    `json:"topology"`
}

// OpenvpnServerUpdate0Compression defines model for OpenvpnServerUpdate0.Compression.
type OpenvpnServerUpdate0Compression string

// OpenvpnServerUpdate0DeviceType defines model for OpenvpnServerUpdate0.DeviceType.
type OpenvpnServerUpdate0DeviceType string

// OpenvpnServerUpdate0Protocol defines model for OpenvpnServerUpdate0.Protocol.
type OpenvpnServerUpdate0Protocol string

// OpenvpnServerUpdate0Topology defines model for OpenvpnServerUpdate0.Topology.
type OpenvpnServerUpdate0Topology string

// PluginAvailable0 defines model for plugin_available_0.
type PluginAvailable0 struct {
	Branch           *string `json:"branch,omitempty"`
	Cache            *bool   `json:"cache,omitempty"`
	PluginRepository *string `json:"plugin_repository,omitempty"`
}

// PluginBranchesChoices0 defines model for plugin_branches_choices_0.
type PluginBranchesChoices0 = string

// PluginCreate0 defines model for plugin_create_0.
type PluginCreate0 struct {
	Branch           *string        `json:"branch"`
	JailName         *string        `json:"jail_name,omitempty"`
	PluginName       *string        `json:"plugin_name,omitempty"`
	PluginRepository *string        `json:"plugin_repository,omitempty"`
	Props            *[]interface{} `json:"props,omitempty"`
}

// PluginDefaults0 defines model for plugin_defaults_0.
type PluginDefaults0 struct {
	Branch           *string `json:"branch"`
	Plugin           *string `json:"plugin,omitempty"`
	PluginRepository *string `json:"plugin_repository,omitempty"`
	Refresh          *bool   `json:"refresh,omitempty"`
}

// PluginUpdate1 defines model for plugin_update_1.
type PluginUpdate1 struct {
	Plugin               *bool                  `json:"plugin,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PluginUpdatePlugin defines model for plugin_update_plugin.
type PluginUpdatePlugin struct {
	Jail       *PluginUpdatePlugin0 `json:"jail,omitempty"`
	UpdateJail *PluginUpdatePlugin1 `json:"update_jail,omitempty"`
}

// PluginUpdatePlugin0 defines model for plugin_update_plugin_0.
type PluginUpdatePlugin0 = string

// PluginUpdatePlugin1 defines model for plugin_update_plugin_1.
type PluginUpdatePlugin1 = bool

// PoolAttach defines model for pool_attach.
type PoolAttach struct {
	Oid        *PoolAttach0 `json:"oid,omitempty"`
	PoolAttach *PoolAttach1 `json:"pool_attach,omitempty"`
}

// PoolAttach0 defines model for pool_attach_0.
type PoolAttach0 = int

// PoolAttach1 defines model for pool_attach_1.
type PoolAttach1 struct {
	NewDisk    *string `json:"new_disk,omitempty"`
	Passphrase *string `json:"passphrase,omitempty"`
	TargetVdev *string `json:"target_vdev,omitempty"`
}

// PoolAttachments defines model for pool_attachments.
type PoolAttachments = map[string]interface{}

// PoolCreate0 defines model for pool_create_0.
type PoolCreate0 struct {
	Deduplication     *PoolCreate0Deduplication `json:"deduplication"`
	Encryption        *bool                     `json:"encryption,omitempty"`
	EncryptionOptions *struct {
		Algorithm   *PoolCreate0EncryptionOptionsAlgorithm `json:"algorithm,omitempty"`
		GenerateKey *bool                                  `json:"generate_key,omitempty"`
		Key         *string                                `json:"key"`
		Passphrase  *string                                `json:"passphrase"`
		Pbkdf2iters *int                                   `json:"pbkdf2iters,omitempty"`
	} `json:"encryption_options,omitempty"`
	Name     *string `json:"name,omitempty"`
	Topology *struct {
		Cache   *[]map[string]interface{} `json:"cache,omitempty"`
		Data    *[]map[string]interface{} `json:"data,omitempty"`
		Dedup   *[]map[string]interface{} `json:"dedup,omitempty"`
		Log     *[]map[string]interface{} `json:"log,omitempty"`
		Spares  *[]string                 `json:"spares,omitempty"`
		Special *[]map[string]interface{} `json:"special,omitempty"`
	} `json:"topology,omitempty"`
}

// PoolCreate0Deduplication defines model for PoolCreate0.Deduplication.
type PoolCreate0Deduplication string

// PoolCreate0EncryptionOptionsAlgorithm defines model for PoolCreate0.EncryptionOptions.Algorithm.
type PoolCreate0EncryptionOptionsAlgorithm string

// PoolDatasetAttachments defines model for pool_dataset_attachments.
type PoolDatasetAttachments = map[string]interface{}

// PoolDatasetChangeKey defines model for pool_dataset_change_key.
type PoolDatasetChangeKey struct {
	ChangeKeyOptions *PoolDatasetChangeKey1 `json:"change_key_options,omitempty"`
	Id               *PoolDatasetChangeKey0 `json:"id,omitempty"`
}

// PoolDatasetChangeKey0 defines model for pool_dataset_change_key_0.
type PoolDatasetChangeKey0 = string

// PoolDatasetChangeKey1 defines model for pool_dataset_change_key_1.
type PoolDatasetChangeKey1 struct {
	GenerateKey *bool   `json:"generate_key,omitempty"`
	Key         *string `json:"key"`
	KeyFile     *bool   `json:"key_file,omitempty"`
	Passphrase  *string `json:"passphrase"`
	Pbkdf2iters *int    `json:"pbkdf2iters,omitempty"`
}

// PoolDatasetCreate0 defines model for pool_dataset_create_0.
type PoolDatasetCreate0 struct {
	Aclmode           *PoolDatasetCreate0Aclmode         `json:"aclmode,omitempty"`
	Acltype           *PoolDatasetCreate0Acltype         `json:"acltype,omitempty"`
	Atime             *PoolDatasetCreate0Atime           `json:"atime,omitempty"`
	Casesensitivity   *PoolDatasetCreate0Casesensitivity `json:"casesensitivity,omitempty"`
	Comments          *string                            `json:"comments,omitempty"`
	Compression       *PoolDatasetCreate0Compression     `json:"compression,omitempty"`
	Copies            *int                               `json:"copies,omitempty"`
	Deduplication     *PoolDatasetCreate0Deduplication   `json:"deduplication,omitempty"`
	Encryption        *bool                              `json:"encryption,omitempty"`
	EncryptionOptions *struct {
		Algorithm   *PoolDatasetCreate0EncryptionOptionsAlgorithm `json:"algorithm,omitempty"`
		GenerateKey *bool                                         `json:"generate_key,omitempty"`
		Key         *string                                       `json:"key"`
		Passphrase  *string                                       `json:"passphrase"`
		Pbkdf2iters *int                                          `json:"pbkdf2iters,omitempty"`
	} `json:"encryption_options,omitempty"`
	Exec                  *PoolDatasetCreate0Exec         `json:"exec,omitempty"`
	ForceSize             *bool                           `json:"force_size,omitempty"`
	InheritEncryption     *bool                           `json:"inherit_encryption,omitempty"`
	Managedby             *string                         `json:"managedby,omitempty"`
	Name                  *string                         `json:"name,omitempty"`
	Quota                 *int                            `json:"quota,omitempty"`
	QuotaCritical         *int                            `json:"quota_critical,omitempty"`
	QuotaWarning          *int                            `json:"quota_warning,omitempty"`
	Readonly              *PoolDatasetCreate0Readonly     `json:"readonly,omitempty"`
	Recordsize            *PoolDatasetCreate0Recordsize   `json:"recordsize,omitempty"`
	Refquota              *int                            `json:"refquota,omitempty"`
	RefquotaCritical      *int                            `json:"refquota_critical,omitempty"`
	RefquotaWarning       *int                            `json:"refquota_warning,omitempty"`
	Refreservation        *int                            `json:"refreservation,omitempty"`
	Reservation           *int                            `json:"reservation,omitempty"`
	ShareType             *PoolDatasetCreate0ShareType    `json:"share_type,omitempty"`
	Snapdir               *PoolDatasetCreate0Snapdir      `json:"snapdir,omitempty"`
	Sparse                *bool                           `json:"sparse,omitempty"`
	SpecialSmallBlockSize *int                            `json:"special_small_block_size,omitempty"`
	Sync                  *PoolDatasetCreate0Sync         `json:"sync,omitempty"`
	Type                  *PoolDatasetCreate0Type         `json:"type,omitempty"`
	Volblocksize          *PoolDatasetCreate0Volblocksize `json:"volblocksize,omitempty"`
	Volsize               *int                            `json:"volsize,omitempty"`
	Xattr                 *PoolDatasetCreate0Xattr        `json:"xattr,omitempty"`
}

// PoolDatasetCreate0Aclmode defines model for PoolDatasetCreate0.Aclmode.
type PoolDatasetCreate0Aclmode string

// PoolDatasetCreate0Acltype defines model for PoolDatasetCreate0.Acltype.
type PoolDatasetCreate0Acltype string

// PoolDatasetCreate0Atime defines model for PoolDatasetCreate0.Atime.
type PoolDatasetCreate0Atime string

// PoolDatasetCreate0Casesensitivity defines model for PoolDatasetCreate0.Casesensitivity.
type PoolDatasetCreate0Casesensitivity string

// PoolDatasetCreate0Compression defines model for PoolDatasetCreate0.Compression.
type PoolDatasetCreate0Compression string

// PoolDatasetCreate0Deduplication defines model for PoolDatasetCreate0.Deduplication.
type PoolDatasetCreate0Deduplication string

// PoolDatasetCreate0EncryptionOptionsAlgorithm defines model for PoolDatasetCreate0.EncryptionOptions.Algorithm.
type PoolDatasetCreate0EncryptionOptionsAlgorithm string

// PoolDatasetCreate0Exec defines model for PoolDatasetCreate0.Exec.
type PoolDatasetCreate0Exec string

// PoolDatasetCreate0Readonly defines model for PoolDatasetCreate0.Readonly.
type PoolDatasetCreate0Readonly string

// PoolDatasetCreate0Recordsize defines model for PoolDatasetCreate0.Recordsize.
type PoolDatasetCreate0Recordsize string

// PoolDatasetCreate0ShareType defines model for PoolDatasetCreate0.ShareType.
type PoolDatasetCreate0ShareType string

// PoolDatasetCreate0Snapdir defines model for PoolDatasetCreate0.Snapdir.
type PoolDatasetCreate0Snapdir string

// PoolDatasetCreate0Sync defines model for PoolDatasetCreate0.Sync.
type PoolDatasetCreate0Sync string

// PoolDatasetCreate0Type defines model for PoolDatasetCreate0.Type.
type PoolDatasetCreate0Type string

// PoolDatasetCreate0Volblocksize defines model for PoolDatasetCreate0.Volblocksize.
type PoolDatasetCreate0Volblocksize string

// PoolDatasetCreate0Xattr defines model for PoolDatasetCreate0.Xattr.
type PoolDatasetCreate0Xattr string

// PoolDatasetDelete1 defines model for pool_dataset_delete_1.
type PoolDatasetDelete1 struct {
	Force     *bool `json:"force,omitempty"`
	Recursive *bool `json:"recursive,omitempty"`
}

// PoolDatasetEncryptionSummary defines model for pool_dataset_encryption_summary.
type PoolDatasetEncryptionSummary struct {
	EncryptionRootSummaryOptions *PoolDatasetEncryptionSummary1 `json:"encryption_root_summary_options,omitempty"`
	Id                           *PoolDatasetEncryptionSummary0 `json:"id,omitempty"`
}

// PoolDatasetEncryptionSummary0 defines model for pool_dataset_encryption_summary_0.
type PoolDatasetEncryptionSummary0 = string

// PoolDatasetEncryptionSummary1 defines model for pool_dataset_encryption_summary_1.
type PoolDatasetEncryptionSummary1 struct {
	Datasets *[]map[string]interface{} `json:"datasets,omitempty"`
	KeyFile  *bool                     `json:"key_file,omitempty"`
}

// PoolDatasetExportKey defines model for pool_dataset_export_key.
type PoolDatasetExportKey struct {
	Download *PoolDatasetExportKey1 `json:"download,omitempty"`
	Id       *PoolDatasetExportKey0 `json:"id,omitempty"`
}

// PoolDatasetExportKey0 defines model for pool_dataset_export_key_0.
type PoolDatasetExportKey0 = string

// PoolDatasetExportKey1 defines model for pool_dataset_export_key_1.
type PoolDatasetExportKey1 = bool

// PoolDatasetGetQuota defines model for pool_dataset_get_quota.
type PoolDatasetGetQuota struct {
	QueryFilters *PoolDatasetGetQuota2 `json:"query-filters,omitempty"`
	QueryOptions *PoolDatasetGetQuota3 `json:"query-options,omitempty"`
	QuotaType    *PoolDatasetGetQuota1 `json:"quota_type,omitempty"`
}

// PoolDatasetGetQuota1 defines model for pool_dataset_get_quota_1.
type PoolDatasetGetQuota1 string

// PoolDatasetGetQuota2 defines model for pool_dataset_get_quota_2.
type PoolDatasetGetQuota2 = []interface{}

// PoolDatasetGetQuota3 defines model for pool_dataset_get_quota_3.
type PoolDatasetGetQuota3 struct {
	Count           *bool                   `json:"count,omitempty"`
	Extend          *string                 `json:"extend"`
	ExtendContext   *string                 `json:"extend_context"`
	Extra           *map[string]interface{} `json:"extra,omitempty"`
	ForceSqlFilters *bool                   `json:"force_sql_filters,omitempty"`
	Get             *bool                   `json:"get,omitempty"`
	Limit           *int                    `json:"limit,omitempty"`
	Offset          *int                    `json:"offset,omitempty"`
	OrderBy         *[]interface{}          `json:"order_by,omitempty"`
	Prefix          *string                 `json:"prefix"`
	Relationships   *bool                   `json:"relationships,omitempty"`
	Select          *[]interface{}          `json:"select,omitempty"`
}

// PoolDatasetInheritParentEncryptionProperties0 defines model for pool_dataset_inherit_parent_encryption_properties_0.
type PoolDatasetInheritParentEncryptionProperties0 = string

// PoolDatasetLock defines model for pool_dataset_lock.
type PoolDatasetLock struct {
	Id          *PoolDatasetLock0 `json:"id,omitempty"`
	LockOptions *PoolDatasetLock1 `json:"lock_options,omitempty"`
}

// PoolDatasetLock0 defines model for pool_dataset_lock_0.
type PoolDatasetLock0 = string

// PoolDatasetLock1 defines model for pool_dataset_lock_1.
type PoolDatasetLock1 struct {
	ForceUmount *bool `json:"force_umount,omitempty"`
}

// PoolDatasetPermission1 defines model for pool_dataset_permission_1.
type PoolDatasetPermission1 struct {
	Acl     *[]map[string]interface{} `json:"acl,omitempty"`
	Group   *string                   `json:"group,omitempty"`
	Mode    *string                   `json:"mode"`
	Options *struct {
		Recursive *bool `json:"recursive,omitempty"`
		Stripacl  *bool `json:"stripacl,omitempty"`
		Traverse  *bool `json:"traverse,omitempty"`
	} `json:"options,omitempty"`
	User *string `json:"user,omitempty"`
}

// PoolDatasetProcesses defines model for pool_dataset_processes.
type PoolDatasetProcesses = map[string]interface{}

// PoolDatasetPromote defines model for pool_dataset_promote.
type PoolDatasetPromote = map[string]interface{}

// PoolDatasetRecommendedZvolBlocksize0 defines model for pool_dataset_recommended_zvol_blocksize_0.
type PoolDatasetRecommendedZvolBlocksize0 = string

// PoolDatasetSetQuota1 defines model for pool_dataset_set_quota_1.
type PoolDatasetSetQuota1 = []map[string]interface{}

// PoolDatasetUnlock defines model for pool_dataset_unlock.
type PoolDatasetUnlock struct {
	Id            *PoolDatasetUnlock0 `json:"id,omitempty"`
	UnlockOptions *PoolDatasetUnlock1 `json:"unlock_options,omitempty"`
}

// PoolDatasetUnlock0 defines model for pool_dataset_unlock_0.
type PoolDatasetUnlock0 = string

// PoolDatasetUnlock1 defines model for pool_dataset_unlock_1.
type PoolDatasetUnlock1 struct {
	Datasets          *[]map[string]interface{} `json:"datasets,omitempty"`
	KeyFile           *bool                     `json:"key_file,omitempty"`
	Recursive         *bool                     `json:"recursive,omitempty"`
	ToggleAttachments *bool                     `json:"toggle_attachments,omitempty"`
}

// PoolDatasetUpdate1 defines model for pool_dataset_update_1.
type PoolDatasetUpdate1 struct {
	Aclmode               *PoolDatasetUpdate1Aclmode           `json:"aclmode,omitempty"`
	Acltype               *PoolDatasetUpdate1Acltype           `json:"acltype,omitempty"`
	Atime                 *PoolDatasetUpdate1Atime             `json:"atime,omitempty"`
	Comments              *string                              `json:"comments,omitempty"`
	Compression           *PoolDatasetUpdate1Compression       `json:"compression,omitempty"`
	Copies                *int                                 `json:"copies,omitempty"`
	Deduplication         *PoolDatasetUpdate1Deduplication     `json:"deduplication,omitempty"`
	Exec                  *PoolDatasetUpdate1Exec              `json:"exec,omitempty"`
	ForceSize             *bool                                `json:"force_size,omitempty"`
	Managedby             *string                              `json:"managedby,omitempty"`
	Quota                 *int                                 `json:"quota,omitempty"`
	QuotaCritical         *PoolDatasetUpdate1_QuotaCritical    `json:"quota_critical,omitempty"`
	QuotaWarning          *PoolDatasetUpdate1_QuotaWarning     `json:"quota_warning,omitempty"`
	Readonly              *PoolDatasetUpdate1Readonly          `json:"readonly,omitempty"`
	Recordsize            *PoolDatasetUpdate1Recordsize        `json:"recordsize,omitempty"`
	Refquota              *int                                 `json:"refquota,omitempty"`
	RefquotaCritical      *PoolDatasetUpdate1_RefquotaCritical `json:"refquota_critical,omitempty"`
	RefquotaWarning       *PoolDatasetUpdate1_RefquotaWarning  `json:"refquota_warning,omitempty"`
	Refreservation        *int                                 `json:"refreservation,omitempty"`
	Reservation           *int                                 `json:"reservation,omitempty"`
	Snapdir               *PoolDatasetUpdate1Snapdir           `json:"snapdir,omitempty"`
	SpecialSmallBlockSize *int                                 `json:"special_small_block_size,omitempty"`
	Sync                  *PoolDatasetUpdate1Sync              `json:"sync,omitempty"`
	Volsize               *int                                 `json:"volsize,omitempty"`
	Xattr                 *PoolDatasetUpdate1Xattr             `json:"xattr,omitempty"`
}

// PoolDatasetUpdate1Aclmode defines model for PoolDatasetUpdate1.Aclmode.
type PoolDatasetUpdate1Aclmode string

// PoolDatasetUpdate1Acltype defines model for PoolDatasetUpdate1.Acltype.
type PoolDatasetUpdate1Acltype string

// PoolDatasetUpdate1Atime defines model for PoolDatasetUpdate1.Atime.
type PoolDatasetUpdate1Atime string

// PoolDatasetUpdate1Compression defines model for PoolDatasetUpdate1.Compression.
type PoolDatasetUpdate1Compression string

// PoolDatasetUpdate1Deduplication defines model for PoolDatasetUpdate1.Deduplication.
type PoolDatasetUpdate1Deduplication string

// PoolDatasetUpdate1Exec defines model for PoolDatasetUpdate1.Exec.
type PoolDatasetUpdate1Exec string

// PoolDatasetUpdate1QuotaCritical0 defines model for .
type PoolDatasetUpdate1QuotaCritical0 = int

// PoolDatasetUpdate1QuotaCritical1 defines model for PoolDatasetUpdate1.QuotaCritical.1.
type PoolDatasetUpdate1QuotaCritical1 string

// PoolDatasetUpdate1_QuotaCritical defines model for PoolDatasetUpdate1.QuotaCritical.
type PoolDatasetUpdate1_QuotaCritical struct {
	union json.RawMessage
}

// PoolDatasetUpdate1QuotaWarning0 defines model for .
type PoolDatasetUpdate1QuotaWarning0 = int

// PoolDatasetUpdate1QuotaWarning1 defines model for PoolDatasetUpdate1.QuotaWarning.1.
type PoolDatasetUpdate1QuotaWarning1 string

// PoolDatasetUpdate1_QuotaWarning defines model for PoolDatasetUpdate1.QuotaWarning.
type PoolDatasetUpdate1_QuotaWarning struct {
	union json.RawMessage
}

// PoolDatasetUpdate1Readonly defines model for PoolDatasetUpdate1.Readonly.
type PoolDatasetUpdate1Readonly string

// PoolDatasetUpdate1Recordsize defines model for PoolDatasetUpdate1.Recordsize.
type PoolDatasetUpdate1Recordsize string

// PoolDatasetUpdate1RefquotaCritical0 defines model for .
type PoolDatasetUpdate1RefquotaCritical0 = int

// PoolDatasetUpdate1RefquotaCritical1 defines model for PoolDatasetUpdate1.RefquotaCritical.1.
type PoolDatasetUpdate1RefquotaCritical1 string

// PoolDatasetUpdate1_RefquotaCritical defines model for PoolDatasetUpdate1.RefquotaCritical.
type PoolDatasetUpdate1_RefquotaCritical struct {
	union json.RawMessage
}

// PoolDatasetUpdate1RefquotaWarning0 defines model for .
type PoolDatasetUpdate1RefquotaWarning0 = int

// PoolDatasetUpdate1RefquotaWarning1 defines model for PoolDatasetUpdate1.RefquotaWarning.1.
type PoolDatasetUpdate1RefquotaWarning1 string

// PoolDatasetUpdate1_RefquotaWarning defines model for PoolDatasetUpdate1.RefquotaWarning.
type PoolDatasetUpdate1_RefquotaWarning struct {
	union json.RawMessage
}

// PoolDatasetUpdate1Snapdir defines model for PoolDatasetUpdate1.Snapdir.
type PoolDatasetUpdate1Snapdir string

// PoolDatasetUpdate1Sync defines model for PoolDatasetUpdate1.Sync.
type PoolDatasetUpdate1Sync string

// PoolDatasetUpdate1Xattr defines model for PoolDatasetUpdate1.Xattr.
type PoolDatasetUpdate1Xattr string

// PoolDatasetUserpropCreate0 defines model for pool_dataset_userprop_create_0.
type PoolDatasetUserpropCreate0 struct {
	Id       *string `json:"id,omitempty"`
	Property *struct {
		Name  *string `json:"name,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"property,omitempty"`
}

// PoolDatasetUserpropDelete1 defines model for pool_dataset_userprop_delete_1.
type PoolDatasetUserpropDelete1 struct {
	Name *string `json:"name,omitempty"`
}

// PoolDatasetUserpropUpdate1 defines model for pool_dataset_userprop_update_1.
type PoolDatasetUserpropUpdate1 struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PoolDetach1 defines model for pool_detach_1.
type PoolDetach1 struct {
	Label *string `json:"label,omitempty"`
}

// PoolDownloadEncryptionKey1 defines model for pool_download_encryption_key_1.
type PoolDownloadEncryptionKey1 = string

// PoolExpand1 defines model for pool_expand_1.
type PoolExpand1 struct {
	Geli *struct {
		Passphrase *string `json:"passphrase,omitempty"`
	} `json:"geli,omitempty"`
}

// PoolExport1 defines model for pool_export_1.
type PoolExport1 struct {
	Cascade         *bool `json:"cascade,omitempty"`
	Destroy         *bool `json:"destroy,omitempty"`
	RestartServices *bool `json:"restart_services,omitempty"`
}

// PoolFilesystemChoices0 defines model for pool_filesystem_choices_0.
type PoolFilesystemChoices0 = []string

// PoolGetDisks defines model for pool_get_disks.
type PoolGetDisks = map[string]interface{}

// PoolImportDisk defines model for pool_import_disk.
type PoolImportDisk struct {
	Device    *PoolImportDisk0 `json:"device,omitempty"`
	DstPath   *PoolImportDisk3 `json:"dst_path,omitempty"`
	FsOptions *PoolImportDisk2 `json:"fs_options,omitempty"`
	FsType    *PoolImportDisk1 `json:"fs_type,omitempty"`
}

// PoolImportDisk0 defines model for pool_import_disk_0.
type PoolImportDisk0 = string

// PoolImportDisk1 defines model for pool_import_disk_1.
type PoolImportDisk1 = string

// PoolImportDisk2 defines model for pool_import_disk_2.
type PoolImportDisk2 map[string]interface{}

// PoolImportDisk3 defines model for pool_import_disk_3.
type PoolImportDisk3 = string

// PoolImportDiskAutodetectFsType0 defines model for pool_import_disk_autodetect_fs_type_0.
type PoolImportDiskAutodetectFsType0 = string

// PoolImportPool0 defines model for pool_import_pool_0.
type PoolImportPool0 struct {
	EnableAttachments *bool   `json:"enable_attachments,omitempty"`
	Guid              *string `json:"guid,omitempty"`
	Name              *string `json:"name,omitempty"`
	Passphrase        *string `json:"passphrase,omitempty"`
}

// PoolIsUpgraded defines model for pool_is_upgraded.
type PoolIsUpgraded = map[string]interface{}

// PoolLock1 defines model for pool_lock_1.
type PoolLock1 = string

// PoolOffline1 defines model for pool_offline_1.
type PoolOffline1 struct {
	Label *string `json:"label,omitempty"`
}

// PoolOnline1 defines model for pool_online_1.
type PoolOnline1 struct {
	Label *string `json:"label,omitempty"`
}

// PoolPassphrase1 defines model for pool_passphrase_1.
type PoolPassphrase1 struct {
	AdminPassword *string `json:"admin_password,omitempty"`
	Passphrase    *string `json:"passphrase"`
}

// PoolProcesses defines model for pool_processes.
type PoolProcesses = map[string]interface{}

// PoolRecoverykeyRm1 defines model for pool_recoverykey_rm_1.
type PoolRecoverykeyRm1 struct {
	AdminPassword *string `json:"admin_password,omitempty"`
}

// PoolRekey1 defines model for pool_rekey_1.
type PoolRekey1 struct {
	AdminPassword *string `json:"admin_password,omitempty"`
}

// PoolRemove1 defines model for pool_remove_1.
type PoolRemove1 struct {
	Label *string `json:"label,omitempty"`
}

// PoolReplace1 defines model for pool_replace_1.
type PoolReplace1 struct {
	Disk       *string `json:"disk,omitempty"`
	Force      *bool   `json:"force,omitempty"`
	Label      *string `json:"label,omitempty"`
	Passphrase *string `json:"passphrase,omitempty"`
}

// PoolResilverUpdate0 defines model for pool_resilver_update_0.
type PoolResilverUpdate0 struct {
	Begin   *string `json:"begin,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
	End     *string `json:"end,omitempty"`
	Weekday *[]int  `json:"weekday,omitempty"`
}

// PoolScrub1 defines model for pool_scrub_1.
type PoolScrub1 string

// PoolScrubCreate0 defines model for pool_scrub_create_0.
type PoolScrubCreate0 struct {
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Pool        *int    `json:"pool,omitempty"`
	Schedule    *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Threshold *int `json:"threshold,omitempty"`
}

// PoolScrubRun defines model for pool_scrub_run.
type PoolScrubRun struct {
	Name      *PoolScrubRun0 `json:"name,omitempty"`
	Threshold *PoolScrubRun1 `json:"threshold,omitempty"`
}

// PoolScrubRun0 defines model for pool_scrub_run_0.
type PoolScrubRun0 = string

// PoolScrubRun1 defines model for pool_scrub_run_1.
type PoolScrubRun1 = int

// PoolScrubUpdate1 defines model for pool_scrub_update_1.
type PoolScrubUpdate1 struct {
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Pool        *int    `json:"pool,omitempty"`
	Schedule    *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Threshold *int `json:"threshold,omitempty"`
}

// PoolSnapshottaskCreate0 defines model for pool_snapshottask_create_0.
type PoolSnapshottaskCreate0 struct {
	AllowEmpty    *bool                                `json:"allow_empty,omitempty"`
	Dataset       *string                              `json:"dataset,omitempty"`
	Enabled       *bool                                `json:"enabled,omitempty"`
	Exclude       *[]string                            `json:"exclude,omitempty"`
	LifetimeUnit  *PoolSnapshottaskCreate0LifetimeUnit `json:"lifetime_unit,omitempty"`
	LifetimeValue *int                                 `json:"lifetime_value,omitempty"`
	NamingSchema  *string                              `json:"naming_schema,omitempty"`
	Recursive     *bool                                `json:"recursive,omitempty"`
	Schedule      *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
}

// PoolSnapshottaskCreate0LifetimeUnit defines model for PoolSnapshottaskCreate0.LifetimeUnit.
type PoolSnapshottaskCreate0LifetimeUnit string

// PoolSnapshottaskRun defines model for pool_snapshottask_run.
type PoolSnapshottaskRun = map[string]interface{}

// PoolSnapshottaskUpdate1 defines model for pool_snapshottask_update_1.
type PoolSnapshottaskUpdate1 struct {
	AllowEmpty    *bool                                `json:"allow_empty,omitempty"`
	Dataset       *string                              `json:"dataset,omitempty"`
	Enabled       *bool                                `json:"enabled,omitempty"`
	Exclude       *[]string                            `json:"exclude,omitempty"`
	LifetimeUnit  *PoolSnapshottaskUpdate1LifetimeUnit `json:"lifetime_unit,omitempty"`
	LifetimeValue *int                                 `json:"lifetime_value,omitempty"`
	NamingSchema  *string                              `json:"naming_schema,omitempty"`
	Recursive     *bool                                `json:"recursive,omitempty"`
	Schedule      *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
}

// PoolSnapshottaskUpdate1LifetimeUnit defines model for PoolSnapshottaskUpdate1.LifetimeUnit.
type PoolSnapshottaskUpdate1LifetimeUnit string

// PoolUnlock1 defines model for pool_unlock_1.
type PoolUnlock1 struct {
	Passphrase      *string        `json:"passphrase,omitempty"`
	Recoverykey     *bool          `json:"recoverykey,omitempty"`
	ServicesRestart *[]interface{} `json:"services_restart,omitempty"`
}

// PoolUnlockServicesRestartChoices0 defines model for pool_unlock_services_restart_choices_0.
type PoolUnlockServicesRestartChoices0 = int

// PoolUpdate1 defines model for pool_update_1.
type PoolUpdate1 struct {
	Autotrim          *PoolUpdate1Autotrim `json:"autotrim,omitempty"`
	EncryptionOptions *struct {
		Algorithm   *PoolUpdate1EncryptionOptionsAlgorithm `json:"algorithm,omitempty"`
		GenerateKey *bool                                  `json:"generate_key,omitempty"`
		Key         *string                                `json:"key"`
		Passphrase  *string                                `json:"passphrase"`
		Pbkdf2iters *int                                   `json:"pbkdf2iters,omitempty"`
	} `json:"encryption_options,omitempty"`
	Topology *struct {
		Cache   *[]map[string]interface{} `json:"cache,omitempty"`
		Data    *[]map[string]interface{} `json:"data,omitempty"`
		Dedup   *[]map[string]interface{} `json:"dedup,omitempty"`
		Log     *[]map[string]interface{} `json:"log,omitempty"`
		Spares  *[]string                 `json:"spares,omitempty"`
		Special *[]map[string]interface{} `json:"special,omitempty"`
	} `json:"topology,omitempty"`
}

// PoolUpdate1Autotrim defines model for PoolUpdate1.Autotrim.
type PoolUpdate1Autotrim string

// PoolUpdate1EncryptionOptionsAlgorithm defines model for PoolUpdate1.EncryptionOptions.Algorithm.
type PoolUpdate1EncryptionOptionsAlgorithm string

// PoolUpgrade defines model for pool_upgrade.
type PoolUpgrade = map[string]interface{}

// ReplicationConfigUpdate0 defines model for replication_config_update_0.
type ReplicationConfigUpdate0 struct {
	MaxParallelReplicationTasks *int `json:"max_parallel_replication_tasks"`
}

// ReplicationCountEligibleManualSnapshots defines model for replication_count_eligible_manual_snapshots.
type ReplicationCountEligibleManualSnapshots struct {
	Datasets       *ReplicationCountEligibleManualSnapshots0 `json:"datasets,omitempty"`
	NamingSchema   *ReplicationCountEligibleManualSnapshots1 `json:"naming_schema,omitempty"`
	SshCredentials *ReplicationCountEligibleManualSnapshots3 `json:"ssh_credentials"`
	Transport      *ReplicationCountEligibleManualSnapshots2 `json:"transport,omitempty"`
}

// ReplicationCountEligibleManualSnapshots0 defines model for replication_count_eligible_manual_snapshots_0.
type ReplicationCountEligibleManualSnapshots0 = []string

// ReplicationCountEligibleManualSnapshots1 defines model for replication_count_eligible_manual_snapshots_1.
type ReplicationCountEligibleManualSnapshots1 = []string

// ReplicationCountEligibleManualSnapshots2 defines model for replication_count_eligible_manual_snapshots_2.
type ReplicationCountEligibleManualSnapshots2 string

// ReplicationCountEligibleManualSnapshots3 defines model for replication_count_eligible_manual_snapshots_3.
type ReplicationCountEligibleManualSnapshots3 = int

// ReplicationCreate0 defines model for replication_create_0.
type ReplicationCreate0 struct {
	AllowFromScratch                *bool                                  `json:"allow_from_scratch,omitempty"`
	AlsoIncludeNamingSchema         *[]string                              `json:"also_include_naming_schema,omitempty"`
	Auto                            *bool                                  `json:"auto,omitempty"`
	Compressed                      *bool                                  `json:"compressed,omitempty"`
	Compression                     *ReplicationCreate0Compression         `json:"compression"`
	Direction                       *ReplicationCreate0Direction           `json:"direction,omitempty"`
	Embed                           *bool                                  `json:"embed,omitempty"`
	Enabled                         *bool                                  `json:"enabled,omitempty"`
	Encryption                      *bool                                  `json:"encryption,omitempty"`
	EncryptionKey                   *string                                `json:"encryption_key"`
	EncryptionKeyFormat             *ReplicationCreate0EncryptionKeyFormat `json:"encryption_key_format"`
	EncryptionKeyLocation           *string                                `json:"encryption_key_location"`
	Exclude                         *[]string                              `json:"exclude,omitempty"`
	HoldPendingSnapshots            *bool                                  `json:"hold_pending_snapshots,omitempty"`
	LargeBlock                      *bool                                  `json:"large_block,omitempty"`
	LifetimeUnit                    *ReplicationCreate0LifetimeUnit        `json:"lifetime_unit"`
	LifetimeValue                   *int                                   `json:"lifetime_value"`
	LoggingLevel                    *ReplicationCreate0LoggingLevel        `json:"logging_level"`
	Name                            *string                                `json:"name,omitempty"`
	NamingSchema                    *[]string                              `json:"naming_schema,omitempty"`
	NetcatActiveSide                *ReplicationCreate0NetcatActiveSide    `json:"netcat_active_side"`
	NetcatActiveSideListenAddress   *string                                `json:"netcat_active_side_listen_address"`
	NetcatActiveSidePortMax         *int                                   `json:"netcat_active_side_port_max"`
	NetcatActiveSidePortMin         *int                                   `json:"netcat_active_side_port_min"`
	NetcatPassiveSideConnectAddress *string                                `json:"netcat_passive_side_connect_address"`
	OnlyMatchingSchedule            *bool                                  `json:"only_matching_schedule,omitempty"`
	PeriodicSnapshotTasks           *[]int                                 `json:"periodic_snapshot_tasks,omitempty"`
	Properties                      *bool                                  `json:"properties,omitempty"`
	PropertiesExclude               *[]string                              `json:"properties_exclude,omitempty"`
	Readonly                        *ReplicationCreate0Readonly            `json:"readonly,omitempty"`
	Recursive                       *bool                                  `json:"recursive,omitempty"`
	Replicate                       *bool                                  `json:"replicate,omitempty"`
	RestrictSchedule                *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"restrict_schedule,omitempty"`
	RetentionPolicy *ReplicationCreate0RetentionPolicy `json:"retention_policy,omitempty"`
	Retries         *int                               `json:"retries,omitempty"`
	Schedule        *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	SourceDatasets *[]string                    `json:"source_datasets,omitempty"`
	SpeedLimit     *int                         `json:"speed_limit"`
	SshCredentials *int                         `json:"ssh_credentials"`
	TargetDataset  *string                      `json:"target_dataset,omitempty"`
	Transport      *ReplicationCreate0Transport `json:"transport,omitempty"`
}

// ReplicationCreate0Compression defines model for ReplicationCreate0.Compression.
type ReplicationCreate0Compression string

// ReplicationCreate0Direction defines model for ReplicationCreate0.Direction.
type ReplicationCreate0Direction string

// ReplicationCreate0EncryptionKeyFormat defines model for ReplicationCreate0.EncryptionKeyFormat.
type ReplicationCreate0EncryptionKeyFormat string

// ReplicationCreate0LifetimeUnit defines model for ReplicationCreate0.LifetimeUnit.
type ReplicationCreate0LifetimeUnit string

// ReplicationCreate0LoggingLevel defines model for ReplicationCreate0.LoggingLevel.
type ReplicationCreate0LoggingLevel string

// ReplicationCreate0NetcatActiveSide defines model for ReplicationCreate0.NetcatActiveSide.
type ReplicationCreate0NetcatActiveSide string

// ReplicationCreate0Readonly defines model for ReplicationCreate0.Readonly.
type ReplicationCreate0Readonly string

// ReplicationCreate0RetentionPolicy defines model for ReplicationCreate0.RetentionPolicy.
type ReplicationCreate0RetentionPolicy string

// ReplicationCreate0Transport defines model for ReplicationCreate0.Transport.
type ReplicationCreate0Transport string

// ReplicationCreateDataset defines model for replication_create_dataset.
type ReplicationCreateDataset struct {
	Dataset        *ReplicationCreateDataset0 `json:"dataset,omitempty"`
	SshCredentials *ReplicationCreateDataset2 `json:"ssh_credentials"`
	Transport      *ReplicationCreateDataset1 `json:"transport,omitempty"`
}

// ReplicationCreateDataset0 defines model for replication_create_dataset_0.
type ReplicationCreateDataset0 = string

// ReplicationCreateDataset1 defines model for replication_create_dataset_1.
type ReplicationCreateDataset1 string

// ReplicationCreateDataset2 defines model for replication_create_dataset_2.
type ReplicationCreateDataset2 = int

// ReplicationListDatasets defines model for replication_list_datasets.
type ReplicationListDatasets struct {
	SshCredentials *ReplicationListDatasets1 `json:"ssh_credentials"`
	Transport      *ReplicationListDatasets0 `json:"transport,omitempty"`
}

// ReplicationListDatasets0 defines model for replication_list_datasets_0.
type ReplicationListDatasets0 string

// ReplicationListDatasets1 defines model for replication_list_datasets_1.
type ReplicationListDatasets1 = int

// ReplicationRestore1 defines model for replication_restore_1.
type ReplicationRestore1 struct {
	Name          *string `json:"name,omitempty"`
	TargetDataset *string `json:"target_dataset,omitempty"`
}

// ReplicationRun defines model for replication_run.
type ReplicationRun = map[string]interface{}

// ReplicationTargetUnmatchedSnapshots defines model for replication_target_unmatched_snapshots.
type ReplicationTargetUnmatchedSnapshots struct {
	Direction      *ReplicationTargetUnmatchedSnapshots0 `json:"direction,omitempty"`
	SourceDatasets *ReplicationTargetUnmatchedSnapshots1 `json:"source_datasets,omitempty"`
	SshCredentials *ReplicationTargetUnmatchedSnapshots4 `json:"ssh_credentials"`
	TargetDataset  *ReplicationTargetUnmatchedSnapshots2 `json:"target_dataset,omitempty"`
	Transport      *ReplicationTargetUnmatchedSnapshots3 `json:"transport,omitempty"`
}

// ReplicationTargetUnmatchedSnapshots0 defines model for replication_target_unmatched_snapshots_0.
type ReplicationTargetUnmatchedSnapshots0 string

// ReplicationTargetUnmatchedSnapshots1 defines model for replication_target_unmatched_snapshots_1.
type ReplicationTargetUnmatchedSnapshots1 = []string

// ReplicationTargetUnmatchedSnapshots2 defines model for replication_target_unmatched_snapshots_2.
type ReplicationTargetUnmatchedSnapshots2 = string

// ReplicationTargetUnmatchedSnapshots3 defines model for replication_target_unmatched_snapshots_3.
type ReplicationTargetUnmatchedSnapshots3 string

// ReplicationTargetUnmatchedSnapshots4 defines model for replication_target_unmatched_snapshots_4.
type ReplicationTargetUnmatchedSnapshots4 = int

// ReplicationUpdate1 defines model for replication_update_1.
type ReplicationUpdate1 struct {
	AllowFromScratch                *bool                                  `json:"allow_from_scratch,omitempty"`
	AlsoIncludeNamingSchema         *[]string                              `json:"also_include_naming_schema,omitempty"`
	Auto                            *bool                                  `json:"auto,omitempty"`
	Compressed                      *bool                                  `json:"compressed,omitempty"`
	Compression                     *ReplicationUpdate1Compression         `json:"compression"`
	Direction                       *ReplicationUpdate1Direction           `json:"direction,omitempty"`
	Embed                           *bool                                  `json:"embed,omitempty"`
	Enabled                         *bool                                  `json:"enabled,omitempty"`
	Encryption                      *bool                                  `json:"encryption,omitempty"`
	EncryptionKey                   *string                                `json:"encryption_key"`
	EncryptionKeyFormat             *ReplicationUpdate1EncryptionKeyFormat `json:"encryption_key_format"`
	EncryptionKeyLocation           *string                                `json:"encryption_key_location"`
	Exclude                         *[]string                              `json:"exclude,omitempty"`
	HoldPendingSnapshots            *bool                                  `json:"hold_pending_snapshots,omitempty"`
	LargeBlock                      *bool                                  `json:"large_block,omitempty"`
	LifetimeUnit                    *ReplicationUpdate1LifetimeUnit        `json:"lifetime_unit"`
	LifetimeValue                   *int                                   `json:"lifetime_value"`
	LoggingLevel                    *ReplicationUpdate1LoggingLevel        `json:"logging_level"`
	Name                            *string                                `json:"name,omitempty"`
	NamingSchema                    *[]string                              `json:"naming_schema,omitempty"`
	NetcatActiveSide                *ReplicationUpdate1NetcatActiveSide    `json:"netcat_active_side"`
	NetcatActiveSideListenAddress   *string                                `json:"netcat_active_side_listen_address"`
	NetcatActiveSidePortMax         *int                                   `json:"netcat_active_side_port_max"`
	NetcatActiveSidePortMin         *int                                   `json:"netcat_active_side_port_min"`
	NetcatPassiveSideConnectAddress *string                                `json:"netcat_passive_side_connect_address"`
	OnlyMatchingSchedule            *bool                                  `json:"only_matching_schedule,omitempty"`
	PeriodicSnapshotTasks           *[]int                                 `json:"periodic_snapshot_tasks,omitempty"`
	Properties                      *bool                                  `json:"properties,omitempty"`
	PropertiesExclude               *[]string                              `json:"properties_exclude,omitempty"`
	Readonly                        *ReplicationUpdate1Readonly            `json:"readonly,omitempty"`
	Recursive                       *bool                                  `json:"recursive,omitempty"`
	Replicate                       *bool                                  `json:"replicate,omitempty"`
	RestrictSchedule                *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"restrict_schedule,omitempty"`
	RetentionPolicy *ReplicationUpdate1RetentionPolicy `json:"retention_policy,omitempty"`
	Retries         *int                               `json:"retries,omitempty"`
	Schedule        *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	SourceDatasets *[]string                    `json:"source_datasets,omitempty"`
	SpeedLimit     *int                         `json:"speed_limit"`
	SshCredentials *int                         `json:"ssh_credentials"`
	TargetDataset  *string                      `json:"target_dataset,omitempty"`
	Transport      *ReplicationUpdate1Transport `json:"transport,omitempty"`
}

// ReplicationUpdate1Compression defines model for ReplicationUpdate1.Compression.
type ReplicationUpdate1Compression string

// ReplicationUpdate1Direction defines model for ReplicationUpdate1.Direction.
type ReplicationUpdate1Direction string

// ReplicationUpdate1EncryptionKeyFormat defines model for ReplicationUpdate1.EncryptionKeyFormat.
type ReplicationUpdate1EncryptionKeyFormat string

// ReplicationUpdate1LifetimeUnit defines model for ReplicationUpdate1.LifetimeUnit.
type ReplicationUpdate1LifetimeUnit string

// ReplicationUpdate1LoggingLevel defines model for ReplicationUpdate1.LoggingLevel.
type ReplicationUpdate1LoggingLevel string

// ReplicationUpdate1NetcatActiveSide defines model for ReplicationUpdate1.NetcatActiveSide.
type ReplicationUpdate1NetcatActiveSide string

// ReplicationUpdate1Readonly defines model for ReplicationUpdate1.Readonly.
type ReplicationUpdate1Readonly string

// ReplicationUpdate1RetentionPolicy defines model for ReplicationUpdate1.RetentionPolicy.
type ReplicationUpdate1RetentionPolicy string

// ReplicationUpdate1Transport defines model for ReplicationUpdate1.Transport.
type ReplicationUpdate1Transport string

// ReportingGetData defines model for reporting_get_data.
type ReportingGetData struct {
	Graphs         *ReportingGetData0 `json:"graphs,omitempty"`
	ReportingQuery *ReportingGetData1 `json:"reporting_query,omitempty"`
}

// ReportingGetData0 defines model for reporting_get_data_0.
type ReportingGetData0 = []map[string]interface{}

// ReportingGetData1 defines model for reporting_get_data_1.
type ReportingGetData1 struct {
	Aggregate *bool                  `json:"aggregate,omitempty"`
	End       *string                `json:"end,omitempty"`
	Page      *int                   `json:"page,omitempty"`
	Start     *string                `json:"start,omitempty"`
	Unit      *ReportingGetData1Unit `json:"unit,omitempty"`
}

// ReportingGetData1Unit defines model for ReportingGetData1.Unit.
type ReportingGetData1Unit string

// ReportingUpdate0 defines model for reporting_update_0.
type ReportingUpdate0 struct {
	ConfirmRrdDestroy         *bool   `json:"confirm_rrd_destroy,omitempty"`
	CpuInPercentage           *bool   `json:"cpu_in_percentage,omitempty"`
	GraphAge                  *int    `json:"graph_age,omitempty"`
	GraphPoints               *int    `json:"graph_points,omitempty"`
	Graphite                  *string `json:"graphite,omitempty"`
	GraphiteSeparateinstances *bool   `json:"graphite_separateinstances,omitempty"`
}

// RouteIpv4gwReachable0 defines model for route_ipv4gw_reachable_0.
type RouteIpv4gwReachable0 = string

// RsyncdUpdate0 defines model for rsyncd_update_0.
type RsyncdUpdate0 struct {
	Auxiliary *string `json:"auxiliary,omitempty"`
	Port      *int    `json:"port,omitempty"`
}

// RsyncmodCreate0 defines model for rsyncmod_create_0.
type RsyncmodCreate0 struct {
	Auxiliary  *string              `json:"auxiliary,omitempty"`
	Comment    *string              `json:"comment,omitempty"`
	Enabled    *bool                `json:"enabled,omitempty"`
	Group      *string              `json:"group,omitempty"`
	Hostsallow *[]string            `json:"hostsallow,omitempty"`
	Hostsdeny  *[]string            `json:"hostsdeny,omitempty"`
	Maxconn    *int                 `json:"maxconn,omitempty"`
	Mode       *RsyncmodCreate0Mode `json:"mode,omitempty"`
	Name       *string              `json:"name,omitempty"`
	Path       *string              `json:"path,omitempty"`
	User       *string              `json:"user,omitempty"`
}

// RsyncmodCreate0Mode defines model for RsyncmodCreate0.Mode.
type RsyncmodCreate0Mode string

// RsyncmodUpdate1 defines model for rsyncmod_update_1.
type RsyncmodUpdate1 struct {
	Auxiliary  *string              `json:"auxiliary,omitempty"`
	Comment    *string              `json:"comment,omitempty"`
	Enabled    *bool                `json:"enabled,omitempty"`
	Group      *string              `json:"group,omitempty"`
	Hostsallow *[]string            `json:"hostsallow,omitempty"`
	Hostsdeny  *[]string            `json:"hostsdeny,omitempty"`
	Maxconn    *int                 `json:"maxconn,omitempty"`
	Mode       *RsyncmodUpdate1Mode `json:"mode,omitempty"`
	Name       *string              `json:"name,omitempty"`
	Path       *string              `json:"path,omitempty"`
	User       *string              `json:"user,omitempty"`
}

// RsyncmodUpdate1Mode defines model for RsyncmodUpdate1.Mode.
type RsyncmodUpdate1Mode string

// RsynctaskCreate0 defines model for rsynctask_create_0.
type RsynctaskCreate0 struct {
	Archive      *bool                      `json:"archive,omitempty"`
	Compress     *bool                      `json:"compress,omitempty"`
	Delayupdates *bool                      `json:"delayupdates,omitempty"`
	Delete       *bool                      `json:"delete,omitempty"`
	Desc         *string                    `json:"desc,omitempty"`
	Direction    *RsynctaskCreate0Direction `json:"direction,omitempty"`
	Enabled      *bool                      `json:"enabled,omitempty"`
	Extra        *[]string                  `json:"extra,omitempty"`
	Mode         *RsynctaskCreate0Mode      `json:"mode,omitempty"`
	Path         *string                    `json:"path,omitempty"`
	Preserveattr *bool                      `json:"preserveattr,omitempty"`
	Preserveperm *bool                      `json:"preserveperm,omitempty"`
	Quiet        *bool                      `json:"quiet,omitempty"`
	Recursive    *bool                      `json:"recursive,omitempty"`
	Remotehost   *string                    `json:"remotehost,omitempty"`
	Remotemodule *string                    `json:"remotemodule,omitempty"`
	Remotepath   *string                    `json:"remotepath,omitempty"`
	Remoteport   *int                       `json:"remoteport,omitempty"`
	Schedule     *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Times         *bool   `json:"times,omitempty"`
	User          *string `json:"user,omitempty"`
	ValidateRpath *bool   `json:"validate_rpath,omitempty"`
}

// RsynctaskCreate0Direction defines model for RsynctaskCreate0.Direction.
type RsynctaskCreate0Direction string

// RsynctaskCreate0Mode defines model for RsynctaskCreate0.Mode.
type RsynctaskCreate0Mode string

// RsynctaskRun defines model for rsynctask_run.
type RsynctaskRun = map[string]interface{}

// RsynctaskUpdate1 defines model for rsynctask_update_1.
type RsynctaskUpdate1 struct {
	Archive      *bool                      `json:"archive,omitempty"`
	Compress     *bool                      `json:"compress,omitempty"`
	Delayupdates *bool                      `json:"delayupdates,omitempty"`
	Delete       *bool                      `json:"delete,omitempty"`
	Desc         *string                    `json:"desc,omitempty"`
	Direction    *RsynctaskUpdate1Direction `json:"direction,omitempty"`
	Enabled      *bool                      `json:"enabled,omitempty"`
	Extra        *[]string                  `json:"extra,omitempty"`
	Mode         *RsynctaskUpdate1Mode      `json:"mode,omitempty"`
	Path         *string                    `json:"path,omitempty"`
	Preserveattr *bool                      `json:"preserveattr,omitempty"`
	Preserveperm *bool                      `json:"preserveperm,omitempty"`
	Quiet        *bool                      `json:"quiet,omitempty"`
	Recursive    *bool                      `json:"recursive,omitempty"`
	Remotehost   *string                    `json:"remotehost,omitempty"`
	Remotemodule *string                    `json:"remotemodule,omitempty"`
	Remotepath   *string                    `json:"remotepath,omitempty"`
	Remoteport   *int                       `json:"remoteport,omitempty"`
	Schedule     *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Times         *bool   `json:"times,omitempty"`
	User          *string `json:"user,omitempty"`
	ValidateRpath *bool   `json:"validate_rpath,omitempty"`
}

// RsynctaskUpdate1Direction defines model for RsynctaskUpdate1.Direction.
type RsynctaskUpdate1Direction string

// RsynctaskUpdate1Mode defines model for RsynctaskUpdate1.Mode.
type RsynctaskUpdate1Mode string

// S3Update0 defines model for s3_update_0.
type S3Update0 struct {
	AccessKey   *string `json:"access_key,omitempty"`
	Bindip      *string `json:"bindip,omitempty"`
	Bindport    *int    `json:"bindport,omitempty"`
	Browser     *bool   `json:"browser,omitempty"`
	Certificate *int    `json:"certificate"`
	SecretKey   *string `json:"secret_key,omitempty"`
	StoragePath *string `json:"storage_path,omitempty"`
}

// ServiceReload defines model for service_reload.
type ServiceReload struct {
	Service        *ServiceReload0 `json:"service,omitempty"`
	ServiceControl *ServiceReload1 `json:"service-control,omitempty"`
}

// ServiceReload0 defines model for service_reload_0.
type ServiceReload0 = string

// ServiceReload1 defines model for service_reload_1.
type ServiceReload1 struct {
	HaPropagate *bool `json:"ha_propagate,omitempty"`
}

// ServiceRestart defines model for service_restart.
type ServiceRestart struct {
	Service        *ServiceRestart0 `json:"service,omitempty"`
	ServiceControl *ServiceRestart1 `json:"service-control,omitempty"`
}

// ServiceRestart0 defines model for service_restart_0.
type ServiceRestart0 = string

// ServiceRestart1 defines model for service_restart_1.
type ServiceRestart1 struct {
	HaPropagate *bool `json:"ha_propagate,omitempty"`
}

// ServiceStart defines model for service_start.
type ServiceStart struct {
	Service        *ServiceStart0 `json:"service,omitempty"`
	ServiceControl *ServiceStart1 `json:"service-control,omitempty"`
}

// ServiceStart0 defines model for service_start_0.
type ServiceStart0 = string

// ServiceStart1 defines model for service_start_1.
type ServiceStart1 struct {
	HaPropagate *bool `json:"ha_propagate,omitempty"`
}

// ServiceStop defines model for service_stop.
type ServiceStop struct {
	Service        *ServiceStop0 `json:"service,omitempty"`
	ServiceControl *ServiceStop1 `json:"service-control,omitempty"`
}

// ServiceStop0 defines model for service_stop_0.
type ServiceStop0 = string

// ServiceStop1 defines model for service_stop_1.
type ServiceStop1 struct {
	HaPropagate *bool `json:"ha_propagate,omitempty"`
}

// ServiceTerminateProcess defines model for service_terminate_process.
type ServiceTerminateProcess struct {
	Pid     *ServiceTerminateProcess0 `json:"pid,omitempty"`
	Timeout *ServiceTerminateProcess1 `json:"timeout,omitempty"`
}

// ServiceTerminateProcess0 defines model for service_terminate_process_0.
type ServiceTerminateProcess0 = int

// ServiceTerminateProcess1 defines model for service_terminate_process_1.
type ServiceTerminateProcess1 = int

// ServiceUpdate1 defines model for service_update_1.
type ServiceUpdate1 struct {
	Enable *bool `json:"enable,omitempty"`
}

// SharingAfpCreate0 defines model for sharing_afp_create_0.
type SharingAfpCreate0 struct {
	Allow            *[]interface{} `json:"allow,omitempty"`
	Auxparams        *string        `json:"auxparams,omitempty"`
	Comment          *string        `json:"comment,omitempty"`
	Deny             *[]interface{} `json:"deny,omitempty"`
	Dperm            *string        `json:"dperm,omitempty"`
	Enabled          *bool          `json:"enabled,omitempty"`
	Fperm            *string        `json:"fperm,omitempty"`
	Home             *bool          `json:"home,omitempty"`
	Hostsallow       *[]interface{} `json:"hostsallow,omitempty"`
	Hostsdeny        *[]interface{} `json:"hostsdeny,omitempty"`
	Name             *string        `json:"name,omitempty"`
	Nodev            *bool          `json:"nodev,omitempty"`
	Nostat           *bool          `json:"nostat,omitempty"`
	Path             *string        `json:"path,omitempty"`
	Ro               *[]interface{} `json:"ro,omitempty"`
	Rw               *[]interface{} `json:"rw,omitempty"`
	Timemachine      *bool          `json:"timemachine,omitempty"`
	TimemachineQuota *int           `json:"timemachine_quota,omitempty"`
	Umask            *string        `json:"umask,omitempty"`
	Upriv            *bool          `json:"upriv,omitempty"`
	Vuid             *string        `json:"vuid"`
}

// SharingAfpUpdate1 defines model for sharing_afp_update_1.
type SharingAfpUpdate1 struct {
	Allow            *[]interface{} `json:"allow,omitempty"`
	Auxparams        *string        `json:"auxparams,omitempty"`
	Comment          *string        `json:"comment,omitempty"`
	Deny             *[]interface{} `json:"deny,omitempty"`
	Dperm            *string        `json:"dperm,omitempty"`
	Enabled          *bool          `json:"enabled,omitempty"`
	Fperm            *string        `json:"fperm,omitempty"`
	Home             *bool          `json:"home,omitempty"`
	Hostsallow       *[]interface{} `json:"hostsallow,omitempty"`
	Hostsdeny        *[]interface{} `json:"hostsdeny,omitempty"`
	Name             *string        `json:"name,omitempty"`
	Nodev            *bool          `json:"nodev,omitempty"`
	Nostat           *bool          `json:"nostat,omitempty"`
	Path             *string        `json:"path,omitempty"`
	Ro               *[]interface{} `json:"ro,omitempty"`
	Rw               *[]interface{} `json:"rw,omitempty"`
	Timemachine      *bool          `json:"timemachine,omitempty"`
	TimemachineQuota *int           `json:"timemachine_quota,omitempty"`
	Umask            *string        `json:"umask,omitempty"`
	Upriv            *bool          `json:"upriv,omitempty"`
	Vuid             *string        `json:"vuid"`
}

// SharingNfsCreate0 defines model for sharing_nfs_create_0.
type SharingNfsCreate0 struct {
	Alldirs      *bool     `json:"alldirs,omitempty"`
	Comment      *string   `json:"comment,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Hosts        *[]string `json:"hosts,omitempty"`
	MapallGroup  *string   `json:"mapall_group"`
	MapallUser   *string   `json:"mapall_user"`
	MaprootGroup *string   `json:"maproot_group"`
	MaprootUser  *string   `json:"maproot_user"`
	Networks     *[]string `json:"networks,omitempty"`
	Path         *string   `json:"path,omitempty"`
	Paths        *[]string `json:"paths,omitempty"`
	Quiet        *bool     `json:"quiet,omitempty"`
	Ro           *bool     `json:"ro,omitempty"`
	Security     *[]string `json:"security,omitempty"`
}

// SharingNfsUpdate1 defines model for sharing_nfs_update_1.
type SharingNfsUpdate1 struct {
	Alldirs      *bool     `json:"alldirs,omitempty"`
	Comment      *string   `json:"comment,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Hosts        *[]string `json:"hosts,omitempty"`
	MapallGroup  *string   `json:"mapall_group"`
	MapallUser   *string   `json:"mapall_user"`
	MaprootGroup *string   `json:"maproot_group"`
	MaprootUser  *string   `json:"maproot_user"`
	Networks     *[]string `json:"networks,omitempty"`
	Paths        *[]string `json:"paths,omitempty"`
	Quiet        *bool     `json:"quiet,omitempty"`
	Ro           *bool     `json:"ro,omitempty"`
	Security     *[]string `json:"security,omitempty"`
}

// SharingSmbCreate0 defines model for sharing_smb_create_0.
type SharingSmbCreate0 struct {
	AaplNameMangling *bool                     `json:"aapl_name_mangling,omitempty"`
	Abe              *bool                     `json:"abe,omitempty"`
	Acl              *bool                     `json:"acl,omitempty"`
	Auxsmbconf       *string                   `json:"auxsmbconf,omitempty"`
	Browsable        *bool                     `json:"browsable,omitempty"`
	Comment          *string                   `json:"comment,omitempty"`
	Durablehandle    *bool                     `json:"durablehandle,omitempty"`
	Enabled          *bool                     `json:"enabled,omitempty"`
	Fsrvp            *bool                     `json:"fsrvp,omitempty"`
	Guestok          *bool                     `json:"guestok,omitempty"`
	Home             *bool                     `json:"home,omitempty"`
	Hostsallow       *[]interface{}            `json:"hostsallow,omitempty"`
	Hostsdeny        *[]interface{}            `json:"hostsdeny,omitempty"`
	Name             *string                   `json:"name,omitempty"`
	Path             *string                   `json:"path,omitempty"`
	PathSuffix       *string                   `json:"path_suffix,omitempty"`
	Purpose          *SharingSmbCreate0Purpose `json:"purpose,omitempty"`
	Recyclebin       *bool                     `json:"recyclebin,omitempty"`
	Ro               *bool                     `json:"ro,omitempty"`
	Shadowcopy       *bool                     `json:"shadowcopy,omitempty"`
	Streams          *bool                     `json:"streams,omitempty"`
	Timemachine      *bool                     `json:"timemachine,omitempty"`
}

// SharingSmbCreate0Purpose defines model for SharingSmbCreate0.Purpose.
type SharingSmbCreate0Purpose string

// SharingSmbUpdate1 defines model for sharing_smb_update_1.
type SharingSmbUpdate1 struct {
	AaplNameMangling *bool                     `json:"aapl_name_mangling,omitempty"`
	Abe              *bool                     `json:"abe,omitempty"`
	Acl              *bool                     `json:"acl,omitempty"`
	Auxsmbconf       *string                   `json:"auxsmbconf,omitempty"`
	Browsable        *bool                     `json:"browsable,omitempty"`
	Comment          *string                   `json:"comment,omitempty"`
	Durablehandle    *bool                     `json:"durablehandle,omitempty"`
	Enabled          *bool                     `json:"enabled,omitempty"`
	Fsrvp            *bool                     `json:"fsrvp,omitempty"`
	Guestok          *bool                     `json:"guestok,omitempty"`
	Home             *bool                     `json:"home,omitempty"`
	Hostsallow       *[]interface{}            `json:"hostsallow,omitempty"`
	Hostsdeny        *[]interface{}            `json:"hostsdeny,omitempty"`
	Name             *string                   `json:"name,omitempty"`
	Path             *string                   `json:"path,omitempty"`
	PathSuffix       *string                   `json:"path_suffix,omitempty"`
	Purpose          *SharingSmbUpdate1Purpose `json:"purpose,omitempty"`
	Recyclebin       *bool                     `json:"recyclebin,omitempty"`
	Ro               *bool                     `json:"ro,omitempty"`
	Shadowcopy       *bool                     `json:"shadowcopy,omitempty"`
	Streams          *bool                     `json:"streams,omitempty"`
	Timemachine      *bool                     `json:"timemachine,omitempty"`
}

// SharingSmbUpdate1Purpose defines model for SharingSmbUpdate1.Purpose.
type SharingSmbUpdate1Purpose string

// SharingWebdavCreate0 defines model for sharing_webdav_create_0.
type SharingWebdavCreate0 struct {
	Comment *string `json:"comment,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
	Name    *string `json:"name,omitempty"`
	Path    *string `json:"path,omitempty"`
	Perm    *bool   `json:"perm,omitempty"`
	Ro      *bool   `json:"ro,omitempty"`
}

// SharingWebdavUpdate1 defines model for sharing_webdav_update_1.
type SharingWebdavUpdate1 struct {
	Comment *string `json:"comment,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
	Name    *string `json:"name,omitempty"`
	Path    *string `json:"path,omitempty"`
	Perm    *bool   `json:"perm,omitempty"`
	Ro      *bool   `json:"ro,omitempty"`
}

// SmartTestCreate0 defines model for smart_test_create_0.
type SmartTestCreate0 struct {
	AllDisks *bool     `json:"all_disks,omitempty"`
	Desc     *string   `json:"desc,omitempty"`
	Disks    *[]string `json:"disks,omitempty"`
	Schedule *struct {
		Dom   *string `json:"dom,omitempty"`
		Dow   *string `json:"dow,omitempty"`
		Hour  *string `json:"hour,omitempty"`
		Month *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Type *SmartTestCreate0Type `json:"type,omitempty"`
}

// SmartTestCreate0Type defines model for SmartTestCreate0.Type.
type SmartTestCreate0Type string

// SmartTestDiskChoices0 defines model for smart_test_disk_choices_0.
type SmartTestDiskChoices0 = bool

// SmartTestManualTest0 defines model for smart_test_manual_test_0.
type SmartTestManualTest0 = []map[string]interface{}

// SmartTestUpdate1 defines model for smart_test_update_1.
type SmartTestUpdate1 struct {
	AllDisks *bool     `json:"all_disks,omitempty"`
	Desc     *string   `json:"desc,omitempty"`
	Disks    *[]string `json:"disks,omitempty"`
	Schedule *struct {
		Dom   *string `json:"dom,omitempty"`
		Dow   *string `json:"dow,omitempty"`
		Hour  *string `json:"hour,omitempty"`
		Month *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Type *SmartTestUpdate1Type `json:"type,omitempty"`
}

// SmartTestUpdate1Type defines model for SmartTestUpdate1.Type.
type SmartTestUpdate1Type string

// SmartUpdate0 defines model for smart_update_0.
type SmartUpdate0 struct {
	Critical      *int                   `json:"critical,omitempty"`
	Difference    *int                   `json:"difference,omitempty"`
	Informational *int                   `json:"informational,omitempty"`
	Interval      *int                   `json:"interval,omitempty"`
	Powermode     *SmartUpdate0Powermode `json:"powermode,omitempty"`
}

// SmartUpdate0Powermode defines model for SmartUpdate0.Powermode.
type SmartUpdate0Powermode string

// SmbGetRemoteAcl0 defines model for smb_get_remote_acl_0.
type SmbGetRemoteAcl0 struct {
	Options *struct {
		OutputFormat *SmbGetRemoteAcl0OptionsOutputFormat `json:"output_format,omitempty"`
		UseKerberos  *bool                                `json:"use_kerberos,omitempty"`
	} `json:"options,omitempty"`
	Password *string `json:"password,omitempty"`
	Path     *string `json:"path,omitempty"`
	Server   *string `json:"server,omitempty"`
	Share    *string `json:"share,omitempty"`
	Username *string `json:"username,omitempty"`
}

// SmbGetRemoteAcl0OptionsOutputFormat defines model for SmbGetRemoteAcl0.Options.OutputFormat.
type SmbGetRemoteAcl0OptionsOutputFormat string

// SmbSharesecCreate0 defines model for smb_sharesec_create_0.
type SmbSharesecCreate0 struct {
	ShareAcl  *[]map[string]interface{} `json:"share_acl,omitempty"`
	ShareName *string                   `json:"share_name,omitempty"`
}

// SmbSharesecGetacl defines model for smb_sharesec_getacl.
type SmbSharesecGetacl struct {
	Options   *SmbSharesecGetacl1 `json:"options,omitempty"`
	ShareName *SmbSharesecGetacl0 `json:"share_name,omitempty"`
}

// SmbSharesecGetacl0 defines model for smb_sharesec_getacl_0.
type SmbSharesecGetacl0 = string

// SmbSharesecGetacl1 defines model for smb_sharesec_getacl_1.
type SmbSharesecGetacl1 struct {
	ResolveSids *bool `json:"resolve_sids,omitempty"`
}

// SmbSharesecUpdate1 defines model for smb_sharesec_update_1.
type SmbSharesecUpdate1 struct {
	ShareAcl *[]map[string]interface{} `json:"share_acl,omitempty"`
}

// SmbStatus defines model for smb_status.
type SmbStatus struct {
	InfoLevel     *SmbStatus0 `json:"info_level,omitempty"`
	QueryFilters  *SmbStatus1 `json:"query-filters,omitempty"`
	QueryOptions  *SmbStatus2 `json:"query-options,omitempty"`
	StatusOptions *SmbStatus3 `json:"status_options,omitempty"`
}

// SmbStatus0 defines model for smb_status_0.
type SmbStatus0 string

// SmbStatus1 defines model for smb_status_1.
type SmbStatus1 = []interface{}

// SmbStatus2 defines model for smb_status_2.
type SmbStatus2 struct {
	Count           *bool                   `json:"count,omitempty"`
	Extend          *string                 `json:"extend"`
	ExtendContext   *string                 `json:"extend_context"`
	Extra           *map[string]interface{} `json:"extra,omitempty"`
	ForceSqlFilters *bool                   `json:"force_sql_filters,omitempty"`
	Get             *bool                   `json:"get,omitempty"`
	Limit           *int                    `json:"limit,omitempty"`
	Offset          *int                    `json:"offset,omitempty"`
	OrderBy         *[]interface{}          `json:"order_by,omitempty"`
	Prefix          *string                 `json:"prefix"`
	Relationships   *bool                   `json:"relationships,omitempty"`
	Select          *[]interface{}          `json:"select,omitempty"`
}

// SmbStatus3 defines model for smb_status_3.
type SmbStatus3 struct {
	Fast         *bool   `json:"fast,omitempty"`
	RestrictUser *string `json:"restrict_user,omitempty"`
	Verbose      *bool   `json:"verbose,omitempty"`
}

// SmbUpdate0 defines model for smb_update_0.
type SmbUpdate0 struct {
	AaplExtensions *bool               `json:"aapl_extensions,omitempty"`
	AdminGroup     *string             `json:"admin_group"`
	Bindip         *[]string           `json:"bindip,omitempty"`
	Description    *string             `json:"description,omitempty"`
	Dirmask        *string             `json:"dirmask,omitempty"`
	EnableSmb1     *bool               `json:"enable_smb1,omitempty"`
	Filemask       *string             `json:"filemask,omitempty"`
	Guest          *string             `json:"guest,omitempty"`
	Localmaster    *bool               `json:"localmaster,omitempty"`
	Loglevel       *SmbUpdate0Loglevel `json:"loglevel,omitempty"`
	Netbiosalias   *[]string           `json:"netbiosalias,omitempty"`
	Netbiosname    *string             `json:"netbiosname,omitempty"`
	NetbiosnameB   *string             `json:"netbiosname_b,omitempty"`
	Ntlmv1Auth     *bool               `json:"ntlmv1_auth,omitempty"`
	SmbOptions     *string             `json:"smb_options,omitempty"`
	Syslog         *bool               `json:"syslog,omitempty"`
	Unixcharset    *string             `json:"unixcharset,omitempty"`
	Workgroup      *string             `json:"workgroup,omitempty"`
}

// SmbUpdate0Loglevel defines model for SmbUpdate0.Loglevel.
type SmbUpdate0Loglevel string

// SnmpUpdate0 defines model for snmp_update_0.
type SnmpUpdate0 struct {
	Community        *string                 `json:"community,omitempty"`
	Contact          *string                 `json:"contact,omitempty"`
	Iftop            *bool                   `json:"iftop,omitempty"`
	Location         *string                 `json:"location,omitempty"`
	Loglevel         *int                    `json:"loglevel,omitempty"`
	Options          *string                 `json:"options,omitempty"`
	Traps            *bool                   `json:"traps,omitempty"`
	V3               *bool                   `json:"v3,omitempty"`
	V3Authtype       *SnmpUpdate0V3Authtype  `json:"v3_authtype,omitempty"`
	V3Password       *string                 `json:"v3_password,omitempty"`
	V3Privpassphrase *string                 `json:"v3_privpassphrase,omitempty"`
	V3Privproto      *SnmpUpdate0V3Privproto `json:"v3_privproto"`
	V3Username       *string                 `json:"v3_username,omitempty"`
	Zilstat          *bool                   `json:"zilstat,omitempty"`
}

// SnmpUpdate0V3Authtype defines model for SnmpUpdate0.V3Authtype.
type SnmpUpdate0V3Authtype string

// SnmpUpdate0V3Privproto defines model for SnmpUpdate0.V3Privproto.
type SnmpUpdate0V3Privproto string

// SshUpdate0 defines model for ssh_update_0.
type SshUpdate0 struct {
	Bindiface       *[]string                  `json:"bindiface,omitempty"`
	Compression     *bool                      `json:"compression,omitempty"`
	Kerberosauth    *bool                      `json:"kerberosauth,omitempty"`
	Options         *string                    `json:"options,omitempty"`
	Passwordauth    *bool                      `json:"passwordauth,omitempty"`
	Rootlogin       *bool                      `json:"rootlogin,omitempty"`
	SftpLogFacility *SshUpdate0SftpLogFacility `json:"sftp_log_facility,omitempty"`
	SftpLogLevel    *SshUpdate0SftpLogLevel    `json:"sftp_log_level,omitempty"`
	Tcpfwd          *bool                      `json:"tcpfwd,omitempty"`
	Tcpport         *int                       `json:"tcpport,omitempty"`
	WeakCiphers     *[]string                  `json:"weak_ciphers,omitempty"`
}

// SshUpdate0SftpLogFacility defines model for SshUpdate0.SftpLogFacility.
type SshUpdate0SftpLogFacility string

// SshUpdate0SftpLogLevel defines model for SshUpdate0.SftpLogLevel.
type SshUpdate0SftpLogLevel string

// StaticrouteCreate0 defines model for staticroute_create_0.
type StaticrouteCreate0 struct {
	Description *string `json:"description,omitempty"`
	Destination *string `json:"destination,omitempty"`
	Gateway     *string `json:"gateway,omitempty"`
}

// StaticrouteUpdate1 defines model for staticroute_update_1.
type StaticrouteUpdate1 struct {
	Description *string `json:"description,omitempty"`
	Destination *string `json:"destination,omitempty"`
	Gateway     *string `json:"gateway,omitempty"`
}

// StatsGetData defines model for stats_get_data.
type StatsGetData struct {
	StatsFilter *StatsGetData1 `json:"stats-filter,omitempty"`
	StatsList   *StatsGetData0 `json:"stats_list,omitempty"`
}

// StatsGetData0 defines model for stats_get_data_0.
type StatsGetData0 = []map[string]interface{}

// StatsGetData1 defines model for stats_get_data_1.
type StatsGetData1 struct {
	End   *string `json:"end,omitempty"`
	Start *string `json:"start,omitempty"`
	Step  *int    `json:"step,omitempty"`
}

// StatsGetDatasetInfo defines model for stats_get_dataset_info.
type StatsGetDatasetInfo struct {
	Source *StatsGetDatasetInfo0 `json:"source,omitempty"`
	Type   *StatsGetDatasetInfo1 `json:"type,omitempty"`
}

// StatsGetDatasetInfo0 defines model for stats_get_dataset_info_0.
type StatsGetDatasetInfo0 = string

// StatsGetDatasetInfo1 defines model for stats_get_dataset_info_1.
type StatsGetDatasetInfo1 = string

// SupportFetchCategories defines model for support_fetch_categories.
type SupportFetchCategories struct {
	Password *SupportFetchCategories1 `json:"password,omitempty"`
	Username *SupportFetchCategories0 `json:"username,omitempty"`
}

// SupportFetchCategories0 defines model for support_fetch_categories_0.
type SupportFetchCategories0 = string

// SupportFetchCategories1 defines model for support_fetch_categories_1.
type SupportFetchCategories1 = string

// SupportNewTicket0 defines model for support_new_ticket_0.
type SupportNewTicket0 struct {
	AttachDebug *bool                  `json:"attach_debug,omitempty"`
	Body        *string                `json:"body,omitempty"`
	Category    *string                `json:"category,omitempty"`
	Cc          *[]string              `json:"cc,omitempty"`
	Criticality *string                `json:"criticality,omitempty"`
	Email       *string                `json:"email,omitempty"`
	Environment *string                `json:"environment,omitempty"`
	Name        *string                `json:"name,omitempty"`
	Password    *string                `json:"password,omitempty"`
	Phone       *string                `json:"phone,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Type        *SupportNewTicket0Type `json:"type,omitempty"`
	Username    *string                `json:"username,omitempty"`
}

// SupportNewTicket0Type defines model for SupportNewTicket0.Type.
type SupportNewTicket0Type string

// SupportUpdate0 defines model for support_update_0.
type SupportUpdate0 struct {
	Email          *string `json:"email,omitempty"`
	Enabled        *bool   `json:"enabled"`
	Name           *string `json:"name,omitempty"`
	Phone          *string `json:"phone,omitempty"`
	SecondaryEmail *string `json:"secondary_email,omitempty"`
	SecondaryName  *string `json:"secondary_name,omitempty"`
	SecondaryPhone *string `json:"secondary_phone,omitempty"`
	SecondaryTitle *string `json:"secondary_title,omitempty"`
	Title          *string `json:"title,omitempty"`
}

// SystemAdvancedUpdate0 defines model for system_advanced_update_0.
type SystemAdvancedUpdate0 struct {
	Advancedmode         *bool                                 `json:"advancedmode,omitempty"`
	Anonstats            *bool                                 `json:"anonstats,omitempty"`
	Autotune             *bool                                 `json:"autotune,omitempty"`
	BootScrub            *int                                  `json:"boot_scrub,omitempty"`
	Consolemenu          *bool                                 `json:"consolemenu,omitempty"`
	Consolemsg           *bool                                 `json:"consolemsg,omitempty"`
	Debugkernel          *bool                                 `json:"debugkernel,omitempty"`
	FqdnSyslog           *bool                                 `json:"fqdn_syslog,omitempty"`
	Motd                 *string                               `json:"motd,omitempty"`
	Overprovision        *int                                  `json:"overprovision"`
	Powerdaemon          *bool                                 `json:"powerdaemon,omitempty"`
	SedPasswd            *string                               `json:"sed_passwd,omitempty"`
	SedUser              *SystemAdvancedUpdate0SedUser         `json:"sed_user,omitempty"`
	Serialconsole        *bool                                 `json:"serialconsole,omitempty"`
	Serialport           *string                               `json:"serialport,omitempty"`
	Serialspeed          *SystemAdvancedUpdate0Serialspeed     `json:"serialspeed,omitempty"`
	Swapondrive          *int                                  `json:"swapondrive,omitempty"`
	SyslogTlsCertificate *int                                  `json:"syslog_tls_certificate"`
	SyslogTransport      *SystemAdvancedUpdate0SyslogTransport `json:"syslog_transport,omitempty"`
	Sysloglevel          *SystemAdvancedUpdate0Sysloglevel     `json:"sysloglevel,omitempty"`
	Syslogserver         *string                               `json:"syslogserver,omitempty"`
	Traceback            *bool                                 `json:"traceback,omitempty"`
	Uploadcrash          *bool                                 `json:"uploadcrash,omitempty"`
}

// SystemAdvancedUpdate0SedUser defines model for SystemAdvancedUpdate0.SedUser.
type SystemAdvancedUpdate0SedUser string

// SystemAdvancedUpdate0Serialspeed defines model for SystemAdvancedUpdate0.Serialspeed.
type SystemAdvancedUpdate0Serialspeed string

// SystemAdvancedUpdate0SyslogTransport defines model for SystemAdvancedUpdate0.SyslogTransport.
type SystemAdvancedUpdate0SyslogTransport string

// SystemAdvancedUpdate0Sysloglevel defines model for SystemAdvancedUpdate0.Sysloglevel.
type SystemAdvancedUpdate0Sysloglevel string

// SystemFeatureEnabled0 defines model for system_feature_enabled_0.
type SystemFeatureEnabled0 string

// SystemGeneralUiRestart0 defines model for system_general_ui_restart_0.
type SystemGeneralUiRestart0 = int

// SystemGeneralUpdate0 defines model for system_general_update_0.
type SystemGeneralUpdate0 struct {
	CrashReporting   *bool                            `json:"crash_reporting"`
	Kbdmap           *string                          `json:"kbdmap,omitempty"`
	Language         *string                          `json:"language,omitempty"`
	Sysloglevel      *SystemGeneralUpdate0Sysloglevel `json:"sysloglevel,omitempty"`
	Syslogserver     *string                          `json:"syslogserver,omitempty"`
	Timezone         *string                          `json:"timezone,omitempty"`
	UiAddress        *[]string                        `json:"ui_address,omitempty"`
	UiCertificate    *int                             `json:"ui_certificate"`
	UiHttpsport      *int                             `json:"ui_httpsport,omitempty"`
	UiHttpsprotocols *[]string                        `json:"ui_httpsprotocols,omitempty"`
	UiHttpsredirect  *bool                            `json:"ui_httpsredirect,omitempty"`
	UiPort           *int                             `json:"ui_port,omitempty"`
	UiV6address      *[]string                        `json:"ui_v6address,omitempty"`
	UsageCollection  *bool                            `json:"usage_collection"`
}

// SystemGeneralUpdate0Sysloglevel defines model for SystemGeneralUpdate0.Sysloglevel.
type SystemGeneralUpdate0Sysloglevel string

// SystemLicenseUpdate0 defines model for system_license_update_0.
type SystemLicenseUpdate0 = string

// SystemNtpserverCreate0 defines model for system_ntpserver_create_0.
type SystemNtpserverCreate0 struct {
	Address *string `json:"address,omitempty"`
	Burst   *bool   `json:"burst,omitempty"`
	Force   *bool   `json:"force,omitempty"`
	Iburst  *bool   `json:"iburst,omitempty"`
	Maxpoll *int    `json:"maxpoll,omitempty"`
	Minpoll *int    `json:"minpoll,omitempty"`
	Prefer  *bool   `json:"prefer,omitempty"`
}

// SystemNtpserverUpdate1 defines model for system_ntpserver_update_1.
type SystemNtpserverUpdate1 struct {
	Address *string `json:"address,omitempty"`
	Burst   *bool   `json:"burst,omitempty"`
	Force   *bool   `json:"force,omitempty"`
	Iburst  *bool   `json:"iburst,omitempty"`
	Maxpoll *int    `json:"maxpoll,omitempty"`
	Minpoll *int    `json:"minpoll,omitempty"`
	Prefer  *bool   `json:"prefer,omitempty"`
}

// SystemReboot0 defines model for system_reboot_0.
type SystemReboot0 struct {
	Delay *int `json:"delay,omitempty"`
}

// SystemShutdown0 defines model for system_shutdown_0.
type SystemShutdown0 struct {
	Delay *int `json:"delay,omitempty"`
}

// SystemdatasetUpdate0 defines model for systemdataset_update_0.
type SystemdatasetUpdate0 struct {
	Pool        *string `json:"pool"`
	PoolExclude *string `json:"pool_exclude"`
	Syslog      *bool   `json:"syslog,omitempty"`
}

// TftpUpdate0 defines model for tftp_update_0.
type TftpUpdate0 struct {
	Directory *string `json:"directory,omitempty"`
	Host      *string `json:"host,omitempty"`
	Newfiles  *bool   `json:"newfiles,omitempty"`
	Options   *string `json:"options,omitempty"`
	Port      *int    `json:"port,omitempty"`
	Umask     *string `json:"umask,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// TruecommandUpdate0 defines model for truecommand_update_0.
type TruecommandUpdate0 struct {
	ApiKey  *string `json:"api_key"`
	Enabled *bool   `json:"enabled,omitempty"`
}

// TruenasSetProduction defines model for truenas_set_production.
type TruenasSetProduction struct {
	AttachDebug *TruenasSetProduction1 `json:"attach_debug,omitempty"`
	Production  *TruenasSetProduction0 `json:"production,omitempty"`
}

// TruenasSetProduction0 defines model for truenas_set_production_0.
type TruenasSetProduction0 = bool

// TruenasSetProduction1 defines model for truenas_set_production_1.
type TruenasSetProduction1 = bool

// TruenasUpdateCustomerInformation0 defines model for truenas_update_customer_information_0.
type TruenasUpdateCustomerInformation0 struct {
	AdministrativeUser *struct {
		Address        *string `json:"address,omitempty"`
		City           *string `json:"city,omitempty"`
		Country        *string `json:"country,omitempty"`
		FirstName      *string `json:"first_name,omitempty"`
		LastName       *string `json:"last_name,omitempty"`
		MobilePhone    *string `json:"mobile_phone,omitempty"`
		OfficePhone    *string `json:"office_phone,omitempty"`
		PrimaryEmail   *string `json:"primary_email,omitempty"`
		SecondaryEmail *string `json:"secondary_email,omitempty"`
		State          *string `json:"state,omitempty"`
		Title          *string `json:"title,omitempty"`
		Zip            *string `json:"zip,omitempty"`
	} `json:"administrative_user,omitempty"`
	Company             *string `json:"company,omitempty"`
	OtherPrimaryUseCase *string `json:"other_primary_use_case,omitempty"`
	PhysicalLocation    *struct {
		Address            *string `json:"address,omitempty"`
		City               *string `json:"city,omitempty"`
		ContactEmail       *string `json:"contact_email,omitempty"`
		ContactName        *string `json:"contact_name,omitempty"`
		ContactPhoneNumber *string `json:"contact_phone_number,omitempty"`
		Country            *string `json:"country,omitempty"`
		State              *string `json:"state,omitempty"`
		Zip                *string `json:"zip,omitempty"`
	} `json:"physical_location,omitempty"`
	PrimaryUseCase *string `json:"primary_use_case,omitempty"`
	Reseller       *struct {
		Company     *string `json:"company,omitempty"`
		FirstName   *string `json:"first_name,omitempty"`
		LastName    *string `json:"last_name,omitempty"`
		MobilePhone *string `json:"mobile_phone,omitempty"`
		OfficePhone *string `json:"office_phone,omitempty"`
		Title       *string `json:"title,omitempty"`
	} `json:"reseller,omitempty"`
	TechnicalUser *struct {
		Address        *string `json:"address,omitempty"`
		City           *string `json:"city,omitempty"`
		Country        *string `json:"country,omitempty"`
		FirstName      *string `json:"first_name,omitempty"`
		LastName       *string `json:"last_name,omitempty"`
		MobilePhone    *string `json:"mobile_phone,omitempty"`
		OfficePhone    *string `json:"office_phone,omitempty"`
		PrimaryEmail   *string `json:"primary_email,omitempty"`
		SecondaryEmail *string `json:"secondary_email,omitempty"`
		State          *string `json:"state,omitempty"`
		Title          *string `json:"title,omitempty"`
		Zip            *string `json:"zip,omitempty"`
	} `json:"technical_user,omitempty"`
}

// TunableCreate0 defines model for tunable_create_0.
type TunableCreate0 struct {
	Comment *string             `json:"comment,omitempty"`
	Enabled *bool               `json:"enabled,omitempty"`
	Type    *TunableCreate0Type `json:"type,omitempty"`
	Value   *string             `json:"value,omitempty"`
	Var     *string             `json:"var,omitempty"`
}

// TunableCreate0Type defines model for TunableCreate0.Type.
type TunableCreate0Type string

// TunableUpdate1 defines model for tunable_update_1.
type TunableUpdate1 struct {
	Comment *string             `json:"comment,omitempty"`
	Enabled *bool               `json:"enabled,omitempty"`
	Type    *TunableUpdate1Type `json:"type,omitempty"`
	Value   *string             `json:"value,omitempty"`
	Var     *string             `json:"var,omitempty"`
}

// TunableUpdate1Type defines model for TunableUpdate1.Type.
type TunableUpdate1Type string

// UpdateCheckAvailable0 defines model for update_check_available_0.
type UpdateCheckAvailable0 struct {
	Train *string `json:"train,omitempty"`
}

// UpdateGetPending0 defines model for update_get_pending_0.
type UpdateGetPending0 = string

// UpdateManual0 defines model for update_manual_0.
type UpdateManual0 = string

// UpdateSetAutoDownload0 defines model for update_set_auto_download_0.
type UpdateSetAutoDownload0 = bool

// UpdateSetTrain0 defines model for update_set_train_0.
type UpdateSetTrain0 = string

// UpdateUpdate0 defines model for update_update_0.
type UpdateUpdate0 struct {
	Reboot *bool   `json:"reboot,omitempty"`
	Train  *string `json:"train,omitempty"`
}

// UpsUpdate0 defines model for ups_update_0.
type UpsUpdate0 struct {
	Description    *string             `json:"description,omitempty"`
	Driver         *string             `json:"driver,omitempty"`
	Emailnotify    *bool               `json:"emailnotify,omitempty"`
	Extrausers     *string             `json:"extrausers,omitempty"`
	Hostsync       *int                `json:"hostsync,omitempty"`
	Identifier     *string             `json:"identifier,omitempty"`
	Mode           *UpsUpdate0Mode     `json:"mode,omitempty"`
	Monpwd         *string             `json:"monpwd,omitempty"`
	Monuser        *string             `json:"monuser,omitempty"`
	Nocommwarntime *int                `json:"nocommwarntime"`
	Options        *string             `json:"options,omitempty"`
	Optionsupsd    *string             `json:"optionsupsd,omitempty"`
	Port           *string             `json:"port,omitempty"`
	Powerdown      *bool               `json:"powerdown,omitempty"`
	Remotehost     *string             `json:"remotehost,omitempty"`
	Remoteport     *int                `json:"remoteport,omitempty"`
	Rmonitor       *bool               `json:"rmonitor,omitempty"`
	Shutdown       *UpsUpdate0Shutdown `json:"shutdown,omitempty"`
	Shutdowncmd    *string             `json:"shutdowncmd"`
	Shutdowntimer  *int                `json:"shutdowntimer,omitempty"`
	Subject        *string             `json:"subject,omitempty"`
	Toemail        *[]string           `json:"toemail,omitempty"`
}

// UpsUpdate0Mode defines model for UpsUpdate0.Mode.
type UpsUpdate0Mode string

// UpsUpdate0Shutdown defines model for UpsUpdate0.Shutdown.
type UpsUpdate0Shutdown string

// UserCreate0 defines model for user_create_0.
type UserCreate0 struct {
	Attributes       *map[string]interface{} `json:"attributes,omitempty"`
	Email            *string                 `json:"email"`
	FullName         *string                 `json:"full_name,omitempty"`
	Group            *int                    `json:"group,omitempty"`
	GroupCreate      *bool                   `json:"group_create,omitempty"`
	Groups           *[]interface{}          `json:"groups,omitempty"`
	Home             *string                 `json:"home,omitempty"`
	HomeMode         *string                 `json:"home_mode,omitempty"`
	Locked           *bool                   `json:"locked,omitempty"`
	MicrosoftAccount *bool                   `json:"microsoft_account,omitempty"`
	Password         *string                 `json:"password,omitempty"`
	PasswordDisabled *bool                   `json:"password_disabled,omitempty"`
	Shell            *string                 `json:"shell,omitempty"`
	Smb              *bool                   `json:"smb,omitempty"`
	Sshpubkey        *string                 `json:"sshpubkey"`
	Sudo             *bool                   `json:"sudo,omitempty"`
	SudoCommands     *[]string               `json:"sudo_commands,omitempty"`
	SudoNopasswd     *bool                   `json:"sudo_nopasswd,omitempty"`
	Uid              *int                    `json:"uid,omitempty"`
	Username         *string                 `json:"username,omitempty"`
}

// UserDelete1 defines model for user_delete_1.
type UserDelete1 struct {
	DeleteGroup *bool `json:"delete_group,omitempty"`
}

// UserGetUserObj0 defines model for user_get_user_obj_0.
type UserGetUserObj0 struct {
	Uid      *int    `json:"uid,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserPopAttribute1 defines model for user_pop_attribute_1.
type UserPopAttribute1 = string

// UserSetAttribute defines model for user_set_attribute.
type UserSetAttribute struct {
	Key   *UserSetAttribute1 `json:"key,omitempty"`
	Value *UserSetAttribute2 `json:"value,omitempty"`
}

// UserSetAttribute1 defines model for user_set_attribute_1.
type UserSetAttribute1 = string

// UserSetAttribute2 defines model for user_set_attribute_2.
type UserSetAttribute2 struct {
	union json.RawMessage
}

// UserSetAttribute20 defines model for .
type UserSetAttribute20 = string

// UserSetAttribute21 defines model for .
type UserSetAttribute21 = int

// UserSetAttribute22 defines model for .
type UserSetAttribute22 = bool

// UserSetAttribute23 defines model for .
type UserSetAttribute23 = map[string]interface{}

// UserSetAttribute24 defines model for .
type UserSetAttribute24 = []interface{}

// UserShellChoices0 defines model for user_shell_choices_0.
type UserShellChoices0 = int

// UserUpdate1 defines model for user_update_1.
type UserUpdate1 struct {
	Attributes       *map[string]interface{} `json:"attributes,omitempty"`
	Email            *string                 `json:"email"`
	FullName         *string                 `json:"full_name,omitempty"`
	Group            *int                    `json:"group,omitempty"`
	Groups           *[]interface{}          `json:"groups,omitempty"`
	Home             *string                 `json:"home,omitempty"`
	HomeMode         *string                 `json:"home_mode,omitempty"`
	Locked           *bool                   `json:"locked,omitempty"`
	MicrosoftAccount *bool                   `json:"microsoft_account,omitempty"`
	Password         *string                 `json:"password,omitempty"`
	PasswordDisabled *bool                   `json:"password_disabled,omitempty"`
	Shell            *string                 `json:"shell,omitempty"`
	Smb              *bool                   `json:"smb,omitempty"`
	Sshpubkey        *string                 `json:"sshpubkey"`
	Sudo             *bool                   `json:"sudo,omitempty"`
	SudoCommands     *[]string               `json:"sudo_commands,omitempty"`
	SudoNopasswd     *bool                   `json:"sudo_nopasswd,omitempty"`
	Uid              *int                    `json:"uid,omitempty"`
	Username         *string                 `json:"username,omitempty"`
}

// VmClone1 defines model for vm_clone_1.
type VmClone1 = string

// VmCreate0 defines model for vm_create_0.
type VmCreate0 struct {
	Autostart       *bool                     `json:"autostart,omitempty"`
	Bootloader      *VmCreate0Bootloader      `json:"bootloader,omitempty"`
	Cores           *int                      `json:"cores,omitempty"`
	Description     *string                   `json:"description,omitempty"`
	Devices         *[]map[string]interface{} `json:"devices,omitempty"`
	Grubconfig      *string                   `json:"grubconfig"`
	Memory          *int                      `json:"memory,omitempty"`
	Name            *string                   `json:"name,omitempty"`
	ShutdownTimeout *int                      `json:"shutdown_timeout,omitempty"`
	Threads         *int                      `json:"threads,omitempty"`
	Time            *VmCreate0Time            `json:"time,omitempty"`
	Vcpus           *int                      `json:"vcpus,omitempty"`
}

// VmCreate0Bootloader defines model for VmCreate0.Bootloader.
type VmCreate0Bootloader string

// VmCreate0Time defines model for VmCreate0.Time.
type VmCreate0Time string

// VmDelete1 defines model for vm_delete_1.
type VmDelete1 struct {
	Force *bool `json:"force,omitempty"`
	Zvols *bool `json:"zvols,omitempty"`
}

// VmDeviceCreate0 defines model for vm_device_create_0.
type VmDeviceCreate0 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Dtype      *VmDeviceCreate0Dtype   `json:"dtype,omitempty"`
	Order      *int                    `json:"order"`
	Vm         *int                    `json:"vm,omitempty"`
}

// VmDeviceCreate0Dtype defines model for VmDeviceCreate0.Dtype.
type VmDeviceCreate0Dtype string

// VmDeviceDelete1 defines model for vm_device_delete_1.
type VmDeviceDelete1 struct {
	RawFile *bool `json:"raw_file,omitempty"`
	Zvol    *bool `json:"zvol,omitempty"`
}

// VmDeviceUpdate1 defines model for vm_device_update_1.
type VmDeviceUpdate1 struct {
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Dtype      *VmDeviceUpdate1Dtype   `json:"dtype,omitempty"`
	Order      *int                    `json:"order"`
	Vm         *int                    `json:"vm,omitempty"`
}

// VmDeviceUpdate1Dtype defines model for VmDeviceUpdate1.Dtype.
type VmDeviceUpdate1Dtype string

// VmGetAttachedIface0 defines model for vm_get_attached_iface_0.
type VmGetAttachedIface0 = int

// VmGetAvailableMemory0 defines model for vm_get_available_memory_0.
type VmGetAvailableMemory0 = bool

// VmGetConsole0 defines model for vm_get_console_0.
type VmGetConsole0 = int

// VmGetVnc0 defines model for vm_get_vnc_0.
type VmGetVnc0 = int

// VmPoweroff defines model for vm_poweroff.
type VmPoweroff = map[string]interface{}

// VmRestart defines model for vm_restart.
type VmRestart = map[string]interface{}

// VmStart1 defines model for vm_start_1.
type VmStart1 struct {
	Overcommit *bool `json:"overcommit,omitempty"`
}

// VmStatus defines model for vm_status.
type VmStatus = map[string]interface{}

// VmStop1 defines model for vm_stop_1.
type VmStop1 struct {
	Force             *bool `json:"force,omitempty"`
	ForceAfterTimeout *bool `json:"force_after_timeout,omitempty"`
}

// VmUpdate1 defines model for vm_update_1.
type VmUpdate1 struct {
	Autostart       *bool                     `json:"autostart,omitempty"`
	Bootloader      *VmUpdate1Bootloader      `json:"bootloader,omitempty"`
	Cores           *int                      `json:"cores,omitempty"`
	Description     *string                   `json:"description,omitempty"`
	Devices         *[]map[string]interface{} `json:"devices,omitempty"`
	Grubconfig      *string                   `json:"grubconfig"`
	Memory          *int                      `json:"memory,omitempty"`
	Name            *string                   `json:"name,omitempty"`
	ShutdownTimeout *int                      `json:"shutdown_timeout,omitempty"`
	Threads         *int                      `json:"threads,omitempty"`
	Time            *VmUpdate1Time            `json:"time,omitempty"`
	Vcpus           *int                      `json:"vcpus,omitempty"`
}

// VmUpdate1Bootloader defines model for VmUpdate1.Bootloader.
type VmUpdate1Bootloader string

// VmUpdate1Time defines model for VmUpdate1.Time.
type VmUpdate1Time string

// VmwareCreate0 defines model for vmware_create_0.
type VmwareCreate0 struct {
	Datastore  *string `json:"datastore,omitempty"`
	Filesystem *string `json:"filesystem,omitempty"`
	Hostname   *string `json:"hostname,omitempty"`
	Password   *string `json:"password,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// VmwareDatasetHasVms defines model for vmware_dataset_has_vms.
type VmwareDatasetHasVms struct {
	Dataset   *VmwareDatasetHasVms0 `json:"dataset,omitempty"`
	Recursive *VmwareDatasetHasVms1 `json:"recursive,omitempty"`
}

// VmwareDatasetHasVms0 defines model for vmware_dataset_has_vms_0.
type VmwareDatasetHasVms0 = string

// VmwareDatasetHasVms1 defines model for vmware_dataset_has_vms_1.
type VmwareDatasetHasVms1 = bool

// VmwareGetDatastores0 defines model for vmware_get_datastores_0.
type VmwareGetDatastores0 struct {
	Hostname *string `json:"hostname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// VmwareGetVirtualMachines0 defines model for vmware_get_virtual_machines_0.
type VmwareGetVirtualMachines0 = int

// VmwareMatchDatastoresWithDatasets0 defines model for vmware_match_datastores_with_datasets_0.
type VmwareMatchDatastoresWithDatasets0 struct {
	Hostname *string `json:"hostname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// VmwareUpdate1 defines model for vmware_update_1.
type VmwareUpdate1 struct {
	Datastore  *string `json:"datastore,omitempty"`
	Filesystem *string `json:"filesystem,omitempty"`
	Hostname   *string `json:"hostname,omitempty"`
	Password   *string `json:"password,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// WebdavUpdate0 defines model for webdav_update_0.
type WebdavUpdate0 struct {
	Certssl    *int                   `json:"certssl"`
	Htauth     *WebdavUpdate0Htauth   `json:"htauth,omitempty"`
	Password   *string                `json:"password,omitempty"`
	Protocol   *WebdavUpdate0Protocol `json:"protocol,omitempty"`
	Tcpport    *int                   `json:"tcpport,omitempty"`
	Tcpportssl *int                   `json:"tcpportssl,omitempty"`
}

// WebdavUpdate0Htauth defines model for WebdavUpdate0.Htauth.
type WebdavUpdate0Htauth string

// WebdavUpdate0Protocol defines model for WebdavUpdate0.Protocol.
type WebdavUpdate0Protocol string

// ZfsSnapshotClone0 defines model for zfs_snapshot_clone_0.
type ZfsSnapshotClone0 struct {
	DatasetDst *string `json:"dataset_dst,omitempty"`
	Snapshot   *string `json:"snapshot,omitempty"`
}

// ZfsSnapshotCreate0 defines model for zfs_snapshot_create_0.
type ZfsSnapshotCreate0 struct {
	Dataset      *string                 `json:"dataset,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	NamingSchema *string                 `json:"naming_schema,omitempty"`
	Properties   *map[string]interface{} `json:"properties,omitempty"`
	Recursive    *bool                   `json:"recursive,omitempty"`
	VmwareSync   *bool                   `json:"vmware_sync,omitempty"`
}

// ZfsSnapshotDelete1 defines model for zfs_snapshot_delete_1.
type ZfsSnapshotDelete1 struct {
	Defer *bool `json:"defer,omitempty"`
}

// ZfsSnapshotRemove0 defines model for zfs_snapshot_remove_0.
type ZfsSnapshotRemove0 struct {
	Dataset     *string `json:"dataset,omitempty"`
	DeferDelete *bool   `json:"defer_delete,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ZfsSnapshotRollback defines model for zfs_snapshot_rollback.
type ZfsSnapshotRollback struct {
	Id      *ZfsSnapshotRollback0 `json:"id,omitempty"`
	Options *ZfsSnapshotRollback1 `json:"options,omitempty"`
}

// ZfsSnapshotRollback0 defines model for zfs_snapshot_rollback_0.
type ZfsSnapshotRollback0 = string

// ZfsSnapshotRollback1 defines model for zfs_snapshot_rollback_1.
type ZfsSnapshotRollback1 struct {
	Force           *bool `json:"force,omitempty"`
	Recursive       *bool `json:"recursive,omitempty"`
	RecursiveClones *bool `json:"recursive_clones,omitempty"`
}

// GetAcmeDnsAuthenticatorParams defines parameters for GetAcmeDnsAuthenticator.
type GetAcmeDnsAuthenticatorParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetAcmeDnsAuthenticatorIdIdParams defines parameters for GetAcmeDnsAuthenticatorIdId.
type GetAcmeDnsAuthenticatorIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetAlertserviceParams defines parameters for GetAlertservice.
type GetAlertserviceParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetAlertserviceIdIdParams defines parameters for GetAlertserviceIdId.
type GetAlertserviceIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetApiKeyParams defines parameters for GetApiKey.
type GetApiKeyParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetApiKeyIdIdParams defines parameters for GetApiKeyIdId.
type GetApiKeyIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetAuthSessionsParams defines parameters for GetAuthSessions.
type GetAuthSessionsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetBootenvParams defines parameters for GetBootenv.
type GetBootenvParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetBootenvIdIdParams defines parameters for GetBootenvIdId.
type GetBootenvIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCertificateParams defines parameters for GetCertificate.
type GetCertificateParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCertificateIdIdParams defines parameters for GetCertificateIdId.
type GetCertificateIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCertificateauthorityParams defines parameters for GetCertificateauthority.
type GetCertificateauthorityParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCertificateauthorityIdIdParams defines parameters for GetCertificateauthorityIdId.
type GetCertificateauthorityIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCloudsyncParams defines parameters for GetCloudsync.
type GetCloudsyncParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCloudsyncCredentialsParams defines parameters for GetCloudsyncCredentials.
type GetCloudsyncCredentialsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCloudsyncCredentialsIdIdParams defines parameters for GetCloudsyncCredentialsIdId.
type GetCloudsyncCredentialsIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCloudsyncIdIdParams defines parameters for GetCloudsyncIdId.
type GetCloudsyncIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCoreGetJobsParams defines parameters for GetCoreGetJobs.
type GetCoreGetJobsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCoreSessionsParams defines parameters for GetCoreSessions.
type GetCoreSessionsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCronjobParams defines parameters for GetCronjob.
type GetCronjobParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCronjobIdIdParams defines parameters for GetCronjobIdId.
type GetCronjobIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetDiskParams defines parameters for GetDisk.
type GetDiskParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetDiskIdIdParams defines parameters for GetDiskIdId.
type GetDiskIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetDnsQueryParams defines parameters for GetDnsQuery.
type GetDnsQueryParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetEnclosureParams defines parameters for GetEnclosure.
type GetEnclosureParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetEnclosureIdIdParams defines parameters for GetEnclosureIdId.
type GetEnclosureIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetFcportParams defines parameters for GetFcport.
type GetFcportParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetFcportIdIdParams defines parameters for GetFcportIdId.
type GetFcportIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetGroupParams defines parameters for GetGroup.
type GetGroupParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetGroupIdIdParams defines parameters for GetGroupIdId.
type GetGroupIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIdmapParams defines parameters for GetIdmap.
type GetIdmapParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIdmapIdIdParams defines parameters for GetIdmapIdId.
type GetIdmapIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetInitshutdownscriptParams defines parameters for GetInitshutdownscript.
type GetInitshutdownscriptParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetInitshutdownscriptIdIdParams defines parameters for GetInitshutdownscriptIdId.
type GetInitshutdownscriptIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetInterfaceParams defines parameters for GetInterface.
type GetInterfaceParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetInterfaceIdIdParams defines parameters for GetInterfaceIdId.
type GetInterfaceIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIpmiParams defines parameters for GetIpmi.
type GetIpmiParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIpmiIdIdParams defines parameters for GetIpmiIdId.
type GetIpmiIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiAuthParams defines parameters for GetIscsiAuth.
type GetIscsiAuthParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiAuthIdIdParams defines parameters for GetIscsiAuthIdId.
type GetIscsiAuthIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiExtentParams defines parameters for GetIscsiExtent.
type GetIscsiExtentParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiExtentIdIdParams defines parameters for GetIscsiExtentIdId.
type GetIscsiExtentIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiGlobalSessionsParams defines parameters for GetIscsiGlobalSessions.
type GetIscsiGlobalSessionsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiInitiatorParams defines parameters for GetIscsiInitiator.
type GetIscsiInitiatorParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiInitiatorIdIdParams defines parameters for GetIscsiInitiatorIdId.
type GetIscsiInitiatorIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiPortalParams defines parameters for GetIscsiPortal.
type GetIscsiPortalParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiPortalIdIdParams defines parameters for GetIscsiPortalIdId.
type GetIscsiPortalIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiTargetParams defines parameters for GetIscsiTarget.
type GetIscsiTargetParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiTargetIdIdParams defines parameters for GetIscsiTargetIdId.
type GetIscsiTargetIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiTargetextentParams defines parameters for GetIscsiTargetextent.
type GetIscsiTargetextentParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetIscsiTargetextentIdIdParams defines parameters for GetIscsiTargetextentIdId.
type GetIscsiTargetextentIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetJailParams defines parameters for GetJail.
type GetJailParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetJailIdIdParams defines parameters for GetJailIdId.
type GetJailIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetKerberosKeytabParams defines parameters for GetKerberosKeytab.
type GetKerberosKeytabParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetKerberosKeytabIdIdParams defines parameters for GetKerberosKeytabIdId.
type GetKerberosKeytabIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetKerberosRealmParams defines parameters for GetKerberosRealm.
type GetKerberosRealmParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetKerberosRealmIdIdParams defines parameters for GetKerberosRealmIdId.
type GetKerberosRealmIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetKeychaincredentialParams defines parameters for GetKeychaincredential.
type GetKeychaincredentialParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetKeychaincredentialIdIdParams defines parameters for GetKeychaincredentialIdId.
type GetKeychaincredentialIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetMultipathParams defines parameters for GetMultipath.
type GetMultipathParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetMultipathIdIdParams defines parameters for GetMultipathIdId.
type GetMultipathIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPluginParams defines parameters for GetPlugin.
type GetPluginParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPluginIdIdParams defines parameters for GetPluginIdId.
type GetPluginIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolDatasetParams defines parameters for GetPoolDataset.
type GetPoolDatasetParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolDatasetIdIdParams defines parameters for GetPoolDatasetIdId.
type GetPoolDatasetIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolDatasetUserpropParams defines parameters for GetPoolDatasetUserprop.
type GetPoolDatasetUserpropParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolDatasetUserpropIdIdParams defines parameters for GetPoolDatasetUserpropIdId.
type GetPoolDatasetUserpropIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolIdIdParams defines parameters for GetPoolIdId.
type GetPoolIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolScrubParams defines parameters for GetPoolScrub.
type GetPoolScrubParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolScrubIdIdParams defines parameters for GetPoolScrubIdId.
type GetPoolScrubIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolSnapshottaskParams defines parameters for GetPoolSnapshottask.
type GetPoolSnapshottaskParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPoolSnapshottaskIdIdParams defines parameters for GetPoolSnapshottaskIdId.
type GetPoolSnapshottaskIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetReplicationParams defines parameters for GetReplication.
type GetReplicationParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetReplicationIdIdParams defines parameters for GetReplicationIdId.
type GetReplicationIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetReportingGraphsParams defines parameters for GetReportingGraphs.
type GetReportingGraphsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRouteSystemRoutesParams defines parameters for GetRouteSystemRoutes.
type GetRouteSystemRoutesParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRsyncmodParams defines parameters for GetRsyncmod.
type GetRsyncmodParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRsyncmodIdIdParams defines parameters for GetRsyncmodIdId.
type GetRsyncmodIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRsynctaskParams defines parameters for GetRsynctask.
type GetRsynctaskParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRsynctaskIdIdParams defines parameters for GetRsynctaskIdId.
type GetRsynctaskIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSensorQueryParams defines parameters for GetSensorQuery.
type GetSensorQueryParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetServiceParams defines parameters for GetService.
type GetServiceParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetServiceIdIdParams defines parameters for GetServiceIdId.
type GetServiceIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSharingAfpParams defines parameters for GetSharingAfp.
type GetSharingAfpParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSharingAfpIdIdParams defines parameters for GetSharingAfpIdId.
type GetSharingAfpIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSharingNfsParams defines parameters for GetSharingNfs.
type GetSharingNfsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSharingNfsIdIdParams defines parameters for GetSharingNfsIdId.
type GetSharingNfsIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSharingSmbParams defines parameters for GetSharingSmb.
type GetSharingSmbParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSharingSmbIdIdParams defines parameters for GetSharingSmbIdId.
type GetSharingSmbIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSharingWebdavParams defines parameters for GetSharingWebdav.
type GetSharingWebdavParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSharingWebdavIdIdParams defines parameters for GetSharingWebdavIdId.
type GetSharingWebdavIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSmartTestParams defines parameters for GetSmartTest.
type GetSmartTestParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSmartTestIdIdParams defines parameters for GetSmartTestIdId.
type GetSmartTestIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSmartTestResultsParams defines parameters for GetSmartTestResults.
type GetSmartTestResultsParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSmbSharesecParams defines parameters for GetSmbSharesec.
type GetSmbSharesecParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSmbSharesecIdIdParams defines parameters for GetSmbSharesecIdId.
type GetSmbSharesecIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetStaticrouteParams defines parameters for GetStaticroute.
type GetStaticrouteParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetStaticrouteIdIdParams defines parameters for GetStaticrouteIdId.
type GetStaticrouteIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSystemNtpserverParams defines parameters for GetSystemNtpserver.
type GetSystemNtpserverParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSystemNtpserverIdIdParams defines parameters for GetSystemNtpserverIdId.
type GetSystemNtpserverIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetTunableParams defines parameters for GetTunable.
type GetTunableParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetTunableIdIdParams defines parameters for GetTunableIdId.
type GetTunableIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetUserIdIdParams defines parameters for GetUserIdId.
type GetUserIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetVmParams defines parameters for GetVm.
type GetVmParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetVmDeviceParams defines parameters for GetVmDevice.
type GetVmDeviceParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetVmDeviceIdIdParams defines parameters for GetVmDeviceIdId.
type GetVmDeviceIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetVmIdIdParams defines parameters for GetVmIdId.
type GetVmIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetVmwareParams defines parameters for GetVmware.
type GetVmwareParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetVmwareIdIdParams defines parameters for GetVmwareIdId.
type GetVmwareIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetWebuiImageParams defines parameters for GetWebuiImage.
type GetWebuiImageParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetWebuiImageIdIdParams defines parameters for GetWebuiImageIdId.
type GetWebuiImageIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetZfsSnapshotParams defines parameters for GetZfsSnapshot.
type GetZfsSnapshotParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetZfsSnapshotIdIdParams defines parameters for GetZfsSnapshotIdId.
type GetZfsSnapshotIdIdParams struct {
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Count  *bool   `form:"count,omitempty" json:"count,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// PostAcmeDnsAuthenticatorJSONRequestBody defines body for PostAcmeDnsAuthenticator for application/json ContentType.
type PostAcmeDnsAuthenticatorJSONRequestBody = AcmeDnsAuthenticatorCreate0

// PutAcmeDnsAuthenticatorIdIdJSONRequestBody defines body for PutAcmeDnsAuthenticatorIdId for application/json ContentType.
type PutAcmeDnsAuthenticatorIdIdJSONRequestBody = AcmeDnsAuthenticatorUpdate1

// PutActivedirectoryJSONRequestBody defines body for PutActivedirectory for application/json ContentType.
type PutActivedirectoryJSONRequestBody = ActivedirectoryUpdate0

// PostActivedirectoryLeaveJSONRequestBody defines body for PostActivedirectoryLeave for application/json ContentType.
type PostActivedirectoryLeaveJSONRequestBody = ActivedirectoryLeave0

// PutAfpJSONRequestBody defines body for PutAfp for application/json ContentType.
type PutAfpJSONRequestBody = AfpUpdate0

// PostAlertDismissJSONRequestBody defines body for PostAlertDismiss for application/json ContentType.
type PostAlertDismissJSONRequestBody = AlertDismiss0

// PostAlertRestoreJSONRequestBody defines body for PostAlertRestore for application/json ContentType.
type PostAlertRestoreJSONRequestBody = AlertRestore0

// PutAlertclassesJSONRequestBody defines body for PutAlertclasses for application/json ContentType.
type PutAlertclassesJSONRequestBody = AlertclassesUpdate0

// PostAlertserviceJSONRequestBody defines body for PostAlertservice for application/json ContentType.
type PostAlertserviceJSONRequestBody = AlertserviceCreate0

// PutAlertserviceIdIdJSONRequestBody defines body for PutAlertserviceIdId for application/json ContentType.
type PutAlertserviceIdIdJSONRequestBody = AlertserviceUpdate1

// PostAlertserviceTestJSONRequestBody defines body for PostAlertserviceTest for application/json ContentType.
type PostAlertserviceTestJSONRequestBody = AlertserviceTest0

// PostApiKeyJSONRequestBody defines body for PostApiKey for application/json ContentType.
type PostApiKeyJSONRequestBody = ApiKeyCreate0

// PutApiKeyIdIdJSONRequestBody defines body for PutApiKeyIdId for application/json ContentType.
type PutApiKeyIdIdJSONRequestBody = ApiKeyUpdate1

// PostAuthCheckUserJSONRequestBody defines body for PostAuthCheckUser for application/json ContentType.
type PostAuthCheckUserJSONRequestBody = AuthCheckUser

// PostAuthGenerateTokenJSONRequestBody defines body for PostAuthGenerateToken for application/json ContentType.
type PostAuthGenerateTokenJSONRequestBody = AuthGenerateToken

// PutAuthTwofactorJSONRequestBody defines body for PutAuthTwofactor for application/json ContentType.
type PutAuthTwofactorJSONRequestBody = AuthTwofactorUpdate0

// PostAuthTwofactorVerifyJSONRequestBody defines body for PostAuthTwofactorVerify for application/json ContentType.
type PostAuthTwofactorVerifyJSONRequestBody = AuthTwofactorVerify0

// PostBootAttachJSONRequestBody defines body for PostBootAttach for application/json ContentType.
type PostBootAttachJSONRequestBody = BootAttach

// PostBootDetachJSONRequestBody defines body for PostBootDetach for application/json ContentType.
type PostBootDetachJSONRequestBody = BootDetach0

// PostBootReplaceJSONRequestBody defines body for PostBootReplace for application/json ContentType.
type PostBootReplaceJSONRequestBody = BootReplace

// PostBootSetScrubIntervalJSONRequestBody defines body for PostBootSetScrubInterval for application/json ContentType.
type PostBootSetScrubIntervalJSONRequestBody = BootSetScrubInterval0

// PostBootenvJSONRequestBody defines body for PostBootenv for application/json ContentType.
type PostBootenvJSONRequestBody = BootenvCreate0

// PutBootenvIdIdJSONRequestBody defines body for PutBootenvIdId for application/json ContentType.
type PutBootenvIdIdJSONRequestBody = BootenvUpdate1

// PostBootenvIdIdActivateJSONRequestBody defines body for PostBootenvIdIdActivate for application/json ContentType.
type PostBootenvIdIdActivateJSONRequestBody = BootenvActivate

// PostBootenvIdIdSetAttributeJSONRequestBody defines body for PostBootenvIdIdSetAttribute for application/json ContentType.
type PostBootenvIdIdSetAttributeJSONRequestBody = BootenvSetAttribute1

// PostCertificateJSONRequestBody defines body for PostCertificate for application/json ContentType.
type PostCertificateJSONRequestBody = CertificateCreate0

// DeleteCertificateIdIdJSONRequestBody defines body for DeleteCertificateIdId for application/json ContentType.
type DeleteCertificateIdIdJSONRequestBody = CertificateDelete1

// PutCertificateIdIdJSONRequestBody defines body for PutCertificateIdId for application/json ContentType.
type PutCertificateIdIdJSONRequestBody = CertificateUpdate1

// PostCertificateauthorityJSONRequestBody defines body for PostCertificateauthority for application/json ContentType.
type PostCertificateauthorityJSONRequestBody = CertificateauthorityCreate0

// PostCertificateauthorityCaSignCsrJSONRequestBody defines body for PostCertificateauthorityCaSignCsr for application/json ContentType.
type PostCertificateauthorityCaSignCsrJSONRequestBody = CertificateauthorityCaSignCsr0

// PutCertificateauthorityIdIdJSONRequestBody defines body for PutCertificateauthorityIdId for application/json ContentType.
type PutCertificateauthorityIdIdJSONRequestBody = CertificateauthorityUpdate1

// PostCloudsyncJSONRequestBody defines body for PostCloudsync for application/json ContentType.
type PostCloudsyncJSONRequestBody = CloudsyncCreate0

// PostCloudsyncCredentialsJSONRequestBody defines body for PostCloudsyncCredentials for application/json ContentType.
type PostCloudsyncCredentialsJSONRequestBody = CloudsyncCredentialsCreate0

// PutCloudsyncCredentialsIdIdJSONRequestBody defines body for PutCloudsyncCredentialsIdId for application/json ContentType.
type PutCloudsyncCredentialsIdIdJSONRequestBody = CloudsyncCredentialsUpdate1

// PostCloudsyncCredentialsVerifyJSONRequestBody defines body for PostCloudsyncCredentialsVerify for application/json ContentType.
type PostCloudsyncCredentialsVerifyJSONRequestBody = CloudsyncCredentialsVerify0

// PutCloudsyncIdIdJSONRequestBody defines body for PutCloudsyncIdId for application/json ContentType.
type PutCloudsyncIdIdJSONRequestBody = CloudsyncUpdate1

// PostCloudsyncIdIdAbortJSONRequestBody defines body for PostCloudsyncIdIdAbort for application/json ContentType.
type PostCloudsyncIdIdAbortJSONRequestBody = CloudsyncAbort

// PostCloudsyncIdIdRestoreJSONRequestBody defines body for PostCloudsyncIdIdRestore for application/json ContentType.
type PostCloudsyncIdIdRestoreJSONRequestBody = CloudsyncRestore1

// PostCloudsyncIdIdSyncJSONRequestBody defines body for PostCloudsyncIdIdSync for application/json ContentType.
type PostCloudsyncIdIdSyncJSONRequestBody = CloudsyncSync1

// PostCloudsyncListBucketsJSONRequestBody defines body for PostCloudsyncListBuckets for application/json ContentType.
type PostCloudsyncListBucketsJSONRequestBody = CloudsyncListBuckets0

// PostCloudsyncListDirectoryJSONRequestBody defines body for PostCloudsyncListDirectory for application/json ContentType.
type PostCloudsyncListDirectoryJSONRequestBody = CloudsyncListDirectory0

// PostCloudsyncOnedriveListDrivesJSONRequestBody defines body for PostCloudsyncOnedriveListDrives for application/json ContentType.
type PostCloudsyncOnedriveListDrivesJSONRequestBody = CloudsyncOnedriveListDrives0

// PostCloudsyncSyncOnetimeJSONRequestBody defines body for PostCloudsyncSyncOnetime for application/json ContentType.
type PostCloudsyncSyncOnetimeJSONRequestBody = CloudsyncSyncOnetime

// PostConfigResetJSONRequestBody defines body for PostConfigReset for application/json ContentType.
type PostConfigResetJSONRequestBody = ConfigReset0

// PostCoreBulkJSONRequestBody defines body for PostCoreBulk for application/json ContentType.
type PostCoreBulkJSONRequestBody = CoreBulk

// PostCoreDebugJSONRequestBody defines body for PostCoreDebug for application/json ContentType.
type PostCoreDebugJSONRequestBody = CoreDebug

// PostCoreDownloadJSONRequestBody defines body for PostCoreDownload for application/json ContentType.
type PostCoreDownloadJSONRequestBody = CoreDownload

// PostCoreGetMethodsJSONRequestBody defines body for PostCoreGetMethods for application/json ContentType.
type PostCoreGetMethodsJSONRequestBody = CoreGetMethods0

// PostCoreJobAbortJSONRequestBody defines body for PostCoreJobAbort for application/json ContentType.
type PostCoreJobAbortJSONRequestBody = CoreJobAbort0

// PostCoreJobUpdateJSONRequestBody defines body for PostCoreJobUpdate for application/json ContentType.
type PostCoreJobUpdateJSONRequestBody = CoreJobUpdate

// PostCoreJobWaitJSONRequestBody defines body for PostCoreJobWait for application/json ContentType.
type PostCoreJobWaitJSONRequestBody = CoreJobWait0

// PostCorePingRemoteJSONRequestBody defines body for PostCorePingRemote for application/json ContentType.
type PostCorePingRemoteJSONRequestBody = CorePingRemote0

// PostCoreResizeShellJSONRequestBody defines body for PostCoreResizeShell for application/json ContentType.
type PostCoreResizeShellJSONRequestBody = CoreResizeShell

// PostCronjobJSONRequestBody defines body for PostCronjob for application/json ContentType.
type PostCronjobJSONRequestBody = CronjobCreate0

// PutCronjobIdIdJSONRequestBody defines body for PutCronjobIdId for application/json ContentType.
type PutCronjobIdIdJSONRequestBody = CronjobUpdate1

// PostCronjobRunJSONRequestBody defines body for PostCronjobRun for application/json ContentType.
type PostCronjobRunJSONRequestBody = CronjobRun

// PostDeviceGetInfoJSONRequestBody defines body for PostDeviceGetInfo for application/json ContentType.
type PostDeviceGetInfoJSONRequestBody = DeviceGetInfo0

// PostDiskGetEncryptedJSONRequestBody defines body for PostDiskGetEncrypted for application/json ContentType.
type PostDiskGetEncryptedJSONRequestBody = DiskGetEncrypted0

// PostDiskGetUnusedJSONRequestBody defines body for PostDiskGetUnused for application/json ContentType.
type PostDiskGetUnusedJSONRequestBody = DiskGetUnused0

// PutDiskIdIdJSONRequestBody defines body for PutDiskIdId for application/json ContentType.
type PutDiskIdIdJSONRequestBody = DiskUpdate1

// PostDiskOverprovisionJSONRequestBody defines body for PostDiskOverprovision for application/json ContentType.
type PostDiskOverprovisionJSONRequestBody = DiskOverprovision

// PostDiskSmartAttributesJSONRequestBody defines body for PostDiskSmartAttributes for application/json ContentType.
type PostDiskSmartAttributesJSONRequestBody = DiskSmartAttributes0

// PostDiskSpindownJSONRequestBody defines body for PostDiskSpindown for application/json ContentType.
type PostDiskSpindownJSONRequestBody = DiskSpindown0

// PostDiskTemperatureJSONRequestBody defines body for PostDiskTemperature for application/json ContentType.
type PostDiskTemperatureJSONRequestBody = DiskTemperature

// PostDiskTemperaturesJSONRequestBody defines body for PostDiskTemperatures for application/json ContentType.
type PostDiskTemperaturesJSONRequestBody = DiskTemperatures

// PostDiskUnoverprovisionJSONRequestBody defines body for PostDiskUnoverprovision for application/json ContentType.
type PostDiskUnoverprovisionJSONRequestBody = DiskUnoverprovision0

// PostDiskWipeJSONRequestBody defines body for PostDiskWipe for application/json ContentType.
type PostDiskWipeJSONRequestBody = DiskWipe

// PutDyndnsJSONRequestBody defines body for PutDyndns for application/json ContentType.
type PutDyndnsJSONRequestBody = DyndnsUpdate0

// PutEnclosureIdIdJSONRequestBody defines body for PutEnclosureIdId for application/json ContentType.
type PutEnclosureIdIdJSONRequestBody = EnclosureUpdate1

// PostEnclosureSetSlotStatusJSONRequestBody defines body for PostEnclosureSetSlotStatus for application/json ContentType.
type PostEnclosureSetSlotStatusJSONRequestBody = EnclosureSetSlotStatus

// PutFailoverJSONRequestBody defines body for PutFailover for application/json ContentType.
type PutFailoverJSONRequestBody = FailoverUpdate0

// PostFailoverCallRemoteJSONRequestBody defines body for PostFailoverCallRemote for application/json ContentType.
type PostFailoverCallRemoteJSONRequestBody = FailoverCallRemote

// PostFailoverControlJSONRequestBody defines body for PostFailoverControl for application/json ContentType.
type PostFailoverControlJSONRequestBody = FailoverControl

// PostFailoverSyncToPeerJSONRequestBody defines body for PostFailoverSyncToPeer for application/json ContentType.
type PostFailoverSyncToPeerJSONRequestBody = FailoverSyncToPeer0

// PostFailoverUnlockJSONRequestBody defines body for PostFailoverUnlock for application/json ContentType.
type PostFailoverUnlockJSONRequestBody = FailoverUnlock0

// PostFailoverUpgradeJSONRequestBody defines body for PostFailoverUpgrade for application/json ContentType.
type PostFailoverUpgradeJSONRequestBody = FailoverUpgrade0

// PutFcportIdIdJSONRequestBody defines body for PutFcportIdId for application/json ContentType.
type PutFcportIdIdJSONRequestBody = FcportUpdate1

// PostFilesystemAclIsTrivialJSONRequestBody defines body for PostFilesystemAclIsTrivial for application/json ContentType.
type PostFilesystemAclIsTrivialJSONRequestBody = FilesystemAclIsTrivial0

// PostFilesystemChownJSONRequestBody defines body for PostFilesystemChown for application/json ContentType.
type PostFilesystemChownJSONRequestBody = FilesystemChown0

// PostFilesystemGetDefaultAclJSONRequestBody defines body for PostFilesystemGetDefaultAcl for application/json ContentType.
type PostFilesystemGetDefaultAclJSONRequestBody = FilesystemGetDefaultAcl

// PostFilesystemGetaclJSONRequestBody defines body for PostFilesystemGetacl for application/json ContentType.
type PostFilesystemGetaclJSONRequestBody = FilesystemGetacl

// PostFilesystemListdirJSONRequestBody defines body for PostFilesystemListdir for application/json ContentType.
type PostFilesystemListdirJSONRequestBody = FilesystemListdir

// PostFilesystemSetaclJSONRequestBody defines body for PostFilesystemSetacl for application/json ContentType.
type PostFilesystemSetaclJSONRequestBody = FilesystemSetacl0

// PostFilesystemSetpermJSONRequestBody defines body for PostFilesystemSetperm for application/json ContentType.
type PostFilesystemSetpermJSONRequestBody = FilesystemSetperm0

// PostFilesystemStatJSONRequestBody defines body for PostFilesystemStat for application/json ContentType.
type PostFilesystemStatJSONRequestBody = FilesystemStat0

// PostFilesystemStatfsJSONRequestBody defines body for PostFilesystemStatfs for application/json ContentType.
type PostFilesystemStatfsJSONRequestBody = FilesystemStatfs0

// PutFtpJSONRequestBody defines body for PutFtp for application/json ContentType.
type PutFtpJSONRequestBody = FtpUpdate0

// PostGroupJSONRequestBody defines body for PostGroup for application/json ContentType.
type PostGroupJSONRequestBody = GroupCreate0

// PostGroupGetGroupObjJSONRequestBody defines body for PostGroupGetGroupObj for application/json ContentType.
type PostGroupGetGroupObjJSONRequestBody = GroupGetGroupObj0

// DeleteGroupIdIdJSONRequestBody defines body for DeleteGroupIdId for application/json ContentType.
type DeleteGroupIdIdJSONRequestBody = GroupDelete1

// PutGroupIdIdJSONRequestBody defines body for PutGroupIdId for application/json ContentType.
type PutGroupIdIdJSONRequestBody = GroupUpdate1

// PostIdmapJSONRequestBody defines body for PostIdmap for application/json ContentType.
type PostIdmapJSONRequestBody = IdmapCreate0

// PutIdmapIdIdJSONRequestBody defines body for PutIdmapIdId for application/json ContentType.
type PutIdmapIdIdJSONRequestBody = IdmapUpdate1

// PostIdmapOptionsChoicesJSONRequestBody defines body for PostIdmapOptionsChoices for application/json ContentType.
type PostIdmapOptionsChoicesJSONRequestBody = IdmapOptionsChoices0

// PostInitshutdownscriptJSONRequestBody defines body for PostInitshutdownscript for application/json ContentType.
type PostInitshutdownscriptJSONRequestBody = InitshutdownscriptCreate0

// PutInitshutdownscriptIdIdJSONRequestBody defines body for PutInitshutdownscriptIdId for application/json ContentType.
type PutInitshutdownscriptIdIdJSONRequestBody = InitshutdownscriptUpdate1

// PostInterfaceJSONRequestBody defines body for PostInterface for application/json ContentType.
type PostInterfaceJSONRequestBody = InterfaceCreate0

// PostInterfaceBridgeMembersChoicesJSONRequestBody defines body for PostInterfaceBridgeMembersChoices for application/json ContentType.
type PostInterfaceBridgeMembersChoicesJSONRequestBody = InterfaceBridgeMembersChoices0

// PostInterfaceChoicesJSONRequestBody defines body for PostInterfaceChoices for application/json ContentType.
type PostInterfaceChoicesJSONRequestBody = InterfaceChoices0

// PostInterfaceCommitJSONRequestBody defines body for PostInterfaceCommit for application/json ContentType.
type PostInterfaceCommitJSONRequestBody = InterfaceCommit0

// PutInterfaceIdIdJSONRequestBody defines body for PutInterfaceIdId for application/json ContentType.
type PutInterfaceIdIdJSONRequestBody = InterfaceUpdate1

// PostInterfaceIpInUseJSONRequestBody defines body for PostInterfaceIpInUse for application/json ContentType.
type PostInterfaceIpInUseJSONRequestBody = InterfaceIpInUse0

// PostInterfaceLagPortsChoicesJSONRequestBody defines body for PostInterfaceLagPortsChoices for application/json ContentType.
type PostInterfaceLagPortsChoicesJSONRequestBody = InterfaceLagPortsChoices0

// PutIpmiIdIdJSONRequestBody defines body for PutIpmiIdId for application/json ContentType.
type PutIpmiIdIdJSONRequestBody = IpmiUpdate1

// PostIpmiIdentifyJSONRequestBody defines body for PostIpmiIdentify for application/json ContentType.
type PostIpmiIdentifyJSONRequestBody = IpmiIdentify0

// PostIscsiAuthJSONRequestBody defines body for PostIscsiAuth for application/json ContentType.
type PostIscsiAuthJSONRequestBody = IscsiAuthCreate0

// PutIscsiAuthIdIdJSONRequestBody defines body for PutIscsiAuthIdId for application/json ContentType.
type PutIscsiAuthIdIdJSONRequestBody = IscsiAuthUpdate1

// PostIscsiExtentJSONRequestBody defines body for PostIscsiExtent for application/json ContentType.
type PostIscsiExtentJSONRequestBody = IscsiExtentCreate0

// PostIscsiExtentDiskChoicesJSONRequestBody defines body for PostIscsiExtentDiskChoices for application/json ContentType.
type PostIscsiExtentDiskChoicesJSONRequestBody = IscsiExtentDiskChoices0

// DeleteIscsiExtentIdIdJSONRequestBody defines body for DeleteIscsiExtentIdId for application/json ContentType.
type DeleteIscsiExtentIdIdJSONRequestBody = IscsiExtentDelete

// PutIscsiExtentIdIdJSONRequestBody defines body for PutIscsiExtentIdId for application/json ContentType.
type PutIscsiExtentIdIdJSONRequestBody = IscsiExtentUpdate1

// PutIscsiGlobalJSONRequestBody defines body for PutIscsiGlobal for application/json ContentType.
type PutIscsiGlobalJSONRequestBody = IscsiGlobalUpdate0

// PostIscsiInitiatorJSONRequestBody defines body for PostIscsiInitiator for application/json ContentType.
type PostIscsiInitiatorJSONRequestBody = IscsiInitiatorCreate0

// PutIscsiInitiatorIdIdJSONRequestBody defines body for PutIscsiInitiatorIdId for application/json ContentType.
type PutIscsiInitiatorIdIdJSONRequestBody = IscsiInitiatorUpdate1

// PostIscsiPortalJSONRequestBody defines body for PostIscsiPortal for application/json ContentType.
type PostIscsiPortalJSONRequestBody = IscsiPortalCreate0

// PutIscsiPortalIdIdJSONRequestBody defines body for PutIscsiPortalIdId for application/json ContentType.
type PutIscsiPortalIdIdJSONRequestBody = IscsiPortalUpdate1

// PostIscsiTargetJSONRequestBody defines body for PostIscsiTarget for application/json ContentType.
type PostIscsiTargetJSONRequestBody = IscsiTargetCreate0

// DeleteIscsiTargetIdIdJSONRequestBody defines body for DeleteIscsiTargetIdId for application/json ContentType.
type DeleteIscsiTargetIdIdJSONRequestBody = IscsiTargetDelete1

// PutIscsiTargetIdIdJSONRequestBody defines body for PutIscsiTargetIdId for application/json ContentType.
type PutIscsiTargetIdIdJSONRequestBody = IscsiTargetUpdate1

// PostIscsiTargetextentJSONRequestBody defines body for PostIscsiTargetextent for application/json ContentType.
type PostIscsiTargetextentJSONRequestBody = IscsiTargetextentCreate0

// DeleteIscsiTargetextentIdIdJSONRequestBody defines body for DeleteIscsiTargetextentIdId for application/json ContentType.
type DeleteIscsiTargetextentIdIdJSONRequestBody = IscsiTargetextentDelete1

// PutIscsiTargetextentIdIdJSONRequestBody defines body for PutIscsiTargetextentIdId for application/json ContentType.
type PutIscsiTargetextentIdIdJSONRequestBody = IscsiTargetextentUpdate1

// PostJailJSONRequestBody defines body for PostJail for application/json ContentType.
type PostJailJSONRequestBody = JailCreate0

// PostJailActivateJSONRequestBody defines body for PostJailActivate for application/json ContentType.
type PostJailActivateJSONRequestBody = JailActivate0

// PostJailCleanJSONRequestBody defines body for PostJailClean for application/json ContentType.
type PostJailCleanJSONRequestBody = JailClean0

// PostJailExecJSONRequestBody defines body for PostJailExec for application/json ContentType.
type PostJailExecJSONRequestBody = JailExec

// PostJailExportJSONRequestBody defines body for PostJailExport for application/json ContentType.
type PostJailExportJSONRequestBody = JailExport0

// PostJailFetchJSONRequestBody defines body for PostJailFetch for application/json ContentType.
type PostJailFetchJSONRequestBody = JailFetch0

// PostJailFstabJSONRequestBody defines body for PostJailFstab for application/json ContentType.
type PostJailFstabJSONRequestBody = JailFstab

// DeleteJailIdIdJSONRequestBody defines body for DeleteJailIdId for application/json ContentType.
type DeleteJailIdIdJSONRequestBody = JailDelete1

// PutJailIdIdJSONRequestBody defines body for PutJailIdId for application/json ContentType.
type PutJailIdIdJSONRequestBody = JailUpdate1

// PostJailIdIdCloneJSONRequestBody defines body for PostJailIdIdClone for application/json ContentType.
type PostJailIdIdCloneJSONRequestBody = JailClone1

// PostJailImportImageJSONRequestBody defines body for PostJailImportImage for application/json ContentType.
type PostJailImportImageJSONRequestBody = JailImportImage0

// PostJailRcActionJSONRequestBody defines body for PostJailRcAction for application/json ContentType.
type PostJailRcActionJSONRequestBody = JailRcAction0

// PostJailReleasesChoicesJSONRequestBody defines body for PostJailReleasesChoices for application/json ContentType.
type PostJailReleasesChoicesJSONRequestBody = JailReleasesChoices0

// PostJailRestartJSONRequestBody defines body for PostJailRestart for application/json ContentType.
type PostJailRestartJSONRequestBody = JailRestart0

// PostJailStartJSONRequestBody defines body for PostJailStart for application/json ContentType.
type PostJailStartJSONRequestBody = JailStart0

// PostJailStopJSONRequestBody defines body for PostJailStop for application/json ContentType.
type PostJailStopJSONRequestBody = JailStop

// PostJailUpdateDefaultsJSONRequestBody defines body for PostJailUpdateDefaults for application/json ContentType.
type PostJailUpdateDefaultsJSONRequestBody = JailUpdateDefaults0

// PostJailUpdateToLatestPatchJSONRequestBody defines body for PostJailUpdateToLatestPatch for application/json ContentType.
type PostJailUpdateToLatestPatchJSONRequestBody = JailUpdateToLatestPatch

// PutKerberosJSONRequestBody defines body for PutKerberos for application/json ContentType.
type PutKerberosJSONRequestBody = KerberosUpdate0

// PostKerberosKeytabJSONRequestBody defines body for PostKerberosKeytab for application/json ContentType.
type PostKerberosKeytabJSONRequestBody = KerberosKeytabCreate0

// PutKerberosKeytabIdIdJSONRequestBody defines body for PutKerberosKeytabIdId for application/json ContentType.
type PutKerberosKeytabIdIdJSONRequestBody = KerberosKeytabUpdate1

// PostKerberosRealmJSONRequestBody defines body for PostKerberosRealm for application/json ContentType.
type PostKerberosRealmJSONRequestBody = KerberosRealmCreate0

// PutKerberosRealmIdIdJSONRequestBody defines body for PutKerberosRealmIdId for application/json ContentType.
type PutKerberosRealmIdIdJSONRequestBody = KerberosRealmUpdate1

// PostKeychaincredentialJSONRequestBody defines body for PostKeychaincredential for application/json ContentType.
type PostKeychaincredentialJSONRequestBody = KeychaincredentialCreate0

// DeleteKeychaincredentialIdIdJSONRequestBody defines body for DeleteKeychaincredentialIdId for application/json ContentType.
type DeleteKeychaincredentialIdIdJSONRequestBody = KeychaincredentialDelete1

// PutKeychaincredentialIdIdJSONRequestBody defines body for PutKeychaincredentialIdId for application/json ContentType.
type PutKeychaincredentialIdIdJSONRequestBody = KeychaincredentialUpdate1

// PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody defines body for PostKeychaincredentialRemoteSshHostKeyScan for application/json ContentType.
type PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody = KeychaincredentialRemoteSshHostKeyScan0

// PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody defines body for PostKeychaincredentialRemoteSshSemiautomaticSetup for application/json ContentType.
type PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody = KeychaincredentialRemoteSshSemiautomaticSetup0

// PostKeychaincredentialUsedByJSONRequestBody defines body for PostKeychaincredentialUsedBy for application/json ContentType.
type PostKeychaincredentialUsedByJSONRequestBody = KeychaincredentialUsedBy0

// PutKmipJSONRequestBody defines body for PutKmip for application/json ContentType.
type PutKmipJSONRequestBody = KmipUpdate0

// PutLdapJSONRequestBody defines body for PutLdap for application/json ContentType.
type PutLdapJSONRequestBody = LdapUpdate0

// PutLldpJSONRequestBody defines body for PutLldp for application/json ContentType.
type PutLldpJSONRequestBody = LldpUpdate0

// PutMailJSONRequestBody defines body for PutMail for application/json ContentType.
type PutMailJSONRequestBody = MailUpdate0

// PostMailSendJSONRequestBody defines body for PostMailSend for application/json ContentType.
type PostMailSendJSONRequestBody = MailSend

// PutNetworkConfigurationJSONRequestBody defines body for PutNetworkConfiguration for application/json ContentType.
type PutNetworkConfigurationJSONRequestBody = NetworkConfigurationUpdate0

// PutNfsJSONRequestBody defines body for PutNfs for application/json ContentType.
type PutNfsJSONRequestBody = NfsUpdate0

// PostNfsAddPrincipalJSONRequestBody defines body for PostNfsAddPrincipal for application/json ContentType.
type PostNfsAddPrincipalJSONRequestBody = NfsAddPrincipal0

// PutNisJSONRequestBody defines body for PutNis for application/json ContentType.
type PutNisJSONRequestBody = NisUpdate0

// PutOpenvpnClientJSONRequestBody defines body for PutOpenvpnClient for application/json ContentType.
type PutOpenvpnClientJSONRequestBody = OpenvpnClientUpdate0

// PutOpenvpnServerJSONRequestBody defines body for PutOpenvpnServer for application/json ContentType.
type PutOpenvpnServerJSONRequestBody = OpenvpnServerUpdate0

// PostOpenvpnServerClientConfigurationGenerationJSONRequestBody defines body for PostOpenvpnServerClientConfigurationGeneration for application/json ContentType.
type PostOpenvpnServerClientConfigurationGenerationJSONRequestBody = OpenvpnServerClientConfigurationGeneration

// PostPluginJSONRequestBody defines body for PostPlugin for application/json ContentType.
type PostPluginJSONRequestBody = PluginCreate0

// PostPluginAvailableJSONRequestBody defines body for PostPluginAvailable for application/json ContentType.
type PostPluginAvailableJSONRequestBody = PluginAvailable0

// PostPluginBranchesChoicesJSONRequestBody defines body for PostPluginBranchesChoices for application/json ContentType.
type PostPluginBranchesChoicesJSONRequestBody = PluginBranchesChoices0

// PostPluginDefaultsJSONRequestBody defines body for PostPluginDefaults for application/json ContentType.
type PostPluginDefaultsJSONRequestBody = PluginDefaults0

// PutPluginIdIdJSONRequestBody defines body for PutPluginIdId for application/json ContentType.
type PutPluginIdIdJSONRequestBody = PluginUpdate1

// PostPluginUpdatePluginJSONRequestBody defines body for PostPluginUpdatePlugin for application/json ContentType.
type PostPluginUpdatePluginJSONRequestBody = PluginUpdatePlugin

// PostPoolJSONRequestBody defines body for PostPool for application/json ContentType.
type PostPoolJSONRequestBody = PoolCreate0

// PostPoolAttachJSONRequestBody defines body for PostPoolAttach for application/json ContentType.
type PostPoolAttachJSONRequestBody = PoolAttach

// PostPoolDatasetJSONRequestBody defines body for PostPoolDataset for application/json ContentType.
type PostPoolDatasetJSONRequestBody = PoolDatasetCreate0

// PostPoolDatasetChangeKeyJSONRequestBody defines body for PostPoolDatasetChangeKey for application/json ContentType.
type PostPoolDatasetChangeKeyJSONRequestBody = PoolDatasetChangeKey

// PostPoolDatasetEncryptionSummaryJSONRequestBody defines body for PostPoolDatasetEncryptionSummary for application/json ContentType.
type PostPoolDatasetEncryptionSummaryJSONRequestBody = PoolDatasetEncryptionSummary

// PostPoolDatasetExportKeyJSONRequestBody defines body for PostPoolDatasetExportKey for application/json ContentType.
type PostPoolDatasetExportKeyJSONRequestBody = PoolDatasetExportKey

// DeletePoolDatasetIdIdJSONRequestBody defines body for DeletePoolDatasetIdId for application/json ContentType.
type DeletePoolDatasetIdIdJSONRequestBody = PoolDatasetDelete1

// PutPoolDatasetIdIdJSONRequestBody defines body for PutPoolDatasetIdId for application/json ContentType.
type PutPoolDatasetIdIdJSONRequestBody = PoolDatasetUpdate1

// PostPoolDatasetIdIdAttachmentsJSONRequestBody defines body for PostPoolDatasetIdIdAttachments for application/json ContentType.
type PostPoolDatasetIdIdAttachmentsJSONRequestBody = PoolDatasetAttachments

// PostPoolDatasetIdIdGetQuotaJSONRequestBody defines body for PostPoolDatasetIdIdGetQuota for application/json ContentType.
type PostPoolDatasetIdIdGetQuotaJSONRequestBody = PoolDatasetGetQuota

// PostPoolDatasetIdIdPermissionJSONRequestBody defines body for PostPoolDatasetIdIdPermission for application/json ContentType.
type PostPoolDatasetIdIdPermissionJSONRequestBody = PoolDatasetPermission1

// PostPoolDatasetIdIdProcessesJSONRequestBody defines body for PostPoolDatasetIdIdProcesses for application/json ContentType.
type PostPoolDatasetIdIdProcessesJSONRequestBody = PoolDatasetProcesses

// PostPoolDatasetIdIdPromoteJSONRequestBody defines body for PostPoolDatasetIdIdPromote for application/json ContentType.
type PostPoolDatasetIdIdPromoteJSONRequestBody = PoolDatasetPromote

// PostPoolDatasetIdIdSetQuotaJSONRequestBody defines body for PostPoolDatasetIdIdSetQuota for application/json ContentType.
type PostPoolDatasetIdIdSetQuotaJSONRequestBody = PoolDatasetSetQuota1

// PostPoolDatasetInheritParentEncryptionPropertiesJSONRequestBody defines body for PostPoolDatasetInheritParentEncryptionProperties for application/json ContentType.
type PostPoolDatasetInheritParentEncryptionPropertiesJSONRequestBody = PoolDatasetInheritParentEncryptionProperties0

// PostPoolDatasetLockJSONRequestBody defines body for PostPoolDatasetLock for application/json ContentType.
type PostPoolDatasetLockJSONRequestBody = PoolDatasetLock

// PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody defines body for PostPoolDatasetRecommendedZvolBlocksize for application/json ContentType.
type PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody = PoolDatasetRecommendedZvolBlocksize0

// PostPoolDatasetUnlockJSONRequestBody defines body for PostPoolDatasetUnlock for application/json ContentType.
type PostPoolDatasetUnlockJSONRequestBody = PoolDatasetUnlock

// PostPoolDatasetUserpropJSONRequestBody defines body for PostPoolDatasetUserprop for application/json ContentType.
type PostPoolDatasetUserpropJSONRequestBody = PoolDatasetUserpropCreate0

// DeletePoolDatasetUserpropIdIdJSONRequestBody defines body for DeletePoolDatasetUserpropIdId for application/json ContentType.
type DeletePoolDatasetUserpropIdIdJSONRequestBody = PoolDatasetUserpropDelete1

// PutPoolDatasetUserpropIdIdJSONRequestBody defines body for PutPoolDatasetUserpropIdId for application/json ContentType.
type PutPoolDatasetUserpropIdIdJSONRequestBody = PoolDatasetUserpropUpdate1

// PostPoolFilesystemChoicesJSONRequestBody defines body for PostPoolFilesystemChoices for application/json ContentType.
type PostPoolFilesystemChoicesJSONRequestBody = PoolFilesystemChoices0

// PutPoolIdIdJSONRequestBody defines body for PutPoolIdId for application/json ContentType.
type PutPoolIdIdJSONRequestBody = PoolUpdate1

// PostPoolIdIdAttachmentsJSONRequestBody defines body for PostPoolIdIdAttachments for application/json ContentType.
type PostPoolIdIdAttachmentsJSONRequestBody = PoolAttachments

// PostPoolIdIdDetachJSONRequestBody defines body for PostPoolIdIdDetach for application/json ContentType.
type PostPoolIdIdDetachJSONRequestBody = PoolDetach1

// PostPoolIdIdDownloadEncryptionKeyJSONRequestBody defines body for PostPoolIdIdDownloadEncryptionKey for application/json ContentType.
type PostPoolIdIdDownloadEncryptionKeyJSONRequestBody = PoolDownloadEncryptionKey1

// PostPoolIdIdExpandJSONRequestBody defines body for PostPoolIdIdExpand for application/json ContentType.
type PostPoolIdIdExpandJSONRequestBody = PoolExpand1

// PostPoolIdIdExportJSONRequestBody defines body for PostPoolIdIdExport for application/json ContentType.
type PostPoolIdIdExportJSONRequestBody = PoolExport1

// PostPoolIdIdGetDisksJSONRequestBody defines body for PostPoolIdIdGetDisks for application/json ContentType.
type PostPoolIdIdGetDisksJSONRequestBody = PoolGetDisks

// PostPoolIdIdIsUpgradedJSONRequestBody defines body for PostPoolIdIdIsUpgraded for application/json ContentType.
type PostPoolIdIdIsUpgradedJSONRequestBody = PoolIsUpgraded

// PostPoolIdIdLockJSONRequestBody defines body for PostPoolIdIdLock for application/json ContentType.
type PostPoolIdIdLockJSONRequestBody = PoolLock1

// PostPoolIdIdOfflineJSONRequestBody defines body for PostPoolIdIdOffline for application/json ContentType.
type PostPoolIdIdOfflineJSONRequestBody = PoolOffline1

// PostPoolIdIdOnlineJSONRequestBody defines body for PostPoolIdIdOnline for application/json ContentType.
type PostPoolIdIdOnlineJSONRequestBody = PoolOnline1

// PostPoolIdIdPassphraseJSONRequestBody defines body for PostPoolIdIdPassphrase for application/json ContentType.
type PostPoolIdIdPassphraseJSONRequestBody = PoolPassphrase1

// PostPoolIdIdProcessesJSONRequestBody defines body for PostPoolIdIdProcesses for application/json ContentType.
type PostPoolIdIdProcessesJSONRequestBody = PoolProcesses

// PostPoolIdIdRecoverykeyRmJSONRequestBody defines body for PostPoolIdIdRecoverykeyRm for application/json ContentType.
type PostPoolIdIdRecoverykeyRmJSONRequestBody = PoolRecoverykeyRm1

// PostPoolIdIdRekeyJSONRequestBody defines body for PostPoolIdIdRekey for application/json ContentType.
type PostPoolIdIdRekeyJSONRequestBody = PoolRekey1

// PostPoolIdIdRemoveJSONRequestBody defines body for PostPoolIdIdRemove for application/json ContentType.
type PostPoolIdIdRemoveJSONRequestBody = PoolRemove1

// PostPoolIdIdReplaceJSONRequestBody defines body for PostPoolIdIdReplace for application/json ContentType.
type PostPoolIdIdReplaceJSONRequestBody = PoolReplace1

// PostPoolIdIdScrubJSONRequestBody defines body for PostPoolIdIdScrub for application/json ContentType.
type PostPoolIdIdScrubJSONRequestBody = PoolScrub1

// PostPoolIdIdUnlockJSONRequestBody defines body for PostPoolIdIdUnlock for application/json ContentType.
type PostPoolIdIdUnlockJSONRequestBody = PoolUnlock1

// PostPoolIdIdUpgradeJSONRequestBody defines body for PostPoolIdIdUpgrade for application/json ContentType.
type PostPoolIdIdUpgradeJSONRequestBody = PoolUpgrade

// PostPoolImportDiskJSONRequestBody defines body for PostPoolImportDisk for application/json ContentType.
type PostPoolImportDiskJSONRequestBody = PoolImportDisk

// PostPoolImportDiskAutodetectFsTypeJSONRequestBody defines body for PostPoolImportDiskAutodetectFsType for application/json ContentType.
type PostPoolImportDiskAutodetectFsTypeJSONRequestBody = PoolImportDiskAutodetectFsType0

// PostPoolImportPoolJSONRequestBody defines body for PostPoolImportPool for application/json ContentType.
type PostPoolImportPoolJSONRequestBody = PoolImportPool0

// PutPoolResilverJSONRequestBody defines body for PutPoolResilver for application/json ContentType.
type PutPoolResilverJSONRequestBody = PoolResilverUpdate0

// PostPoolScrubJSONRequestBody defines body for PostPoolScrub for application/json ContentType.
type PostPoolScrubJSONRequestBody = PoolScrubCreate0

// PutPoolScrubIdIdJSONRequestBody defines body for PutPoolScrubIdId for application/json ContentType.
type PutPoolScrubIdIdJSONRequestBody = PoolScrubUpdate1

// PostPoolScrubRunJSONRequestBody defines body for PostPoolScrubRun for application/json ContentType.
type PostPoolScrubRunJSONRequestBody = PoolScrubRun

// PostPoolSnapshottaskJSONRequestBody defines body for PostPoolSnapshottask for application/json ContentType.
type PostPoolSnapshottaskJSONRequestBody = PoolSnapshottaskCreate0

// PutPoolSnapshottaskIdIdJSONRequestBody defines body for PutPoolSnapshottaskIdId for application/json ContentType.
type PutPoolSnapshottaskIdIdJSONRequestBody = PoolSnapshottaskUpdate1

// PostPoolSnapshottaskIdIdRunJSONRequestBody defines body for PostPoolSnapshottaskIdIdRun for application/json ContentType.
type PostPoolSnapshottaskIdIdRunJSONRequestBody = PoolSnapshottaskRun

// PostPoolUnlockServicesRestartChoicesJSONRequestBody defines body for PostPoolUnlockServicesRestartChoices for application/json ContentType.
type PostPoolUnlockServicesRestartChoicesJSONRequestBody = PoolUnlockServicesRestartChoices0

// PostReplicationJSONRequestBody defines body for PostReplication for application/json ContentType.
type PostReplicationJSONRequestBody = ReplicationCreate0

// PutReplicationConfigJSONRequestBody defines body for PutReplicationConfig for application/json ContentType.
type PutReplicationConfigJSONRequestBody = ReplicationConfigUpdate0

// PostReplicationCountEligibleManualSnapshotsJSONRequestBody defines body for PostReplicationCountEligibleManualSnapshots for application/json ContentType.
type PostReplicationCountEligibleManualSnapshotsJSONRequestBody = ReplicationCountEligibleManualSnapshots

// PostReplicationCreateDatasetJSONRequestBody defines body for PostReplicationCreateDataset for application/json ContentType.
type PostReplicationCreateDatasetJSONRequestBody = ReplicationCreateDataset

// PutReplicationIdIdJSONRequestBody defines body for PutReplicationIdId for application/json ContentType.
type PutReplicationIdIdJSONRequestBody = ReplicationUpdate1

// PostReplicationIdIdRestoreJSONRequestBody defines body for PostReplicationIdIdRestore for application/json ContentType.
type PostReplicationIdIdRestoreJSONRequestBody = ReplicationRestore1

// PostReplicationIdIdRunJSONRequestBody defines body for PostReplicationIdIdRun for application/json ContentType.
type PostReplicationIdIdRunJSONRequestBody = ReplicationRun

// PostReplicationListDatasetsJSONRequestBody defines body for PostReplicationListDatasets for application/json ContentType.
type PostReplicationListDatasetsJSONRequestBody = ReplicationListDatasets

// PostReplicationTargetUnmatchedSnapshotsJSONRequestBody defines body for PostReplicationTargetUnmatchedSnapshots for application/json ContentType.
type PostReplicationTargetUnmatchedSnapshotsJSONRequestBody = ReplicationTargetUnmatchedSnapshots

// PutReportingJSONRequestBody defines body for PutReporting for application/json ContentType.
type PutReportingJSONRequestBody = ReportingUpdate0

// PostReportingGetDataJSONRequestBody defines body for PostReportingGetData for application/json ContentType.
type PostReportingGetDataJSONRequestBody = ReportingGetData

// PostRouteIpv4gwReachableJSONRequestBody defines body for PostRouteIpv4gwReachable for application/json ContentType.
type PostRouteIpv4gwReachableJSONRequestBody = RouteIpv4gwReachable0

// PutRsyncdJSONRequestBody defines body for PutRsyncd for application/json ContentType.
type PutRsyncdJSONRequestBody = RsyncdUpdate0

// PostRsyncmodJSONRequestBody defines body for PostRsyncmod for application/json ContentType.
type PostRsyncmodJSONRequestBody = RsyncmodCreate0

// PutRsyncmodIdIdJSONRequestBody defines body for PutRsyncmodIdId for application/json ContentType.
type PutRsyncmodIdIdJSONRequestBody = RsyncmodUpdate1

// PostRsynctaskJSONRequestBody defines body for PostRsynctask for application/json ContentType.
type PostRsynctaskJSONRequestBody = RsynctaskCreate0

// PutRsynctaskIdIdJSONRequestBody defines body for PutRsynctaskIdId for application/json ContentType.
type PutRsynctaskIdIdJSONRequestBody = RsynctaskUpdate1

// PostRsynctaskIdIdRunJSONRequestBody defines body for PostRsynctaskIdIdRun for application/json ContentType.
type PostRsynctaskIdIdRunJSONRequestBody = RsynctaskRun

// PutS3JSONRequestBody defines body for PutS3 for application/json ContentType.
type PutS3JSONRequestBody = S3Update0

// PutServiceIdIdJSONRequestBody defines body for PutServiceIdId for application/json ContentType.
type PutServiceIdIdJSONRequestBody = ServiceUpdate1

// PostServiceReloadJSONRequestBody defines body for PostServiceReload for application/json ContentType.
type PostServiceReloadJSONRequestBody = ServiceReload

// PostServiceRestartJSONRequestBody defines body for PostServiceRestart for application/json ContentType.
type PostServiceRestartJSONRequestBody = ServiceRestart

// PostServiceStartJSONRequestBody defines body for PostServiceStart for application/json ContentType.
type PostServiceStartJSONRequestBody = ServiceStart

// PostServiceStopJSONRequestBody defines body for PostServiceStop for application/json ContentType.
type PostServiceStopJSONRequestBody = ServiceStop

// PostServiceTerminateProcessJSONRequestBody defines body for PostServiceTerminateProcess for application/json ContentType.
type PostServiceTerminateProcessJSONRequestBody = ServiceTerminateProcess

// PostSharingAfpJSONRequestBody defines body for PostSharingAfp for application/json ContentType.
type PostSharingAfpJSONRequestBody = SharingAfpCreate0

// PutSharingAfpIdIdJSONRequestBody defines body for PutSharingAfpIdId for application/json ContentType.
type PutSharingAfpIdIdJSONRequestBody = SharingAfpUpdate1

// PostSharingNfsJSONRequestBody defines body for PostSharingNfs for application/json ContentType.
type PostSharingNfsJSONRequestBody = SharingNfsCreate0

// PutSharingNfsIdIdJSONRequestBody defines body for PutSharingNfsIdId for application/json ContentType.
type PutSharingNfsIdIdJSONRequestBody = SharingNfsUpdate1

// PostSharingSmbJSONRequestBody defines body for PostSharingSmb for application/json ContentType.
type PostSharingSmbJSONRequestBody = SharingSmbCreate0

// PutSharingSmbIdIdJSONRequestBody defines body for PutSharingSmbIdId for application/json ContentType.
type PutSharingSmbIdIdJSONRequestBody = SharingSmbUpdate1

// PostSharingWebdavJSONRequestBody defines body for PostSharingWebdav for application/json ContentType.
type PostSharingWebdavJSONRequestBody = SharingWebdavCreate0

// PutSharingWebdavIdIdJSONRequestBody defines body for PutSharingWebdavIdId for application/json ContentType.
type PutSharingWebdavIdIdJSONRequestBody = SharingWebdavUpdate1

// PutSmartJSONRequestBody defines body for PutSmart for application/json ContentType.
type PutSmartJSONRequestBody = SmartUpdate0

// PostSmartTestJSONRequestBody defines body for PostSmartTest for application/json ContentType.
type PostSmartTestJSONRequestBody = SmartTestCreate0

// PostSmartTestDiskChoicesJSONRequestBody defines body for PostSmartTestDiskChoices for application/json ContentType.
type PostSmartTestDiskChoicesJSONRequestBody = SmartTestDiskChoices0

// PutSmartTestIdIdJSONRequestBody defines body for PutSmartTestIdId for application/json ContentType.
type PutSmartTestIdIdJSONRequestBody = SmartTestUpdate1

// PostSmartTestManualTestJSONRequestBody defines body for PostSmartTestManualTest for application/json ContentType.
type PostSmartTestManualTestJSONRequestBody = SmartTestManualTest0

// PutSmbJSONRequestBody defines body for PutSmb for application/json ContentType.
type PutSmbJSONRequestBody = SmbUpdate0

// PostSmbGetRemoteAclJSONRequestBody defines body for PostSmbGetRemoteAcl for application/json ContentType.
type PostSmbGetRemoteAclJSONRequestBody = SmbGetRemoteAcl0

// PostSmbSharesecJSONRequestBody defines body for PostSmbSharesec for application/json ContentType.
type PostSmbSharesecJSONRequestBody = SmbSharesecCreate0

// PostSmbSharesecGetaclJSONRequestBody defines body for PostSmbSharesecGetacl for application/json ContentType.
type PostSmbSharesecGetaclJSONRequestBody = SmbSharesecGetacl

// PutSmbSharesecIdIdJSONRequestBody defines body for PutSmbSharesecIdId for application/json ContentType.
type PutSmbSharesecIdIdJSONRequestBody = SmbSharesecUpdate1

// PostSmbStatusJSONRequestBody defines body for PostSmbStatus for application/json ContentType.
type PostSmbStatusJSONRequestBody = SmbStatus

// PutSnmpJSONRequestBody defines body for PutSnmp for application/json ContentType.
type PutSnmpJSONRequestBody = SnmpUpdate0

// PutSshJSONRequestBody defines body for PutSsh for application/json ContentType.
type PutSshJSONRequestBody = SshUpdate0

// PostStaticrouteJSONRequestBody defines body for PostStaticroute for application/json ContentType.
type PostStaticrouteJSONRequestBody = StaticrouteCreate0

// PutStaticrouteIdIdJSONRequestBody defines body for PutStaticrouteIdId for application/json ContentType.
type PutStaticrouteIdIdJSONRequestBody = StaticrouteUpdate1

// PostStatsGetDataJSONRequestBody defines body for PostStatsGetData for application/json ContentType.
type PostStatsGetDataJSONRequestBody = StatsGetData

// PostStatsGetDatasetInfoJSONRequestBody defines body for PostStatsGetDatasetInfo for application/json ContentType.
type PostStatsGetDatasetInfoJSONRequestBody = StatsGetDatasetInfo

// PutSupportJSONRequestBody defines body for PutSupport for application/json ContentType.
type PutSupportJSONRequestBody = SupportUpdate0

// PostSupportFetchCategoriesJSONRequestBody defines body for PostSupportFetchCategories for application/json ContentType.
type PostSupportFetchCategoriesJSONRequestBody = SupportFetchCategories

// PostSupportNewTicketJSONRequestBody defines body for PostSupportNewTicket for application/json ContentType.
type PostSupportNewTicketJSONRequestBody = SupportNewTicket0

// PutSystemAdvancedJSONRequestBody defines body for PutSystemAdvanced for application/json ContentType.
type PutSystemAdvancedJSONRequestBody = SystemAdvancedUpdate0

// PostSystemFeatureEnabledJSONRequestBody defines body for PostSystemFeatureEnabled for application/json ContentType.
type PostSystemFeatureEnabledJSONRequestBody = SystemFeatureEnabled0

// PutSystemGeneralJSONRequestBody defines body for PutSystemGeneral for application/json ContentType.
type PutSystemGeneralJSONRequestBody = SystemGeneralUpdate0

// GetSystemGeneralUiRestartJSONRequestBody defines body for GetSystemGeneralUiRestart for application/json ContentType.
type GetSystemGeneralUiRestartJSONRequestBody = SystemGeneralUiRestart0

// PostSystemGeneralUiRestartJSONRequestBody defines body for PostSystemGeneralUiRestart for application/json ContentType.
type PostSystemGeneralUiRestartJSONRequestBody = SystemGeneralUiRestart0

// PostSystemLicenseUpdateJSONRequestBody defines body for PostSystemLicenseUpdate for application/json ContentType.
type PostSystemLicenseUpdateJSONRequestBody = SystemLicenseUpdate0

// PostSystemNtpserverJSONRequestBody defines body for PostSystemNtpserver for application/json ContentType.
type PostSystemNtpserverJSONRequestBody = SystemNtpserverCreate0

// PutSystemNtpserverIdIdJSONRequestBody defines body for PutSystemNtpserverIdId for application/json ContentType.
type PutSystemNtpserverIdIdJSONRequestBody = SystemNtpserverUpdate1

// PostSystemRebootJSONRequestBody defines body for PostSystemReboot for application/json ContentType.
type PostSystemRebootJSONRequestBody = SystemReboot0

// PostSystemShutdownJSONRequestBody defines body for PostSystemShutdown for application/json ContentType.
type PostSystemShutdownJSONRequestBody = SystemShutdown0

// PutSystemdatasetJSONRequestBody defines body for PutSystemdataset for application/json ContentType.
type PutSystemdatasetJSONRequestBody = SystemdatasetUpdate0

// PutTftpJSONRequestBody defines body for PutTftp for application/json ContentType.
type PutTftpJSONRequestBody = TftpUpdate0

// PutTruecommandJSONRequestBody defines body for PutTruecommand for application/json ContentType.
type PutTruecommandJSONRequestBody = TruecommandUpdate0

// PostTruenasSetProductionJSONRequestBody defines body for PostTruenasSetProduction for application/json ContentType.
type PostTruenasSetProductionJSONRequestBody = TruenasSetProduction

// PostTruenasUpdateCustomerInformationJSONRequestBody defines body for PostTruenasUpdateCustomerInformation for application/json ContentType.
type PostTruenasUpdateCustomerInformationJSONRequestBody = TruenasUpdateCustomerInformation0

// PostTunableJSONRequestBody defines body for PostTunable for application/json ContentType.
type PostTunableJSONRequestBody = TunableCreate0

// PutTunableIdIdJSONRequestBody defines body for PutTunableIdId for application/json ContentType.
type PutTunableIdIdJSONRequestBody = TunableUpdate1

// PostUpdateCheckAvailableJSONRequestBody defines body for PostUpdateCheckAvailable for application/json ContentType.
type PostUpdateCheckAvailableJSONRequestBody = UpdateCheckAvailable0

// PostUpdateGetPendingJSONRequestBody defines body for PostUpdateGetPending for application/json ContentType.
type PostUpdateGetPendingJSONRequestBody = UpdateGetPending0

// PostUpdateManualJSONRequestBody defines body for PostUpdateManual for application/json ContentType.
type PostUpdateManualJSONRequestBody = UpdateManual0

// PostUpdateSetAutoDownloadJSONRequestBody defines body for PostUpdateSetAutoDownload for application/json ContentType.
type PostUpdateSetAutoDownloadJSONRequestBody = UpdateSetAutoDownload0

// PostUpdateSetTrainJSONRequestBody defines body for PostUpdateSetTrain for application/json ContentType.
type PostUpdateSetTrainJSONRequestBody = UpdateSetTrain0

// PostUpdateUpdateJSONRequestBody defines body for PostUpdateUpdate for application/json ContentType.
type PostUpdateUpdateJSONRequestBody = UpdateUpdate0

// PutUpsJSONRequestBody defines body for PutUps for application/json ContentType.
type PutUpsJSONRequestBody = UpsUpdate0

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = UserCreate0

// PostUserGetUserObjJSONRequestBody defines body for PostUserGetUserObj for application/json ContentType.
type PostUserGetUserObjJSONRequestBody = UserGetUserObj0

// DeleteUserIdIdJSONRequestBody defines body for DeleteUserIdId for application/json ContentType.
type DeleteUserIdIdJSONRequestBody = UserDelete1

// PutUserIdIdJSONRequestBody defines body for PutUserIdId for application/json ContentType.
type PutUserIdIdJSONRequestBody = UserUpdate1

// PostUserIdIdPopAttributeJSONRequestBody defines body for PostUserIdIdPopAttribute for application/json ContentType.
type PostUserIdIdPopAttributeJSONRequestBody = UserPopAttribute1

// PostUserIdIdSetAttributeJSONRequestBody defines body for PostUserIdIdSetAttribute for application/json ContentType.
type PostUserIdIdSetAttributeJSONRequestBody = UserSetAttribute

// PostUserShellChoicesJSONRequestBody defines body for PostUserShellChoices for application/json ContentType.
type PostUserShellChoicesJSONRequestBody = UserShellChoices0

// PostVmJSONRequestBody defines body for PostVm for application/json ContentType.
type PostVmJSONRequestBody = VmCreate0

// PostVmDeviceJSONRequestBody defines body for PostVmDevice for application/json ContentType.
type PostVmDeviceJSONRequestBody = VmDeviceCreate0

// DeleteVmDeviceIdIdJSONRequestBody defines body for DeleteVmDeviceIdId for application/json ContentType.
type DeleteVmDeviceIdIdJSONRequestBody = VmDeviceDelete1

// PutVmDeviceIdIdJSONRequestBody defines body for PutVmDeviceIdId for application/json ContentType.
type PutVmDeviceIdIdJSONRequestBody = VmDeviceUpdate1

// PostVmGetAttachedIfaceJSONRequestBody defines body for PostVmGetAttachedIface for application/json ContentType.
type PostVmGetAttachedIfaceJSONRequestBody = VmGetAttachedIface0

// PostVmGetAvailableMemoryJSONRequestBody defines body for PostVmGetAvailableMemory for application/json ContentType.
type PostVmGetAvailableMemoryJSONRequestBody = VmGetAvailableMemory0

// PostVmGetConsoleJSONRequestBody defines body for PostVmGetConsole for application/json ContentType.
type PostVmGetConsoleJSONRequestBody = VmGetConsole0

// PostVmGetVncJSONRequestBody defines body for PostVmGetVnc for application/json ContentType.
type PostVmGetVncJSONRequestBody = VmGetVnc0

// DeleteVmIdIdJSONRequestBody defines body for DeleteVmIdId for application/json ContentType.
type DeleteVmIdIdJSONRequestBody = VmDelete1

// PutVmIdIdJSONRequestBody defines body for PutVmIdId for application/json ContentType.
type PutVmIdIdJSONRequestBody = VmUpdate1

// PostVmIdIdCloneJSONRequestBody defines body for PostVmIdIdClone for application/json ContentType.
type PostVmIdIdCloneJSONRequestBody = VmClone1

// PostVmIdIdPoweroffJSONRequestBody defines body for PostVmIdIdPoweroff for application/json ContentType.
type PostVmIdIdPoweroffJSONRequestBody = VmPoweroff

// PostVmIdIdRestartJSONRequestBody defines body for PostVmIdIdRestart for application/json ContentType.
type PostVmIdIdRestartJSONRequestBody = VmRestart

// PostVmIdIdStartJSONRequestBody defines body for PostVmIdIdStart for application/json ContentType.
type PostVmIdIdStartJSONRequestBody = VmStart1

// PostVmIdIdStatusJSONRequestBody defines body for PostVmIdIdStatus for application/json ContentType.
type PostVmIdIdStatusJSONRequestBody = VmStatus

// PostVmIdIdStopJSONRequestBody defines body for PostVmIdIdStop for application/json ContentType.
type PostVmIdIdStopJSONRequestBody = VmStop1

// PostVmwareJSONRequestBody defines body for PostVmware for application/json ContentType.
type PostVmwareJSONRequestBody = VmwareCreate0

// PostVmwareDatasetHasVmsJSONRequestBody defines body for PostVmwareDatasetHasVms for application/json ContentType.
type PostVmwareDatasetHasVmsJSONRequestBody = VmwareDatasetHasVms

// PostVmwareGetDatastoresJSONRequestBody defines body for PostVmwareGetDatastores for application/json ContentType.
type PostVmwareGetDatastoresJSONRequestBody = VmwareGetDatastores0

// PostVmwareGetVirtualMachinesJSONRequestBody defines body for PostVmwareGetVirtualMachines for application/json ContentType.
type PostVmwareGetVirtualMachinesJSONRequestBody = VmwareGetVirtualMachines0

// PutVmwareIdIdJSONRequestBody defines body for PutVmwareIdId for application/json ContentType.
type PutVmwareIdIdJSONRequestBody = VmwareUpdate1

// PostVmwareMatchDatastoresWithDatasetsJSONRequestBody defines body for PostVmwareMatchDatastoresWithDatasets for application/json ContentType.
type PostVmwareMatchDatastoresWithDatasetsJSONRequestBody = VmwareMatchDatastoresWithDatasets0

// PutWebdavJSONRequestBody defines body for PutWebdav for application/json ContentType.
type PutWebdavJSONRequestBody = WebdavUpdate0

// PostZfsSnapshotJSONRequestBody defines body for PostZfsSnapshot for application/json ContentType.
type PostZfsSnapshotJSONRequestBody = ZfsSnapshotCreate0

// PostZfsSnapshotCloneJSONRequestBody defines body for PostZfsSnapshotClone for application/json ContentType.
type PostZfsSnapshotCloneJSONRequestBody = ZfsSnapshotClone0

// DeleteZfsSnapshotIdIdJSONRequestBody defines body for DeleteZfsSnapshotIdId for application/json ContentType.
type DeleteZfsSnapshotIdIdJSONRequestBody = ZfsSnapshotDelete1

// PostZfsSnapshotRemoveJSONRequestBody defines body for PostZfsSnapshotRemove for application/json ContentType.
type PostZfsSnapshotRemoveJSONRequestBody = ZfsSnapshotRemove0

// PostZfsSnapshotRollbackJSONRequestBody defines body for PostZfsSnapshotRollback for application/json ContentType.
type PostZfsSnapshotRollbackJSONRequestBody = ZfsSnapshotRollback

// Getter for additional properties for JailUpdate1. Returns the specified
// element and whether it was found
func (a JailUpdate1) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JailUpdate1
func (a *JailUpdate1) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JailUpdate1 to handle AdditionalProperties
func (a *JailUpdate1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["plugin"]; found {
		err = json.Unmarshal(raw, &a.Plugin)
		if err != nil {
			return fmt.Errorf("error reading 'plugin': %w", err)
		}
		delete(object, "plugin")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JailUpdate1 to handle AdditionalProperties
func (a JailUpdate1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Plugin != nil {
		object["plugin"], err = json.Marshal(a.Plugin)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plugin': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PluginUpdate1. Returns the specified
// element and whether it was found
func (a PluginUpdate1) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PluginUpdate1
func (a *PluginUpdate1) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PluginUpdate1 to handle AdditionalProperties
func (a *PluginUpdate1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["plugin"]; found {
		err = json.Unmarshal(raw, &a.Plugin)
		if err != nil {
			return fmt.Errorf("error reading 'plugin': %w", err)
		}
		delete(object, "plugin")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PluginUpdate1 to handle AdditionalProperties
func (a PluginUpdate1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Plugin != nil {
		object["plugin"], err = json.Marshal(a.Plugin)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plugin': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsFailoverCallRemote2Callback0 returns the union data inside the FailoverCallRemote2_Callback as a FailoverCallRemote2Callback0
func (t FailoverCallRemote2_Callback) AsFailoverCallRemote2Callback0() (FailoverCallRemote2Callback0, error) {
	var body FailoverCallRemote2Callback0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailoverCallRemote2Callback0 overwrites any union data inside the FailoverCallRemote2_Callback as the provided FailoverCallRemote2Callback0
func (t *FailoverCallRemote2_Callback) FromFailoverCallRemote2Callback0(v FailoverCallRemote2Callback0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailoverCallRemote2Callback0 performs a merge with any union data inside the FailoverCallRemote2_Callback, using the provided FailoverCallRemote2Callback0
func (t *FailoverCallRemote2_Callback) MergeFailoverCallRemote2Callback0(v FailoverCallRemote2Callback0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFailoverCallRemote2Callback1 returns the union data inside the FailoverCallRemote2_Callback as a FailoverCallRemote2Callback1
func (t FailoverCallRemote2_Callback) AsFailoverCallRemote2Callback1() (FailoverCallRemote2Callback1, error) {
	var body FailoverCallRemote2Callback1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailoverCallRemote2Callback1 overwrites any union data inside the FailoverCallRemote2_Callback as the provided FailoverCallRemote2Callback1
func (t *FailoverCallRemote2_Callback) FromFailoverCallRemote2Callback1(v FailoverCallRemote2Callback1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailoverCallRemote2Callback1 performs a merge with any union data inside the FailoverCallRemote2_Callback, using the provided FailoverCallRemote2Callback1
func (t *FailoverCallRemote2_Callback) MergeFailoverCallRemote2Callback1(v FailoverCallRemote2Callback1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFailoverCallRemote2Callback2 returns the union data inside the FailoverCallRemote2_Callback as a FailoverCallRemote2Callback2
func (t FailoverCallRemote2_Callback) AsFailoverCallRemote2Callback2() (FailoverCallRemote2Callback2, error) {
	var body FailoverCallRemote2Callback2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailoverCallRemote2Callback2 overwrites any union data inside the FailoverCallRemote2_Callback as the provided FailoverCallRemote2Callback2
func (t *FailoverCallRemote2_Callback) FromFailoverCallRemote2Callback2(v FailoverCallRemote2Callback2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailoverCallRemote2Callback2 performs a merge with any union data inside the FailoverCallRemote2_Callback, using the provided FailoverCallRemote2Callback2
func (t *FailoverCallRemote2_Callback) MergeFailoverCallRemote2Callback2(v FailoverCallRemote2Callback2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFailoverCallRemote2Callback3 returns the union data inside the FailoverCallRemote2_Callback as a FailoverCallRemote2Callback3
func (t FailoverCallRemote2_Callback) AsFailoverCallRemote2Callback3() (FailoverCallRemote2Callback3, error) {
	var body FailoverCallRemote2Callback3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailoverCallRemote2Callback3 overwrites any union data inside the FailoverCallRemote2_Callback as the provided FailoverCallRemote2Callback3
func (t *FailoverCallRemote2_Callback) FromFailoverCallRemote2Callback3(v FailoverCallRemote2Callback3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailoverCallRemote2Callback3 performs a merge with any union data inside the FailoverCallRemote2_Callback, using the provided FailoverCallRemote2Callback3
func (t *FailoverCallRemote2_Callback) MergeFailoverCallRemote2Callback3(v FailoverCallRemote2Callback3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFailoverCallRemote2Callback4 returns the union data inside the FailoverCallRemote2_Callback as a FailoverCallRemote2Callback4
func (t FailoverCallRemote2_Callback) AsFailoverCallRemote2Callback4() (FailoverCallRemote2Callback4, error) {
	var body FailoverCallRemote2Callback4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailoverCallRemote2Callback4 overwrites any union data inside the FailoverCallRemote2_Callback as the provided FailoverCallRemote2Callback4
func (t *FailoverCallRemote2_Callback) FromFailoverCallRemote2Callback4(v FailoverCallRemote2Callback4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailoverCallRemote2Callback4 performs a merge with any union data inside the FailoverCallRemote2_Callback, using the provided FailoverCallRemote2Callback4
func (t *FailoverCallRemote2_Callback) MergeFailoverCallRemote2Callback4(v FailoverCallRemote2Callback4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FailoverCallRemote2_Callback) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FailoverCallRemote2_Callback) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilesystemSetacl0Dacl0 returns the union data inside the FilesystemSetacl0_Dacl_Item as a FilesystemSetacl0Dacl0
func (t FilesystemSetacl0_Dacl_Item) AsFilesystemSetacl0Dacl0() (FilesystemSetacl0Dacl0, error) {
	var body FilesystemSetacl0Dacl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemSetacl0Dacl0 overwrites any union data inside the FilesystemSetacl0_Dacl_Item as the provided FilesystemSetacl0Dacl0
func (t *FilesystemSetacl0_Dacl_Item) FromFilesystemSetacl0Dacl0(v FilesystemSetacl0Dacl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemSetacl0Dacl0 performs a merge with any union data inside the FilesystemSetacl0_Dacl_Item, using the provided FilesystemSetacl0Dacl0
func (t *FilesystemSetacl0_Dacl_Item) MergeFilesystemSetacl0Dacl0(v FilesystemSetacl0Dacl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemSetacl0Dacl1 returns the union data inside the FilesystemSetacl0_Dacl_Item as a FilesystemSetacl0Dacl1
func (t FilesystemSetacl0_Dacl_Item) AsFilesystemSetacl0Dacl1() (FilesystemSetacl0Dacl1, error) {
	var body FilesystemSetacl0Dacl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemSetacl0Dacl1 overwrites any union data inside the FilesystemSetacl0_Dacl_Item as the provided FilesystemSetacl0Dacl1
func (t *FilesystemSetacl0_Dacl_Item) FromFilesystemSetacl0Dacl1(v FilesystemSetacl0Dacl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemSetacl0Dacl1 performs a merge with any union data inside the FilesystemSetacl0_Dacl_Item, using the provided FilesystemSetacl0Dacl1
func (t *FilesystemSetacl0_Dacl_Item) MergeFilesystemSetacl0Dacl1(v FilesystemSetacl0Dacl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilesystemSetacl0_Dacl_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilesystemSetacl0_Dacl_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPoolDatasetUpdate1QuotaCritical0 returns the union data inside the PoolDatasetUpdate1_QuotaCritical as a PoolDatasetUpdate1QuotaCritical0
func (t PoolDatasetUpdate1_QuotaCritical) AsPoolDatasetUpdate1QuotaCritical0() (PoolDatasetUpdate1QuotaCritical0, error) {
	var body PoolDatasetUpdate1QuotaCritical0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPoolDatasetUpdate1QuotaCritical0 overwrites any union data inside the PoolDatasetUpdate1_QuotaCritical as the provided PoolDatasetUpdate1QuotaCritical0
func (t *PoolDatasetUpdate1_QuotaCritical) FromPoolDatasetUpdate1QuotaCritical0(v PoolDatasetUpdate1QuotaCritical0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePoolDatasetUpdate1QuotaCritical0 performs a merge with any union data inside the PoolDatasetUpdate1_QuotaCritical, using the provided PoolDatasetUpdate1QuotaCritical0
func (t *PoolDatasetUpdate1_QuotaCritical) MergePoolDatasetUpdate1QuotaCritical0(v PoolDatasetUpdate1QuotaCritical0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPoolDatasetUpdate1QuotaCritical1 returns the union data inside the PoolDatasetUpdate1_QuotaCritical as a PoolDatasetUpdate1QuotaCritical1
func (t PoolDatasetUpdate1_QuotaCritical) AsPoolDatasetUpdate1QuotaCritical1() (PoolDatasetUpdate1QuotaCritical1, error) {
	var body PoolDatasetUpdate1QuotaCritical1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPoolDatasetUpdate1QuotaCritical1 overwrites any union data inside the PoolDatasetUpdate1_QuotaCritical as the provided PoolDatasetUpdate1QuotaCritical1
func (t *PoolDatasetUpdate1_QuotaCritical) FromPoolDatasetUpdate1QuotaCritical1(v PoolDatasetUpdate1QuotaCritical1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePoolDatasetUpdate1QuotaCritical1 performs a merge with any union data inside the PoolDatasetUpdate1_QuotaCritical, using the provided PoolDatasetUpdate1QuotaCritical1
func (t *PoolDatasetUpdate1_QuotaCritical) MergePoolDatasetUpdate1QuotaCritical1(v PoolDatasetUpdate1QuotaCritical1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PoolDatasetUpdate1_QuotaCritical) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PoolDatasetUpdate1_QuotaCritical) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPoolDatasetUpdate1QuotaWarning0 returns the union data inside the PoolDatasetUpdate1_QuotaWarning as a PoolDatasetUpdate1QuotaWarning0
func (t PoolDatasetUpdate1_QuotaWarning) AsPoolDatasetUpdate1QuotaWarning0() (PoolDatasetUpdate1QuotaWarning0, error) {
	var body PoolDatasetUpdate1QuotaWarning0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPoolDatasetUpdate1QuotaWarning0 overwrites any union data inside the PoolDatasetUpdate1_QuotaWarning as the provided PoolDatasetUpdate1QuotaWarning0
func (t *PoolDatasetUpdate1_QuotaWarning) FromPoolDatasetUpdate1QuotaWarning0(v PoolDatasetUpdate1QuotaWarning0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePoolDatasetUpdate1QuotaWarning0 performs a merge with any union data inside the PoolDatasetUpdate1_QuotaWarning, using the provided PoolDatasetUpdate1QuotaWarning0
func (t *PoolDatasetUpdate1_QuotaWarning) MergePoolDatasetUpdate1QuotaWarning0(v PoolDatasetUpdate1QuotaWarning0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPoolDatasetUpdate1QuotaWarning1 returns the union data inside the PoolDatasetUpdate1_QuotaWarning as a PoolDatasetUpdate1QuotaWarning1
func (t PoolDatasetUpdate1_QuotaWarning) AsPoolDatasetUpdate1QuotaWarning1() (PoolDatasetUpdate1QuotaWarning1, error) {
	var body PoolDatasetUpdate1QuotaWarning1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPoolDatasetUpdate1QuotaWarning1 overwrites any union data inside the PoolDatasetUpdate1_QuotaWarning as the provided PoolDatasetUpdate1QuotaWarning1
func (t *PoolDatasetUpdate1_QuotaWarning) FromPoolDatasetUpdate1QuotaWarning1(v PoolDatasetUpdate1QuotaWarning1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePoolDatasetUpdate1QuotaWarning1 performs a merge with any union data inside the PoolDatasetUpdate1_QuotaWarning, using the provided PoolDatasetUpdate1QuotaWarning1
func (t *PoolDatasetUpdate1_QuotaWarning) MergePoolDatasetUpdate1QuotaWarning1(v PoolDatasetUpdate1QuotaWarning1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PoolDatasetUpdate1_QuotaWarning) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PoolDatasetUpdate1_QuotaWarning) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPoolDatasetUpdate1RefquotaCritical0 returns the union data inside the PoolDatasetUpdate1_RefquotaCritical as a PoolDatasetUpdate1RefquotaCritical0
func (t PoolDatasetUpdate1_RefquotaCritical) AsPoolDatasetUpdate1RefquotaCritical0() (PoolDatasetUpdate1RefquotaCritical0, error) {
	var body PoolDatasetUpdate1RefquotaCritical0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPoolDatasetUpdate1RefquotaCritical0 overwrites any union data inside the PoolDatasetUpdate1_RefquotaCritical as the provided PoolDatasetUpdate1RefquotaCritical0
func (t *PoolDatasetUpdate1_RefquotaCritical) FromPoolDatasetUpdate1RefquotaCritical0(v PoolDatasetUpdate1RefquotaCritical0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePoolDatasetUpdate1RefquotaCritical0 performs a merge with any union data inside the PoolDatasetUpdate1_RefquotaCritical, using the provided PoolDatasetUpdate1RefquotaCritical0
func (t *PoolDatasetUpdate1_RefquotaCritical) MergePoolDatasetUpdate1RefquotaCritical0(v PoolDatasetUpdate1RefquotaCritical0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPoolDatasetUpdate1RefquotaCritical1 returns the union data inside the PoolDatasetUpdate1_RefquotaCritical as a PoolDatasetUpdate1RefquotaCritical1
func (t PoolDatasetUpdate1_RefquotaCritical) AsPoolDatasetUpdate1RefquotaCritical1() (PoolDatasetUpdate1RefquotaCritical1, error) {
	var body PoolDatasetUpdate1RefquotaCritical1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPoolDatasetUpdate1RefquotaCritical1 overwrites any union data inside the PoolDatasetUpdate1_RefquotaCritical as the provided PoolDatasetUpdate1RefquotaCritical1
func (t *PoolDatasetUpdate1_RefquotaCritical) FromPoolDatasetUpdate1RefquotaCritical1(v PoolDatasetUpdate1RefquotaCritical1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePoolDatasetUpdate1RefquotaCritical1 performs a merge with any union data inside the PoolDatasetUpdate1_RefquotaCritical, using the provided PoolDatasetUpdate1RefquotaCritical1
func (t *PoolDatasetUpdate1_RefquotaCritical) MergePoolDatasetUpdate1RefquotaCritical1(v PoolDatasetUpdate1RefquotaCritical1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PoolDatasetUpdate1_RefquotaCritical) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PoolDatasetUpdate1_RefquotaCritical) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPoolDatasetUpdate1RefquotaWarning0 returns the union data inside the PoolDatasetUpdate1_RefquotaWarning as a PoolDatasetUpdate1RefquotaWarning0
func (t PoolDatasetUpdate1_RefquotaWarning) AsPoolDatasetUpdate1RefquotaWarning0() (PoolDatasetUpdate1RefquotaWarning0, error) {
	var body PoolDatasetUpdate1RefquotaWarning0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPoolDatasetUpdate1RefquotaWarning0 overwrites any union data inside the PoolDatasetUpdate1_RefquotaWarning as the provided PoolDatasetUpdate1RefquotaWarning0
func (t *PoolDatasetUpdate1_RefquotaWarning) FromPoolDatasetUpdate1RefquotaWarning0(v PoolDatasetUpdate1RefquotaWarning0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePoolDatasetUpdate1RefquotaWarning0 performs a merge with any union data inside the PoolDatasetUpdate1_RefquotaWarning, using the provided PoolDatasetUpdate1RefquotaWarning0
func (t *PoolDatasetUpdate1_RefquotaWarning) MergePoolDatasetUpdate1RefquotaWarning0(v PoolDatasetUpdate1RefquotaWarning0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPoolDatasetUpdate1RefquotaWarning1 returns the union data inside the PoolDatasetUpdate1_RefquotaWarning as a PoolDatasetUpdate1RefquotaWarning1
func (t PoolDatasetUpdate1_RefquotaWarning) AsPoolDatasetUpdate1RefquotaWarning1() (PoolDatasetUpdate1RefquotaWarning1, error) {
	var body PoolDatasetUpdate1RefquotaWarning1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPoolDatasetUpdate1RefquotaWarning1 overwrites any union data inside the PoolDatasetUpdate1_RefquotaWarning as the provided PoolDatasetUpdate1RefquotaWarning1
func (t *PoolDatasetUpdate1_RefquotaWarning) FromPoolDatasetUpdate1RefquotaWarning1(v PoolDatasetUpdate1RefquotaWarning1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePoolDatasetUpdate1RefquotaWarning1 performs a merge with any union data inside the PoolDatasetUpdate1_RefquotaWarning, using the provided PoolDatasetUpdate1RefquotaWarning1
func (t *PoolDatasetUpdate1_RefquotaWarning) MergePoolDatasetUpdate1RefquotaWarning1(v PoolDatasetUpdate1RefquotaWarning1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PoolDatasetUpdate1_RefquotaWarning) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PoolDatasetUpdate1_RefquotaWarning) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserSetAttribute20 returns the union data inside the UserSetAttribute2 as a UserSetAttribute20
func (t UserSetAttribute2) AsUserSetAttribute20() (UserSetAttribute20, error) {
	var body UserSetAttribute20
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserSetAttribute20 overwrites any union data inside the UserSetAttribute2 as the provided UserSetAttribute20
func (t *UserSetAttribute2) FromUserSetAttribute20(v UserSetAttribute20) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserSetAttribute20 performs a merge with any union data inside the UserSetAttribute2, using the provided UserSetAttribute20
func (t *UserSetAttribute2) MergeUserSetAttribute20(v UserSetAttribute20) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserSetAttribute21 returns the union data inside the UserSetAttribute2 as a UserSetAttribute21
func (t UserSetAttribute2) AsUserSetAttribute21() (UserSetAttribute21, error) {
	var body UserSetAttribute21
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserSetAttribute21 overwrites any union data inside the UserSetAttribute2 as the provided UserSetAttribute21
func (t *UserSetAttribute2) FromUserSetAttribute21(v UserSetAttribute21) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserSetAttribute21 performs a merge with any union data inside the UserSetAttribute2, using the provided UserSetAttribute21
func (t *UserSetAttribute2) MergeUserSetAttribute21(v UserSetAttribute21) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserSetAttribute22 returns the union data inside the UserSetAttribute2 as a UserSetAttribute22
func (t UserSetAttribute2) AsUserSetAttribute22() (UserSetAttribute22, error) {
	var body UserSetAttribute22
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserSetAttribute22 overwrites any union data inside the UserSetAttribute2 as the provided UserSetAttribute22
func (t *UserSetAttribute2) FromUserSetAttribute22(v UserSetAttribute22) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserSetAttribute22 performs a merge with any union data inside the UserSetAttribute2, using the provided UserSetAttribute22
func (t *UserSetAttribute2) MergeUserSetAttribute22(v UserSetAttribute22) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserSetAttribute23 returns the union data inside the UserSetAttribute2 as a UserSetAttribute23
func (t UserSetAttribute2) AsUserSetAttribute23() (UserSetAttribute23, error) {
	var body UserSetAttribute23
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserSetAttribute23 overwrites any union data inside the UserSetAttribute2 as the provided UserSetAttribute23
func (t *UserSetAttribute2) FromUserSetAttribute23(v UserSetAttribute23) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserSetAttribute23 performs a merge with any union data inside the UserSetAttribute2, using the provided UserSetAttribute23
func (t *UserSetAttribute2) MergeUserSetAttribute23(v UserSetAttribute23) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserSetAttribute24 returns the union data inside the UserSetAttribute2 as a UserSetAttribute24
func (t UserSetAttribute2) AsUserSetAttribute24() (UserSetAttribute24, error) {
	var body UserSetAttribute24
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserSetAttribute24 overwrites any union data inside the UserSetAttribute2 as the provided UserSetAttribute24
func (t *UserSetAttribute2) FromUserSetAttribute24(v UserSetAttribute24) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserSetAttribute24 performs a merge with any union data inside the UserSetAttribute2, using the provided UserSetAttribute24
func (t *UserSetAttribute2) MergeUserSetAttribute24(v UserSetAttribute24) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UserSetAttribute2) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UserSetAttribute2) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAcmeDnsAuthenticator request
	GetAcmeDnsAuthenticator(ctx context.Context, params *GetAcmeDnsAuthenticatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAcmeDnsAuthenticatorWithBody request with any body
	PostAcmeDnsAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAcmeDnsAuthenticator(ctx context.Context, body PostAcmeDnsAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAcmeDnsAuthenticatorAuthenticatorSchemas request
	GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAcmeDnsAuthenticatorIdId request
	DeleteAcmeDnsAuthenticatorIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAcmeDnsAuthenticatorIdId request
	GetAcmeDnsAuthenticatorIdId(ctx context.Context, id int, params *GetAcmeDnsAuthenticatorIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAcmeDnsAuthenticatorIdIdWithBody request with any body
	PutAcmeDnsAuthenticatorIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAcmeDnsAuthenticatorIdId(ctx context.Context, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectory request
	GetActivedirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutActivedirectoryWithBody request with any body
	PutActivedirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutActivedirectory(ctx context.Context, body PutActivedirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryChangeTrustAccountPw request
	GetActivedirectoryChangeTrustAccountPw(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryDomainInfo request
	GetActivedirectoryDomainInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryGetSpnList request
	GetActivedirectoryGetSpnList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryGetState request
	GetActivedirectoryGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActivedirectoryLeaveWithBody request with any body
	PostActivedirectoryLeaveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostActivedirectoryLeave(ctx context.Context, body PostActivedirectoryLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryNssInfoChoices request
	GetActivedirectoryNssInfoChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryStarted request
	GetActivedirectoryStarted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAfp request
	GetAfp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAfpWithBody request with any body
	PutAfpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAfp(ctx context.Context, body PutAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAfpBindipChoices request
	GetAfpBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertDismissWithBody request with any body
	PostAlertDismissWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertDismiss(ctx context.Context, body PostAlertDismissJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertList request
	GetAlertList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertListCategories request
	GetAlertListCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertListPolicies request
	GetAlertListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertRestoreWithBody request with any body
	PostAlertRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertRestore(ctx context.Context, body PostAlertRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertclasses request
	GetAlertclasses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAlertclassesWithBody request with any body
	PutAlertclassesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAlertclasses(ctx context.Context, body PutAlertclassesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertservice request
	GetAlertservice(ctx context.Context, params *GetAlertserviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertserviceWithBody request with any body
	PostAlertserviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertservice(ctx context.Context, body PostAlertserviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertserviceIdId request
	DeleteAlertserviceIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertserviceIdId request
	GetAlertserviceIdId(ctx context.Context, id int, params *GetAlertserviceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAlertserviceIdIdWithBody request with any body
	PutAlertserviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAlertserviceIdId(ctx context.Context, id int, body PutAlertserviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertserviceListTypes request
	GetAlertserviceListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertserviceTestWithBody request with any body
	PostAlertserviceTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertserviceTest(ctx context.Context, body PostAlertserviceTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKey request
	GetApiKey(ctx context.Context, params *GetApiKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiKeyWithBody request with any body
	PostApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiKey(ctx context.Context, body PostApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKeyIdId request
	DeleteApiKeyIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKeyIdId request
	GetApiKeyIdId(ctx context.Context, id int, params *GetApiKeyIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiKeyIdIdWithBody request with any body
	PutApiKeyIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiKeyIdId(ctx context.Context, id int, body PutApiKeyIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthCheckUserWithBody request with any body
	PostAuthCheckUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthCheckUser(ctx context.Context, body PostAuthCheckUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthGenerateTokenWithBody request with any body
	PostAuthGenerateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthGenerateToken(ctx context.Context, body PostAuthGenerateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthSessions request
	GetAuthSessions(ctx context.Context, params *GetAuthSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthTwoFactorAuth request
	GetAuthTwoFactorAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthTwofactor request
	GetAuthTwofactor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAuthTwofactorWithBody request with any body
	PutAuthTwofactorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAuthTwofactor(ctx context.Context, body PutAuthTwofactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthTwofactorProvisioningUri request
	GetAuthTwofactorProvisioningUri(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthTwofactorRenewSecret request
	GetAuthTwofactorRenewSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthTwofactorVerifyWithBody request with any body
	PostAuthTwofactorVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthTwofactorVerify(ctx context.Context, body PostAuthTwofactorVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootAttachWithBody request with any body
	PostBootAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootAttach(ctx context.Context, body PostBootAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootDetachWithBody request with any body
	PostBootDetachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootDetach(ctx context.Context, body PostBootDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootGetDisks request
	GetBootGetDisks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootGetScrubInterval request
	GetBootGetScrubInterval(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootGetState request
	GetBootGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootReplaceWithBody request with any body
	PostBootReplaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootReplace(ctx context.Context, body PostBootReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootScrub request
	GetBootScrub(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootSetScrubIntervalWithBody request with any body
	PostBootSetScrubIntervalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootSetScrubInterval(ctx context.Context, body PostBootSetScrubIntervalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootenv request
	GetBootenv(ctx context.Context, params *GetBootenvParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootenvWithBody request with any body
	PostBootenvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootenv(ctx context.Context, body PostBootenvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBootenvIdId request
	DeleteBootenvIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootenvIdId request
	GetBootenvIdId(ctx context.Context, id string, params *GetBootenvIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBootenvIdIdWithBody request with any body
	PutBootenvIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBootenvIdId(ctx context.Context, id string, body PutBootenvIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootenvIdIdActivateWithBody request with any body
	PostBootenvIdIdActivateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootenvIdIdActivate(ctx context.Context, id string, body PostBootenvIdIdActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootenvIdIdSetAttributeWithBody request with any body
	PostBootenvIdIdSetAttributeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootenvIdIdSetAttribute(ctx context.Context, id string, body PostBootenvIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificate request
	GetCertificate(ctx context.Context, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCertificateWithBody request with any body
	PostCertificateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCertificate(ctx context.Context, body PostCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateAcmeServerChoices request
	GetCertificateAcmeServerChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateCountryChoices request
	GetCertificateCountryChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateEcCurveChoices request
	GetCertificateEcCurveChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateExtendedKeyUsageChoices request
	GetCertificateExtendedKeyUsageChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCertificateIdIdWithBody request with any body
	DeleteCertificateIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCertificateIdId(ctx context.Context, id int, body DeleteCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateIdId request
	GetCertificateIdId(ctx context.Context, id int, params *GetCertificateIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCertificateIdIdWithBody request with any body
	PutCertificateIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCertificateIdId(ctx context.Context, id int, body PutCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateKeyTypeChoices request
	GetCertificateKeyTypeChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateProfiles request
	GetCertificateProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateauthority request
	GetCertificateauthority(ctx context.Context, params *GetCertificateauthorityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCertificateauthorityWithBody request with any body
	PostCertificateauthorityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCertificateauthority(ctx context.Context, body PostCertificateauthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCertificateauthorityCaSignCsrWithBody request with any body
	PostCertificateauthorityCaSignCsrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCertificateauthorityCaSignCsr(ctx context.Context, body PostCertificateauthorityCaSignCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCertificateauthorityIdId request
	DeleteCertificateauthorityIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateauthorityIdId request
	GetCertificateauthorityIdId(ctx context.Context, id int, params *GetCertificateauthorityIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCertificateauthorityIdIdWithBody request with any body
	PutCertificateauthorityIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCertificateauthorityIdId(ctx context.Context, id int, body PutCertificateauthorityIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateauthorityProfiles request
	GetCertificateauthorityProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsync request
	GetCloudsync(ctx context.Context, params *GetCloudsyncParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncWithBody request with any body
	PostCloudsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsync(ctx context.Context, body PostCloudsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncCommonTaskSchema request
	GetCloudsyncCommonTaskSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncCredentials request
	GetCloudsyncCredentials(ctx context.Context, params *GetCloudsyncCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncCredentialsWithBody request with any body
	PostCloudsyncCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncCredentials(ctx context.Context, body PostCloudsyncCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCloudsyncCredentialsIdId request
	DeleteCloudsyncCredentialsIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncCredentialsIdId request
	GetCloudsyncCredentialsIdId(ctx context.Context, id int, params *GetCloudsyncCredentialsIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCloudsyncCredentialsIdIdWithBody request with any body
	PutCloudsyncCredentialsIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCloudsyncCredentialsIdId(ctx context.Context, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncCredentialsVerifyWithBody request with any body
	PostCloudsyncCredentialsVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncCredentialsVerify(ctx context.Context, body PostCloudsyncCredentialsVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCloudsyncIdId request
	DeleteCloudsyncIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncIdId request
	GetCloudsyncIdId(ctx context.Context, id int, params *GetCloudsyncIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCloudsyncIdIdWithBody request with any body
	PutCloudsyncIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCloudsyncIdId(ctx context.Context, id int, body PutCloudsyncIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncIdIdAbortWithBody request with any body
	PostCloudsyncIdIdAbortWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncIdIdAbort(ctx context.Context, id int, body PostCloudsyncIdIdAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncIdIdRestoreWithBody request with any body
	PostCloudsyncIdIdRestoreWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncIdIdRestore(ctx context.Context, id int, body PostCloudsyncIdIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncIdIdSyncWithBody request with any body
	PostCloudsyncIdIdSyncWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncIdIdSync(ctx context.Context, id int, body PostCloudsyncIdIdSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncListBucketsWithBody request with any body
	PostCloudsyncListBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncListBuckets(ctx context.Context, body PostCloudsyncListBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncListDirectoryWithBody request with any body
	PostCloudsyncListDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncListDirectory(ctx context.Context, body PostCloudsyncListDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncOnedriveListDrivesWithBody request with any body
	PostCloudsyncOnedriveListDrivesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncOnedriveListDrives(ctx context.Context, body PostCloudsyncOnedriveListDrivesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncProviders request
	GetCloudsyncProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncSyncOnetimeWithBody request with any body
	PostCloudsyncSyncOnetimeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncSyncOnetime(ctx context.Context, body PostCloudsyncSyncOnetimeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfigResetWithBody request with any body
	PostConfigResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfigReset(ctx context.Context, body PostConfigResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreBulkWithBody request with any body
	PostCoreBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreBulk(ctx context.Context, body PostCoreBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreDebugWithBody request with any body
	PostCoreDebugWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreDebug(ctx context.Context, body PostCoreDebugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreDownloadWithBody request with any body
	PostCoreDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreDownload(ctx context.Context, body PostCoreDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreGetEvents request
	GetCoreGetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreGetJobs request
	GetCoreGetJobs(ctx context.Context, params *GetCoreGetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreGetMethodsWithBody request with any body
	PostCoreGetMethodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreGetMethods(ctx context.Context, body PostCoreGetMethodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreGetServices request
	GetCoreGetServices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreJobAbortWithBody request with any body
	PostCoreJobAbortWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreJobAbort(ctx context.Context, body PostCoreJobAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreJobUpdateWithBody request with any body
	PostCoreJobUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreJobUpdate(ctx context.Context, body PostCoreJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreJobWaitWithBody request with any body
	PostCoreJobWaitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreJobWait(ctx context.Context, body PostCoreJobWaitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorePing request
	GetCorePing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCorePingRemoteWithBody request with any body
	PostCorePingRemoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCorePingRemote(ctx context.Context, body PostCorePingRemoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreResizeShellWithBody request with any body
	PostCoreResizeShellWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreResizeShell(ctx context.Context, body PostCoreResizeShellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreSessions request
	GetCoreSessions(ctx context.Context, params *GetCoreSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCronjob request
	GetCronjob(ctx context.Context, params *GetCronjobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCronjobWithBody request with any body
	PostCronjobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCronjob(ctx context.Context, body PostCronjobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCronjobIdId request
	DeleteCronjobIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCronjobIdId request
	GetCronjobIdId(ctx context.Context, id int, params *GetCronjobIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCronjobIdIdWithBody request with any body
	PutCronjobIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCronjobIdId(ctx context.Context, id int, body PutCronjobIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCronjobRunWithBody request with any body
	PostCronjobRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCronjobRun(ctx context.Context, body PostCronjobRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeviceGetInfoWithBody request with any body
	PostDeviceGetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeviceGetInfo(ctx context.Context, body PostDeviceGetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDirectoryservicesCacheRefresh request
	GetDirectoryservicesCacheRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDirectoryservicesGetState request
	GetDirectoryservicesGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDisk request
	GetDisk(ctx context.Context, params *GetDiskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskGetEncryptedWithBody request with any body
	PostDiskGetEncryptedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskGetEncrypted(ctx context.Context, body PostDiskGetEncryptedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskGetUnusedWithBody request with any body
	PostDiskGetUnusedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskGetUnused(ctx context.Context, body PostDiskGetUnusedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiskIdId request
	GetDiskIdId(ctx context.Context, id int, params *GetDiskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDiskIdIdWithBody request with any body
	PutDiskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDiskIdId(ctx context.Context, id int, body PutDiskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiskLabelToDev request
	GetDiskLabelToDev(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskOverprovisionWithBody request with any body
	PostDiskOverprovisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskOverprovision(ctx context.Context, body PostDiskOverprovisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiskSedDevName request
	GetDiskSedDevName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskSmartAttributesWithBody request with any body
	PostDiskSmartAttributesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskSmartAttributes(ctx context.Context, body PostDiskSmartAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskSpindownWithBody request with any body
	PostDiskSpindownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskSpindown(ctx context.Context, body PostDiskSpindownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskTemperatureWithBody request with any body
	PostDiskTemperatureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskTemperature(ctx context.Context, body PostDiskTemperatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskTemperaturesWithBody request with any body
	PostDiskTemperaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskTemperatures(ctx context.Context, body PostDiskTemperaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskUnoverprovisionWithBody request with any body
	PostDiskUnoverprovisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskUnoverprovision(ctx context.Context, body PostDiskUnoverprovisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskWipeWithBody request with any body
	PostDiskWipeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskWipe(ctx context.Context, body PostDiskWipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDnsQuery request
	GetDnsQuery(ctx context.Context, params *GetDnsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDyndns request
	GetDyndns(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDyndnsWithBody request with any body
	PutDyndnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDyndns(ctx context.Context, body PutDyndnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDyndnsProviderChoices request
	GetDyndnsProviderChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEc2Meta request
	GetEc2Meta(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEc2InstanceId request
	GetEc2InstanceId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEc2SetNtpServers request
	GetEc2SetNtpServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEc2SetRootSshPublicKey request
	GetEc2SetRootSshPublicKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEc2Setup request
	GetEc2Setup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnclosure request
	GetEnclosure(ctx context.Context, params *GetEnclosureParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnclosureIdId request
	GetEnclosureIdId(ctx context.Context, id int, params *GetEnclosureIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEnclosureIdIdWithBody request with any body
	PutEnclosureIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutEnclosureIdId(ctx context.Context, id int, body PutEnclosureIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEnclosureSetSlotStatusWithBody request with any body
	PostEnclosureSetSlotStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnclosureSetSlotStatus(ctx context.Context, body PostEnclosureSetSlotStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailover request
	GetFailover(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFailoverWithBody request with any body
	PutFailoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFailover(ctx context.Context, body PutFailoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFailoverCallRemoteWithBody request with any body
	PostFailoverCallRemoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFailoverCallRemote(ctx context.Context, body PostFailoverCallRemoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFailoverControlWithBody request with any body
	PostFailoverControlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFailoverControl(ctx context.Context, body PostFailoverControlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverForceMaster request
	GetFailoverForceMaster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverHardware request
	GetFailoverHardware(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverInProgress request
	GetFailoverInProgress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverLicensed request
	GetFailoverLicensed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverNode request
	GetFailoverNode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverStatus request
	GetFailoverStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverSyncFromPeer request
	GetFailoverSyncFromPeer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFailoverSyncToPeerWithBody request with any body
	PostFailoverSyncToPeerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFailoverSyncToPeer(ctx context.Context, body PostFailoverSyncToPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFailoverUnlockWithBody request with any body
	PostFailoverUnlockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFailoverUnlock(ctx context.Context, body PostFailoverUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFailoverUpgradeWithBody request with any body
	PostFailoverUpgradeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFailoverUpgrade(ctx context.Context, body PostFailoverUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverUpgradeFinish request
	GetFailoverUpgradeFinish(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFailoverUpgradePending request
	GetFailoverUpgradePending(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFcport request
	GetFcport(ctx context.Context, params *GetFcportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFcportIdId request
	GetFcportIdId(ctx context.Context, id int, params *GetFcportIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFcportIdIdWithBody request with any body
	PutFcportIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFcportIdId(ctx context.Context, id int, body PutFcportIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemAclIsTrivialWithBody request with any body
	PostFilesystemAclIsTrivialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemAclIsTrivial(ctx context.Context, body PostFilesystemAclIsTrivialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemChownWithBody request with any body
	PostFilesystemChownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemChown(ctx context.Context, body PostFilesystemChownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilesystemDefaultAclChoices request
	GetFilesystemDefaultAclChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemGetDefaultAclWithBody request with any body
	PostFilesystemGetDefaultAclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemGetDefaultAcl(ctx context.Context, body PostFilesystemGetDefaultAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemGetaclWithBody request with any body
	PostFilesystemGetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemGetacl(ctx context.Context, body PostFilesystemGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemListdirWithBody request with any body
	PostFilesystemListdirWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemListdir(ctx context.Context, body PostFilesystemListdirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemSetaclWithBody request with any body
	PostFilesystemSetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemSetacl(ctx context.Context, body PostFilesystemSetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemSetpermWithBody request with any body
	PostFilesystemSetpermWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemSetperm(ctx context.Context, body PostFilesystemSetpermJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemStatWithBody request with any body
	PostFilesystemStatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemStat(ctx context.Context, body PostFilesystemStatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemStatfsWithBody request with any body
	PostFilesystemStatfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemStatfs(ctx context.Context, body PostFilesystemStatfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFtp request
	GetFtp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFtpWithBody request with any body
	PutFtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFtp(ctx context.Context, body PutFtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroup request
	GetGroup(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupWithBody request with any body
	PostGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroup(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupGetGroupObjWithBody request with any body
	PostGroupGetGroupObjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupGetGroupObj(ctx context.Context, body PostGroupGetGroupObjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupGetNextGid request
	GetGroupGetNextGid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupIdIdWithBody request with any body
	DeleteGroupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGroupIdId(ctx context.Context, id int, body DeleteGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupIdId request
	GetGroupIdId(ctx context.Context, id int, params *GetGroupIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroupIdIdWithBody request with any body
	PutGroupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupIdId(ctx context.Context, id int, body PutGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmap request
	GetIdmap(ctx context.Context, params *GetIdmapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapWithBody request with any body
	PostIdmapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmap(ctx context.Context, body PostIdmapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapBackendChoices request
	GetIdmapBackendChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapBackendOptions request
	GetIdmapBackendOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapClearIdmapCache request
	GetIdmapClearIdmapCache(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapIdId request
	DeleteIdmapIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapIdId request
	GetIdmapIdId(ctx context.Context, id int, params *GetIdmapIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapIdIdWithBody request with any body
	PutIdmapIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapIdId(ctx context.Context, id int, body PutIdmapIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapOptionsChoicesWithBody request with any body
	PostIdmapOptionsChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapOptionsChoices(ctx context.Context, body PostIdmapOptionsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInitshutdownscript request
	GetInitshutdownscript(ctx context.Context, params *GetInitshutdownscriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInitshutdownscriptWithBody request with any body
	PostInitshutdownscriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInitshutdownscript(ctx context.Context, body PostInitshutdownscriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInitshutdownscriptIdId request
	DeleteInitshutdownscriptIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInitshutdownscriptIdId request
	GetInitshutdownscriptIdId(ctx context.Context, id int, params *GetInitshutdownscriptIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInitshutdownscriptIdIdWithBody request with any body
	PutInitshutdownscriptIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInitshutdownscriptIdId(ctx context.Context, id int, body PutInitshutdownscriptIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterface request
	GetInterface(ctx context.Context, params *GetInterfaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceWithBody request with any body
	PostInterfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterface(ctx context.Context, body PostInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceBridgeMembersChoicesWithBody request with any body
	PostInterfaceBridgeMembersChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceBridgeMembersChoices(ctx context.Context, body PostInterfaceBridgeMembersChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceCheckin request
	GetInterfaceCheckin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceCheckinWaiting request
	GetInterfaceCheckinWaiting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceChoicesWithBody request with any body
	PostInterfaceChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceChoices(ctx context.Context, body PostInterfaceChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceCommitWithBody request with any body
	PostInterfaceCommitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceCommit(ctx context.Context, body PostInterfaceCommitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceEnableCapabilitiesIndividually request
	GetInterfaceEnableCapabilitiesIndividually(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceHasPendingChanges request
	GetInterfaceHasPendingChanges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInterfaceIdId request
	DeleteInterfaceIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceIdId request
	GetInterfaceIdId(ctx context.Context, id string, params *GetInterfaceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInterfaceIdIdWithBody request with any body
	PutInterfaceIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInterfaceIdId(ctx context.Context, id string, body PutInterfaceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceIpInUseWithBody request with any body
	PostInterfaceIpInUseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceIpInUse(ctx context.Context, body PostInterfaceIpInUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceLagPortsChoicesWithBody request with any body
	PostInterfaceLagPortsChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceLagPortsChoices(ctx context.Context, body PostInterfaceLagPortsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceLagSetup request
	GetInterfaceLagSetup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceRollback request
	GetInterfaceRollback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceVlanParentInterfaceChoices request
	GetInterfaceVlanParentInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceVlanSetup request
	GetInterfaceVlanSetup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmi request
	GetIpmi(ctx context.Context, params *GetIpmiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmiChannels request
	GetIpmiChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmiIdId request
	GetIpmiIdId(ctx context.Context, id int, params *GetIpmiIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIpmiIdIdWithBody request with any body
	PutIpmiIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIpmiIdId(ctx context.Context, id int, body PutIpmiIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIpmiIdentifyWithBody request with any body
	PostIpmiIdentifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIpmiIdentify(ctx context.Context, body PostIpmiIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmiIsLoaded request
	GetIpmiIsLoaded(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiAuth request
	GetIscsiAuth(ctx context.Context, params *GetIscsiAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiAuthWithBody request with any body
	PostIscsiAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiAuth(ctx context.Context, body PostIscsiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiAuthIdId request
	DeleteIscsiAuthIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiAuthIdId request
	GetIscsiAuthIdId(ctx context.Context, id int, params *GetIscsiAuthIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiAuthIdIdWithBody request with any body
	PutIscsiAuthIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiAuthIdId(ctx context.Context, id int, body PutIscsiAuthIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiExtent request
	GetIscsiExtent(ctx context.Context, params *GetIscsiExtentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiExtentWithBody request with any body
	PostIscsiExtentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiExtent(ctx context.Context, body PostIscsiExtentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiExtentDiskChoicesWithBody request with any body
	PostIscsiExtentDiskChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiExtentDiskChoices(ctx context.Context, body PostIscsiExtentDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiExtentIdIdWithBody request with any body
	DeleteIscsiExtentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiExtentIdId(ctx context.Context, id int, body DeleteIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiExtentIdId request
	GetIscsiExtentIdId(ctx context.Context, id int, params *GetIscsiExtentIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiExtentIdIdWithBody request with any body
	PutIscsiExtentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiExtentIdId(ctx context.Context, id int, body PutIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiGlobal request
	GetIscsiGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiGlobalWithBody request with any body
	PutIscsiGlobalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiGlobal(ctx context.Context, body PutIscsiGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiGlobalAluaEnabled request
	GetIscsiGlobalAluaEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiGlobalSessions request
	GetIscsiGlobalSessions(ctx context.Context, params *GetIscsiGlobalSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiInitiator request
	GetIscsiInitiator(ctx context.Context, params *GetIscsiInitiatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiInitiatorWithBody request with any body
	PostIscsiInitiatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiInitiator(ctx context.Context, body PostIscsiInitiatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiInitiatorIdId request
	DeleteIscsiInitiatorIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiInitiatorIdId request
	GetIscsiInitiatorIdId(ctx context.Context, id int, params *GetIscsiInitiatorIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiInitiatorIdIdWithBody request with any body
	PutIscsiInitiatorIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiInitiatorIdId(ctx context.Context, id int, body PutIscsiInitiatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiPortal request
	GetIscsiPortal(ctx context.Context, params *GetIscsiPortalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiPortalWithBody request with any body
	PostIscsiPortalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiPortal(ctx context.Context, body PostIscsiPortalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiPortalIdId request
	DeleteIscsiPortalIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiPortalIdId request
	GetIscsiPortalIdId(ctx context.Context, id int, params *GetIscsiPortalIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiPortalIdIdWithBody request with any body
	PutIscsiPortalIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiPortalIdId(ctx context.Context, id int, body PutIscsiPortalIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiPortalListenIpChoices request
	GetIscsiPortalListenIpChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTarget request
	GetIscsiTarget(ctx context.Context, params *GetIscsiTargetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiTargetWithBody request with any body
	PostIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiTarget(ctx context.Context, body PostIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiTargetIdIdWithBody request with any body
	DeleteIscsiTargetIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiTargetIdId(ctx context.Context, id int, body DeleteIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTargetIdId request
	GetIscsiTargetIdId(ctx context.Context, id int, params *GetIscsiTargetIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiTargetIdIdWithBody request with any body
	PutIscsiTargetIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiTargetIdId(ctx context.Context, id int, body PutIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTargetextent request
	GetIscsiTargetextent(ctx context.Context, params *GetIscsiTargetextentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiTargetextentWithBody request with any body
	PostIscsiTargetextentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiTargetextent(ctx context.Context, body PostIscsiTargetextentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiTargetextentIdIdWithBody request with any body
	DeleteIscsiTargetextentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiTargetextentIdId(ctx context.Context, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTargetextentIdId request
	GetIscsiTargetextentIdId(ctx context.Context, id int, params *GetIscsiTargetextentIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiTargetextentIdIdWithBody request with any body
	PutIscsiTargetextentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiTargetextentIdId(ctx context.Context, id int, body PutIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJail request
	GetJail(ctx context.Context, params *GetJailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailWithBody request with any body
	PostJailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJail(ctx context.Context, body PostJailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailActivateWithBody request with any body
	PostJailActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailActivate(ctx context.Context, body PostJailActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailCleanWithBody request with any body
	PostJailCleanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailClean(ctx context.Context, body PostJailCleanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailDefaultConfiguration request
	GetJailDefaultConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailExecWithBody request with any body
	PostJailExecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailExec(ctx context.Context, body PostJailExecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailExportWithBody request with any body
	PostJailExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailExport(ctx context.Context, body PostJailExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailFetchWithBody request with any body
	PostJailFetchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailFetch(ctx context.Context, body PostJailFetchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailFstabWithBody request with any body
	PostJailFstabWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailFstab(ctx context.Context, body PostJailFstabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailGetActivatedPool request
	GetJailGetActivatedPool(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJailIdIdWithBody request with any body
	DeleteJailIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteJailIdId(ctx context.Context, id string, body DeleteJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailIdId request
	GetJailIdId(ctx context.Context, id string, params *GetJailIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJailIdIdWithBody request with any body
	PutJailIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJailIdId(ctx context.Context, id string, body PutJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailIdIdCloneWithBody request with any body
	PostJailIdIdCloneWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailIdIdClone(ctx context.Context, id string, body PostJailIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailImportImageWithBody request with any body
	PostJailImportImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailImportImage(ctx context.Context, body PostJailImportImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailInterfaceChoices request
	GetJailInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailRcActionWithBody request with any body
	PostJailRcActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailRcAction(ctx context.Context, body PostJailRcActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailReleasesChoicesWithBody request with any body
	PostJailReleasesChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailReleasesChoices(ctx context.Context, body PostJailReleasesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailRestartWithBody request with any body
	PostJailRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailRestart(ctx context.Context, body PostJailRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailStartWithBody request with any body
	PostJailStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailStart(ctx context.Context, body PostJailStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailStopWithBody request with any body
	PostJailStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailStop(ctx context.Context, body PostJailStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailUpdateDefaultsWithBody request with any body
	PostJailUpdateDefaultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailUpdateDefaults(ctx context.Context, body PostJailUpdateDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailUpdateToLatestPatchWithBody request with any body
	PostJailUpdateToLatestPatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailUpdateToLatestPatch(ctx context.Context, body PostJailUpdateToLatestPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailVnetDefaultInterfaceChoices request
	GetJailVnetDefaultInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberos request
	GetKerberos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKerberosWithBody request with any body
	PutKerberosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKerberos(ctx context.Context, body PutKerberosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosKeytab request
	GetKerberosKeytab(ctx context.Context, params *GetKerberosKeytabParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKerberosKeytabWithBody request with any body
	PostKerberosKeytabWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKerberosKeytab(ctx context.Context, body PostKerberosKeytabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKerberosKeytabIdId request
	DeleteKerberosKeytabIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosKeytabIdId request
	GetKerberosKeytabIdId(ctx context.Context, id int, params *GetKerberosKeytabIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKerberosKeytabIdIdWithBody request with any body
	PutKerberosKeytabIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKerberosKeytabIdId(ctx context.Context, id int, body PutKerberosKeytabIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosKeytabSystemKeytabList request
	GetKerberosKeytabSystemKeytabList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosRealm request
	GetKerberosRealm(ctx context.Context, params *GetKerberosRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKerberosRealmWithBody request with any body
	PostKerberosRealmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKerberosRealm(ctx context.Context, body PostKerberosRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKerberosRealmIdId request
	DeleteKerberosRealmIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosRealmIdId request
	GetKerberosRealmIdId(ctx context.Context, id int, params *GetKerberosRealmIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKerberosRealmIdIdWithBody request with any body
	PutKerberosRealmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKerberosRealmIdId(ctx context.Context, id int, body PutKerberosRealmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeychaincredential request
	GetKeychaincredential(ctx context.Context, params *GetKeychaincredentialParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeychaincredentialWithBody request with any body
	PostKeychaincredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeychaincredential(ctx context.Context, body PostKeychaincredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeychaincredentialGenerateSshKeyPair request
	GetKeychaincredentialGenerateSshKeyPair(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKeychaincredentialIdIdWithBody request with any body
	DeleteKeychaincredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteKeychaincredentialIdId(ctx context.Context, id int, body DeleteKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeychaincredentialIdId request
	GetKeychaincredentialIdId(ctx context.Context, id int, params *GetKeychaincredentialIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKeychaincredentialIdIdWithBody request with any body
	PutKeychaincredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKeychaincredentialIdId(ctx context.Context, id int, body PutKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeychaincredentialRemoteSshHostKeyScanWithBody request with any body
	PostKeychaincredentialRemoteSshHostKeyScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeychaincredentialRemoteSshHostKeyScan(ctx context.Context, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeychaincredentialRemoteSshSemiautomaticSetupWithBody request with any body
	PostKeychaincredentialRemoteSshSemiautomaticSetupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx context.Context, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeychaincredentialUsedByWithBody request with any body
	PostKeychaincredentialUsedByWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeychaincredentialUsedBy(ctx context.Context, body PostKeychaincredentialUsedByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKmip request
	GetKmip(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKmipWithBody request with any body
	PutKmipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKmip(ctx context.Context, body PutKmipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKmipClearSyncPendingKeys request
	GetKmipClearSyncPendingKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKmipKmipSyncPending request
	GetKmipKmipSyncPending(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKmipSyncKeys request
	GetKmipSyncKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdap request
	GetLdap(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLdapWithBody request with any body
	PutLdapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLdap(ctx context.Context, body PutLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapGetState request
	GetLdapGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapSchemaChoices request
	GetLdapSchemaChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapSslChoices request
	GetLdapSslChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLldp request
	GetLldp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLldpWithBody request with any body
	PutLldpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLldp(ctx context.Context, body PutLldpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLldpCountryChoices request
	GetLldpCountryChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMail request
	GetMail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMailWithBody request with any body
	PutMailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMail(ctx context.Context, body PutMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMailSendWithBody request with any body
	PostMailSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMailSend(ctx context.Context, body PostMailSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMultipath request
	GetMultipath(ctx context.Context, params *GetMultipathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMultipathIdId request
	GetMultipathIdId(ctx context.Context, id string, params *GetMultipathIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkConfiguration request
	GetNetworkConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNetworkConfigurationWithBody request with any body
	PutNetworkConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNetworkConfiguration(ctx context.Context, body PutNetworkConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkGeneralSummary request
	GetNetworkGeneralSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNfs request
	GetNfs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNfsWithBody request with any body
	PutNfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNfs(ctx context.Context, body PutNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNfsAddPrincipalWithBody request with any body
	PostNfsAddPrincipalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNfsAddPrincipal(ctx context.Context, body PostNfsAddPrincipalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNfsBindipChoices request
	GetNfsBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNis request
	GetNis(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNisWithBody request with any body
	PutNisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNis(ctx context.Context, body PutNisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNisGetState request
	GetNisGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenvpnClient request
	GetOpenvpnClient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOpenvpnClientWithBody request with any body
	PutOpenvpnClientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOpenvpnClient(ctx context.Context, body PutOpenvpnClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenvpnClientAuthenticationAlgorithmChoices request
	GetOpenvpnClientAuthenticationAlgorithmChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenvpnClientCipherChoices request
	GetOpenvpnClientCipherChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenvpnServer request
	GetOpenvpnServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOpenvpnServerWithBody request with any body
	PutOpenvpnServerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOpenvpnServer(ctx context.Context, body PutOpenvpnServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenvpnServerAuthenticationAlgorithmChoices request
	GetOpenvpnServerAuthenticationAlgorithmChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenvpnServerCipherChoices request
	GetOpenvpnServerCipherChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOpenvpnServerClientConfigurationGenerationWithBody request with any body
	PostOpenvpnServerClientConfigurationGenerationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOpenvpnServerClientConfigurationGeneration(ctx context.Context, body PostOpenvpnServerClientConfigurationGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenvpnServerRenewStaticKey request
	GetOpenvpnServerRenewStaticKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlugin request
	GetPlugin(ctx context.Context, params *GetPluginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPluginWithBody request with any body
	PostPluginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlugin(ctx context.Context, body PostPluginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPluginAvailableWithBody request with any body
	PostPluginAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPluginAvailable(ctx context.Context, body PostPluginAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPluginBranchesChoicesWithBody request with any body
	PostPluginBranchesChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPluginBranchesChoices(ctx context.Context, body PostPluginBranchesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPluginDefaultsWithBody request with any body
	PostPluginDefaultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPluginDefaults(ctx context.Context, body PostPluginDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePluginIdId request
	DeletePluginIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginIdId request
	GetPluginIdId(ctx context.Context, id string, params *GetPluginIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPluginIdIdWithBody request with any body
	PutPluginIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPluginIdId(ctx context.Context, id string, body PutPluginIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginOfficialRepositories request
	GetPluginOfficialRepositories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginRetrieveVersionsForRepos request
	GetPluginRetrieveVersionsForRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPluginUpdatePluginWithBody request with any body
	PostPluginUpdatePluginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPluginUpdatePlugin(ctx context.Context, body PostPluginUpdatePluginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPool request
	GetPool(ctx context.Context, params *GetPoolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolWithBody request with any body
	PostPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPool(ctx context.Context, body PostPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolAttachWithBody request with any body
	PostPoolAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolAttach(ctx context.Context, body PostPoolAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolDataset request
	GetPoolDataset(ctx context.Context, params *GetPoolDatasetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetWithBody request with any body
	PostPoolDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDataset(ctx context.Context, body PostPoolDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetChangeKeyWithBody request with any body
	PostPoolDatasetChangeKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetChangeKey(ctx context.Context, body PostPoolDatasetChangeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolDatasetCompressionChoices request
	GetPoolDatasetCompressionChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolDatasetEncryptionAlgorithmChoices request
	GetPoolDatasetEncryptionAlgorithmChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetEncryptionSummaryWithBody request with any body
	PostPoolDatasetEncryptionSummaryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetEncryptionSummary(ctx context.Context, body PostPoolDatasetEncryptionSummaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetExportKeyWithBody request with any body
	PostPoolDatasetExportKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetExportKey(ctx context.Context, body PostPoolDatasetExportKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePoolDatasetIdIdWithBody request with any body
	DeletePoolDatasetIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeletePoolDatasetIdId(ctx context.Context, id string, body DeletePoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolDatasetIdId request
	GetPoolDatasetIdId(ctx context.Context, id string, params *GetPoolDatasetIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolDatasetIdIdWithBody request with any body
	PutPoolDatasetIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolDatasetIdId(ctx context.Context, id string, body PutPoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdAttachmentsWithBody request with any body
	PostPoolDatasetIdIdAttachmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdAttachments(ctx context.Context, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdGetQuotaWithBody request with any body
	PostPoolDatasetIdIdGetQuotaWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdGetQuota(ctx context.Context, id string, body PostPoolDatasetIdIdGetQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdPermissionWithBody request with any body
	PostPoolDatasetIdIdPermissionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdPermission(ctx context.Context, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdProcessesWithBody request with any body
	PostPoolDatasetIdIdProcessesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdProcesses(ctx context.Context, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdPromoteWithBody request with any body
	PostPoolDatasetIdIdPromoteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdPromote(ctx context.Context, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdSetQuotaWithBody request with any body
	PostPoolDatasetIdIdSetQuotaWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdSetQuota(ctx context.Context, id string, body PostPoolDatasetIdIdSetQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetInheritParentEncryptionPropertiesWithBody request with any body
	PostPoolDatasetInheritParentEncryptionPropertiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetInheritParentEncryptionProperties(ctx context.Context, body PostPoolDatasetInheritParentEncryptionPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetLockWithBody request with any body
	PostPoolDatasetLockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetLock(ctx context.Context, body PostPoolDatasetLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetRecommendedZvolBlocksizeWithBody request with any body
	PostPoolDatasetRecommendedZvolBlocksizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetRecommendedZvolBlocksize(ctx context.Context, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetUnlockWithBody request with any body
	PostPoolDatasetUnlockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetUnlock(ctx context.Context, body PostPoolDatasetUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolDatasetUserprop request
	GetPoolDatasetUserprop(ctx context.Context, params *GetPoolDatasetUserpropParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetUserpropWithBody request with any body
	PostPoolDatasetUserpropWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetUserprop(ctx context.Context, body PostPoolDatasetUserpropJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePoolDatasetUserpropIdIdWithBody request with any body
	DeletePoolDatasetUserpropIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeletePoolDatasetUserpropIdId(ctx context.Context, id string, body DeletePoolDatasetUserpropIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolDatasetUserpropIdId request
	GetPoolDatasetUserpropIdId(ctx context.Context, id string, params *GetPoolDatasetUserpropIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolDatasetUserpropIdIdWithBody request with any body
	PutPoolDatasetUserpropIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolDatasetUserpropIdId(ctx context.Context, id string, body PutPoolDatasetUserpropIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolFilesystemChoicesWithBody request with any body
	PostPoolFilesystemChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolFilesystemChoices(ctx context.Context, body PostPoolFilesystemChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolIdId request
	GetPoolIdId(ctx context.Context, id int, params *GetPoolIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolIdIdWithBody request with any body
	PutPoolIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolIdId(ctx context.Context, id int, body PutPoolIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdAttachmentsWithBody request with any body
	PostPoolIdIdAttachmentsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdAttachments(ctx context.Context, id int, body PostPoolIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdDetachWithBody request with any body
	PostPoolIdIdDetachWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdDetach(ctx context.Context, id int, body PostPoolIdIdDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdDownloadEncryptionKeyWithBody request with any body
	PostPoolIdIdDownloadEncryptionKeyWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdDownloadEncryptionKey(ctx context.Context, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdExpandWithBody request with any body
	PostPoolIdIdExpandWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdExpand(ctx context.Context, id int, body PostPoolIdIdExpandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdExportWithBody request with any body
	PostPoolIdIdExportWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdExport(ctx context.Context, id int, body PostPoolIdIdExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdGetDisksWithBody request with any body
	PostPoolIdIdGetDisksWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdGetDisks(ctx context.Context, id int, body PostPoolIdIdGetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdIsUpgradedWithBody request with any body
	PostPoolIdIdIsUpgradedWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdIsUpgraded(ctx context.Context, id int, body PostPoolIdIdIsUpgradedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdLockWithBody request with any body
	PostPoolIdIdLockWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdLock(ctx context.Context, id int, body PostPoolIdIdLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdOfflineWithBody request with any body
	PostPoolIdIdOfflineWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdOffline(ctx context.Context, id int, body PostPoolIdIdOfflineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdOnlineWithBody request with any body
	PostPoolIdIdOnlineWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdOnline(ctx context.Context, id int, body PostPoolIdIdOnlineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdPassphraseWithBody request with any body
	PostPoolIdIdPassphraseWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdPassphrase(ctx context.Context, id int, body PostPoolIdIdPassphraseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdProcessesWithBody request with any body
	PostPoolIdIdProcessesWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdProcesses(ctx context.Context, id int, body PostPoolIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdRecoverykeyRmWithBody request with any body
	PostPoolIdIdRecoverykeyRmWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdRecoverykeyRm(ctx context.Context, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdRekeyWithBody request with any body
	PostPoolIdIdRekeyWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdRekey(ctx context.Context, id int, body PostPoolIdIdRekeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdRemoveWithBody request with any body
	PostPoolIdIdRemoveWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdRemove(ctx context.Context, id int, body PostPoolIdIdRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdReplaceWithBody request with any body
	PostPoolIdIdReplaceWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdReplace(ctx context.Context, id int, body PostPoolIdIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdScrubWithBody request with any body
	PostPoolIdIdScrubWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdScrub(ctx context.Context, id int, body PostPoolIdIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdUnlockWithBody request with any body
	PostPoolIdIdUnlockWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdUnlock(ctx context.Context, id int, body PostPoolIdIdUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdUpgradeWithBody request with any body
	PostPoolIdIdUpgradeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdUpgrade(ctx context.Context, id int, body PostPoolIdIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolImportDiskWithBody request with any body
	PostPoolImportDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolImportDisk(ctx context.Context, body PostPoolImportDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolImportDiskAutodetectFsTypeWithBody request with any body
	PostPoolImportDiskAutodetectFsTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolImportDiskAutodetectFsType(ctx context.Context, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolImportDiskMsdosfsLocales request
	GetPoolImportDiskMsdosfsLocales(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolImportFind request
	GetPoolImportFind(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolImportPoolWithBody request with any body
	PostPoolImportPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolImportPool(ctx context.Context, body PostPoolImportPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolResilver request
	GetPoolResilver(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolResilverWithBody request with any body
	PutPoolResilverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolResilver(ctx context.Context, body PutPoolResilverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolScrub request
	GetPoolScrub(ctx context.Context, params *GetPoolScrubParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolScrubWithBody request with any body
	PostPoolScrubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolScrub(ctx context.Context, body PostPoolScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePoolScrubIdId request
	DeletePoolScrubIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolScrubIdId request
	GetPoolScrubIdId(ctx context.Context, id int, params *GetPoolScrubIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolScrubIdIdWithBody request with any body
	PutPoolScrubIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolScrubIdId(ctx context.Context, id int, body PutPoolScrubIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolScrubRunWithBody request with any body
	PostPoolScrubRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolScrubRun(ctx context.Context, body PostPoolScrubRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolSnapshottask request
	GetPoolSnapshottask(ctx context.Context, params *GetPoolSnapshottaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolSnapshottaskWithBody request with any body
	PostPoolSnapshottaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolSnapshottask(ctx context.Context, body PostPoolSnapshottaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePoolSnapshottaskIdId request
	DeletePoolSnapshottaskIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolSnapshottaskIdId request
	GetPoolSnapshottaskIdId(ctx context.Context, id int, params *GetPoolSnapshottaskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolSnapshottaskIdIdWithBody request with any body
	PutPoolSnapshottaskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolSnapshottaskIdId(ctx context.Context, id int, body PutPoolSnapshottaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolSnapshottaskIdIdRunWithBody request with any body
	PostPoolSnapshottaskIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolSnapshottaskIdIdRun(ctx context.Context, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolUnlockServicesRestartChoicesWithBody request with any body
	PostPoolUnlockServicesRestartChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolUnlockServicesRestartChoices(ctx context.Context, body PostPoolUnlockServicesRestartChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplication request
	GetReplication(ctx context.Context, params *GetReplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationWithBody request with any body
	PostReplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplication(ctx context.Context, body PostReplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplicationConfig request
	GetReplicationConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutReplicationConfigWithBody request with any body
	PutReplicationConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutReplicationConfig(ctx context.Context, body PutReplicationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationCountEligibleManualSnapshotsWithBody request with any body
	PostReplicationCountEligibleManualSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationCountEligibleManualSnapshots(ctx context.Context, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationCreateDatasetWithBody request with any body
	PostReplicationCreateDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationCreateDataset(ctx context.Context, body PostReplicationCreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReplicationIdId request
	DeleteReplicationIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplicationIdId request
	GetReplicationIdId(ctx context.Context, id int, params *GetReplicationIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutReplicationIdIdWithBody request with any body
	PutReplicationIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutReplicationIdId(ctx context.Context, id int, body PutReplicationIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationIdIdRestoreWithBody request with any body
	PostReplicationIdIdRestoreWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationIdIdRestore(ctx context.Context, id int, body PostReplicationIdIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationIdIdRunWithBody request with any body
	PostReplicationIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationIdIdRun(ctx context.Context, id int, body PostReplicationIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationListDatasetsWithBody request with any body
	PostReplicationListDatasetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationListDatasets(ctx context.Context, body PostReplicationListDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplicationListNamingSchemas request
	GetReplicationListNamingSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationTargetUnmatchedSnapshotsWithBody request with any body
	PostReplicationTargetUnmatchedSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationTargetUnmatchedSnapshots(ctx context.Context, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReporting request
	GetReporting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutReportingWithBody request with any body
	PutReportingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutReporting(ctx context.Context, body PutReportingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReportingGetDataWithBody request with any body
	PostReportingGetDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReportingGetData(ctx context.Context, body PostReportingGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportingGraphs request
	GetReportingGraphs(ctx context.Context, params *GetReportingGraphsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRouteIpv4gwReachableWithBody request with any body
	PostRouteIpv4gwReachableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRouteIpv4gwReachable(ctx context.Context, body PostRouteIpv4gwReachableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRouteSystemRoutes request
	GetRouteSystemRoutes(ctx context.Context, params *GetRouteSystemRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsyncd request
	GetRsyncd(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRsyncdWithBody request with any body
	PutRsyncdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRsyncd(ctx context.Context, body PutRsyncdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsyncmod request
	GetRsyncmod(ctx context.Context, params *GetRsyncmodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRsyncmodWithBody request with any body
	PostRsyncmodWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRsyncmod(ctx context.Context, body PostRsyncmodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRsyncmodIdId request
	DeleteRsyncmodIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsyncmodIdId request
	GetRsyncmodIdId(ctx context.Context, id int, params *GetRsyncmodIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRsyncmodIdIdWithBody request with any body
	PutRsyncmodIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRsyncmodIdId(ctx context.Context, id int, body PutRsyncmodIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsynctask request
	GetRsynctask(ctx context.Context, params *GetRsynctaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRsynctaskWithBody request with any body
	PostRsynctaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRsynctask(ctx context.Context, body PostRsynctaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRsynctaskIdId request
	DeleteRsynctaskIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsynctaskIdId request
	GetRsynctaskIdId(ctx context.Context, id int, params *GetRsynctaskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRsynctaskIdIdWithBody request with any body
	PutRsynctaskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRsynctaskIdId(ctx context.Context, id int, body PutRsynctaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRsynctaskIdIdRunWithBody request with any body
	PostRsynctaskIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRsynctaskIdIdRun(ctx context.Context, id int, body PostRsynctaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetS3 request
	GetS3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutS3WithBody request with any body
	PutS3WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutS3(ctx context.Context, body PutS3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetS3BindipChoices request
	GetS3BindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSensorQuery request
	GetSensorQuery(ctx context.Context, params *GetSensorQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, params *GetServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceIdId request
	GetServiceIdId(ctx context.Context, id int, params *GetServiceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceIdIdWithBody request with any body
	PutServiceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceIdId(ctx context.Context, id int, body PutServiceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceReloadWithBody request with any body
	PostServiceReloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceReload(ctx context.Context, body PostServiceReloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceRestartWithBody request with any body
	PostServiceRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceRestart(ctx context.Context, body PostServiceRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceStartWithBody request with any body
	PostServiceStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceStart(ctx context.Context, body PostServiceStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceStarted request
	GetServiceStarted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceStopWithBody request with any body
	PostServiceStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceStop(ctx context.Context, body PostServiceStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceTerminateProcessWithBody request with any body
	PostServiceTerminateProcessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceTerminateProcess(ctx context.Context, body PostServiceTerminateProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingAfp request
	GetSharingAfp(ctx context.Context, params *GetSharingAfpParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharingAfpWithBody request with any body
	PostSharingAfpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharingAfp(ctx context.Context, body PostSharingAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSharingAfpIdId request
	DeleteSharingAfpIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingAfpIdId request
	GetSharingAfpIdId(ctx context.Context, id int, params *GetSharingAfpIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSharingAfpIdIdWithBody request with any body
	PutSharingAfpIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSharingAfpIdId(ctx context.Context, id int, body PutSharingAfpIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingNfs request
	GetSharingNfs(ctx context.Context, params *GetSharingNfsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharingNfsWithBody request with any body
	PostSharingNfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharingNfs(ctx context.Context, body PostSharingNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingNfsHumanIdentifier request
	GetSharingNfsHumanIdentifier(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSharingNfsIdId request
	DeleteSharingNfsIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingNfsIdId request
	GetSharingNfsIdId(ctx context.Context, id int, params *GetSharingNfsIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSharingNfsIdIdWithBody request with any body
	PutSharingNfsIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSharingNfsIdId(ctx context.Context, id int, body PutSharingNfsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingSmb request
	GetSharingSmb(ctx context.Context, params *GetSharingSmbParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharingSmbWithBody request with any body
	PostSharingSmbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharingSmb(ctx context.Context, body PostSharingSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSharingSmbIdId request
	DeleteSharingSmbIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingSmbIdId request
	GetSharingSmbIdId(ctx context.Context, id int, params *GetSharingSmbIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSharingSmbIdIdWithBody request with any body
	PutSharingSmbIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSharingSmbIdId(ctx context.Context, id int, body PutSharingSmbIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingSmbPresets request
	GetSharingSmbPresets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingWebdav request
	GetSharingWebdav(ctx context.Context, params *GetSharingWebdavParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharingWebdavWithBody request with any body
	PostSharingWebdavWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharingWebdav(ctx context.Context, body PostSharingWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSharingWebdavIdId request
	DeleteSharingWebdavIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingWebdavIdId request
	GetSharingWebdavIdId(ctx context.Context, id int, params *GetSharingWebdavIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSharingWebdavIdIdWithBody request with any body
	PutSharingWebdavIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSharingWebdavIdId(ctx context.Context, id int, body PutSharingWebdavIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmart request
	GetSmart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSmartWithBody request with any body
	PutSmartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSmart(ctx context.Context, body PutSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmartTest request
	GetSmartTest(ctx context.Context, params *GetSmartTestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmartTestWithBody request with any body
	PostSmartTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmartTest(ctx context.Context, body PostSmartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmartTestDiskChoicesWithBody request with any body
	PostSmartTestDiskChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmartTestDiskChoices(ctx context.Context, body PostSmartTestDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmartTestIdId request
	DeleteSmartTestIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmartTestIdId request
	GetSmartTestIdId(ctx context.Context, id int, params *GetSmartTestIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSmartTestIdIdWithBody request with any body
	PutSmartTestIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSmartTestIdId(ctx context.Context, id int, body PutSmartTestIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmartTestManualTestWithBody request with any body
	PostSmartTestManualTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmartTestManualTest(ctx context.Context, body PostSmartTestManualTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmartTestResults request
	GetSmartTestResults(ctx context.Context, params *GetSmartTestResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmb request
	GetSmb(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSmbWithBody request with any body
	PutSmbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSmb(ctx context.Context, body PutSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbBindipChoices request
	GetSmbBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbDomainChoices request
	GetSmbDomainChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmbGetRemoteAclWithBody request with any body
	PostSmbGetRemoteAclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmbGetRemoteAcl(ctx context.Context, body PostSmbGetRemoteAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbSharesec request
	GetSmbSharesec(ctx context.Context, params *GetSmbSharesecParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmbSharesecWithBody request with any body
	PostSmbSharesecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmbSharesec(ctx context.Context, body PostSmbSharesecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmbSharesecGetaclWithBody request with any body
	PostSmbSharesecGetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmbSharesecGetacl(ctx context.Context, body PostSmbSharesecGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmbSharesecIdId request
	DeleteSmbSharesecIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbSharesecIdId request
	GetSmbSharesecIdId(ctx context.Context, id int, params *GetSmbSharesecIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSmbSharesecIdIdWithBody request with any body
	PutSmbSharesecIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSmbSharesecIdId(ctx context.Context, id int, body PutSmbSharesecIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbSharesecSynchronizeAcls request
	GetSmbSharesecSynchronizeAcls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmbStatusWithBody request with any body
	PostSmbStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmbStatus(ctx context.Context, body PostSmbStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbUnixcharsetChoices request
	GetSmbUnixcharsetChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnmp request
	GetSnmp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSnmpWithBody request with any body
	PutSnmpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSnmp(ctx context.Context, body PutSnmpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSsh request
	GetSsh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSshWithBody request with any body
	PutSshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSsh(ctx context.Context, body PutSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSshBindifaceChoices request
	GetSshBindifaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaticroute request
	GetStaticroute(ctx context.Context, params *GetStaticrouteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStaticrouteWithBody request with any body
	PostStaticrouteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStaticroute(ctx context.Context, body PostStaticrouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStaticrouteIdId request
	DeleteStaticrouteIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaticrouteIdId request
	GetStaticrouteIdId(ctx context.Context, id int, params *GetStaticrouteIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStaticrouteIdIdWithBody request with any body
	PutStaticrouteIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStaticrouteIdId(ctx context.Context, id int, body PutStaticrouteIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatsGetDataWithBody request with any body
	PostStatsGetDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatsGetData(ctx context.Context, body PostStatsGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatsGetDatasetInfoWithBody request with any body
	PostStatsGetDatasetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatsGetDatasetInfo(ctx context.Context, body PostStatsGetDatasetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatsGetSources request
	GetStatsGetSources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupport request
	GetSupport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSupportWithBody request with any body
	PutSupportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSupport(ctx context.Context, body PutSupportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSupportFetchCategoriesWithBody request with any body
	PostSupportFetchCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSupportFetchCategories(ctx context.Context, body PostSupportFetchCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportFields request
	GetSupportFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportIsAvailable request
	GetSupportIsAvailable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportIsAvailableAndEnabled request
	GetSupportIsAvailableAndEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSupportNewTicketWithBody request with any body
	PostSupportNewTicketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSupportNewTicket(ctx context.Context, body PostSupportNewTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemAdvanced request
	GetSystemAdvanced(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemAdvancedWithBody request with any body
	PutSystemAdvancedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemAdvanced(ctx context.Context, body PutSystemAdvancedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemAdvancedSedGlobalPassword request
	GetSystemAdvancedSedGlobalPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemAdvancedSerialPortChoices request
	GetSystemAdvancedSerialPortChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemBootId request
	GetSystemBootId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemEnvironment request
	GetSystemEnvironment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemFeatureEnabledWithBody request with any body
	PostSystemFeatureEnabledWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemFeatureEnabled(ctx context.Context, body PostSystemFeatureEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneral request
	GetSystemGeneral(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemGeneralWithBody request with any body
	PutSystemGeneralWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemGeneral(ctx context.Context, body PutSystemGeneralJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralCountryChoices request
	GetSystemGeneralCountryChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralKbdmapChoices request
	GetSystemGeneralKbdmapChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralLanguageChoices request
	GetSystemGeneralLanguageChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralLocalUrl request
	GetSystemGeneralLocalUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralTimezoneChoices request
	GetSystemGeneralTimezoneChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiAddressChoices request
	GetSystemGeneralUiAddressChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiCertificateChoices request
	GetSystemGeneralUiCertificateChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiHttpsprotocolsChoices request
	GetSystemGeneralUiHttpsprotocolsChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiRestartWithBody request with any body
	GetSystemGeneralUiRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSystemGeneralUiRestart(ctx context.Context, body GetSystemGeneralUiRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemGeneralUiRestartWithBody request with any body
	PostSystemGeneralUiRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemGeneralUiRestart(ctx context.Context, body PostSystemGeneralUiRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiV6addressChoices request
	GetSystemGeneralUiV6addressChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemHostId request
	GetSystemHostId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemInfo request
	GetSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemIsFreenas request
	GetSystemIsFreenas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemLicenseUpdateWithBody request with any body
	PostSystemLicenseUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemLicenseUpdate(ctx context.Context, body PostSystemLicenseUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemNtpserver request
	GetSystemNtpserver(ctx context.Context, params *GetSystemNtpserverParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemNtpserverWithBody request with any body
	PostSystemNtpserverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemNtpserver(ctx context.Context, body PostSystemNtpserverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSystemNtpserverIdId request
	DeleteSystemNtpserverIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemNtpserverIdId request
	GetSystemNtpserverIdId(ctx context.Context, id int, params *GetSystemNtpserverIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemNtpserverIdIdWithBody request with any body
	PutSystemNtpserverIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemNtpserverIdId(ctx context.Context, id int, body PutSystemNtpserverIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemNtpserverTestNtpServer request
	GetSystemNtpserverTestNtpServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemProductName request
	GetSystemProductName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemProductType request
	GetSystemProductType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemReady request
	GetSystemReady(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemRebootWithBody request with any body
	PostSystemRebootWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemReboot(ctx context.Context, body PostSystemRebootJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemShutdownWithBody request with any body
	PostSystemShutdownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemShutdown(ctx context.Context, body PostSystemShutdownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemState request
	GetSystemState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemVersion request
	GetSystemVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemdataset request
	GetSystemdataset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemdatasetWithBody request with any body
	PutSystemdatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemdataset(ctx context.Context, body PutSystemdatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTftp request
	GetTftp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTftpWithBody request with any body
	PutTftpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTftp(ctx context.Context, body PutTftpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTruecommand request
	GetTruecommand(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTruecommandWithBody request with any body
	PutTruecommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTruecommand(ctx context.Context, body PutTruecommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTruenasAcceptEula request
	GetTruenasAcceptEula(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTruenasGetChassisHardware request
	GetTruenasGetChassisHardware(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTruenasGetCustomerInformation request
	GetTruenasGetCustomerInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTruenasGetEula request
	GetTruenasGetEula(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTruenasIsEulaAccepted request
	GetTruenasIsEulaAccepted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTruenasIsProduction request
	GetTruenasIsProduction(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTruenasSetProductionWithBody request with any body
	PostTruenasSetProductionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTruenasSetProduction(ctx context.Context, body PostTruenasSetProductionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTruenasUpdateCustomerInformationWithBody request with any body
	PostTruenasUpdateCustomerInformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTruenasUpdateCustomerInformation(ctx context.Context, body PostTruenasUpdateCustomerInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTunable request
	GetTunable(ctx context.Context, params *GetTunableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTunableWithBody request with any body
	PostTunableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTunable(ctx context.Context, body PostTunableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTunableIdId request
	DeleteTunableIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTunableIdId request
	GetTunableIdId(ctx context.Context, id int, params *GetTunableIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTunableIdIdWithBody request with any body
	PutTunableIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTunableIdId(ctx context.Context, id int, body PutTunableIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTunableTunableTypeChoices request
	GetTunableTunableTypeChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateCheckAvailableWithBody request with any body
	PostUpdateCheckAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateCheckAvailable(ctx context.Context, body PostUpdateCheckAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateDownload request
	GetUpdateDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateGetAutoDownload request
	GetUpdateGetAutoDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateGetPendingWithBody request with any body
	PostUpdateGetPendingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateGetPending(ctx context.Context, body PostUpdateGetPendingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateGetTrains request
	GetUpdateGetTrains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateManualWithBody request with any body
	PostUpdateManualWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateManual(ctx context.Context, body PostUpdateManualJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateSetAutoDownloadWithBody request with any body
	PostUpdateSetAutoDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateSetAutoDownload(ctx context.Context, body PostUpdateSetAutoDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateSetTrainWithBody request with any body
	PostUpdateSetTrainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateSetTrain(ctx context.Context, body PostUpdateSetTrainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateUpdateWithBody request with any body
	PostUpdateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateUpdate(ctx context.Context, body PostUpdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUps request
	GetUps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUpsWithBody request with any body
	PutUpsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUps(ctx context.Context, body PutUpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpsDriverChoices request
	GetUpsDriverChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpsPortChoices request
	GetUpsPortChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserWithBody request with any body
	PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGetNextUid request
	GetUserGetNextUid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserGetUserObjWithBody request with any body
	PostUserGetUserObjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserGetUserObj(ctx context.Context, body PostUserGetUserObjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserHasRootPassword request
	GetUserHasRootPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserIdIdWithBody request with any body
	DeleteUserIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserIdId(ctx context.Context, id int, body DeleteUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserIdId request
	GetUserIdId(ctx context.Context, id int, params *GetUserIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserIdIdWithBody request with any body
	PutUserIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserIdId(ctx context.Context, id int, body PutUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserIdIdPopAttributeWithBody request with any body
	PostUserIdIdPopAttributeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserIdIdPopAttribute(ctx context.Context, id int, body PostUserIdIdPopAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserIdIdSetAttributeWithBody request with any body
	PostUserIdIdSetAttributeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserIdIdSetAttribute(ctx context.Context, id int, body PostUserIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserShellChoicesWithBody request with any body
	PostUserShellChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserShellChoices(ctx context.Context, body PostUserShellChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVm request
	GetVm(ctx context.Context, params *GetVmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmWithBody request with any body
	PostVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVm(ctx context.Context, body PostVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDevice request
	GetVmDevice(ctx context.Context, params *GetVmDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmDeviceWithBody request with any body
	PostVmDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmDevice(ctx context.Context, body PostVmDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmDeviceIdIdWithBody request with any body
	DeleteVmDeviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVmDeviceIdId(ctx context.Context, id int, body DeleteVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDeviceIdId request
	GetVmDeviceIdId(ctx context.Context, id int, params *GetVmDeviceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmDeviceIdIdWithBody request with any body
	PutVmDeviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmDeviceIdId(ctx context.Context, id int, body PutVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDeviceNicAttachChoices request
	GetVmDeviceNicAttachChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDevicePptdevChoices request
	GetVmDevicePptdevChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDeviceVncBindChoices request
	GetVmDeviceVncBindChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmFlags request
	GetVmFlags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmGetAttachedIfaceWithBody request with any body
	PostVmGetAttachedIfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmGetAttachedIface(ctx context.Context, body PostVmGetAttachedIfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmGetAvailableMemoryWithBody request with any body
	PostVmGetAvailableMemoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmGetAvailableMemory(ctx context.Context, body PostVmGetAvailableMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmGetConsoleWithBody request with any body
	PostVmGetConsoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmGetConsole(ctx context.Context, body PostVmGetConsoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmGetVmemoryInUse request
	GetVmGetVmemoryInUse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmGetVncWithBody request with any body
	PostVmGetVncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmGetVnc(ctx context.Context, body PostVmGetVncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmGetVncIpv4 request
	GetVmGetVncIpv4(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmIdIdWithBody request with any body
	DeleteVmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVmIdId(ctx context.Context, id int, body DeleteVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmIdId request
	GetVmIdId(ctx context.Context, id int, params *GetVmIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmIdIdWithBody request with any body
	PutVmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmIdId(ctx context.Context, id int, body PutVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdCloneWithBody request with any body
	PostVmIdIdCloneWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdClone(ctx context.Context, id int, body PostVmIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdPoweroffWithBody request with any body
	PostVmIdIdPoweroffWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdPoweroff(ctx context.Context, id int, body PostVmIdIdPoweroffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdRestartWithBody request with any body
	PostVmIdIdRestartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdRestart(ctx context.Context, id int, body PostVmIdIdRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdStartWithBody request with any body
	PostVmIdIdStartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdStart(ctx context.Context, id int, body PostVmIdIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdStatusWithBody request with any body
	PostVmIdIdStatusWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdStatus(ctx context.Context, id int, body PostVmIdIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdStopWithBody request with any body
	PostVmIdIdStopWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdStop(ctx context.Context, id int, body PostVmIdIdStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmIdentifyHypervisor request
	GetVmIdentifyHypervisor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmRandomMac request
	GetVmRandomMac(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmVncPortWizard request
	GetVmVncPortWizard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmware request
	GetVmware(ctx context.Context, params *GetVmwareParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareWithBody request with any body
	PostVmwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmware(ctx context.Context, body PostVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareDatasetHasVmsWithBody request with any body
	PostVmwareDatasetHasVmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmwareDatasetHasVms(ctx context.Context, body PostVmwareDatasetHasVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareGetDatastoresWithBody request with any body
	PostVmwareGetDatastoresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmwareGetDatastores(ctx context.Context, body PostVmwareGetDatastoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareGetVirtualMachinesWithBody request with any body
	PostVmwareGetVirtualMachinesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmwareGetVirtualMachines(ctx context.Context, body PostVmwareGetVirtualMachinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmwareIdId request
	DeleteVmwareIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmwareIdId request
	GetVmwareIdId(ctx context.Context, id int, params *GetVmwareIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmwareIdIdWithBody request with any body
	PutVmwareIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmwareIdId(ctx context.Context, id int, body PutVmwareIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareMatchDatastoresWithDatasetsWithBody request with any body
	PostVmwareMatchDatastoresWithDatasetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmwareMatchDatastoresWithDatasets(ctx context.Context, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebdav request
	GetWebdav(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWebdavWithBody request with any body
	PutWebdavWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWebdav(ctx context.Context, body PutWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebuiImage request
	GetWebuiImage(ctx context.Context, params *GetWebuiImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebuiImageIdId request
	DeleteWebuiImageIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebuiImageIdId request
	GetWebuiImageIdId(ctx context.Context, id int, params *GetWebuiImageIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZfsSnapshot request
	GetZfsSnapshot(ctx context.Context, params *GetZfsSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZfsSnapshotWithBody request with any body
	PostZfsSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZfsSnapshot(ctx context.Context, body PostZfsSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZfsSnapshotCloneWithBody request with any body
	PostZfsSnapshotCloneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZfsSnapshotClone(ctx context.Context, body PostZfsSnapshotCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteZfsSnapshotIdIdWithBody request with any body
	DeleteZfsSnapshotIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteZfsSnapshotIdId(ctx context.Context, id string, body DeleteZfsSnapshotIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZfsSnapshotIdId request
	GetZfsSnapshotIdId(ctx context.Context, id string, params *GetZfsSnapshotIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZfsSnapshotRemoveWithBody request with any body
	PostZfsSnapshotRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZfsSnapshotRemove(ctx context.Context, body PostZfsSnapshotRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZfsSnapshotRollbackWithBody request with any body
	PostZfsSnapshotRollbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZfsSnapshotRollback(ctx context.Context, body PostZfsSnapshotRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAcmeDnsAuthenticator(ctx context.Context, params *GetAcmeDnsAuthenticatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAcmeDnsAuthenticatorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAcmeDnsAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAcmeDnsAuthenticatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAcmeDnsAuthenticator(ctx context.Context, body PostAcmeDnsAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAcmeDnsAuthenticatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAcmeDnsAuthenticatorAuthenticatorSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAcmeDnsAuthenticatorIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAcmeDnsAuthenticatorIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAcmeDnsAuthenticatorIdId(ctx context.Context, id int, params *GetAcmeDnsAuthenticatorIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAcmeDnsAuthenticatorIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAcmeDnsAuthenticatorIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAcmeDnsAuthenticatorIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAcmeDnsAuthenticatorIdId(ctx context.Context, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAcmeDnsAuthenticatorIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActivedirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActivedirectoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActivedirectory(ctx context.Context, body PutActivedirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActivedirectoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryChangeTrustAccountPw(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryChangeTrustAccountPwRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryDomainInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryDomainInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryGetSpnList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryGetSpnListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActivedirectoryLeaveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActivedirectoryLeaveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActivedirectoryLeave(ctx context.Context, body PostActivedirectoryLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActivedirectoryLeaveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryNssInfoChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryNssInfoChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryStarted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryStartedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAfp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAfpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAfpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAfpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAfp(ctx context.Context, body PutAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAfpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAfpBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAfpBindipChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertDismissWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertDismissRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertDismiss(ctx context.Context, body PostAlertDismissJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertDismissRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertListCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertListCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertListPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertRestoreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertRestore(ctx context.Context, body PostAlertRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertRestoreRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertclasses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertclassesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertclassesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertclassesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertclasses(ctx context.Context, body PutAlertclassesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertclassesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertservice(ctx context.Context, params *GetAlertserviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertserviceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertserviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertserviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertservice(ctx context.Context, body PostAlertserviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertserviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertserviceIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertserviceIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertserviceIdId(ctx context.Context, id int, params *GetAlertserviceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertserviceIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertserviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertserviceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertserviceIdId(ctx context.Context, id int, body PutAlertserviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertserviceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertserviceListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertserviceListTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertserviceTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertserviceTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertserviceTest(ctx context.Context, body PostAlertserviceTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertserviceTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKey(ctx context.Context, params *GetApiKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKey(ctx context.Context, body PostApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKeyIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeyIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKeyIdId(ctx context.Context, id int, params *GetApiKeyIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiKeyIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiKeyIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiKeyIdId(ctx context.Context, id int, body PutApiKeyIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiKeyIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthCheckUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthCheckUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthCheckUser(ctx context.Context, body PostAuthCheckUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthCheckUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthGenerateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthGenerateTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthGenerateToken(ctx context.Context, body PostAuthGenerateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthGenerateTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthSessions(ctx context.Context, params *GetAuthSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthTwoFactorAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthTwoFactorAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthTwofactor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthTwofactorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthTwofactorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthTwofactorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthTwofactor(ctx context.Context, body PutAuthTwofactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthTwofactorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthTwofactorProvisioningUri(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthTwofactorProvisioningUriRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthTwofactorRenewSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthTwofactorRenewSecretRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthTwofactorVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthTwofactorVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthTwofactorVerify(ctx context.Context, body PostAuthTwofactorVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthTwofactorVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootAttachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootAttach(ctx context.Context, body PostBootAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootAttachRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootDetachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootDetachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootDetach(ctx context.Context, body PostBootDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootDetachRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootGetDisks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootGetDisksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootGetScrubInterval(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootGetScrubIntervalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootReplaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootReplaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootReplace(ctx context.Context, body PostBootReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootReplaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootScrub(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootScrubRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootSetScrubIntervalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootSetScrubIntervalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootSetScrubInterval(ctx context.Context, body PostBootSetScrubIntervalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootSetScrubIntervalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootenv(ctx context.Context, params *GetBootenvParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootenvRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenv(ctx context.Context, body PostBootenvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBootenvIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBootenvIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootenvIdId(ctx context.Context, id string, params *GetBootenvIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootenvIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBootenvIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBootenvIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBootenvIdId(ctx context.Context, id string, body PutBootenvIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBootenvIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvIdIdActivateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvIdIdActivateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvIdIdActivate(ctx context.Context, id string, body PostBootenvIdIdActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvIdIdActivateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvIdIdSetAttributeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvIdIdSetAttributeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvIdIdSetAttribute(ctx context.Context, id string, body PostBootenvIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvIdIdSetAttributeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificate(ctx context.Context, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificate(ctx context.Context, body PostCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateAcmeServerChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateAcmeServerChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateCountryChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateCountryChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateEcCurveChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateEcCurveChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateExtendedKeyUsageChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateExtendedKeyUsageChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCertificateIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertificateIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCertificateIdId(ctx context.Context, id int, body DeleteCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertificateIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateIdId(ctx context.Context, id int, params *GetCertificateIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateIdId(ctx context.Context, id int, body PutCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateKeyTypeChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateKeyTypeChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateProfilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateauthority(ctx context.Context, params *GetCertificateauthorityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateauthorityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateauthorityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateauthorityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateauthority(ctx context.Context, body PostCertificateauthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateauthorityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateauthorityCaSignCsrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateauthorityCaSignCsrRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateauthorityCaSignCsr(ctx context.Context, body PostCertificateauthorityCaSignCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateauthorityCaSignCsrRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCertificateauthorityIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertificateauthorityIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateauthorityIdId(ctx context.Context, id int, params *GetCertificateauthorityIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateauthorityIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateauthorityIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateauthorityIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateauthorityIdId(ctx context.Context, id int, body PutCertificateauthorityIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateauthorityIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateauthorityProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateauthorityProfilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsync(ctx context.Context, params *GetCloudsyncParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsync(ctx context.Context, body PostCloudsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncCommonTaskSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncCommonTaskSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncCredentials(ctx context.Context, params *GetCloudsyncCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncCredentialsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncCredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncCredentials(ctx context.Context, body PostCloudsyncCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncCredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCloudsyncCredentialsIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCloudsyncCredentialsIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncCredentialsIdId(ctx context.Context, id int, params *GetCloudsyncCredentialsIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncCredentialsIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudsyncCredentialsIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudsyncCredentialsIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudsyncCredentialsIdId(ctx context.Context, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudsyncCredentialsIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncCredentialsVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncCredentialsVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncCredentialsVerify(ctx context.Context, body PostCloudsyncCredentialsVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncCredentialsVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCloudsyncIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCloudsyncIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncIdId(ctx context.Context, id int, params *GetCloudsyncIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudsyncIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudsyncIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudsyncIdId(ctx context.Context, id int, body PutCloudsyncIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudsyncIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdAbortWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdAbortRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdAbort(ctx context.Context, id int, body PostCloudsyncIdIdAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdAbortRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdRestoreWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdRestoreRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdRestore(ctx context.Context, id int, body PostCloudsyncIdIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdRestoreRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdSyncWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdSyncRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdSync(ctx context.Context, id int, body PostCloudsyncIdIdSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdSyncRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncListBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncListBucketsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncListBuckets(ctx context.Context, body PostCloudsyncListBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncListBucketsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncListDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncListDirectoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncListDirectory(ctx context.Context, body PostCloudsyncListDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncListDirectoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncOnedriveListDrivesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncOnedriveListDrivesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncOnedriveListDrives(ctx context.Context, body PostCloudsyncOnedriveListDrivesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncOnedriveListDrivesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncSyncOnetimeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncSyncOnetimeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncSyncOnetime(ctx context.Context, body PostCloudsyncSyncOnetimeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncSyncOnetimeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigReset(ctx context.Context, body PostConfigResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreBulk(ctx context.Context, body PostCoreBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreDebugWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreDebugRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreDebug(ctx context.Context, body PostCoreDebugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreDebugRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreDownloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreDownload(ctx context.Context, body PostCoreDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreDownloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreGetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreGetEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreGetJobs(ctx context.Context, params *GetCoreGetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreGetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreGetMethodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreGetMethodsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreGetMethods(ctx context.Context, body PostCoreGetMethodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreGetMethodsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreGetServices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreGetServicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobAbortWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobAbortRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobAbort(ctx context.Context, body PostCoreJobAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobAbortRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobUpdate(ctx context.Context, body PostCoreJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobWaitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobWaitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobWait(ctx context.Context, body PostCoreJobWaitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobWaitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorePing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorePingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCorePingRemoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCorePingRemoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCorePingRemote(ctx context.Context, body PostCorePingRemoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCorePingRemoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreResizeShellWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreResizeShellRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreResizeShell(ctx context.Context, body PostCoreResizeShellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreResizeShellRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreSessions(ctx context.Context, params *GetCoreSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCronjob(ctx context.Context, params *GetCronjobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCronjobRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCronjobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCronjobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCronjob(ctx context.Context, body PostCronjobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCronjobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCronjobIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCronjobIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCronjobIdId(ctx context.Context, id int, params *GetCronjobIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCronjobIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCronjobIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCronjobIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCronjobIdId(ctx context.Context, id int, body PutCronjobIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCronjobIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCronjobRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCronjobRunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCronjobRun(ctx context.Context, body PostCronjobRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCronjobRunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceGetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceGetInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceGetInfo(ctx context.Context, body PostDeviceGetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceGetInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDirectoryservicesCacheRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDirectoryservicesCacheRefreshRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDirectoryservicesGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDirectoryservicesGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDisk(ctx context.Context, params *GetDiskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskGetEncryptedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskGetEncryptedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskGetEncrypted(ctx context.Context, body PostDiskGetEncryptedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskGetEncryptedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskGetUnusedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskGetUnusedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskGetUnused(ctx context.Context, body PostDiskGetUnusedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskGetUnusedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiskIdId(ctx context.Context, id int, params *GetDiskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiskIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDiskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDiskIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDiskIdId(ctx context.Context, id int, body PutDiskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDiskIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiskLabelToDev(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiskLabelToDevRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskOverprovisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskOverprovisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskOverprovision(ctx context.Context, body PostDiskOverprovisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskOverprovisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiskSedDevName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiskSedDevNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskSmartAttributesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskSmartAttributesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskSmartAttributes(ctx context.Context, body PostDiskSmartAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskSmartAttributesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskSpindownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskSpindownRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskSpindown(ctx context.Context, body PostDiskSpindownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskSpindownRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskTemperatureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskTemperatureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskTemperature(ctx context.Context, body PostDiskTemperatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskTemperatureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskTemperaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskTemperaturesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskTemperatures(ctx context.Context, body PostDiskTemperaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskTemperaturesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskUnoverprovisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskUnoverprovisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskUnoverprovision(ctx context.Context, body PostDiskUnoverprovisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskUnoverprovisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskWipeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskWipeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskWipe(ctx context.Context, body PostDiskWipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskWipeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDnsQuery(ctx context.Context, params *GetDnsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDnsQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDyndns(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDyndnsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDyndnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDyndnsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDyndns(ctx context.Context, body PutDyndnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDyndnsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDyndnsProviderChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDyndnsProviderChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEc2Meta(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEc2MetaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEc2InstanceId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEc2InstanceIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEc2SetNtpServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEc2SetNtpServersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEc2SetRootSshPublicKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEc2SetRootSshPublicKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEc2Setup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEc2SetupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnclosure(ctx context.Context, params *GetEnclosureParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnclosureRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnclosureIdId(ctx context.Context, id int, params *GetEnclosureIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnclosureIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEnclosureIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEnclosureIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEnclosureIdId(ctx context.Context, id int, body PutEnclosureIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEnclosureIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnclosureSetSlotStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnclosureSetSlotStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnclosureSetSlotStatus(ctx context.Context, body PostEnclosureSetSlotStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnclosureSetSlotStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailover(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFailoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFailoverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFailover(ctx context.Context, body PutFailoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFailoverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverCallRemoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverCallRemoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverCallRemote(ctx context.Context, body PostFailoverCallRemoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverCallRemoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverControlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverControlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverControl(ctx context.Context, body PostFailoverControlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverControlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverForceMaster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverForceMasterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverHardware(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverHardwareRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverInProgress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverInProgressRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverLicensed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverLicensedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverNode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverNodeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverSyncFromPeer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverSyncFromPeerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverSyncToPeerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverSyncToPeerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverSyncToPeer(ctx context.Context, body PostFailoverSyncToPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverSyncToPeerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverUnlockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverUnlockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverUnlock(ctx context.Context, body PostFailoverUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverUnlockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverUpgradeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverUpgradeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFailoverUpgrade(ctx context.Context, body PostFailoverUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFailoverUpgradeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverUpgradeFinish(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverUpgradeFinishRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFailoverUpgradePending(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFailoverUpgradePendingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFcport(ctx context.Context, params *GetFcportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFcportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFcportIdId(ctx context.Context, id int, params *GetFcportIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFcportIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFcportIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFcportIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFcportIdId(ctx context.Context, id int, body PutFcportIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFcportIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemAclIsTrivialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemAclIsTrivialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemAclIsTrivial(ctx context.Context, body PostFilesystemAclIsTrivialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemAclIsTrivialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemChownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemChownRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemChown(ctx context.Context, body PostFilesystemChownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemChownRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilesystemDefaultAclChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilesystemDefaultAclChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemGetDefaultAclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemGetDefaultAclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemGetDefaultAcl(ctx context.Context, body PostFilesystemGetDefaultAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemGetDefaultAclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemGetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemGetaclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemGetacl(ctx context.Context, body PostFilesystemGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemGetaclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemListdirWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemListdirRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemListdir(ctx context.Context, body PostFilesystemListdirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemListdirRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemSetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemSetaclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemSetacl(ctx context.Context, body PostFilesystemSetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemSetaclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemSetpermWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemSetpermRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemSetperm(ctx context.Context, body PostFilesystemSetpermJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemSetpermRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemStatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemStatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemStat(ctx context.Context, body PostFilesystemStatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemStatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemStatfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemStatfsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemStatfs(ctx context.Context, body PostFilesystemStatfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemStatfsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFtp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFtpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFtp(ctx context.Context, body PutFtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroup(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroup(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupGetGroupObjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupGetGroupObjRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupGetGroupObj(ctx context.Context, body PostGroupGetGroupObjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupGetGroupObjRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupGetNextGid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupGetNextGidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupIdId(ctx context.Context, id int, body DeleteGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupIdId(ctx context.Context, id int, params *GetGroupIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupIdId(ctx context.Context, id int, body PutGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmap(ctx context.Context, params *GetIdmapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmap(ctx context.Context, body PostIdmapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapBackendChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapBackendChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapBackendOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapBackendOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapClearIdmapCache(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapClearIdmapCacheRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapIdId(ctx context.Context, id int, params *GetIdmapIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapIdId(ctx context.Context, id int, body PutIdmapIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapOptionsChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapOptionsChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapOptionsChoices(ctx context.Context, body PostIdmapOptionsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapOptionsChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInitshutdownscript(ctx context.Context, params *GetInitshutdownscriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInitshutdownscriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInitshutdownscriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInitshutdownscriptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInitshutdownscript(ctx context.Context, body PostInitshutdownscriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInitshutdownscriptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInitshutdownscriptIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInitshutdownscriptIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInitshutdownscriptIdId(ctx context.Context, id int, params *GetInitshutdownscriptIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInitshutdownscriptIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInitshutdownscriptIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInitshutdownscriptIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInitshutdownscriptIdId(ctx context.Context, id int, body PutInitshutdownscriptIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInitshutdownscriptIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterface(ctx context.Context, params *GetInterfaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterface(ctx context.Context, body PostInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceBridgeMembersChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceBridgeMembersChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceBridgeMembersChoices(ctx context.Context, body PostInterfaceBridgeMembersChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceBridgeMembersChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceCheckin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceCheckinRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceCheckinWaiting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceCheckinWaitingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceChoices(ctx context.Context, body PostInterfaceChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceCommitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceCommitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceCommit(ctx context.Context, body PostInterfaceCommitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceCommitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceEnableCapabilitiesIndividually(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceEnableCapabilitiesIndividuallyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceHasPendingChanges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceHasPendingChangesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInterfaceIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInterfaceIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceIdId(ctx context.Context, id string, params *GetInterfaceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInterfaceIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInterfaceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInterfaceIdId(ctx context.Context, id string, body PutInterfaceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInterfaceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceIpInUseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceIpInUseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceIpInUse(ctx context.Context, body PostInterfaceIpInUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceIpInUseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceLagPortsChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceLagPortsChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceLagPortsChoices(ctx context.Context, body PostInterfaceLagPortsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceLagPortsChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceLagSetup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceLagSetupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceRollback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceRollbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceVlanParentInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceVlanParentInterfaceChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceVlanSetup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceVlanSetupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmi(ctx context.Context, params *GetIpmiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmiRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmiChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmiChannelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmiIdId(ctx context.Context, id int, params *GetIpmiIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmiIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIpmiIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIpmiIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIpmiIdId(ctx context.Context, id int, body PutIpmiIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIpmiIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIpmiIdentifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIpmiIdentifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIpmiIdentify(ctx context.Context, body PostIpmiIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIpmiIdentifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmiIsLoaded(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmiIsLoadedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiAuth(ctx context.Context, params *GetIscsiAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiAuthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiAuth(ctx context.Context, body PostIscsiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiAuthIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiAuthIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiAuthIdId(ctx context.Context, id int, params *GetIscsiAuthIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiAuthIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiAuthIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiAuthIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiAuthIdId(ctx context.Context, id int, body PutIscsiAuthIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiAuthIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiExtent(ctx context.Context, params *GetIscsiExtentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiExtentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiExtentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiExtentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiExtent(ctx context.Context, body PostIscsiExtentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiExtentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiExtentDiskChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiExtentDiskChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiExtentDiskChoices(ctx context.Context, body PostIscsiExtentDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiExtentDiskChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiExtentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiExtentIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiExtentIdId(ctx context.Context, id int, body DeleteIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiExtentIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiExtentIdId(ctx context.Context, id int, params *GetIscsiExtentIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiExtentIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiExtentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiExtentIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiExtentIdId(ctx context.Context, id int, body PutIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiExtentIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiGlobalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiGlobalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiGlobalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiGlobal(ctx context.Context, body PutIscsiGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiGlobalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiGlobalAluaEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiGlobalAluaEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiGlobalSessions(ctx context.Context, params *GetIscsiGlobalSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiGlobalSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiInitiator(ctx context.Context, params *GetIscsiInitiatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiInitiatorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiInitiatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiInitiatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiInitiator(ctx context.Context, body PostIscsiInitiatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiInitiatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiInitiatorIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiInitiatorIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiInitiatorIdId(ctx context.Context, id int, params *GetIscsiInitiatorIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiInitiatorIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiInitiatorIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiInitiatorIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiInitiatorIdId(ctx context.Context, id int, body PutIscsiInitiatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiInitiatorIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiPortal(ctx context.Context, params *GetIscsiPortalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiPortalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiPortalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiPortalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiPortal(ctx context.Context, body PostIscsiPortalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiPortalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiPortalIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiPortalIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiPortalIdId(ctx context.Context, id int, params *GetIscsiPortalIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiPortalIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiPortalIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiPortalIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiPortalIdId(ctx context.Context, id int, body PutIscsiPortalIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiPortalIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiPortalListenIpChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiPortalListenIpChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTarget(ctx context.Context, params *GetIscsiTargetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiTargetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiTarget(ctx context.Context, body PostIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiTargetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetIdId(ctx context.Context, id int, body DeleteIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetIdId(ctx context.Context, id int, params *GetIscsiTargetIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiTargetIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiTargetIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiTargetIdId(ctx context.Context, id int, body PutIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiTargetIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetextent(ctx context.Context, params *GetIscsiTargetextentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetextentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiTargetextentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiTargetextentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiTargetextent(ctx context.Context, body PostIscsiTargetextentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiTargetextentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetextentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetextentIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetextentIdId(ctx context.Context, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetextentIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetextentIdId(ctx context.Context, id int, params *GetIscsiTargetextentIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetextentIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiTargetextentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiTargetextentIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiTargetextentIdId(ctx context.Context, id int, body PutIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiTargetextentIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJail(ctx context.Context, params *GetJailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJail(ctx context.Context, body PostJailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailActivateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailActivate(ctx context.Context, body PostJailActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailActivateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailCleanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailCleanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailClean(ctx context.Context, body PostJailCleanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailCleanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailDefaultConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailDefaultConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailExecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailExecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailExec(ctx context.Context, body PostJailExecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailExecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailExport(ctx context.Context, body PostJailExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailFetchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailFetchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailFetch(ctx context.Context, body PostJailFetchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailFetchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailFstabWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailFstabRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailFstab(ctx context.Context, body PostJailFstabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailFstabRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailGetActivatedPool(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailGetActivatedPoolRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJailIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJailIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJailIdId(ctx context.Context, id string, body DeleteJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJailIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailIdId(ctx context.Context, id string, params *GetJailIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJailIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJailIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJailIdId(ctx context.Context, id string, body PutJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJailIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailIdIdCloneWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailIdIdCloneRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailIdIdClone(ctx context.Context, id string, body PostJailIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailIdIdCloneRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailImportImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailImportImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailImportImage(ctx context.Context, body PostJailImportImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailImportImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailInterfaceChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailRcActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRcActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailRcAction(ctx context.Context, body PostJailRcActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRcActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailReleasesChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailReleasesChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailReleasesChoices(ctx context.Context, body PostJailReleasesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailReleasesChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRestartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailRestart(ctx context.Context, body PostJailRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRestartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailStart(ctx context.Context, body PostJailStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailStopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailStop(ctx context.Context, body PostJailStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailStopRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailUpdateDefaultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailUpdateDefaultsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailUpdateDefaults(ctx context.Context, body PostJailUpdateDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailUpdateDefaultsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailUpdateToLatestPatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailUpdateToLatestPatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailUpdateToLatestPatch(ctx context.Context, body PostJailUpdateToLatestPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailUpdateToLatestPatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailVnetDefaultInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailVnetDefaultInterfaceChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberos(ctx context.Context, body PutKerberosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosKeytab(ctx context.Context, params *GetKerberosKeytabParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosKeytabRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKerberosKeytabWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKerberosKeytabRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKerberosKeytab(ctx context.Context, body PostKerberosKeytabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKerberosKeytabRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKerberosKeytabIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKerberosKeytabIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosKeytabIdId(ctx context.Context, id int, params *GetKerberosKeytabIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosKeytabIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosKeytabIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosKeytabIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosKeytabIdId(ctx context.Context, id int, body PutKerberosKeytabIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosKeytabIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosKeytabSystemKeytabList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosKeytabSystemKeytabListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosRealm(ctx context.Context, params *GetKerberosRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosRealmRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKerberosRealmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKerberosRealmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKerberosRealm(ctx context.Context, body PostKerberosRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKerberosRealmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKerberosRealmIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKerberosRealmIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosRealmIdId(ctx context.Context, id int, params *GetKerberosRealmIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosRealmIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosRealmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosRealmIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosRealmIdId(ctx context.Context, id int, body PutKerberosRealmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosRealmIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeychaincredential(ctx context.Context, params *GetKeychaincredentialParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeychaincredentialRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredential(ctx context.Context, body PostKeychaincredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeychaincredentialGenerateSshKeyPair(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeychaincredentialGenerateSshKeyPairRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeychaincredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeychaincredentialIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeychaincredentialIdId(ctx context.Context, id int, body DeleteKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeychaincredentialIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeychaincredentialIdId(ctx context.Context, id int, params *GetKeychaincredentialIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeychaincredentialIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKeychaincredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKeychaincredentialIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKeychaincredentialIdId(ctx context.Context, id int, body PutKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKeychaincredentialIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialRemoteSshHostKeyScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRemoteSshHostKeyScanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialRemoteSshHostKeyScan(ctx context.Context, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRemoteSshHostKeyScanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialRemoteSshSemiautomaticSetupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx context.Context, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialUsedByWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialUsedByRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialUsedBy(ctx context.Context, body PostKeychaincredentialUsedByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialUsedByRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKmip(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKmipRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKmipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKmipRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKmip(ctx context.Context, body PutKmipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKmipRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKmipClearSyncPendingKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKmipClearSyncPendingKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKmipKmipSyncPending(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKmipKmipSyncPendingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKmipSyncKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKmipSyncKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdap(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLdapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLdapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLdap(ctx context.Context, body PutLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLdapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapSchemaChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapSchemaChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapSslChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapSslChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLldp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLldpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLldpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLldpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLldp(ctx context.Context, body PutLldpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLldpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLldpCountryChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLldpCountryChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMail(ctx context.Context, body PutMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMailSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMailSendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMailSend(ctx context.Context, body PostMailSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMailSendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMultipath(ctx context.Context, params *GetMultipathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMultipathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMultipathIdId(ctx context.Context, id string, params *GetMultipathIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMultipathIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNetworkConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNetworkConfigurationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNetworkConfiguration(ctx context.Context, body PutNetworkConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNetworkConfigurationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkGeneralSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkGeneralSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNfsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNfs(ctx context.Context, body PutNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNfsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNfsAddPrincipalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNfsAddPrincipalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNfsAddPrincipal(ctx context.Context, body PostNfsAddPrincipalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNfsAddPrincipalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfsBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsBindipChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNis(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNisRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNis(ctx context.Context, body PutNisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNisGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNisGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenvpnClient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenvpnClientRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOpenvpnClientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOpenvpnClientRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOpenvpnClient(ctx context.Context, body PutOpenvpnClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOpenvpnClientRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenvpnClientAuthenticationAlgorithmChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenvpnClientAuthenticationAlgorithmChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenvpnClientCipherChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenvpnClientCipherChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenvpnServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenvpnServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOpenvpnServerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOpenvpnServerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOpenvpnServer(ctx context.Context, body PutOpenvpnServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOpenvpnServerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenvpnServerAuthenticationAlgorithmChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenvpnServerAuthenticationAlgorithmChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenvpnServerCipherChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenvpnServerCipherChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOpenvpnServerClientConfigurationGenerationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOpenvpnServerClientConfigurationGenerationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOpenvpnServerClientConfigurationGeneration(ctx context.Context, body PostOpenvpnServerClientConfigurationGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOpenvpnServerClientConfigurationGenerationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenvpnServerRenewStaticKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenvpnServerRenewStaticKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlugin(ctx context.Context, params *GetPluginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlugin(ctx context.Context, body PostPluginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginAvailableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginAvailable(ctx context.Context, body PostPluginAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginAvailableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginBranchesChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginBranchesChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginBranchesChoices(ctx context.Context, body PostPluginBranchesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginBranchesChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginDefaultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginDefaultsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginDefaults(ctx context.Context, body PostPluginDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginDefaultsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePluginIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePluginIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginIdId(ctx context.Context, id string, params *GetPluginIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPluginIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPluginIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPluginIdId(ctx context.Context, id string, body PutPluginIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPluginIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginOfficialRepositories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginOfficialRepositoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginRetrieveVersionsForRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginRetrieveVersionsForReposRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginUpdatePluginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginUpdatePluginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginUpdatePlugin(ctx context.Context, body PostPluginUpdatePluginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginUpdatePluginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPool(ctx context.Context, params *GetPoolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPool(ctx context.Context, body PostPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolAttachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolAttach(ctx context.Context, body PostPoolAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolAttachRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolDataset(ctx context.Context, params *GetPoolDatasetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolDatasetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDataset(ctx context.Context, body PostPoolDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetChangeKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetChangeKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetChangeKey(ctx context.Context, body PostPoolDatasetChangeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetChangeKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolDatasetCompressionChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolDatasetCompressionChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolDatasetEncryptionAlgorithmChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolDatasetEncryptionAlgorithmChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetEncryptionSummaryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetEncryptionSummaryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetEncryptionSummary(ctx context.Context, body PostPoolDatasetEncryptionSummaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetEncryptionSummaryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetExportKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetExportKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetExportKey(ctx context.Context, body PostPoolDatasetExportKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetExportKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolDatasetIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolDatasetIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolDatasetIdId(ctx context.Context, id string, body DeletePoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolDatasetIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolDatasetIdId(ctx context.Context, id string, params *GetPoolDatasetIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolDatasetIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolDatasetIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolDatasetIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolDatasetIdId(ctx context.Context, id string, body PutPoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolDatasetIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdAttachmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdAttachments(ctx context.Context, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdAttachmentsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdGetQuotaWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdGetQuotaRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdGetQuota(ctx context.Context, id string, body PostPoolDatasetIdIdGetQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdGetQuotaRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdPermissionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdPermissionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdPermission(ctx context.Context, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdPermissionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdProcessesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdProcessesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdProcesses(ctx context.Context, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdProcessesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdPromoteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdPromoteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdPromote(ctx context.Context, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdPromoteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdSetQuotaWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdSetQuotaRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdSetQuota(ctx context.Context, id string, body PostPoolDatasetIdIdSetQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdSetQuotaRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetInheritParentEncryptionPropertiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetInheritParentEncryptionPropertiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetInheritParentEncryptionProperties(ctx context.Context, body PostPoolDatasetInheritParentEncryptionPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetInheritParentEncryptionPropertiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetLockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetLockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetLock(ctx context.Context, body PostPoolDatasetLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetLockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetRecommendedZvolBlocksizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetRecommendedZvolBlocksizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetRecommendedZvolBlocksize(ctx context.Context, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetRecommendedZvolBlocksizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetUnlockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetUnlockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetUnlock(ctx context.Context, body PostPoolDatasetUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetUnlockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolDatasetUserprop(ctx context.Context, params *GetPoolDatasetUserpropParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolDatasetUserpropRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetUserpropWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetUserpropRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetUserprop(ctx context.Context, body PostPoolDatasetUserpropJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetUserpropRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolDatasetUserpropIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolDatasetUserpropIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolDatasetUserpropIdId(ctx context.Context, id string, body DeletePoolDatasetUserpropIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolDatasetUserpropIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolDatasetUserpropIdId(ctx context.Context, id string, params *GetPoolDatasetUserpropIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolDatasetUserpropIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolDatasetUserpropIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolDatasetUserpropIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolDatasetUserpropIdId(ctx context.Context, id string, body PutPoolDatasetUserpropIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolDatasetUserpropIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolFilesystemChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolFilesystemChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolFilesystemChoices(ctx context.Context, body PostPoolFilesystemChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolFilesystemChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolIdId(ctx context.Context, id int, params *GetPoolIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolIdId(ctx context.Context, id int, body PutPoolIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdAttachmentsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdAttachments(ctx context.Context, id int, body PostPoolIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdAttachmentsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdDetachWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdDetachRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdDetach(ctx context.Context, id int, body PostPoolIdIdDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdDetachRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdDownloadEncryptionKeyWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdDownloadEncryptionKeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdDownloadEncryptionKey(ctx context.Context, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdDownloadEncryptionKeyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdExpandWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdExpandRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdExpand(ctx context.Context, id int, body PostPoolIdIdExpandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdExpandRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdExportWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdExportRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdExport(ctx context.Context, id int, body PostPoolIdIdExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdExportRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdGetDisksWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdGetDisksRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdGetDisks(ctx context.Context, id int, body PostPoolIdIdGetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdGetDisksRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdIsUpgradedWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdIsUpgradedRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdIsUpgraded(ctx context.Context, id int, body PostPoolIdIdIsUpgradedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdIsUpgradedRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdLockWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdLockRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdLock(ctx context.Context, id int, body PostPoolIdIdLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdLockRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdOfflineWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdOfflineRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdOffline(ctx context.Context, id int, body PostPoolIdIdOfflineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdOfflineRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdOnlineWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdOnlineRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdOnline(ctx context.Context, id int, body PostPoolIdIdOnlineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdOnlineRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdPassphraseWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdPassphraseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdPassphrase(ctx context.Context, id int, body PostPoolIdIdPassphraseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdPassphraseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdProcessesWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdProcessesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdProcesses(ctx context.Context, id int, body PostPoolIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdProcessesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRecoverykeyRmWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRecoverykeyRmRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRecoverykeyRm(ctx context.Context, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRecoverykeyRmRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRekeyWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRekeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRekey(ctx context.Context, id int, body PostPoolIdIdRekeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRekeyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRemoveWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRemoveRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRemove(ctx context.Context, id int, body PostPoolIdIdRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRemoveRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdReplaceWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdReplaceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdReplace(ctx context.Context, id int, body PostPoolIdIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdReplaceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdScrubWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdScrubRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdScrub(ctx context.Context, id int, body PostPoolIdIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdScrubRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdUnlockWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdUnlockRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdUnlock(ctx context.Context, id int, body PostPoolIdIdUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdUnlockRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdUpgradeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdUpgradeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdUpgrade(ctx context.Context, id int, body PostPoolIdIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdUpgradeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportDiskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportDisk(ctx context.Context, body PostPoolImportDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportDiskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportDiskAutodetectFsTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportDiskAutodetectFsTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportDiskAutodetectFsType(ctx context.Context, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportDiskAutodetectFsTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolImportDiskMsdosfsLocales(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolImportDiskMsdosfsLocalesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolImportFind(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolImportFindRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportPoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportPool(ctx context.Context, body PostPoolImportPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportPoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolResilver(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolResilverRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolResilverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolResilverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolResilver(ctx context.Context, body PutPoolResilverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolResilverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolScrub(ctx context.Context, params *GetPoolScrubParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolScrubRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolScrubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolScrubRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolScrub(ctx context.Context, body PostPoolScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolScrubRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolScrubIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolScrubIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolScrubIdId(ctx context.Context, id int, params *GetPoolScrubIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolScrubIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolScrubIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolScrubIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolScrubIdId(ctx context.Context, id int, body PutPoolScrubIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolScrubIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolScrubRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolScrubRunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolScrubRun(ctx context.Context, body PostPoolScrubRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolScrubRunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolSnapshottask(ctx context.Context, params *GetPoolSnapshottaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolSnapshottaskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolSnapshottaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolSnapshottaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolSnapshottask(ctx context.Context, body PostPoolSnapshottaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolSnapshottaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolSnapshottaskIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolSnapshottaskIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolSnapshottaskIdId(ctx context.Context, id int, params *GetPoolSnapshottaskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolSnapshottaskIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolSnapshottaskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolSnapshottaskIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolSnapshottaskIdId(ctx context.Context, id int, body PutPoolSnapshottaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolSnapshottaskIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolSnapshottaskIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolSnapshottaskIdIdRunRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolSnapshottaskIdIdRun(ctx context.Context, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolSnapshottaskIdIdRunRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolUnlockServicesRestartChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolUnlockServicesRestartChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolUnlockServicesRestartChoices(ctx context.Context, body PostPoolUnlockServicesRestartChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolUnlockServicesRestartChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplication(ctx context.Context, params *GetReplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplicationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplication(ctx context.Context, body PostReplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplicationConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplicationConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReplicationConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReplicationConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReplicationConfig(ctx context.Context, body PutReplicationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReplicationConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationCountEligibleManualSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationCountEligibleManualSnapshotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationCountEligibleManualSnapshots(ctx context.Context, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationCountEligibleManualSnapshotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationCreateDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationCreateDatasetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationCreateDataset(ctx context.Context, body PostReplicationCreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationCreateDatasetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReplicationIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReplicationIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplicationIdId(ctx context.Context, id int, params *GetReplicationIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplicationIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReplicationIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReplicationIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReplicationIdId(ctx context.Context, id int, body PutReplicationIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReplicationIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationIdIdRestoreWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationIdIdRestoreRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationIdIdRestore(ctx context.Context, id int, body PostReplicationIdIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationIdIdRestoreRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationIdIdRunRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationIdIdRun(ctx context.Context, id int, body PostReplicationIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationIdIdRunRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationListDatasetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationListDatasetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationListDatasets(ctx context.Context, body PostReplicationListDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationListDatasetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplicationListNamingSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplicationListNamingSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationTargetUnmatchedSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationTargetUnmatchedSnapshotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationTargetUnmatchedSnapshots(ctx context.Context, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationTargetUnmatchedSnapshotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReporting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReportingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReportingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReporting(ctx context.Context, body PutReportingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReportingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReportingGetDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportingGetDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReportingGetData(ctx context.Context, body PostReportingGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportingGetDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportingGraphs(ctx context.Context, params *GetReportingGraphsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportingGraphsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRouteIpv4gwReachableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRouteIpv4gwReachableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRouteIpv4gwReachable(ctx context.Context, body PostRouteIpv4gwReachableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRouteIpv4gwReachableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRouteSystemRoutes(ctx context.Context, params *GetRouteSystemRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRouteSystemRoutesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsyncd(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsyncdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsyncdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsyncdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsyncd(ctx context.Context, body PutRsyncdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsyncdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsyncmod(ctx context.Context, params *GetRsyncmodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsyncmodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsyncmodWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsyncmodRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsyncmod(ctx context.Context, body PostRsyncmodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsyncmodRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRsyncmodIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRsyncmodIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsyncmodIdId(ctx context.Context, id int, params *GetRsyncmodIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsyncmodIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsyncmodIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsyncmodIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsyncmodIdId(ctx context.Context, id int, body PutRsyncmodIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsyncmodIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsynctask(ctx context.Context, params *GetRsynctaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsynctaskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsynctaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsynctaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsynctask(ctx context.Context, body PostRsynctaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsynctaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRsynctaskIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRsynctaskIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsynctaskIdId(ctx context.Context, id int, params *GetRsynctaskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsynctaskIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsynctaskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsynctaskIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsynctaskIdId(ctx context.Context, id int, body PutRsynctaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsynctaskIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsynctaskIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsynctaskIdIdRunRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsynctaskIdIdRun(ctx context.Context, id int, body PostRsynctaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsynctaskIdIdRunRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetS3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetS3Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutS3WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutS3RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutS3(ctx context.Context, body PutS3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutS3Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetS3BindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetS3BindipChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSensorQuery(ctx context.Context, params *GetSensorQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSensorQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, params *GetServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceIdId(ctx context.Context, id int, params *GetServiceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceIdId(ctx context.Context, id int, body PutServiceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceReloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceReloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceReload(ctx context.Context, body PostServiceReloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceReloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceRestartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceRestart(ctx context.Context, body PostServiceRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceRestartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceStart(ctx context.Context, body PostServiceStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceStarted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceStartedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceStopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceStop(ctx context.Context, body PostServiceStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceStopRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceTerminateProcessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceTerminateProcessRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceTerminateProcess(ctx context.Context, body PostServiceTerminateProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceTerminateProcessRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingAfp(ctx context.Context, params *GetSharingAfpParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingAfpRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingAfpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingAfpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingAfp(ctx context.Context, body PostSharingAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingAfpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSharingAfpIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSharingAfpIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingAfpIdId(ctx context.Context, id int, params *GetSharingAfpIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingAfpIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingAfpIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingAfpIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingAfpIdId(ctx context.Context, id int, body PutSharingAfpIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingAfpIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingNfs(ctx context.Context, params *GetSharingNfsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingNfsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingNfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingNfsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingNfs(ctx context.Context, body PostSharingNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingNfsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingNfsHumanIdentifier(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingNfsHumanIdentifierRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSharingNfsIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSharingNfsIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingNfsIdId(ctx context.Context, id int, params *GetSharingNfsIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingNfsIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingNfsIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingNfsIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingNfsIdId(ctx context.Context, id int, body PutSharingNfsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingNfsIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingSmb(ctx context.Context, params *GetSharingSmbParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingSmbRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingSmbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingSmbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingSmb(ctx context.Context, body PostSharingSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingSmbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSharingSmbIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSharingSmbIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingSmbIdId(ctx context.Context, id int, params *GetSharingSmbIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingSmbIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingSmbIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingSmbIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingSmbIdId(ctx context.Context, id int, body PutSharingSmbIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingSmbIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingSmbPresets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingSmbPresetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingWebdav(ctx context.Context, params *GetSharingWebdavParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingWebdavRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingWebdavWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingWebdavRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingWebdav(ctx context.Context, body PostSharingWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingWebdavRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSharingWebdavIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSharingWebdavIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingWebdavIdId(ctx context.Context, id int, params *GetSharingWebdavIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingWebdavIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingWebdavIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingWebdavIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingWebdavIdId(ctx context.Context, id int, body PutSharingWebdavIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingWebdavIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmart(ctx context.Context, body PutSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmartTest(ctx context.Context, params *GetSmartTestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartTestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmartTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmartTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmartTest(ctx context.Context, body PostSmartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmartTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmartTestDiskChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmartTestDiskChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmartTestDiskChoices(ctx context.Context, body PostSmartTestDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmartTestDiskChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmartTestIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmartTestIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmartTestIdId(ctx context.Context, id int, params *GetSmartTestIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartTestIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmartTestIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmartTestIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmartTestIdId(ctx context.Context, id int, body PutSmartTestIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmartTestIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmartTestManualTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmartTestManualTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmartTestManualTest(ctx context.Context, body PostSmartTestManualTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmartTestManualTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmartTestResults(ctx context.Context, params *GetSmartTestResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartTestResultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmb(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmb(ctx context.Context, body PutSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbBindipChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbDomainChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbDomainChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbGetRemoteAclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbGetRemoteAclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbGetRemoteAcl(ctx context.Context, body PostSmbGetRemoteAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbGetRemoteAclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbSharesec(ctx context.Context, params *GetSmbSharesecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbSharesecRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbSharesecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbSharesecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbSharesec(ctx context.Context, body PostSmbSharesecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbSharesecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbSharesecGetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbSharesecGetaclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbSharesecGetacl(ctx context.Context, body PostSmbSharesecGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbSharesecGetaclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmbSharesecIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmbSharesecIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbSharesecIdId(ctx context.Context, id int, params *GetSmbSharesecIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbSharesecIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmbSharesecIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmbSharesecIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmbSharesecIdId(ctx context.Context, id int, body PutSmbSharesecIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmbSharesecIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbSharesecSynchronizeAcls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbSharesecSynchronizeAclsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbStatus(ctx context.Context, body PostSmbStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbUnixcharsetChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbUnixcharsetChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnmpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnmpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnmp(ctx context.Context, body PutSnmpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnmpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSsh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSshRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSsh(ctx context.Context, body PutSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSshBindifaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSshBindifaceChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaticroute(ctx context.Context, params *GetStaticrouteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaticrouteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStaticrouteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStaticrouteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStaticroute(ctx context.Context, body PostStaticrouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStaticrouteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStaticrouteIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStaticrouteIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaticrouteIdId(ctx context.Context, id int, params *GetStaticrouteIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaticrouteIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStaticrouteIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStaticrouteIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStaticrouteIdId(ctx context.Context, id int, body PutStaticrouteIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStaticrouteIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatsGetDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatsGetDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatsGetData(ctx context.Context, body PostStatsGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatsGetDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatsGetDatasetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatsGetDatasetInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatsGetDatasetInfo(ctx context.Context, body PostStatsGetDatasetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatsGetDatasetInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatsGetSources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsGetSourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSupportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSupportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSupport(ctx context.Context, body PutSupportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSupportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupportFetchCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupportFetchCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupportFetchCategories(ctx context.Context, body PostSupportFetchCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupportFetchCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportIsAvailable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportIsAvailableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportIsAvailableAndEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportIsAvailableAndEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupportNewTicketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupportNewTicketRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupportNewTicket(ctx context.Context, body PostSupportNewTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupportNewTicketRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAdvanced(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAdvancedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemAdvancedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemAdvancedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemAdvanced(ctx context.Context, body PutSystemAdvancedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemAdvancedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAdvancedSedGlobalPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAdvancedSedGlobalPasswordRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAdvancedSerialPortChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAdvancedSerialPortChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemBootId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemBootIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemEnvironment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemEnvironmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemFeatureEnabledWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemFeatureEnabledRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemFeatureEnabled(ctx context.Context, body PostSystemFeatureEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemFeatureEnabledRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneral(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemGeneralWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemGeneralRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemGeneral(ctx context.Context, body PutSystemGeneralJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemGeneralRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralCountryChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralCountryChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralKbdmapChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralKbdmapChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralLanguageChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralLanguageChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralLocalUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralLocalUrlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralTimezoneChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralTimezoneChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiAddressChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiAddressChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiCertificateChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiCertificateChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiHttpsprotocolsChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiHttpsprotocolsChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiRestartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiRestart(ctx context.Context, body GetSystemGeneralUiRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiRestartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemGeneralUiRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemGeneralUiRestartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemGeneralUiRestart(ctx context.Context, body PostSystemGeneralUiRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemGeneralUiRestartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiV6addressChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiV6addressChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemHostId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemHostIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemIsFreenas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemIsFreenasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemLicenseUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemLicenseUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemLicenseUpdate(ctx context.Context, body PostSystemLicenseUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemLicenseUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemNtpserver(ctx context.Context, params *GetSystemNtpserverParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemNtpserverRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemNtpserverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemNtpserverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemNtpserver(ctx context.Context, body PostSystemNtpserverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemNtpserverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSystemNtpserverIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSystemNtpserverIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemNtpserverIdId(ctx context.Context, id int, params *GetSystemNtpserverIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemNtpserverIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemNtpserverIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemNtpserverIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemNtpserverIdId(ctx context.Context, id int, body PutSystemNtpserverIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemNtpserverIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemNtpserverTestNtpServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemNtpserverTestNtpServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemProductName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemProductNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemProductType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemProductTypeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemReady(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemReadyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemRebootWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemRebootRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemReboot(ctx context.Context, body PostSystemRebootJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemRebootRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemShutdownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemShutdownRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemShutdown(ctx context.Context, body PostSystemShutdownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemShutdownRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemdataset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemdatasetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemdatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemdatasetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemdataset(ctx context.Context, body PutSystemdatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemdatasetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTftp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTftpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTftpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTftpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTftp(ctx context.Context, body PutTftpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTftpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTruecommand(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTruecommandRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTruecommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTruecommandRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTruecommand(ctx context.Context, body PutTruecommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTruecommandRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTruenasAcceptEula(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTruenasAcceptEulaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTruenasGetChassisHardware(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTruenasGetChassisHardwareRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTruenasGetCustomerInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTruenasGetCustomerInformationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTruenasGetEula(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTruenasGetEulaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTruenasIsEulaAccepted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTruenasIsEulaAcceptedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTruenasIsProduction(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTruenasIsProductionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTruenasSetProductionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTruenasSetProductionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTruenasSetProduction(ctx context.Context, body PostTruenasSetProductionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTruenasSetProductionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTruenasUpdateCustomerInformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTruenasUpdateCustomerInformationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTruenasUpdateCustomerInformation(ctx context.Context, body PostTruenasUpdateCustomerInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTruenasUpdateCustomerInformationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTunable(ctx context.Context, params *GetTunableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTunableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTunableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTunableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTunable(ctx context.Context, body PostTunableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTunableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTunableIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTunableIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTunableIdId(ctx context.Context, id int, params *GetTunableIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTunableIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTunableIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTunableIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTunableIdId(ctx context.Context, id int, body PutTunableIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTunableIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTunableTunableTypeChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTunableTunableTypeChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateCheckAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateCheckAvailableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateCheckAvailable(ctx context.Context, body PostUpdateCheckAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateCheckAvailableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateDownloadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateGetAutoDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateGetAutoDownloadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateGetPendingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateGetPendingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateGetPending(ctx context.Context, body PostUpdateGetPendingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateGetPendingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateGetTrains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateGetTrainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateManualWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateManualRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateManual(ctx context.Context, body PostUpdateManualJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateManualRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateSetAutoDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateSetAutoDownloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateSetAutoDownload(ctx context.Context, body PostUpdateSetAutoDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateSetAutoDownloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateSetTrainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateSetTrainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateSetTrain(ctx context.Context, body PostUpdateSetTrainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateSetTrainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateUpdate(ctx context.Context, body PostUpdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUpsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUpsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUps(ctx context.Context, body PutUpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUpsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpsDriverChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpsDriverChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpsPortChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpsPortChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGetNextUid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGetNextUidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserGetUserObjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserGetUserObjRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserGetUserObj(ctx context.Context, body PostUserGetUserObjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserGetUserObjRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserHasRootPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserHasRootPasswordRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserIdId(ctx context.Context, id int, body DeleteUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserIdId(ctx context.Context, id int, params *GetUserIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdId(ctx context.Context, id int, body PutUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdIdPopAttributeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdIdPopAttributeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdIdPopAttribute(ctx context.Context, id int, body PostUserIdIdPopAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdIdPopAttributeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdIdSetAttributeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdIdSetAttributeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdIdSetAttribute(ctx context.Context, id int, body PostUserIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdIdSetAttributeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserShellChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserShellChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserShellChoices(ctx context.Context, body PostUserShellChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserShellChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVm(ctx context.Context, params *GetVmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVm(ctx context.Context, body PostVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDevice(ctx context.Context, params *GetVmDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDeviceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmDevice(ctx context.Context, body PostVmDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmDeviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmDeviceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmDeviceIdId(ctx context.Context, id int, body DeleteVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmDeviceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDeviceIdId(ctx context.Context, id int, params *GetVmDeviceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDeviceIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmDeviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmDeviceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmDeviceIdId(ctx context.Context, id int, body PutVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmDeviceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDeviceNicAttachChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDeviceNicAttachChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDevicePptdevChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDevicePptdevChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDeviceVncBindChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDeviceVncBindChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmFlags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmFlagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetAttachedIfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetAttachedIfaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetAttachedIface(ctx context.Context, body PostVmGetAttachedIfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetAttachedIfaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetAvailableMemoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetAvailableMemoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetAvailableMemory(ctx context.Context, body PostVmGetAvailableMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetAvailableMemoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetConsoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetConsoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetConsole(ctx context.Context, body PostVmGetConsoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetConsoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmGetVmemoryInUse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmGetVmemoryInUseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetVncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetVncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetVnc(ctx context.Context, body PostVmGetVncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetVncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmGetVncIpv4(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmGetVncIpv4Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmIdId(ctx context.Context, id int, body DeleteVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmIdId(ctx context.Context, id int, params *GetVmIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmIdId(ctx context.Context, id int, body PutVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdCloneWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdCloneRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdClone(ctx context.Context, id int, body PostVmIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdCloneRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdPoweroffWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdPoweroffRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdPoweroff(ctx context.Context, id int, body PostVmIdIdPoweroffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdPoweroffRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdRestartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdRestartRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdRestart(ctx context.Context, id int, body PostVmIdIdRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdRestartRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStartRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStart(ctx context.Context, id int, body PostVmIdIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStartRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStatusWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStatus(ctx context.Context, id int, body PostVmIdIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStopWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStopRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStop(ctx context.Context, id int, body PostVmIdIdStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStopRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmIdentifyHypervisor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmIdentifyHypervisorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmRandomMac(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmRandomMacRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmVncPortWizard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmVncPortWizardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmware(ctx context.Context, params *GetVmwareParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmwareRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmware(ctx context.Context, body PostVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareDatasetHasVmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareDatasetHasVmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareDatasetHasVms(ctx context.Context, body PostVmwareDatasetHasVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareDatasetHasVmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareGetDatastoresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareGetDatastoresRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareGetDatastores(ctx context.Context, body PostVmwareGetDatastoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareGetDatastoresRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareGetVirtualMachinesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareGetVirtualMachinesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareGetVirtualMachines(ctx context.Context, body PostVmwareGetVirtualMachinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareGetVirtualMachinesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmwareIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmwareIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmwareIdId(ctx context.Context, id int, params *GetVmwareIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmwareIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmwareIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmwareIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmwareIdId(ctx context.Context, id int, body PutVmwareIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmwareIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareMatchDatastoresWithDatasetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareMatchDatastoresWithDatasetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareMatchDatastoresWithDatasets(ctx context.Context, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareMatchDatastoresWithDatasetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebdav(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebdavRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWebdavWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWebdavRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWebdav(ctx context.Context, body PutWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWebdavRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebuiImage(ctx context.Context, params *GetWebuiImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebuiImageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebuiImageIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebuiImageIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebuiImageIdId(ctx context.Context, id int, params *GetWebuiImageIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebuiImageIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZfsSnapshot(ctx context.Context, params *GetZfsSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZfsSnapshotRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshot(ctx context.Context, body PostZfsSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotCloneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotCloneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotClone(ctx context.Context, body PostZfsSnapshotCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotCloneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteZfsSnapshotIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteZfsSnapshotIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteZfsSnapshotIdId(ctx context.Context, id string, body DeleteZfsSnapshotIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteZfsSnapshotIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZfsSnapshotIdId(ctx context.Context, id string, params *GetZfsSnapshotIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZfsSnapshotIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotRemove(ctx context.Context, body PostZfsSnapshotRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRemoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotRollbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRollbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotRollback(ctx context.Context, body PostZfsSnapshotRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRollbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAcmeDnsAuthenticatorRequest generates requests for GetAcmeDnsAuthenticator
func NewGetAcmeDnsAuthenticatorRequest(server string, params *GetAcmeDnsAuthenticatorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/acme/dns/authenticator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAcmeDnsAuthenticatorRequest calls the generic PostAcmeDnsAuthenticator builder with application/json body
func NewPostAcmeDnsAuthenticatorRequest(server string, body PostAcmeDnsAuthenticatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAcmeDnsAuthenticatorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAcmeDnsAuthenticatorRequestWithBody generates requests for PostAcmeDnsAuthenticator with any type of body
func NewPostAcmeDnsAuthenticatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/acme/dns/authenticator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAcmeDnsAuthenticatorAuthenticatorSchemasRequest generates requests for GetAcmeDnsAuthenticatorAuthenticatorSchemas
func NewGetAcmeDnsAuthenticatorAuthenticatorSchemasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/acme/dns/authenticator/authenticator_schemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAcmeDnsAuthenticatorIdIdRequest generates requests for DeleteAcmeDnsAuthenticatorIdId
func NewDeleteAcmeDnsAuthenticatorIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/acme/dns/authenticator/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAcmeDnsAuthenticatorIdIdRequest generates requests for GetAcmeDnsAuthenticatorIdId
func NewGetAcmeDnsAuthenticatorIdIdRequest(server string, id int, params *GetAcmeDnsAuthenticatorIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/acme/dns/authenticator/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAcmeDnsAuthenticatorIdIdRequest calls the generic PutAcmeDnsAuthenticatorIdId builder with application/json body
func NewPutAcmeDnsAuthenticatorIdIdRequest(server string, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAcmeDnsAuthenticatorIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAcmeDnsAuthenticatorIdIdRequestWithBody generates requests for PutAcmeDnsAuthenticatorIdId with any type of body
func NewPutAcmeDnsAuthenticatorIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/acme/dns/authenticator/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivedirectoryRequest generates requests for GetActivedirectory
func NewGetActivedirectoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutActivedirectoryRequest calls the generic PutActivedirectory builder with application/json body
func NewPutActivedirectoryRequest(server string, body PutActivedirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutActivedirectoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPutActivedirectoryRequestWithBody generates requests for PutActivedirectory with any type of body
func NewPutActivedirectoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivedirectoryChangeTrustAccountPwRequest generates requests for GetActivedirectoryChangeTrustAccountPw
func NewGetActivedirectoryChangeTrustAccountPwRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory/change_trust_account_pw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryDomainInfoRequest generates requests for GetActivedirectoryDomainInfo
func NewGetActivedirectoryDomainInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory/domain_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryGetSpnListRequest generates requests for GetActivedirectoryGetSpnList
func NewGetActivedirectoryGetSpnListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory/get_spn_list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryGetStateRequest generates requests for GetActivedirectoryGetState
func NewGetActivedirectoryGetStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory/get_state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActivedirectoryLeaveRequest calls the generic PostActivedirectoryLeave builder with application/json body
func NewPostActivedirectoryLeaveRequest(server string, body PostActivedirectoryLeaveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActivedirectoryLeaveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostActivedirectoryLeaveRequestWithBody generates requests for PostActivedirectoryLeave with any type of body
func NewPostActivedirectoryLeaveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory/leave")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivedirectoryNssInfoChoicesRequest generates requests for GetActivedirectoryNssInfoChoices
func NewGetActivedirectoryNssInfoChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory/nss_info_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryStartedRequest generates requests for GetActivedirectoryStarted
func NewGetActivedirectoryStartedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activedirectory/started")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAfpRequest generates requests for GetAfp
func NewGetAfpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/afp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAfpRequest calls the generic PutAfp builder with application/json body
func NewPutAfpRequest(server string, body PutAfpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAfpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAfpRequestWithBody generates requests for PutAfp with any type of body
func NewPutAfpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/afp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAfpBindipChoicesRequest generates requests for GetAfpBindipChoices
func NewGetAfpBindipChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/afp/bindip_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertDismissRequest calls the generic PostAlertDismiss builder with application/json body
func NewPostAlertDismissRequest(server string, body PostAlertDismissJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertDismissRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertDismissRequestWithBody generates requests for PostAlertDismiss with any type of body
func NewPostAlertDismissRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/dismiss")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertListRequest generates requests for GetAlertList
func NewGetAlertListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertListCategoriesRequest generates requests for GetAlertListCategories
func NewGetAlertListCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/list_categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertListPoliciesRequest generates requests for GetAlertListPolicies
func NewGetAlertListPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/list_policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertRestoreRequest calls the generic PostAlertRestore builder with application/json body
func NewPostAlertRestoreRequest(server string, body PostAlertRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertRestoreRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertRestoreRequestWithBody generates requests for PostAlertRestore with any type of body
func NewPostAlertRestoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertclassesRequest generates requests for GetAlertclasses
func NewGetAlertclassesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertclasses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAlertclassesRequest calls the generic PutAlertclasses builder with application/json body
func NewPutAlertclassesRequest(server string, body PutAlertclassesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAlertclassesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAlertclassesRequestWithBody generates requests for PutAlertclasses with any type of body
func NewPutAlertclassesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertclasses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertserviceRequest generates requests for GetAlertservice
func NewGetAlertserviceRequest(server string, params *GetAlertserviceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertservice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertserviceRequest calls the generic PostAlertservice builder with application/json body
func NewPostAlertserviceRequest(server string, body PostAlertserviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertserviceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertserviceRequestWithBody generates requests for PostAlertservice with any type of body
func NewPostAlertserviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertservice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertserviceIdIdRequest generates requests for DeleteAlertserviceIdId
func NewDeleteAlertserviceIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertservice/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertserviceIdIdRequest generates requests for GetAlertserviceIdId
func NewGetAlertserviceIdIdRequest(server string, id int, params *GetAlertserviceIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertservice/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAlertserviceIdIdRequest calls the generic PutAlertserviceIdId builder with application/json body
func NewPutAlertserviceIdIdRequest(server string, id int, body PutAlertserviceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAlertserviceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAlertserviceIdIdRequestWithBody generates requests for PutAlertserviceIdId with any type of body
func NewPutAlertserviceIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertservice/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertserviceListTypesRequest generates requests for GetAlertserviceListTypes
func NewGetAlertserviceListTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertservice/list_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertserviceTestRequest calls the generic PostAlertserviceTest builder with application/json body
func NewPostAlertserviceTestRequest(server string, body PostAlertserviceTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertserviceTestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertserviceTestRequestWithBody generates requests for PostAlertserviceTest with any type of body
func NewPostAlertserviceTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alertservice/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiKeyRequest generates requests for GetApiKey
func NewGetApiKeyRequest(server string, params *GetApiKeyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiKeyRequest calls the generic PostApiKey builder with application/json body
func NewPostApiKeyRequest(server string, body PostApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiKeyRequestWithBody generates requests for PostApiKey with any type of body
func NewPostApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKeyIdIdRequest generates requests for DeleteApiKeyIdId
func NewDeleteApiKeyIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_key/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKeyIdIdRequest generates requests for GetApiKeyIdId
func NewGetApiKeyIdIdRequest(server string, id int, params *GetApiKeyIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_key/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiKeyIdIdRequest calls the generic PutApiKeyIdId builder with application/json body
func NewPutApiKeyIdIdRequest(server string, id int, body PutApiKeyIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiKeyIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiKeyIdIdRequestWithBody generates requests for PutApiKeyIdId with any type of body
func NewPutApiKeyIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api_key/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthCheckUserRequest calls the generic PostAuthCheckUser builder with application/json body
func NewPostAuthCheckUserRequest(server string, body PostAuthCheckUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthCheckUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthCheckUserRequestWithBody generates requests for PostAuthCheckUser with any type of body
func NewPostAuthCheckUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/check_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthGenerateTokenRequest calls the generic PostAuthGenerateToken builder with application/json body
func NewPostAuthGenerateTokenRequest(server string, body PostAuthGenerateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthGenerateTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthGenerateTokenRequestWithBody generates requests for PostAuthGenerateToken with any type of body
func NewPostAuthGenerateTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/generate_token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthSessionsRequest generates requests for GetAuthSessions
func NewGetAuthSessionsRequest(server string, params *GetAuthSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthTwoFactorAuthRequest generates requests for GetAuthTwoFactorAuth
func NewGetAuthTwoFactorAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/two_factor_auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthTwofactorRequest generates requests for GetAuthTwofactor
func NewGetAuthTwofactorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/twofactor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAuthTwofactorRequest calls the generic PutAuthTwofactor builder with application/json body
func NewPutAuthTwofactorRequest(server string, body PutAuthTwofactorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAuthTwofactorRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAuthTwofactorRequestWithBody generates requests for PutAuthTwofactor with any type of body
func NewPutAuthTwofactorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/twofactor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthTwofactorProvisioningUriRequest generates requests for GetAuthTwofactorProvisioningUri
func NewGetAuthTwofactorProvisioningUriRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/twofactor/provisioning_uri")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthTwofactorRenewSecretRequest generates requests for GetAuthTwofactorRenewSecret
func NewGetAuthTwofactorRenewSecretRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/twofactor/renew_secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthTwofactorVerifyRequest calls the generic PostAuthTwofactorVerify builder with application/json body
func NewPostAuthTwofactorVerifyRequest(server string, body PostAuthTwofactorVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthTwofactorVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthTwofactorVerifyRequestWithBody generates requests for PostAuthTwofactorVerify with any type of body
func NewPostAuthTwofactorVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/twofactor/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBootAttachRequest calls the generic PostBootAttach builder with application/json body
func NewPostBootAttachRequest(server string, body PostBootAttachJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootAttachRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootAttachRequestWithBody generates requests for PostBootAttach with any type of body
func NewPostBootAttachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boot/attach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBootDetachRequest calls the generic PostBootDetach builder with application/json body
func NewPostBootDetachRequest(server string, body PostBootDetachJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootDetachRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootDetachRequestWithBody generates requests for PostBootDetach with any type of body
func NewPostBootDetachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boot/detach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBootGetDisksRequest generates requests for GetBootGetDisks
func NewGetBootGetDisksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boot/get_disks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBootGetScrubIntervalRequest generates requests for GetBootGetScrubInterval
func NewGetBootGetScrubIntervalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boot/get_scrub_interval")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBootGetStateRequest generates requests for GetBootGetState
func NewGetBootGetStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boot/get_state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBootReplaceRequest calls the generic PostBootReplace builder with application/json body
func NewPostBootReplaceRequest(server string, body PostBootReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootReplaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootReplaceRequestWithBody generates requests for PostBootReplace with any type of body
func NewPostBootReplaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boot/replace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBootScrubRequest generates requests for GetBootScrub
func NewGetBootScrubRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boot/scrub")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBootSetScrubIntervalRequest calls the generic PostBootSetScrubInterval builder with application/json body
func NewPostBootSetScrubIntervalRequest(server string, body PostBootSetScrubIntervalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootSetScrubIntervalRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootSetScrubIntervalRequestWithBody generates requests for PostBootSetScrubInterval with any type of body
func NewPostBootSetScrubIntervalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/boot/set_scrub_interval")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBootenvRequest generates requests for GetBootenv
func NewGetBootenvRequest(server string, params *GetBootenvParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bootenv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBootenvRequest calls the generic PostBootenv builder with application/json body
func NewPostBootenvRequest(server string, body PostBootenvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootenvRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootenvRequestWithBody generates requests for PostBootenv with any type of body
func NewPostBootenvRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bootenv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBootenvIdIdRequest generates requests for DeleteBootenvIdId
func NewDeleteBootenvIdIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bootenv/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBootenvIdIdRequest generates requests for GetBootenvIdId
func NewGetBootenvIdIdRequest(server string, id string, params *GetBootenvIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bootenv/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBootenvIdIdRequest calls the generic PutBootenvIdId builder with application/json body
func NewPutBootenvIdIdRequest(server string, id string, body PutBootenvIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBootenvIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBootenvIdIdRequestWithBody generates requests for PutBootenvIdId with any type of body
func NewPutBootenvIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bootenv/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBootenvIdIdActivateRequest calls the generic PostBootenvIdIdActivate builder with application/json body
func NewPostBootenvIdIdActivateRequest(server string, id string, body PostBootenvIdIdActivateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootenvIdIdActivateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBootenvIdIdActivateRequestWithBody generates requests for PostBootenvIdIdActivate with any type of body
func NewPostBootenvIdIdActivateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bootenv/id/%s/activate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBootenvIdIdSetAttributeRequest calls the generic PostBootenvIdIdSetAttribute builder with application/json body
func NewPostBootenvIdIdSetAttributeRequest(server string, id string, body PostBootenvIdIdSetAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootenvIdIdSetAttributeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBootenvIdIdSetAttributeRequestWithBody generates requests for PostBootenvIdIdSetAttribute with any type of body
func NewPostBootenvIdIdSetAttributeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bootenv/id/%s/set_attribute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateRequest generates requests for GetCertificate
func NewGetCertificateRequest(server string, params *GetCertificateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCertificateRequest calls the generic PostCertificate builder with application/json body
func NewPostCertificateRequest(server string, body PostCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCertificateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCertificateRequestWithBody generates requests for PostCertificate with any type of body
func NewPostCertificateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateAcmeServerChoicesRequest generates requests for GetCertificateAcmeServerChoices
func NewGetCertificateAcmeServerChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/acme_server_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateCountryChoicesRequest generates requests for GetCertificateCountryChoices
func NewGetCertificateCountryChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/country_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateEcCurveChoicesRequest generates requests for GetCertificateEcCurveChoices
func NewGetCertificateEcCurveChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/ec_curve_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateExtendedKeyUsageChoicesRequest generates requests for GetCertificateExtendedKeyUsageChoices
func NewGetCertificateExtendedKeyUsageChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/extended_key_usage_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCertificateIdIdRequest calls the generic DeleteCertificateIdId builder with application/json body
func NewDeleteCertificateIdIdRequest(server string, id int, body DeleteCertificateIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCertificateIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteCertificateIdIdRequestWithBody generates requests for DeleteCertificateIdId with any type of body
func NewDeleteCertificateIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateIdIdRequest generates requests for GetCertificateIdId
func NewGetCertificateIdIdRequest(server string, id int, params *GetCertificateIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCertificateIdIdRequest calls the generic PutCertificateIdId builder with application/json body
func NewPutCertificateIdIdRequest(server string, id int, body PutCertificateIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCertificateIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCertificateIdIdRequestWithBody generates requests for PutCertificateIdId with any type of body
func NewPutCertificateIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateKeyTypeChoicesRequest generates requests for GetCertificateKeyTypeChoices
func NewGetCertificateKeyTypeChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/key_type_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateProfilesRequest generates requests for GetCertificateProfiles
func NewGetCertificateProfilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificate/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateauthorityRequest generates requests for GetCertificateauthority
func NewGetCertificateauthorityRequest(server string, params *GetCertificateauthorityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificateauthority")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCertificateauthorityRequest calls the generic PostCertificateauthority builder with application/json body
func NewPostCertificateauthorityRequest(server string, body PostCertificateauthorityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCertificateauthorityRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCertificateauthorityRequestWithBody generates requests for PostCertificateauthority with any type of body
func NewPostCertificateauthorityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificateauthority")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCertificateauthorityCaSignCsrRequest calls the generic PostCertificateauthorityCaSignCsr builder with application/json body
func NewPostCertificateauthorityCaSignCsrRequest(server string, body PostCertificateauthorityCaSignCsrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCertificateauthorityCaSignCsrRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCertificateauthorityCaSignCsrRequestWithBody generates requests for PostCertificateauthorityCaSignCsr with any type of body
func NewPostCertificateauthorityCaSignCsrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificateauthority/ca_sign_csr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCertificateauthorityIdIdRequest generates requests for DeleteCertificateauthorityIdId
func NewDeleteCertificateauthorityIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificateauthority/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateauthorityIdIdRequest generates requests for GetCertificateauthorityIdId
func NewGetCertificateauthorityIdIdRequest(server string, id int, params *GetCertificateauthorityIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificateauthority/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCertificateauthorityIdIdRequest calls the generic PutCertificateauthorityIdId builder with application/json body
func NewPutCertificateauthorityIdIdRequest(server string, id int, body PutCertificateauthorityIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCertificateauthorityIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCertificateauthorityIdIdRequestWithBody generates requests for PutCertificateauthorityIdId with any type of body
func NewPutCertificateauthorityIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificateauthority/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateauthorityProfilesRequest generates requests for GetCertificateauthorityProfiles
func NewGetCertificateauthorityProfilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificateauthority/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudsyncRequest generates requests for GetCloudsync
func NewGetCloudsyncRequest(server string, params *GetCloudsyncParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCloudsyncRequest calls the generic PostCloudsync builder with application/json body
func NewPostCloudsyncRequest(server string, body PostCloudsyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncRequestWithBody generates requests for PostCloudsync with any type of body
func NewPostCloudsyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCloudsyncCommonTaskSchemaRequest generates requests for GetCloudsyncCommonTaskSchema
func NewGetCloudsyncCommonTaskSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/common_task_schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudsyncCredentialsRequest generates requests for GetCloudsyncCredentials
func NewGetCloudsyncCredentialsRequest(server string, params *GetCloudsyncCredentialsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCloudsyncCredentialsRequest calls the generic PostCloudsyncCredentials builder with application/json body
func NewPostCloudsyncCredentialsRequest(server string, body PostCloudsyncCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncCredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncCredentialsRequestWithBody generates requests for PostCloudsyncCredentials with any type of body
func NewPostCloudsyncCredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCloudsyncCredentialsIdIdRequest generates requests for DeleteCloudsyncCredentialsIdId
func NewDeleteCloudsyncCredentialsIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/credentials/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudsyncCredentialsIdIdRequest generates requests for GetCloudsyncCredentialsIdId
func NewGetCloudsyncCredentialsIdIdRequest(server string, id int, params *GetCloudsyncCredentialsIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/credentials/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCloudsyncCredentialsIdIdRequest calls the generic PutCloudsyncCredentialsIdId builder with application/json body
func NewPutCloudsyncCredentialsIdIdRequest(server string, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCloudsyncCredentialsIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCloudsyncCredentialsIdIdRequestWithBody generates requests for PutCloudsyncCredentialsIdId with any type of body
func NewPutCloudsyncCredentialsIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/credentials/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncCredentialsVerifyRequest calls the generic PostCloudsyncCredentialsVerify builder with application/json body
func NewPostCloudsyncCredentialsVerifyRequest(server string, body PostCloudsyncCredentialsVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncCredentialsVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncCredentialsVerifyRequestWithBody generates requests for PostCloudsyncCredentialsVerify with any type of body
func NewPostCloudsyncCredentialsVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/credentials/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCloudsyncIdIdRequest generates requests for DeleteCloudsyncIdId
func NewDeleteCloudsyncIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudsyncIdIdRequest generates requests for GetCloudsyncIdId
func NewGetCloudsyncIdIdRequest(server string, id int, params *GetCloudsyncIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCloudsyncIdIdRequest calls the generic PutCloudsyncIdId builder with application/json body
func NewPutCloudsyncIdIdRequest(server string, id int, body PutCloudsyncIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCloudsyncIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCloudsyncIdIdRequestWithBody generates requests for PutCloudsyncIdId with any type of body
func NewPutCloudsyncIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncIdIdAbortRequest calls the generic PostCloudsyncIdIdAbort builder with application/json body
func NewPostCloudsyncIdIdAbortRequest(server string, id int, body PostCloudsyncIdIdAbortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncIdIdAbortRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCloudsyncIdIdAbortRequestWithBody generates requests for PostCloudsyncIdIdAbort with any type of body
func NewPostCloudsyncIdIdAbortRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/id/%s/abort", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncIdIdRestoreRequest calls the generic PostCloudsyncIdIdRestore builder with application/json body
func NewPostCloudsyncIdIdRestoreRequest(server string, id int, body PostCloudsyncIdIdRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncIdIdRestoreRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCloudsyncIdIdRestoreRequestWithBody generates requests for PostCloudsyncIdIdRestore with any type of body
func NewPostCloudsyncIdIdRestoreRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/id/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncIdIdSyncRequest calls the generic PostCloudsyncIdIdSync builder with application/json body
func NewPostCloudsyncIdIdSyncRequest(server string, id int, body PostCloudsyncIdIdSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncIdIdSyncRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCloudsyncIdIdSyncRequestWithBody generates requests for PostCloudsyncIdIdSync with any type of body
func NewPostCloudsyncIdIdSyncRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/id/%s/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncListBucketsRequest calls the generic PostCloudsyncListBuckets builder with application/json body
func NewPostCloudsyncListBucketsRequest(server string, body PostCloudsyncListBucketsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncListBucketsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncListBucketsRequestWithBody generates requests for PostCloudsyncListBuckets with any type of body
func NewPostCloudsyncListBucketsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/list_buckets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncListDirectoryRequest calls the generic PostCloudsyncListDirectory builder with application/json body
func NewPostCloudsyncListDirectoryRequest(server string, body PostCloudsyncListDirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncListDirectoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncListDirectoryRequestWithBody generates requests for PostCloudsyncListDirectory with any type of body
func NewPostCloudsyncListDirectoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/list_directory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncOnedriveListDrivesRequest calls the generic PostCloudsyncOnedriveListDrives builder with application/json body
func NewPostCloudsyncOnedriveListDrivesRequest(server string, body PostCloudsyncOnedriveListDrivesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncOnedriveListDrivesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncOnedriveListDrivesRequestWithBody generates requests for PostCloudsyncOnedriveListDrives with any type of body
func NewPostCloudsyncOnedriveListDrivesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/onedrive_list_drives")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCloudsyncProvidersRequest generates requests for GetCloudsyncProviders
func NewGetCloudsyncProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCloudsyncSyncOnetimeRequest calls the generic PostCloudsyncSyncOnetime builder with application/json body
func NewPostCloudsyncSyncOnetimeRequest(server string, body PostCloudsyncSyncOnetimeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncSyncOnetimeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncSyncOnetimeRequestWithBody generates requests for PostCloudsyncSyncOnetime with any type of body
func NewPostCloudsyncSyncOnetimeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloudsync/sync_onetime")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostConfigResetRequest calls the generic PostConfigReset builder with application/json body
func NewPostConfigResetRequest(server string, body PostConfigResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConfigResetRequestWithBody generates requests for PostConfigReset with any type of body
func NewPostConfigResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreBulkRequest calls the generic PostCoreBulk builder with application/json body
func NewPostCoreBulkRequest(server string, body PostCoreBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreBulkRequestWithBody generates requests for PostCoreBulk with any type of body
func NewPostCoreBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreDebugRequest calls the generic PostCoreDebug builder with application/json body
func NewPostCoreDebugRequest(server string, body PostCoreDebugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreDebugRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreDebugRequestWithBody generates requests for PostCoreDebug with any type of body
func NewPostCoreDebugRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/debug")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreDownloadRequest calls the generic PostCoreDownload builder with application/json body
func NewPostCoreDownloadRequest(server string, body PostCoreDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreDownloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreDownloadRequestWithBody generates requests for PostCoreDownload with any type of body
func NewPostCoreDownloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCoreGetEventsRequest generates requests for GetCoreGetEvents
func NewGetCoreGetEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/get_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCoreGetJobsRequest generates requests for GetCoreGetJobs
func NewGetCoreGetJobsRequest(server string, params *GetCoreGetJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/get_jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCoreGetMethodsRequest calls the generic PostCoreGetMethods builder with application/json body
func NewPostCoreGetMethodsRequest(server string, body PostCoreGetMethodsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreGetMethodsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreGetMethodsRequestWithBody generates requests for PostCoreGetMethods with any type of body
func NewPostCoreGetMethodsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/get_methods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCoreGetServicesRequest generates requests for GetCoreGetServices
func NewGetCoreGetServicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/get_services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCoreJobAbortRequest calls the generic PostCoreJobAbort builder with application/json body
func NewPostCoreJobAbortRequest(server string, body PostCoreJobAbortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreJobAbortRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreJobAbortRequestWithBody generates requests for PostCoreJobAbort with any type of body
func NewPostCoreJobAbortRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/job_abort")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreJobUpdateRequest calls the generic PostCoreJobUpdate builder with application/json body
func NewPostCoreJobUpdateRequest(server string, body PostCoreJobUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreJobUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreJobUpdateRequestWithBody generates requests for PostCoreJobUpdate with any type of body
func NewPostCoreJobUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/job_update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreJobWaitRequest calls the generic PostCoreJobWait builder with application/json body
func NewPostCoreJobWaitRequest(server string, body PostCoreJobWaitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreJobWaitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreJobWaitRequestWithBody generates requests for PostCoreJobWait with any type of body
func NewPostCoreJobWaitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/job_wait")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCorePingRequest generates requests for GetCorePing
func NewGetCorePingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCorePingRemoteRequest calls the generic PostCorePingRemote builder with application/json body
func NewPostCorePingRemoteRequest(server string, body PostCorePingRemoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCorePingRemoteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCorePingRemoteRequestWithBody generates requests for PostCorePingRemote with any type of body
func NewPostCorePingRemoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/ping_remote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreResizeShellRequest calls the generic PostCoreResizeShell builder with application/json body
func NewPostCoreResizeShellRequest(server string, body PostCoreResizeShellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreResizeShellRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreResizeShellRequestWithBody generates requests for PostCoreResizeShell with any type of body
func NewPostCoreResizeShellRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/resize_shell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCoreSessionsRequest generates requests for GetCoreSessions
func NewGetCoreSessionsRequest(server string, params *GetCoreSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCronjobRequest generates requests for GetCronjob
func NewGetCronjobRequest(server string, params *GetCronjobParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cronjob")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCronjobRequest calls the generic PostCronjob builder with application/json body
func NewPostCronjobRequest(server string, body PostCronjobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCronjobRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCronjobRequestWithBody generates requests for PostCronjob with any type of body
func NewPostCronjobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cronjob")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCronjobIdIdRequest generates requests for DeleteCronjobIdId
func NewDeleteCronjobIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cronjob/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCronjobIdIdRequest generates requests for GetCronjobIdId
func NewGetCronjobIdIdRequest(server string, id int, params *GetCronjobIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cronjob/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCronjobIdIdRequest calls the generic PutCronjobIdId builder with application/json body
func NewPutCronjobIdIdRequest(server string, id int, body PutCronjobIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCronjobIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCronjobIdIdRequestWithBody generates requests for PutCronjobIdId with any type of body
func NewPutCronjobIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cronjob/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCronjobRunRequest calls the generic PostCronjobRun builder with application/json body
func NewPostCronjobRunRequest(server string, body PostCronjobRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCronjobRunRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCronjobRunRequestWithBody generates requests for PostCronjobRun with any type of body
func NewPostCronjobRunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cronjob/run")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeviceGetInfoRequest calls the generic PostDeviceGetInfo builder with application/json body
func NewPostDeviceGetInfoRequest(server string, body PostDeviceGetInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeviceGetInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeviceGetInfoRequestWithBody generates requests for PostDeviceGetInfo with any type of body
func NewPostDeviceGetInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device/get_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDirectoryservicesCacheRefreshRequest generates requests for GetDirectoryservicesCacheRefresh
func NewGetDirectoryservicesCacheRefreshRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/directoryservices/cache_refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDirectoryservicesGetStateRequest generates requests for GetDirectoryservicesGetState
func NewGetDirectoryservicesGetStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/directoryservices/get_state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDiskRequest generates requests for GetDisk
func NewGetDiskRequest(server string, params *GetDiskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDiskGetEncryptedRequest calls the generic PostDiskGetEncrypted builder with application/json body
func NewPostDiskGetEncryptedRequest(server string, body PostDiskGetEncryptedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskGetEncryptedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskGetEncryptedRequestWithBody generates requests for PostDiskGetEncrypted with any type of body
func NewPostDiskGetEncryptedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/get_encrypted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskGetUnusedRequest calls the generic PostDiskGetUnused builder with application/json body
func NewPostDiskGetUnusedRequest(server string, body PostDiskGetUnusedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskGetUnusedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskGetUnusedRequestWithBody generates requests for PostDiskGetUnused with any type of body
func NewPostDiskGetUnusedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/get_unused")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDiskIdIdRequest generates requests for GetDiskIdId
func NewGetDiskIdIdRequest(server string, id int, params *GetDiskIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDiskIdIdRequest calls the generic PutDiskIdId builder with application/json body
func NewPutDiskIdIdRequest(server string, id int, body PutDiskIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDiskIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutDiskIdIdRequestWithBody generates requests for PutDiskIdId with any type of body
func NewPutDiskIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDiskLabelToDevRequest generates requests for GetDiskLabelToDev
func NewGetDiskLabelToDevRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/label_to_dev")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDiskOverprovisionRequest calls the generic PostDiskOverprovision builder with application/json body
func NewPostDiskOverprovisionRequest(server string, body PostDiskOverprovisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskOverprovisionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskOverprovisionRequestWithBody generates requests for PostDiskOverprovision with any type of body
func NewPostDiskOverprovisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/overprovision")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDiskSedDevNameRequest generates requests for GetDiskSedDevName
func NewGetDiskSedDevNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/sed_dev_name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDiskSmartAttributesRequest calls the generic PostDiskSmartAttributes builder with application/json body
func NewPostDiskSmartAttributesRequest(server string, body PostDiskSmartAttributesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskSmartAttributesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskSmartAttributesRequestWithBody generates requests for PostDiskSmartAttributes with any type of body
func NewPostDiskSmartAttributesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/smart_attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskSpindownRequest calls the generic PostDiskSpindown builder with application/json body
func NewPostDiskSpindownRequest(server string, body PostDiskSpindownJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskSpindownRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskSpindownRequestWithBody generates requests for PostDiskSpindown with any type of body
func NewPostDiskSpindownRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/spindown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskTemperatureRequest calls the generic PostDiskTemperature builder with application/json body
func NewPostDiskTemperatureRequest(server string, body PostDiskTemperatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskTemperatureRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskTemperatureRequestWithBody generates requests for PostDiskTemperature with any type of body
func NewPostDiskTemperatureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/temperature")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskTemperaturesRequest calls the generic PostDiskTemperatures builder with application/json body
func NewPostDiskTemperaturesRequest(server string, body PostDiskTemperaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskTemperaturesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskTemperaturesRequestWithBody generates requests for PostDiskTemperatures with any type of body
func NewPostDiskTemperaturesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/temperatures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskUnoverprovisionRequest calls the generic PostDiskUnoverprovision builder with application/json body
func NewPostDiskUnoverprovisionRequest(server string, body PostDiskUnoverprovisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskUnoverprovisionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskUnoverprovisionRequestWithBody generates requests for PostDiskUnoverprovision with any type of body
func NewPostDiskUnoverprovisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/unoverprovision")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskWipeRequest calls the generic PostDiskWipe builder with application/json body
func NewPostDiskWipeRequest(server string, body PostDiskWipeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskWipeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskWipeRequestWithBody generates requests for PostDiskWipe with any type of body
func NewPostDiskWipeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disk/wipe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDnsQueryRequest generates requests for GetDnsQuery
func NewGetDnsQueryRequest(server string, params *GetDnsQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dns/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDyndnsRequest generates requests for GetDyndns
func NewGetDyndnsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dyndns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDyndnsRequest calls the generic PutDyndns builder with application/json body
func NewPutDyndnsRequest(server string, body PutDyndnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDyndnsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutDyndnsRequestWithBody generates requests for PutDyndns with any type of body
func NewPutDyndnsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dyndns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDyndnsProviderChoicesRequest generates requests for GetDyndnsProviderChoices
func NewGetDyndnsProviderChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dyndns/provider_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEc2MetaRequest generates requests for GetEc2Meta
func NewGetEc2MetaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ec2/Meta")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEc2InstanceIdRequest generates requests for GetEc2InstanceId
func NewGetEc2InstanceIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ec2/instance_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEc2SetNtpServersRequest generates requests for GetEc2SetNtpServers
func NewGetEc2SetNtpServersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ec2/set_ntp_servers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEc2SetRootSshPublicKeyRequest generates requests for GetEc2SetRootSshPublicKey
func NewGetEc2SetRootSshPublicKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ec2/set_root_ssh_public_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEc2SetupRequest generates requests for GetEc2Setup
func NewGetEc2SetupRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ec2/setup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnclosureRequest generates requests for GetEnclosure
func NewGetEnclosureRequest(server string, params *GetEnclosureParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enclosure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnclosureIdIdRequest generates requests for GetEnclosureIdId
func NewGetEnclosureIdIdRequest(server string, id int, params *GetEnclosureIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enclosure/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEnclosureIdIdRequest calls the generic PutEnclosureIdId builder with application/json body
func NewPutEnclosureIdIdRequest(server string, id int, body PutEnclosureIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEnclosureIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutEnclosureIdIdRequestWithBody generates requests for PutEnclosureIdId with any type of body
func NewPutEnclosureIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enclosure/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEnclosureSetSlotStatusRequest calls the generic PostEnclosureSetSlotStatus builder with application/json body
func NewPostEnclosureSetSlotStatusRequest(server string, body PostEnclosureSetSlotStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnclosureSetSlotStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEnclosureSetSlotStatusRequestWithBody generates requests for PostEnclosureSetSlotStatus with any type of body
func NewPostEnclosureSetSlotStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enclosure/set_slot_status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFailoverRequest generates requests for GetFailover
func NewGetFailoverRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFailoverRequest calls the generic PutFailover builder with application/json body
func NewPutFailoverRequest(server string, body PutFailoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFailoverRequestWithBody(server, "application/json", bodyReader)
}

// NewPutFailoverRequestWithBody generates requests for PutFailover with any type of body
func NewPutFailoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFailoverCallRemoteRequest calls the generic PostFailoverCallRemote builder with application/json body
func NewPostFailoverCallRemoteRequest(server string, body PostFailoverCallRemoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFailoverCallRemoteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFailoverCallRemoteRequestWithBody generates requests for PostFailoverCallRemote with any type of body
func NewPostFailoverCallRemoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/call_remote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFailoverControlRequest calls the generic PostFailoverControl builder with application/json body
func NewPostFailoverControlRequest(server string, body PostFailoverControlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFailoverControlRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFailoverControlRequestWithBody generates requests for PostFailoverControl with any type of body
func NewPostFailoverControlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/control")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFailoverForceMasterRequest generates requests for GetFailoverForceMaster
func NewGetFailoverForceMasterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/force_master")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFailoverHardwareRequest generates requests for GetFailoverHardware
func NewGetFailoverHardwareRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/hardware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFailoverInProgressRequest generates requests for GetFailoverInProgress
func NewGetFailoverInProgressRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/in_progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFailoverLicensedRequest generates requests for GetFailoverLicensed
func NewGetFailoverLicensedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/licensed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFailoverNodeRequest generates requests for GetFailoverNode
func NewGetFailoverNodeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/node")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFailoverStatusRequest generates requests for GetFailoverStatus
func NewGetFailoverStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFailoverSyncFromPeerRequest generates requests for GetFailoverSyncFromPeer
func NewGetFailoverSyncFromPeerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/sync_from_peer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFailoverSyncToPeerRequest calls the generic PostFailoverSyncToPeer builder with application/json body
func NewPostFailoverSyncToPeerRequest(server string, body PostFailoverSyncToPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFailoverSyncToPeerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFailoverSyncToPeerRequestWithBody generates requests for PostFailoverSyncToPeer with any type of body
func NewPostFailoverSyncToPeerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/sync_to_peer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFailoverUnlockRequest calls the generic PostFailoverUnlock builder with application/json body
func NewPostFailoverUnlockRequest(server string, body PostFailoverUnlockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFailoverUnlockRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFailoverUnlockRequestWithBody generates requests for PostFailoverUnlock with any type of body
func NewPostFailoverUnlockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/unlock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFailoverUpgradeRequest calls the generic PostFailoverUpgrade builder with application/json body
func NewPostFailoverUpgradeRequest(server string, body PostFailoverUpgradeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFailoverUpgradeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFailoverUpgradeRequestWithBody generates requests for PostFailoverUpgrade with any type of body
func NewPostFailoverUpgradeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/upgrade")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFailoverUpgradeFinishRequest generates requests for GetFailoverUpgradeFinish
func NewGetFailoverUpgradeFinishRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/upgrade_finish")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFailoverUpgradePendingRequest generates requests for GetFailoverUpgradePending
func NewGetFailoverUpgradePendingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/failover/upgrade_pending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFcportRequest generates requests for GetFcport
func NewGetFcportRequest(server string, params *GetFcportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fcport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFcportIdIdRequest generates requests for GetFcportIdId
func NewGetFcportIdIdRequest(server string, id int, params *GetFcportIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fcport/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFcportIdIdRequest calls the generic PutFcportIdId builder with application/json body
func NewPutFcportIdIdRequest(server string, id int, body PutFcportIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFcportIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutFcportIdIdRequestWithBody generates requests for PutFcportIdId with any type of body
func NewPutFcportIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fcport/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemAclIsTrivialRequest calls the generic PostFilesystemAclIsTrivial builder with application/json body
func NewPostFilesystemAclIsTrivialRequest(server string, body PostFilesystemAclIsTrivialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemAclIsTrivialRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemAclIsTrivialRequestWithBody generates requests for PostFilesystemAclIsTrivial with any type of body
func NewPostFilesystemAclIsTrivialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/acl_is_trivial")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemChownRequest calls the generic PostFilesystemChown builder with application/json body
func NewPostFilesystemChownRequest(server string, body PostFilesystemChownJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemChownRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemChownRequestWithBody generates requests for PostFilesystemChown with any type of body
func NewPostFilesystemChownRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/chown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFilesystemDefaultAclChoicesRequest generates requests for GetFilesystemDefaultAclChoices
func NewGetFilesystemDefaultAclChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/default_acl_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFilesystemGetDefaultAclRequest calls the generic PostFilesystemGetDefaultAcl builder with application/json body
func NewPostFilesystemGetDefaultAclRequest(server string, body PostFilesystemGetDefaultAclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemGetDefaultAclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemGetDefaultAclRequestWithBody generates requests for PostFilesystemGetDefaultAcl with any type of body
func NewPostFilesystemGetDefaultAclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/get_default_acl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemGetaclRequest calls the generic PostFilesystemGetacl builder with application/json body
func NewPostFilesystemGetaclRequest(server string, body PostFilesystemGetaclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemGetaclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemGetaclRequestWithBody generates requests for PostFilesystemGetacl with any type of body
func NewPostFilesystemGetaclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/getacl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemListdirRequest calls the generic PostFilesystemListdir builder with application/json body
func NewPostFilesystemListdirRequest(server string, body PostFilesystemListdirJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemListdirRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemListdirRequestWithBody generates requests for PostFilesystemListdir with any type of body
func NewPostFilesystemListdirRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/listdir")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemSetaclRequest calls the generic PostFilesystemSetacl builder with application/json body
func NewPostFilesystemSetaclRequest(server string, body PostFilesystemSetaclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemSetaclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemSetaclRequestWithBody generates requests for PostFilesystemSetacl with any type of body
func NewPostFilesystemSetaclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/setacl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemSetpermRequest calls the generic PostFilesystemSetperm builder with application/json body
func NewPostFilesystemSetpermRequest(server string, body PostFilesystemSetpermJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemSetpermRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemSetpermRequestWithBody generates requests for PostFilesystemSetperm with any type of body
func NewPostFilesystemSetpermRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/setperm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemStatRequest calls the generic PostFilesystemStat builder with application/json body
func NewPostFilesystemStatRequest(server string, body PostFilesystemStatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemStatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemStatRequestWithBody generates requests for PostFilesystemStat with any type of body
func NewPostFilesystemStatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/stat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemStatfsRequest calls the generic PostFilesystemStatfs builder with application/json body
func NewPostFilesystemStatfsRequest(server string, body PostFilesystemStatfsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemStatfsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemStatfsRequestWithBody generates requests for PostFilesystemStatfs with any type of body
func NewPostFilesystemStatfsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/statfs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFtpRequest generates requests for GetFtp
func NewGetFtpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ftp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFtpRequest calls the generic PutFtp builder with application/json body
func NewPutFtpRequest(server string, body PutFtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFtpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutFtpRequestWithBody generates requests for PutFtp with any type of body
func NewPutFtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ftp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupRequest generates requests for GetGroup
func NewGetGroupRequest(server string, params *GetGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupRequest calls the generic PostGroup builder with application/json body
func NewPostGroupRequest(server string, body PostGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupRequestWithBody generates requests for PostGroup with any type of body
func NewPostGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupGetGroupObjRequest calls the generic PostGroupGetGroupObj builder with application/json body
func NewPostGroupGetGroupObjRequest(server string, body PostGroupGetGroupObjJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupGetGroupObjRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupGetGroupObjRequestWithBody generates requests for PostGroupGetGroupObj with any type of body
func NewPostGroupGetGroupObjRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/get_group_obj")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupGetNextGidRequest generates requests for GetGroupGetNextGid
func NewGetGroupGetNextGidRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/get_next_gid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGroupIdIdRequest calls the generic DeleteGroupIdId builder with application/json body
func NewDeleteGroupIdIdRequest(server string, id int, body DeleteGroupIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGroupIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteGroupIdIdRequestWithBody generates requests for DeleteGroupIdId with any type of body
func NewDeleteGroupIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupIdIdRequest generates requests for GetGroupIdId
func NewGetGroupIdIdRequest(server string, id int, params *GetGroupIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGroupIdIdRequest calls the generic PutGroupIdId builder with application/json body
func NewPutGroupIdIdRequest(server string, id int, body PutGroupIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutGroupIdIdRequestWithBody generates requests for PutGroupIdId with any type of body
func NewPutGroupIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapRequest generates requests for GetIdmap
func NewGetIdmapRequest(server string, params *GetIdmapParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapRequest calls the generic PostIdmap builder with application/json body
func NewPostIdmapRequest(server string, body PostIdmapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapRequestWithBody generates requests for PostIdmap with any type of body
func NewPostIdmapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapBackendChoicesRequest generates requests for GetIdmapBackendChoices
func NewGetIdmapBackendChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap/backend_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapBackendOptionsRequest generates requests for GetIdmapBackendOptions
func NewGetIdmapBackendOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap/backend_options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapClearIdmapCacheRequest generates requests for GetIdmapClearIdmapCache
func NewGetIdmapClearIdmapCacheRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap/clear_idmap_cache")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdmapIdIdRequest generates requests for DeleteIdmapIdId
func NewDeleteIdmapIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapIdIdRequest generates requests for GetIdmapIdId
func NewGetIdmapIdIdRequest(server string, id int, params *GetIdmapIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapIdIdRequest calls the generic PutIdmapIdId builder with application/json body
func NewPutIdmapIdIdRequest(server string, id int, body PutIdmapIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapIdIdRequestWithBody generates requests for PutIdmapIdId with any type of body
func NewPutIdmapIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIdmapOptionsChoicesRequest calls the generic PostIdmapOptionsChoices builder with application/json body
func NewPostIdmapOptionsChoicesRequest(server string, body PostIdmapOptionsChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapOptionsChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapOptionsChoicesRequestWithBody generates requests for PostIdmapOptionsChoices with any type of body
func NewPostIdmapOptionsChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/idmap/options_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInitshutdownscriptRequest generates requests for GetInitshutdownscript
func NewGetInitshutdownscriptRequest(server string, params *GetInitshutdownscriptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/initshutdownscript")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInitshutdownscriptRequest calls the generic PostInitshutdownscript builder with application/json body
func NewPostInitshutdownscriptRequest(server string, body PostInitshutdownscriptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInitshutdownscriptRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInitshutdownscriptRequestWithBody generates requests for PostInitshutdownscript with any type of body
func NewPostInitshutdownscriptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/initshutdownscript")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInitshutdownscriptIdIdRequest generates requests for DeleteInitshutdownscriptIdId
func NewDeleteInitshutdownscriptIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/initshutdownscript/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInitshutdownscriptIdIdRequest generates requests for GetInitshutdownscriptIdId
func NewGetInitshutdownscriptIdIdRequest(server string, id int, params *GetInitshutdownscriptIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/initshutdownscript/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInitshutdownscriptIdIdRequest calls the generic PutInitshutdownscriptIdId builder with application/json body
func NewPutInitshutdownscriptIdIdRequest(server string, id int, body PutInitshutdownscriptIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInitshutdownscriptIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutInitshutdownscriptIdIdRequestWithBody generates requests for PutInitshutdownscriptIdId with any type of body
func NewPutInitshutdownscriptIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/initshutdownscript/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInterfaceRequest generates requests for GetInterface
func NewGetInterfaceRequest(server string, params *GetInterfaceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInterfaceRequest calls the generic PostInterface builder with application/json body
func NewPostInterfaceRequest(server string, body PostInterfaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceRequestWithBody generates requests for PostInterface with any type of body
func NewPostInterfaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInterfaceBridgeMembersChoicesRequest calls the generic PostInterfaceBridgeMembersChoices builder with application/json body
func NewPostInterfaceBridgeMembersChoicesRequest(server string, body PostInterfaceBridgeMembersChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceBridgeMembersChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceBridgeMembersChoicesRequestWithBody generates requests for PostInterfaceBridgeMembersChoices with any type of body
func NewPostInterfaceBridgeMembersChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/bridge_members_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInterfaceCheckinRequest generates requests for GetInterfaceCheckin
func NewGetInterfaceCheckinRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/checkin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceCheckinWaitingRequest generates requests for GetInterfaceCheckinWaiting
func NewGetInterfaceCheckinWaitingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/checkin_waiting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInterfaceChoicesRequest calls the generic PostInterfaceChoices builder with application/json body
func NewPostInterfaceChoicesRequest(server string, body PostInterfaceChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceChoicesRequestWithBody generates requests for PostInterfaceChoices with any type of body
func NewPostInterfaceChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInterfaceCommitRequest calls the generic PostInterfaceCommit builder with application/json body
func NewPostInterfaceCommitRequest(server string, body PostInterfaceCommitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceCommitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceCommitRequestWithBody generates requests for PostInterfaceCommit with any type of body
func NewPostInterfaceCommitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/commit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInterfaceEnableCapabilitiesIndividuallyRequest generates requests for GetInterfaceEnableCapabilitiesIndividually
func NewGetInterfaceEnableCapabilitiesIndividuallyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/enable_capabilities_individually")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceHasPendingChangesRequest generates requests for GetInterfaceHasPendingChanges
func NewGetInterfaceHasPendingChangesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/has_pending_changes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInterfaceIdIdRequest generates requests for DeleteInterfaceIdId
func NewDeleteInterfaceIdIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceIdIdRequest generates requests for GetInterfaceIdId
func NewGetInterfaceIdIdRequest(server string, id string, params *GetInterfaceIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInterfaceIdIdRequest calls the generic PutInterfaceIdId builder with application/json body
func NewPutInterfaceIdIdRequest(server string, id string, body PutInterfaceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInterfaceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutInterfaceIdIdRequestWithBody generates requests for PutInterfaceIdId with any type of body
func NewPutInterfaceIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInterfaceIpInUseRequest calls the generic PostInterfaceIpInUse builder with application/json body
func NewPostInterfaceIpInUseRequest(server string, body PostInterfaceIpInUseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceIpInUseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceIpInUseRequestWithBody generates requests for PostInterfaceIpInUse with any type of body
func NewPostInterfaceIpInUseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/ip_in_use")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInterfaceLagPortsChoicesRequest calls the generic PostInterfaceLagPortsChoices builder with application/json body
func NewPostInterfaceLagPortsChoicesRequest(server string, body PostInterfaceLagPortsChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceLagPortsChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceLagPortsChoicesRequestWithBody generates requests for PostInterfaceLagPortsChoices with any type of body
func NewPostInterfaceLagPortsChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/lag_ports_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInterfaceLagSetupRequest generates requests for GetInterfaceLagSetup
func NewGetInterfaceLagSetupRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/lag_setup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceRollbackRequest generates requests for GetInterfaceRollback
func NewGetInterfaceRollbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/rollback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceVlanParentInterfaceChoicesRequest generates requests for GetInterfaceVlanParentInterfaceChoices
func NewGetInterfaceVlanParentInterfaceChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/vlan_parent_interface_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceVlanSetupRequest generates requests for GetInterfaceVlanSetup
func NewGetInterfaceVlanSetupRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/interface/vlan_setup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpmiRequest generates requests for GetIpmi
func NewGetIpmiRequest(server string, params *GetIpmiParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ipmi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpmiChannelsRequest generates requests for GetIpmiChannels
func NewGetIpmiChannelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ipmi/channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpmiIdIdRequest generates requests for GetIpmiIdId
func NewGetIpmiIdIdRequest(server string, id int, params *GetIpmiIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ipmi/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIpmiIdIdRequest calls the generic PutIpmiIdId builder with application/json body
func NewPutIpmiIdIdRequest(server string, id int, body PutIpmiIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIpmiIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIpmiIdIdRequestWithBody generates requests for PutIpmiIdId with any type of body
func NewPutIpmiIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ipmi/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIpmiIdentifyRequest calls the generic PostIpmiIdentify builder with application/json body
func NewPostIpmiIdentifyRequest(server string, body PostIpmiIdentifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIpmiIdentifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIpmiIdentifyRequestWithBody generates requests for PostIpmiIdentify with any type of body
func NewPostIpmiIdentifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ipmi/identify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIpmiIsLoadedRequest generates requests for GetIpmiIsLoaded
func NewGetIpmiIsLoadedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ipmi/is_loaded")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiAuthRequest generates requests for GetIscsiAuth
func NewGetIscsiAuthRequest(server string, params *GetIscsiAuthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiAuthRequest calls the generic PostIscsiAuth builder with application/json body
func NewPostIscsiAuthRequest(server string, body PostIscsiAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiAuthRequestWithBody generates requests for PostIscsiAuth with any type of body
func NewPostIscsiAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiAuthIdIdRequest generates requests for DeleteIscsiAuthIdId
func NewDeleteIscsiAuthIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/auth/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiAuthIdIdRequest generates requests for GetIscsiAuthIdId
func NewGetIscsiAuthIdIdRequest(server string, id int, params *GetIscsiAuthIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/auth/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiAuthIdIdRequest calls the generic PutIscsiAuthIdId builder with application/json body
func NewPutIscsiAuthIdIdRequest(server string, id int, body PutIscsiAuthIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiAuthIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiAuthIdIdRequestWithBody generates requests for PutIscsiAuthIdId with any type of body
func NewPutIscsiAuthIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/auth/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiExtentRequest generates requests for GetIscsiExtent
func NewGetIscsiExtentRequest(server string, params *GetIscsiExtentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/extent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiExtentRequest calls the generic PostIscsiExtent builder with application/json body
func NewPostIscsiExtentRequest(server string, body PostIscsiExtentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiExtentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiExtentRequestWithBody generates requests for PostIscsiExtent with any type of body
func NewPostIscsiExtentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/extent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIscsiExtentDiskChoicesRequest calls the generic PostIscsiExtentDiskChoices builder with application/json body
func NewPostIscsiExtentDiskChoicesRequest(server string, body PostIscsiExtentDiskChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiExtentDiskChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiExtentDiskChoicesRequestWithBody generates requests for PostIscsiExtentDiskChoices with any type of body
func NewPostIscsiExtentDiskChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/extent/disk_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiExtentIdIdRequest calls the generic DeleteIscsiExtentIdId builder with application/json body
func NewDeleteIscsiExtentIdIdRequest(server string, id int, body DeleteIscsiExtentIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiExtentIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteIscsiExtentIdIdRequestWithBody generates requests for DeleteIscsiExtentIdId with any type of body
func NewDeleteIscsiExtentIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/extent/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiExtentIdIdRequest generates requests for GetIscsiExtentIdId
func NewGetIscsiExtentIdIdRequest(server string, id int, params *GetIscsiExtentIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/extent/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiExtentIdIdRequest calls the generic PutIscsiExtentIdId builder with application/json body
func NewPutIscsiExtentIdIdRequest(server string, id int, body PutIscsiExtentIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiExtentIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiExtentIdIdRequestWithBody generates requests for PutIscsiExtentIdId with any type of body
func NewPutIscsiExtentIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/extent/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiGlobalRequest generates requests for GetIscsiGlobal
func NewGetIscsiGlobalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiGlobalRequest calls the generic PutIscsiGlobal builder with application/json body
func NewPutIscsiGlobalRequest(server string, body PutIscsiGlobalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiGlobalRequestWithBody(server, "application/json", bodyReader)
}

// NewPutIscsiGlobalRequestWithBody generates requests for PutIscsiGlobal with any type of body
func NewPutIscsiGlobalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiGlobalAluaEnabledRequest generates requests for GetIscsiGlobalAluaEnabled
func NewGetIscsiGlobalAluaEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/global/alua_enabled")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiGlobalSessionsRequest generates requests for GetIscsiGlobalSessions
func NewGetIscsiGlobalSessionsRequest(server string, params *GetIscsiGlobalSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/global/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiInitiatorRequest generates requests for GetIscsiInitiator
func NewGetIscsiInitiatorRequest(server string, params *GetIscsiInitiatorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/initiator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiInitiatorRequest calls the generic PostIscsiInitiator builder with application/json body
func NewPostIscsiInitiatorRequest(server string, body PostIscsiInitiatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiInitiatorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiInitiatorRequestWithBody generates requests for PostIscsiInitiator with any type of body
func NewPostIscsiInitiatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/initiator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiInitiatorIdIdRequest generates requests for DeleteIscsiInitiatorIdId
func NewDeleteIscsiInitiatorIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/initiator/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiInitiatorIdIdRequest generates requests for GetIscsiInitiatorIdId
func NewGetIscsiInitiatorIdIdRequest(server string, id int, params *GetIscsiInitiatorIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/initiator/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiInitiatorIdIdRequest calls the generic PutIscsiInitiatorIdId builder with application/json body
func NewPutIscsiInitiatorIdIdRequest(server string, id int, body PutIscsiInitiatorIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiInitiatorIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiInitiatorIdIdRequestWithBody generates requests for PutIscsiInitiatorIdId with any type of body
func NewPutIscsiInitiatorIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/initiator/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiPortalRequest generates requests for GetIscsiPortal
func NewGetIscsiPortalRequest(server string, params *GetIscsiPortalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/portal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiPortalRequest calls the generic PostIscsiPortal builder with application/json body
func NewPostIscsiPortalRequest(server string, body PostIscsiPortalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiPortalRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiPortalRequestWithBody generates requests for PostIscsiPortal with any type of body
func NewPostIscsiPortalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/portal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiPortalIdIdRequest generates requests for DeleteIscsiPortalIdId
func NewDeleteIscsiPortalIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/portal/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiPortalIdIdRequest generates requests for GetIscsiPortalIdId
func NewGetIscsiPortalIdIdRequest(server string, id int, params *GetIscsiPortalIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/portal/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiPortalIdIdRequest calls the generic PutIscsiPortalIdId builder with application/json body
func NewPutIscsiPortalIdIdRequest(server string, id int, body PutIscsiPortalIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiPortalIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiPortalIdIdRequestWithBody generates requests for PutIscsiPortalIdId with any type of body
func NewPutIscsiPortalIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/portal/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiPortalListenIpChoicesRequest generates requests for GetIscsiPortalListenIpChoices
func NewGetIscsiPortalListenIpChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/portal/listen_ip_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiTargetRequest generates requests for GetIscsiTarget
func NewGetIscsiTargetRequest(server string, params *GetIscsiTargetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiTargetRequest calls the generic PostIscsiTarget builder with application/json body
func NewPostIscsiTargetRequest(server string, body PostIscsiTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiTargetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiTargetRequestWithBody generates requests for PostIscsiTarget with any type of body
func NewPostIscsiTargetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiTargetIdIdRequest calls the generic DeleteIscsiTargetIdId builder with application/json body
func NewDeleteIscsiTargetIdIdRequest(server string, id int, body DeleteIscsiTargetIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiTargetIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteIscsiTargetIdIdRequestWithBody generates requests for DeleteIscsiTargetIdId with any type of body
func NewDeleteIscsiTargetIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/target/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiTargetIdIdRequest generates requests for GetIscsiTargetIdId
func NewGetIscsiTargetIdIdRequest(server string, id int, params *GetIscsiTargetIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/target/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiTargetIdIdRequest calls the generic PutIscsiTargetIdId builder with application/json body
func NewPutIscsiTargetIdIdRequest(server string, id int, body PutIscsiTargetIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiTargetIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiTargetIdIdRequestWithBody generates requests for PutIscsiTargetIdId with any type of body
func NewPutIscsiTargetIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/target/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiTargetextentRequest generates requests for GetIscsiTargetextent
func NewGetIscsiTargetextentRequest(server string, params *GetIscsiTargetextentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/targetextent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiTargetextentRequest calls the generic PostIscsiTargetextent builder with application/json body
func NewPostIscsiTargetextentRequest(server string, body PostIscsiTargetextentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiTargetextentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiTargetextentRequestWithBody generates requests for PostIscsiTargetextent with any type of body
func NewPostIscsiTargetextentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/targetextent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiTargetextentIdIdRequest calls the generic DeleteIscsiTargetextentIdId builder with application/json body
func NewDeleteIscsiTargetextentIdIdRequest(server string, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiTargetextentIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteIscsiTargetextentIdIdRequestWithBody generates requests for DeleteIscsiTargetextentIdId with any type of body
func NewDeleteIscsiTargetextentIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/targetextent/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiTargetextentIdIdRequest generates requests for GetIscsiTargetextentIdId
func NewGetIscsiTargetextentIdIdRequest(server string, id int, params *GetIscsiTargetextentIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/targetextent/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiTargetextentIdIdRequest calls the generic PutIscsiTargetextentIdId builder with application/json body
func NewPutIscsiTargetextentIdIdRequest(server string, id int, body PutIscsiTargetextentIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiTargetextentIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiTargetextentIdIdRequestWithBody generates requests for PutIscsiTargetextentIdId with any type of body
func NewPutIscsiTargetextentIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iscsi/targetextent/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailRequest generates requests for GetJail
func NewGetJailRequest(server string, params *GetJailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJailRequest calls the generic PostJail builder with application/json body
func NewPostJailRequest(server string, body PostJailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailRequestWithBody generates requests for PostJail with any type of body
func NewPostJailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailActivateRequest calls the generic PostJailActivate builder with application/json body
func NewPostJailActivateRequest(server string, body PostJailActivateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailActivateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailActivateRequestWithBody generates requests for PostJailActivate with any type of body
func NewPostJailActivateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/activate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailCleanRequest calls the generic PostJailClean builder with application/json body
func NewPostJailCleanRequest(server string, body PostJailCleanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailCleanRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailCleanRequestWithBody generates requests for PostJailClean with any type of body
func NewPostJailCleanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/clean")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailDefaultConfigurationRequest generates requests for GetJailDefaultConfiguration
func NewGetJailDefaultConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/default_configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJailExecRequest calls the generic PostJailExec builder with application/json body
func NewPostJailExecRequest(server string, body PostJailExecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailExecRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailExecRequestWithBody generates requests for PostJailExec with any type of body
func NewPostJailExecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/exec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailExportRequest calls the generic PostJailExport builder with application/json body
func NewPostJailExportRequest(server string, body PostJailExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailExportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailExportRequestWithBody generates requests for PostJailExport with any type of body
func NewPostJailExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailFetchRequest calls the generic PostJailFetch builder with application/json body
func NewPostJailFetchRequest(server string, body PostJailFetchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailFetchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailFetchRequestWithBody generates requests for PostJailFetch with any type of body
func NewPostJailFetchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/fetch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailFstabRequest calls the generic PostJailFstab builder with application/json body
func NewPostJailFstabRequest(server string, body PostJailFstabJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailFstabRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailFstabRequestWithBody generates requests for PostJailFstab with any type of body
func NewPostJailFstabRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/fstab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailGetActivatedPoolRequest generates requests for GetJailGetActivatedPool
func NewGetJailGetActivatedPoolRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/get_activated_pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteJailIdIdRequest calls the generic DeleteJailIdId builder with application/json body
func NewDeleteJailIdIdRequest(server string, id string, body DeleteJailIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteJailIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteJailIdIdRequestWithBody generates requests for DeleteJailIdId with any type of body
func NewDeleteJailIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailIdIdRequest generates requests for GetJailIdId
func NewGetJailIdIdRequest(server string, id string, params *GetJailIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutJailIdIdRequest calls the generic PutJailIdId builder with application/json body
func NewPutJailIdIdRequest(server string, id string, body PutJailIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJailIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutJailIdIdRequestWithBody generates requests for PutJailIdId with any type of body
func NewPutJailIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailIdIdCloneRequest calls the generic PostJailIdIdClone builder with application/json body
func NewPostJailIdIdCloneRequest(server string, id string, body PostJailIdIdCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailIdIdCloneRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostJailIdIdCloneRequestWithBody generates requests for PostJailIdIdClone with any type of body
func NewPostJailIdIdCloneRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/id/%s/clone", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailImportImageRequest calls the generic PostJailImportImage builder with application/json body
func NewPostJailImportImageRequest(server string, body PostJailImportImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailImportImageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailImportImageRequestWithBody generates requests for PostJailImportImage with any type of body
func NewPostJailImportImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/import_image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailInterfaceChoicesRequest generates requests for GetJailInterfaceChoices
func NewGetJailInterfaceChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/interface_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJailRcActionRequest calls the generic PostJailRcAction builder with application/json body
func NewPostJailRcActionRequest(server string, body PostJailRcActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailRcActionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailRcActionRequestWithBody generates requests for PostJailRcAction with any type of body
func NewPostJailRcActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/rc_action")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailReleasesChoicesRequest calls the generic PostJailReleasesChoices builder with application/json body
func NewPostJailReleasesChoicesRequest(server string, body PostJailReleasesChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailReleasesChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailReleasesChoicesRequestWithBody generates requests for PostJailReleasesChoices with any type of body
func NewPostJailReleasesChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/releases_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailRestartRequest calls the generic PostJailRestart builder with application/json body
func NewPostJailRestartRequest(server string, body PostJailRestartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailRestartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailRestartRequestWithBody generates requests for PostJailRestart with any type of body
func NewPostJailRestartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailStartRequest calls the generic PostJailStart builder with application/json body
func NewPostJailStartRequest(server string, body PostJailStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailStartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailStartRequestWithBody generates requests for PostJailStart with any type of body
func NewPostJailStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailStopRequest calls the generic PostJailStop builder with application/json body
func NewPostJailStopRequest(server string, body PostJailStopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailStopRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailStopRequestWithBody generates requests for PostJailStop with any type of body
func NewPostJailStopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailUpdateDefaultsRequest calls the generic PostJailUpdateDefaults builder with application/json body
func NewPostJailUpdateDefaultsRequest(server string, body PostJailUpdateDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailUpdateDefaultsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailUpdateDefaultsRequestWithBody generates requests for PostJailUpdateDefaults with any type of body
func NewPostJailUpdateDefaultsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/update_defaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailUpdateToLatestPatchRequest calls the generic PostJailUpdateToLatestPatch builder with application/json body
func NewPostJailUpdateToLatestPatchRequest(server string, body PostJailUpdateToLatestPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailUpdateToLatestPatchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailUpdateToLatestPatchRequestWithBody generates requests for PostJailUpdateToLatestPatch with any type of body
func NewPostJailUpdateToLatestPatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/update_to_latest_patch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailVnetDefaultInterfaceChoicesRequest generates requests for GetJailVnetDefaultInterfaceChoices
func NewGetJailVnetDefaultInterfaceChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jail/vnet_default_interface_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKerberosRequest generates requests for GetKerberos
func NewGetKerberosRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKerberosRequest calls the generic PutKerberos builder with application/json body
func NewPutKerberosRequest(server string, body PutKerberosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKerberosRequestWithBody(server, "application/json", bodyReader)
}

// NewPutKerberosRequestWithBody generates requests for PutKerberos with any type of body
func NewPutKerberosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKerberosKeytabRequest generates requests for GetKerberosKeytab
func NewGetKerberosKeytabRequest(server string, params *GetKerberosKeytabParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/keytab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKerberosKeytabRequest calls the generic PostKerberosKeytab builder with application/json body
func NewPostKerberosKeytabRequest(server string, body PostKerberosKeytabJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKerberosKeytabRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKerberosKeytabRequestWithBody generates requests for PostKerberosKeytab with any type of body
func NewPostKerberosKeytabRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/keytab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKerberosKeytabIdIdRequest generates requests for DeleteKerberosKeytabIdId
func NewDeleteKerberosKeytabIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/keytab/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKerberosKeytabIdIdRequest generates requests for GetKerberosKeytabIdId
func NewGetKerberosKeytabIdIdRequest(server string, id int, params *GetKerberosKeytabIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/keytab/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKerberosKeytabIdIdRequest calls the generic PutKerberosKeytabIdId builder with application/json body
func NewPutKerberosKeytabIdIdRequest(server string, id int, body PutKerberosKeytabIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKerberosKeytabIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutKerberosKeytabIdIdRequestWithBody generates requests for PutKerberosKeytabIdId with any type of body
func NewPutKerberosKeytabIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/keytab/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKerberosKeytabSystemKeytabListRequest generates requests for GetKerberosKeytabSystemKeytabList
func NewGetKerberosKeytabSystemKeytabListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/keytab/system_keytab_list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKerberosRealmRequest generates requests for GetKerberosRealm
func NewGetKerberosRealmRequest(server string, params *GetKerberosRealmParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/realm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKerberosRealmRequest calls the generic PostKerberosRealm builder with application/json body
func NewPostKerberosRealmRequest(server string, body PostKerberosRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKerberosRealmRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKerberosRealmRequestWithBody generates requests for PostKerberosRealm with any type of body
func NewPostKerberosRealmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/realm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKerberosRealmIdIdRequest generates requests for DeleteKerberosRealmIdId
func NewDeleteKerberosRealmIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/realm/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKerberosRealmIdIdRequest generates requests for GetKerberosRealmIdId
func NewGetKerberosRealmIdIdRequest(server string, id int, params *GetKerberosRealmIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/realm/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKerberosRealmIdIdRequest calls the generic PutKerberosRealmIdId builder with application/json body
func NewPutKerberosRealmIdIdRequest(server string, id int, body PutKerberosRealmIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKerberosRealmIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutKerberosRealmIdIdRequestWithBody generates requests for PutKerberosRealmIdId with any type of body
func NewPutKerberosRealmIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kerberos/realm/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeychaincredentialRequest generates requests for GetKeychaincredential
func NewGetKeychaincredentialRequest(server string, params *GetKeychaincredentialParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKeychaincredentialRequest calls the generic PostKeychaincredential builder with application/json body
func NewPostKeychaincredentialRequest(server string, body PostKeychaincredentialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeychaincredentialRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeychaincredentialRequestWithBody generates requests for PostKeychaincredential with any type of body
func NewPostKeychaincredentialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeychaincredentialGenerateSshKeyPairRequest generates requests for GetKeychaincredentialGenerateSshKeyPair
func NewGetKeychaincredentialGenerateSshKeyPairRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential/generate_ssh_key_pair")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteKeychaincredentialIdIdRequest calls the generic DeleteKeychaincredentialIdId builder with application/json body
func NewDeleteKeychaincredentialIdIdRequest(server string, id int, body DeleteKeychaincredentialIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteKeychaincredentialIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteKeychaincredentialIdIdRequestWithBody generates requests for DeleteKeychaincredentialIdId with any type of body
func NewDeleteKeychaincredentialIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeychaincredentialIdIdRequest generates requests for GetKeychaincredentialIdId
func NewGetKeychaincredentialIdIdRequest(server string, id int, params *GetKeychaincredentialIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKeychaincredentialIdIdRequest calls the generic PutKeychaincredentialIdId builder with application/json body
func NewPutKeychaincredentialIdIdRequest(server string, id int, body PutKeychaincredentialIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKeychaincredentialIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutKeychaincredentialIdIdRequestWithBody generates requests for PutKeychaincredentialIdId with any type of body
func NewPutKeychaincredentialIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeychaincredentialRemoteSshHostKeyScanRequest calls the generic PostKeychaincredentialRemoteSshHostKeyScan builder with application/json body
func NewPostKeychaincredentialRemoteSshHostKeyScanRequest(server string, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeychaincredentialRemoteSshHostKeyScanRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeychaincredentialRemoteSshHostKeyScanRequestWithBody generates requests for PostKeychaincredentialRemoteSshHostKeyScan with any type of body
func NewPostKeychaincredentialRemoteSshHostKeyScanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential/remote_ssh_host_key_scan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequest calls the generic PostKeychaincredentialRemoteSshSemiautomaticSetup builder with application/json body
func NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequest(server string, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequestWithBody generates requests for PostKeychaincredentialRemoteSshSemiautomaticSetup with any type of body
func NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential/remote_ssh_semiautomatic_setup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeychaincredentialUsedByRequest calls the generic PostKeychaincredentialUsedBy builder with application/json body
func NewPostKeychaincredentialUsedByRequest(server string, body PostKeychaincredentialUsedByJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeychaincredentialUsedByRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeychaincredentialUsedByRequestWithBody generates requests for PostKeychaincredentialUsedBy with any type of body
func NewPostKeychaincredentialUsedByRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keychaincredential/used_by")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKmipRequest generates requests for GetKmip
func NewGetKmipRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kmip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKmipRequest calls the generic PutKmip builder with application/json body
func NewPutKmipRequest(server string, body PutKmipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKmipRequestWithBody(server, "application/json", bodyReader)
}

// NewPutKmipRequestWithBody generates requests for PutKmip with any type of body
func NewPutKmipRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kmip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKmipClearSyncPendingKeysRequest generates requests for GetKmipClearSyncPendingKeys
func NewGetKmipClearSyncPendingKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kmip/clear_sync_pending_keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKmipKmipSyncPendingRequest generates requests for GetKmipKmipSyncPending
func NewGetKmipKmipSyncPendingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kmip/kmip_sync_pending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKmipSyncKeysRequest generates requests for GetKmipSyncKeys
func NewGetKmipSyncKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kmip/sync_keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLdapRequest generates requests for GetLdap
func NewGetLdapRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ldap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLdapRequest calls the generic PutLdap builder with application/json body
func NewPutLdapRequest(server string, body PutLdapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLdapRequestWithBody(server, "application/json", bodyReader)
}

// NewPutLdapRequestWithBody generates requests for PutLdap with any type of body
func NewPutLdapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ldap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLdapGetStateRequest generates requests for GetLdapGetState
func NewGetLdapGetStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ldap/get_state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLdapSchemaChoicesRequest generates requests for GetLdapSchemaChoices
func NewGetLdapSchemaChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ldap/schema_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLdapSslChoicesRequest generates requests for GetLdapSslChoices
func NewGetLdapSslChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ldap/ssl_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLldpRequest generates requests for GetLldp
func NewGetLldpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lldp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLldpRequest calls the generic PutLldp builder with application/json body
func NewPutLldpRequest(server string, body PutLldpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLldpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutLldpRequestWithBody generates requests for PutLldp with any type of body
func NewPutLldpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lldp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLldpCountryChoicesRequest generates requests for GetLldpCountryChoices
func NewGetLldpCountryChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lldp/country_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMailRequest generates requests for GetMail
func NewGetMailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMailRequest calls the generic PutMail builder with application/json body
func NewPutMailRequest(server string, body PutMailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMailRequestWithBody(server, "application/json", bodyReader)
}

// NewPutMailRequestWithBody generates requests for PutMail with any type of body
func NewPutMailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMailSendRequest calls the generic PostMailSend builder with application/json body
func NewPostMailSendRequest(server string, body PostMailSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMailSendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMailSendRequestWithBody generates requests for PostMailSend with any type of body
func NewPostMailSendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mail/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMultipathRequest generates requests for GetMultipath
func NewGetMultipathRequest(server string, params *GetMultipathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/multipath")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMultipathIdIdRequest generates requests for GetMultipathIdId
func NewGetMultipathIdIdRequest(server string, id string, params *GetMultipathIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/multipath/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNetworkConfigurationRequest generates requests for GetNetworkConfiguration
func NewGetNetworkConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNetworkConfigurationRequest calls the generic PutNetworkConfiguration builder with application/json body
func NewPutNetworkConfigurationRequest(server string, body PutNetworkConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNetworkConfigurationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutNetworkConfigurationRequestWithBody generates requests for PutNetworkConfiguration with any type of body
func NewPutNetworkConfigurationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNetworkGeneralSummaryRequest generates requests for GetNetworkGeneralSummary
func NewGetNetworkGeneralSummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network/general/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNfsRequest generates requests for GetNfs
func NewGetNfsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nfs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNfsRequest calls the generic PutNfs builder with application/json body
func NewPutNfsRequest(server string, body PutNfsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNfsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutNfsRequestWithBody generates requests for PutNfs with any type of body
func NewPutNfsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nfs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNfsAddPrincipalRequest calls the generic PostNfsAddPrincipal builder with application/json body
func NewPostNfsAddPrincipalRequest(server string, body PostNfsAddPrincipalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNfsAddPrincipalRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNfsAddPrincipalRequestWithBody generates requests for PostNfsAddPrincipal with any type of body
func NewPostNfsAddPrincipalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nfs/add_principal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNfsBindipChoicesRequest generates requests for GetNfsBindipChoices
func NewGetNfsBindipChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nfs/bindip_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNisRequest generates requests for GetNis
func NewGetNisRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNisRequest calls the generic PutNis builder with application/json body
func NewPutNisRequest(server string, body PutNisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNisRequestWithBody(server, "application/json", bodyReader)
}

// NewPutNisRequestWithBody generates requests for PutNis with any type of body
func NewPutNisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNisGetStateRequest generates requests for GetNisGetState
func NewGetNisGetStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nis/get_state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpenvpnClientRequest generates requests for GetOpenvpnClient
func NewGetOpenvpnClientRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOpenvpnClientRequest calls the generic PutOpenvpnClient builder with application/json body
func NewPutOpenvpnClientRequest(server string, body PutOpenvpnClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOpenvpnClientRequestWithBody(server, "application/json", bodyReader)
}

// NewPutOpenvpnClientRequestWithBody generates requests for PutOpenvpnClient with any type of body
func NewPutOpenvpnClientRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenvpnClientAuthenticationAlgorithmChoicesRequest generates requests for GetOpenvpnClientAuthenticationAlgorithmChoices
func NewGetOpenvpnClientAuthenticationAlgorithmChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/client/authentication_algorithm_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpenvpnClientCipherChoicesRequest generates requests for GetOpenvpnClientCipherChoices
func NewGetOpenvpnClientCipherChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/client/cipher_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpenvpnServerRequest generates requests for GetOpenvpnServer
func NewGetOpenvpnServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOpenvpnServerRequest calls the generic PutOpenvpnServer builder with application/json body
func NewPutOpenvpnServerRequest(server string, body PutOpenvpnServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOpenvpnServerRequestWithBody(server, "application/json", bodyReader)
}

// NewPutOpenvpnServerRequestWithBody generates requests for PutOpenvpnServer with any type of body
func NewPutOpenvpnServerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenvpnServerAuthenticationAlgorithmChoicesRequest generates requests for GetOpenvpnServerAuthenticationAlgorithmChoices
func NewGetOpenvpnServerAuthenticationAlgorithmChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/server/authentication_algorithm_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpenvpnServerCipherChoicesRequest generates requests for GetOpenvpnServerCipherChoices
func NewGetOpenvpnServerCipherChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/server/cipher_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOpenvpnServerClientConfigurationGenerationRequest calls the generic PostOpenvpnServerClientConfigurationGeneration builder with application/json body
func NewPostOpenvpnServerClientConfigurationGenerationRequest(server string, body PostOpenvpnServerClientConfigurationGenerationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOpenvpnServerClientConfigurationGenerationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOpenvpnServerClientConfigurationGenerationRequestWithBody generates requests for PostOpenvpnServerClientConfigurationGeneration with any type of body
func NewPostOpenvpnServerClientConfigurationGenerationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/server/client_configuration_generation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenvpnServerRenewStaticKeyRequest generates requests for GetOpenvpnServerRenewStaticKey
func NewGetOpenvpnServerRenewStaticKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openvpn/server/renew_static_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginRequest generates requests for GetPlugin
func NewGetPluginRequest(server string, params *GetPluginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPluginRequest calls the generic PostPlugin builder with application/json body
func NewPostPluginRequest(server string, body PostPluginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginRequestWithBody generates requests for PostPlugin with any type of body
func NewPostPluginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPluginAvailableRequest calls the generic PostPluginAvailable builder with application/json body
func NewPostPluginAvailableRequest(server string, body PostPluginAvailableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginAvailableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginAvailableRequestWithBody generates requests for PostPluginAvailable with any type of body
func NewPostPluginAvailableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPluginBranchesChoicesRequest calls the generic PostPluginBranchesChoices builder with application/json body
func NewPostPluginBranchesChoicesRequest(server string, body PostPluginBranchesChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginBranchesChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginBranchesChoicesRequestWithBody generates requests for PostPluginBranchesChoices with any type of body
func NewPostPluginBranchesChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/branches_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPluginDefaultsRequest calls the generic PostPluginDefaults builder with application/json body
func NewPostPluginDefaultsRequest(server string, body PostPluginDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginDefaultsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginDefaultsRequestWithBody generates requests for PostPluginDefaults with any type of body
func NewPostPluginDefaultsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/defaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePluginIdIdRequest generates requests for DeletePluginIdId
func NewDeletePluginIdIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginIdIdRequest generates requests for GetPluginIdId
func NewGetPluginIdIdRequest(server string, id string, params *GetPluginIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPluginIdIdRequest calls the generic PutPluginIdId builder with application/json body
func NewPutPluginIdIdRequest(server string, id string, body PutPluginIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPluginIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPluginIdIdRequestWithBody generates requests for PutPluginIdId with any type of body
func NewPutPluginIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPluginOfficialRepositoriesRequest generates requests for GetPluginOfficialRepositories
func NewGetPluginOfficialRepositoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/official_repositories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginRetrieveVersionsForReposRequest generates requests for GetPluginRetrieveVersionsForRepos
func NewGetPluginRetrieveVersionsForReposRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/retrieve_versions_for_repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPluginUpdatePluginRequest calls the generic PostPluginUpdatePlugin builder with application/json body
func NewPostPluginUpdatePluginRequest(server string, body PostPluginUpdatePluginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginUpdatePluginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginUpdatePluginRequestWithBody generates requests for PostPluginUpdatePlugin with any type of body
func NewPostPluginUpdatePluginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plugin/update_plugin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolRequest generates requests for GetPool
func NewGetPoolRequest(server string, params *GetPoolParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolRequest calls the generic PostPool builder with application/json body
func NewPostPoolRequest(server string, body PostPoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolRequestWithBody generates requests for PostPool with any type of body
func NewPostPoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolAttachRequest calls the generic PostPoolAttach builder with application/json body
func NewPostPoolAttachRequest(server string, body PostPoolAttachJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolAttachRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolAttachRequestWithBody generates requests for PostPoolAttach with any type of body
func NewPostPoolAttachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/attach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolDatasetRequest generates requests for GetPoolDataset
func NewGetPoolDatasetRequest(server string, params *GetPoolDatasetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolDatasetRequest calls the generic PostPoolDataset builder with application/json body
func NewPostPoolDatasetRequest(server string, body PostPoolDatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetRequestWithBody generates requests for PostPoolDataset with any type of body
func NewPostPoolDatasetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetChangeKeyRequest calls the generic PostPoolDatasetChangeKey builder with application/json body
func NewPostPoolDatasetChangeKeyRequest(server string, body PostPoolDatasetChangeKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetChangeKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetChangeKeyRequestWithBody generates requests for PostPoolDatasetChangeKey with any type of body
func NewPostPoolDatasetChangeKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/change_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolDatasetCompressionChoicesRequest generates requests for GetPoolDatasetCompressionChoices
func NewGetPoolDatasetCompressionChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/compression_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolDatasetEncryptionAlgorithmChoicesRequest generates requests for GetPoolDatasetEncryptionAlgorithmChoices
func NewGetPoolDatasetEncryptionAlgorithmChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/encryption_algorithm_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolDatasetEncryptionSummaryRequest calls the generic PostPoolDatasetEncryptionSummary builder with application/json body
func NewPostPoolDatasetEncryptionSummaryRequest(server string, body PostPoolDatasetEncryptionSummaryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetEncryptionSummaryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetEncryptionSummaryRequestWithBody generates requests for PostPoolDatasetEncryptionSummary with any type of body
func NewPostPoolDatasetEncryptionSummaryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/encryption_summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetExportKeyRequest calls the generic PostPoolDatasetExportKey builder with application/json body
func NewPostPoolDatasetExportKeyRequest(server string, body PostPoolDatasetExportKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetExportKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetExportKeyRequestWithBody generates requests for PostPoolDatasetExportKey with any type of body
func NewPostPoolDatasetExportKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/export_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePoolDatasetIdIdRequest calls the generic DeletePoolDatasetIdId builder with application/json body
func NewDeletePoolDatasetIdIdRequest(server string, id string, body DeletePoolDatasetIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeletePoolDatasetIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeletePoolDatasetIdIdRequestWithBody generates requests for DeletePoolDatasetIdId with any type of body
func NewDeletePoolDatasetIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolDatasetIdIdRequest generates requests for GetPoolDatasetIdId
func NewGetPoolDatasetIdIdRequest(server string, id string, params *GetPoolDatasetIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolDatasetIdIdRequest calls the generic PutPoolDatasetIdId builder with application/json body
func NewPutPoolDatasetIdIdRequest(server string, id string, body PutPoolDatasetIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolDatasetIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolDatasetIdIdRequestWithBody generates requests for PutPoolDatasetIdId with any type of body
func NewPutPoolDatasetIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdAttachmentsRequest calls the generic PostPoolDatasetIdIdAttachments builder with application/json body
func NewPostPoolDatasetIdIdAttachmentsRequest(server string, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdAttachmentsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdAttachmentsRequestWithBody generates requests for PostPoolDatasetIdIdAttachments with any type of body
func NewPostPoolDatasetIdIdAttachmentsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdGetQuotaRequest calls the generic PostPoolDatasetIdIdGetQuota builder with application/json body
func NewPostPoolDatasetIdIdGetQuotaRequest(server string, id string, body PostPoolDatasetIdIdGetQuotaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdGetQuotaRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdGetQuotaRequestWithBody generates requests for PostPoolDatasetIdIdGetQuota with any type of body
func NewPostPoolDatasetIdIdGetQuotaRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s/get_quota", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdPermissionRequest calls the generic PostPoolDatasetIdIdPermission builder with application/json body
func NewPostPoolDatasetIdIdPermissionRequest(server string, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdPermissionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdPermissionRequestWithBody generates requests for PostPoolDatasetIdIdPermission with any type of body
func NewPostPoolDatasetIdIdPermissionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s/permission", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdProcessesRequest calls the generic PostPoolDatasetIdIdProcesses builder with application/json body
func NewPostPoolDatasetIdIdProcessesRequest(server string, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdProcessesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdProcessesRequestWithBody generates requests for PostPoolDatasetIdIdProcesses with any type of body
func NewPostPoolDatasetIdIdProcessesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s/processes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdPromoteRequest calls the generic PostPoolDatasetIdIdPromote builder with application/json body
func NewPostPoolDatasetIdIdPromoteRequest(server string, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdPromoteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdPromoteRequestWithBody generates requests for PostPoolDatasetIdIdPromote with any type of body
func NewPostPoolDatasetIdIdPromoteRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s/promote", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdSetQuotaRequest calls the generic PostPoolDatasetIdIdSetQuota builder with application/json body
func NewPostPoolDatasetIdIdSetQuotaRequest(server string, id string, body PostPoolDatasetIdIdSetQuotaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdSetQuotaRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdSetQuotaRequestWithBody generates requests for PostPoolDatasetIdIdSetQuota with any type of body
func NewPostPoolDatasetIdIdSetQuotaRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/id/%s/set_quota", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetInheritParentEncryptionPropertiesRequest calls the generic PostPoolDatasetInheritParentEncryptionProperties builder with application/json body
func NewPostPoolDatasetInheritParentEncryptionPropertiesRequest(server string, body PostPoolDatasetInheritParentEncryptionPropertiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetInheritParentEncryptionPropertiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetInheritParentEncryptionPropertiesRequestWithBody generates requests for PostPoolDatasetInheritParentEncryptionProperties with any type of body
func NewPostPoolDatasetInheritParentEncryptionPropertiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/inherit_parent_encryption_properties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetLockRequest calls the generic PostPoolDatasetLock builder with application/json body
func NewPostPoolDatasetLockRequest(server string, body PostPoolDatasetLockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetLockRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetLockRequestWithBody generates requests for PostPoolDatasetLock with any type of body
func NewPostPoolDatasetLockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/lock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetRecommendedZvolBlocksizeRequest calls the generic PostPoolDatasetRecommendedZvolBlocksize builder with application/json body
func NewPostPoolDatasetRecommendedZvolBlocksizeRequest(server string, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetRecommendedZvolBlocksizeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetRecommendedZvolBlocksizeRequestWithBody generates requests for PostPoolDatasetRecommendedZvolBlocksize with any type of body
func NewPostPoolDatasetRecommendedZvolBlocksizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/recommended_zvol_blocksize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetUnlockRequest calls the generic PostPoolDatasetUnlock builder with application/json body
func NewPostPoolDatasetUnlockRequest(server string, body PostPoolDatasetUnlockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetUnlockRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetUnlockRequestWithBody generates requests for PostPoolDatasetUnlock with any type of body
func NewPostPoolDatasetUnlockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/unlock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolDatasetUserpropRequest generates requests for GetPoolDatasetUserprop
func NewGetPoolDatasetUserpropRequest(server string, params *GetPoolDatasetUserpropParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/userprop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolDatasetUserpropRequest calls the generic PostPoolDatasetUserprop builder with application/json body
func NewPostPoolDatasetUserpropRequest(server string, body PostPoolDatasetUserpropJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetUserpropRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetUserpropRequestWithBody generates requests for PostPoolDatasetUserprop with any type of body
func NewPostPoolDatasetUserpropRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/userprop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePoolDatasetUserpropIdIdRequest calls the generic DeletePoolDatasetUserpropIdId builder with application/json body
func NewDeletePoolDatasetUserpropIdIdRequest(server string, id string, body DeletePoolDatasetUserpropIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeletePoolDatasetUserpropIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeletePoolDatasetUserpropIdIdRequestWithBody generates requests for DeletePoolDatasetUserpropIdId with any type of body
func NewDeletePoolDatasetUserpropIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/userprop/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolDatasetUserpropIdIdRequest generates requests for GetPoolDatasetUserpropIdId
func NewGetPoolDatasetUserpropIdIdRequest(server string, id string, params *GetPoolDatasetUserpropIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/userprop/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolDatasetUserpropIdIdRequest calls the generic PutPoolDatasetUserpropIdId builder with application/json body
func NewPutPoolDatasetUserpropIdIdRequest(server string, id string, body PutPoolDatasetUserpropIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolDatasetUserpropIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolDatasetUserpropIdIdRequestWithBody generates requests for PutPoolDatasetUserpropIdId with any type of body
func NewPutPoolDatasetUserpropIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/dataset/userprop/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolFilesystemChoicesRequest calls the generic PostPoolFilesystemChoices builder with application/json body
func NewPostPoolFilesystemChoicesRequest(server string, body PostPoolFilesystemChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolFilesystemChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolFilesystemChoicesRequestWithBody generates requests for PostPoolFilesystemChoices with any type of body
func NewPostPoolFilesystemChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/filesystem_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolIdIdRequest generates requests for GetPoolIdId
func NewGetPoolIdIdRequest(server string, id int, params *GetPoolIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolIdIdRequest calls the generic PutPoolIdId builder with application/json body
func NewPutPoolIdIdRequest(server string, id int, body PutPoolIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolIdIdRequestWithBody generates requests for PutPoolIdId with any type of body
func NewPutPoolIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdAttachmentsRequest calls the generic PostPoolIdIdAttachments builder with application/json body
func NewPostPoolIdIdAttachmentsRequest(server string, id int, body PostPoolIdIdAttachmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdAttachmentsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdAttachmentsRequestWithBody generates requests for PostPoolIdIdAttachments with any type of body
func NewPostPoolIdIdAttachmentsRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdDetachRequest calls the generic PostPoolIdIdDetach builder with application/json body
func NewPostPoolIdIdDetachRequest(server string, id int, body PostPoolIdIdDetachJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdDetachRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdDetachRequestWithBody generates requests for PostPoolIdIdDetach with any type of body
func NewPostPoolIdIdDetachRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/detach", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdDownloadEncryptionKeyRequest calls the generic PostPoolIdIdDownloadEncryptionKey builder with application/json body
func NewPostPoolIdIdDownloadEncryptionKeyRequest(server string, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdDownloadEncryptionKeyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdDownloadEncryptionKeyRequestWithBody generates requests for PostPoolIdIdDownloadEncryptionKey with any type of body
func NewPostPoolIdIdDownloadEncryptionKeyRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/download_encryption_key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdExpandRequest calls the generic PostPoolIdIdExpand builder with application/json body
func NewPostPoolIdIdExpandRequest(server string, id int, body PostPoolIdIdExpandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdExpandRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdExpandRequestWithBody generates requests for PostPoolIdIdExpand with any type of body
func NewPostPoolIdIdExpandRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/expand", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdExportRequest calls the generic PostPoolIdIdExport builder with application/json body
func NewPostPoolIdIdExportRequest(server string, id int, body PostPoolIdIdExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdExportRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdExportRequestWithBody generates requests for PostPoolIdIdExport with any type of body
func NewPostPoolIdIdExportRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdGetDisksRequest calls the generic PostPoolIdIdGetDisks builder with application/json body
func NewPostPoolIdIdGetDisksRequest(server string, id int, body PostPoolIdIdGetDisksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdGetDisksRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdGetDisksRequestWithBody generates requests for PostPoolIdIdGetDisks with any type of body
func NewPostPoolIdIdGetDisksRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/get_disks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdIsUpgradedRequest calls the generic PostPoolIdIdIsUpgraded builder with application/json body
func NewPostPoolIdIdIsUpgradedRequest(server string, id int, body PostPoolIdIdIsUpgradedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdIsUpgradedRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdIsUpgradedRequestWithBody generates requests for PostPoolIdIdIsUpgraded with any type of body
func NewPostPoolIdIdIsUpgradedRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/is_upgraded", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdLockRequest calls the generic PostPoolIdIdLock builder with application/json body
func NewPostPoolIdIdLockRequest(server string, id int, body PostPoolIdIdLockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdLockRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdLockRequestWithBody generates requests for PostPoolIdIdLock with any type of body
func NewPostPoolIdIdLockRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/lock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdOfflineRequest calls the generic PostPoolIdIdOffline builder with application/json body
func NewPostPoolIdIdOfflineRequest(server string, id int, body PostPoolIdIdOfflineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdOfflineRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdOfflineRequestWithBody generates requests for PostPoolIdIdOffline with any type of body
func NewPostPoolIdIdOfflineRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/offline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdOnlineRequest calls the generic PostPoolIdIdOnline builder with application/json body
func NewPostPoolIdIdOnlineRequest(server string, id int, body PostPoolIdIdOnlineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdOnlineRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdOnlineRequestWithBody generates requests for PostPoolIdIdOnline with any type of body
func NewPostPoolIdIdOnlineRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/online", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdPassphraseRequest calls the generic PostPoolIdIdPassphrase builder with application/json body
func NewPostPoolIdIdPassphraseRequest(server string, id int, body PostPoolIdIdPassphraseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdPassphraseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdPassphraseRequestWithBody generates requests for PostPoolIdIdPassphrase with any type of body
func NewPostPoolIdIdPassphraseRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/passphrase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdProcessesRequest calls the generic PostPoolIdIdProcesses builder with application/json body
func NewPostPoolIdIdProcessesRequest(server string, id int, body PostPoolIdIdProcessesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdProcessesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdProcessesRequestWithBody generates requests for PostPoolIdIdProcesses with any type of body
func NewPostPoolIdIdProcessesRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/processes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdRecoverykeyRmRequest calls the generic PostPoolIdIdRecoverykeyRm builder with application/json body
func NewPostPoolIdIdRecoverykeyRmRequest(server string, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdRecoverykeyRmRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdRecoverykeyRmRequestWithBody generates requests for PostPoolIdIdRecoverykeyRm with any type of body
func NewPostPoolIdIdRecoverykeyRmRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/recoverykey_rm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdRekeyRequest calls the generic PostPoolIdIdRekey builder with application/json body
func NewPostPoolIdIdRekeyRequest(server string, id int, body PostPoolIdIdRekeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdRekeyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdRekeyRequestWithBody generates requests for PostPoolIdIdRekey with any type of body
func NewPostPoolIdIdRekeyRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/rekey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdRemoveRequest calls the generic PostPoolIdIdRemove builder with application/json body
func NewPostPoolIdIdRemoveRequest(server string, id int, body PostPoolIdIdRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdRemoveRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdRemoveRequestWithBody generates requests for PostPoolIdIdRemove with any type of body
func NewPostPoolIdIdRemoveRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdReplaceRequest calls the generic PostPoolIdIdReplace builder with application/json body
func NewPostPoolIdIdReplaceRequest(server string, id int, body PostPoolIdIdReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdReplaceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdReplaceRequestWithBody generates requests for PostPoolIdIdReplace with any type of body
func NewPostPoolIdIdReplaceRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/replace", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdScrubRequest calls the generic PostPoolIdIdScrub builder with application/json body
func NewPostPoolIdIdScrubRequest(server string, id int, body PostPoolIdIdScrubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdScrubRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdScrubRequestWithBody generates requests for PostPoolIdIdScrub with any type of body
func NewPostPoolIdIdScrubRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/scrub", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdUnlockRequest calls the generic PostPoolIdIdUnlock builder with application/json body
func NewPostPoolIdIdUnlockRequest(server string, id int, body PostPoolIdIdUnlockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdUnlockRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdUnlockRequestWithBody generates requests for PostPoolIdIdUnlock with any type of body
func NewPostPoolIdIdUnlockRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/unlock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdUpgradeRequest calls the generic PostPoolIdIdUpgrade builder with application/json body
func NewPostPoolIdIdUpgradeRequest(server string, id int, body PostPoolIdIdUpgradeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdUpgradeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdUpgradeRequestWithBody generates requests for PostPoolIdIdUpgrade with any type of body
func NewPostPoolIdIdUpgradeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/id/%s/upgrade", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolImportDiskRequest calls the generic PostPoolImportDisk builder with application/json body
func NewPostPoolImportDiskRequest(server string, body PostPoolImportDiskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolImportDiskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolImportDiskRequestWithBody generates requests for PostPoolImportDisk with any type of body
func NewPostPoolImportDiskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/import_disk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolImportDiskAutodetectFsTypeRequest calls the generic PostPoolImportDiskAutodetectFsType builder with application/json body
func NewPostPoolImportDiskAutodetectFsTypeRequest(server string, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolImportDiskAutodetectFsTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolImportDiskAutodetectFsTypeRequestWithBody generates requests for PostPoolImportDiskAutodetectFsType with any type of body
func NewPostPoolImportDiskAutodetectFsTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/import_disk_autodetect_fs_type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolImportDiskMsdosfsLocalesRequest generates requests for GetPoolImportDiskMsdosfsLocales
func NewGetPoolImportDiskMsdosfsLocalesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/import_disk_msdosfs_locales")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolImportFindRequest generates requests for GetPoolImportFind
func NewGetPoolImportFindRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/import_find")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolImportPoolRequest calls the generic PostPoolImportPool builder with application/json body
func NewPostPoolImportPoolRequest(server string, body PostPoolImportPoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolImportPoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolImportPoolRequestWithBody generates requests for PostPoolImportPool with any type of body
func NewPostPoolImportPoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/import_pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolResilverRequest generates requests for GetPoolResilver
func NewGetPoolResilverRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/resilver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolResilverRequest calls the generic PutPoolResilver builder with application/json body
func NewPutPoolResilverRequest(server string, body PutPoolResilverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolResilverRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPoolResilverRequestWithBody generates requests for PutPoolResilver with any type of body
func NewPutPoolResilverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/resilver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolScrubRequest generates requests for GetPoolScrub
func NewGetPoolScrubRequest(server string, params *GetPoolScrubParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/scrub")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolScrubRequest calls the generic PostPoolScrub builder with application/json body
func NewPostPoolScrubRequest(server string, body PostPoolScrubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolScrubRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolScrubRequestWithBody generates requests for PostPoolScrub with any type of body
func NewPostPoolScrubRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/scrub")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePoolScrubIdIdRequest generates requests for DeletePoolScrubIdId
func NewDeletePoolScrubIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/scrub/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolScrubIdIdRequest generates requests for GetPoolScrubIdId
func NewGetPoolScrubIdIdRequest(server string, id int, params *GetPoolScrubIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/scrub/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolScrubIdIdRequest calls the generic PutPoolScrubIdId builder with application/json body
func NewPutPoolScrubIdIdRequest(server string, id int, body PutPoolScrubIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolScrubIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolScrubIdIdRequestWithBody generates requests for PutPoolScrubIdId with any type of body
func NewPutPoolScrubIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/scrub/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolScrubRunRequest calls the generic PostPoolScrubRun builder with application/json body
func NewPostPoolScrubRunRequest(server string, body PostPoolScrubRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolScrubRunRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolScrubRunRequestWithBody generates requests for PostPoolScrubRun with any type of body
func NewPostPoolScrubRunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/scrub/run")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolSnapshottaskRequest generates requests for GetPoolSnapshottask
func NewGetPoolSnapshottaskRequest(server string, params *GetPoolSnapshottaskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/snapshottask")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolSnapshottaskRequest calls the generic PostPoolSnapshottask builder with application/json body
func NewPostPoolSnapshottaskRequest(server string, body PostPoolSnapshottaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolSnapshottaskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolSnapshottaskRequestWithBody generates requests for PostPoolSnapshottask with any type of body
func NewPostPoolSnapshottaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/snapshottask")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePoolSnapshottaskIdIdRequest generates requests for DeletePoolSnapshottaskIdId
func NewDeletePoolSnapshottaskIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/snapshottask/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolSnapshottaskIdIdRequest generates requests for GetPoolSnapshottaskIdId
func NewGetPoolSnapshottaskIdIdRequest(server string, id int, params *GetPoolSnapshottaskIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/snapshottask/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolSnapshottaskIdIdRequest calls the generic PutPoolSnapshottaskIdId builder with application/json body
func NewPutPoolSnapshottaskIdIdRequest(server string, id int, body PutPoolSnapshottaskIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolSnapshottaskIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolSnapshottaskIdIdRequestWithBody generates requests for PutPoolSnapshottaskIdId with any type of body
func NewPutPoolSnapshottaskIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/snapshottask/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolSnapshottaskIdIdRunRequest calls the generic PostPoolSnapshottaskIdIdRun builder with application/json body
func NewPostPoolSnapshottaskIdIdRunRequest(server string, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolSnapshottaskIdIdRunRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolSnapshottaskIdIdRunRequestWithBody generates requests for PostPoolSnapshottaskIdIdRun with any type of body
func NewPostPoolSnapshottaskIdIdRunRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/snapshottask/id/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolUnlockServicesRestartChoicesRequest calls the generic PostPoolUnlockServicesRestartChoices builder with application/json body
func NewPostPoolUnlockServicesRestartChoicesRequest(server string, body PostPoolUnlockServicesRestartChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolUnlockServicesRestartChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolUnlockServicesRestartChoicesRequestWithBody generates requests for PostPoolUnlockServicesRestartChoices with any type of body
func NewPostPoolUnlockServicesRestartChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pool/unlock_services_restart_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReplicationRequest generates requests for GetReplication
func NewGetReplicationRequest(server string, params *GetReplicationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostReplicationRequest calls the generic PostReplication builder with application/json body
func NewPostReplicationRequest(server string, body PostReplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationRequestWithBody generates requests for PostReplication with any type of body
func NewPostReplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReplicationConfigRequest generates requests for GetReplicationConfig
func NewGetReplicationConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutReplicationConfigRequest calls the generic PutReplicationConfig builder with application/json body
func NewPutReplicationConfigRequest(server string, body PutReplicationConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutReplicationConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewPutReplicationConfigRequestWithBody generates requests for PutReplicationConfig with any type of body
func NewPutReplicationConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationCountEligibleManualSnapshotsRequest calls the generic PostReplicationCountEligibleManualSnapshots builder with application/json body
func NewPostReplicationCountEligibleManualSnapshotsRequest(server string, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationCountEligibleManualSnapshotsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationCountEligibleManualSnapshotsRequestWithBody generates requests for PostReplicationCountEligibleManualSnapshots with any type of body
func NewPostReplicationCountEligibleManualSnapshotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/count_eligible_manual_snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationCreateDatasetRequest calls the generic PostReplicationCreateDataset builder with application/json body
func NewPostReplicationCreateDatasetRequest(server string, body PostReplicationCreateDatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationCreateDatasetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationCreateDatasetRequestWithBody generates requests for PostReplicationCreateDataset with any type of body
func NewPostReplicationCreateDatasetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/create_dataset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteReplicationIdIdRequest generates requests for DeleteReplicationIdId
func NewDeleteReplicationIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReplicationIdIdRequest generates requests for GetReplicationIdId
func NewGetReplicationIdIdRequest(server string, id int, params *GetReplicationIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutReplicationIdIdRequest calls the generic PutReplicationIdId builder with application/json body
func NewPutReplicationIdIdRequest(server string, id int, body PutReplicationIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutReplicationIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutReplicationIdIdRequestWithBody generates requests for PutReplicationIdId with any type of body
func NewPutReplicationIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationIdIdRestoreRequest calls the generic PostReplicationIdIdRestore builder with application/json body
func NewPostReplicationIdIdRestoreRequest(server string, id int, body PostReplicationIdIdRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationIdIdRestoreRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostReplicationIdIdRestoreRequestWithBody generates requests for PostReplicationIdIdRestore with any type of body
func NewPostReplicationIdIdRestoreRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/id/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationIdIdRunRequest calls the generic PostReplicationIdIdRun builder with application/json body
func NewPostReplicationIdIdRunRequest(server string, id int, body PostReplicationIdIdRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationIdIdRunRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostReplicationIdIdRunRequestWithBody generates requests for PostReplicationIdIdRun with any type of body
func NewPostReplicationIdIdRunRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/id/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationListDatasetsRequest calls the generic PostReplicationListDatasets builder with application/json body
func NewPostReplicationListDatasetsRequest(server string, body PostReplicationListDatasetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationListDatasetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationListDatasetsRequestWithBody generates requests for PostReplicationListDatasets with any type of body
func NewPostReplicationListDatasetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/list_datasets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReplicationListNamingSchemasRequest generates requests for GetReplicationListNamingSchemas
func NewGetReplicationListNamingSchemasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/list_naming_schemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostReplicationTargetUnmatchedSnapshotsRequest calls the generic PostReplicationTargetUnmatchedSnapshots builder with application/json body
func NewPostReplicationTargetUnmatchedSnapshotsRequest(server string, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationTargetUnmatchedSnapshotsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationTargetUnmatchedSnapshotsRequestWithBody generates requests for PostReplicationTargetUnmatchedSnapshots with any type of body
func NewPostReplicationTargetUnmatchedSnapshotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/target_unmatched_snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportingRequest generates requests for GetReporting
func NewGetReportingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reporting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutReportingRequest calls the generic PutReporting builder with application/json body
func NewPutReportingRequest(server string, body PutReportingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutReportingRequestWithBody(server, "application/json", bodyReader)
}

// NewPutReportingRequestWithBody generates requests for PutReporting with any type of body
func NewPutReportingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reporting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReportingGetDataRequest calls the generic PostReportingGetData builder with application/json body
func NewPostReportingGetDataRequest(server string, body PostReportingGetDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReportingGetDataRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReportingGetDataRequestWithBody generates requests for PostReportingGetData with any type of body
func NewPostReportingGetDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reporting/get_data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportingGraphsRequest generates requests for GetReportingGraphs
func NewGetReportingGraphsRequest(server string, params *GetReportingGraphsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reporting/graphs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRouteIpv4gwReachableRequest calls the generic PostRouteIpv4gwReachable builder with application/json body
func NewPostRouteIpv4gwReachableRequest(server string, body PostRouteIpv4gwReachableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRouteIpv4gwReachableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRouteIpv4gwReachableRequestWithBody generates requests for PostRouteIpv4gwReachable with any type of body
func NewPostRouteIpv4gwReachableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/route/ipv4gw_reachable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRouteSystemRoutesRequest generates requests for GetRouteSystemRoutes
func NewGetRouteSystemRoutesRequest(server string, params *GetRouteSystemRoutesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/route/system_routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRsyncdRequest generates requests for GetRsyncd
func NewGetRsyncdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsyncd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRsyncdRequest calls the generic PutRsyncd builder with application/json body
func NewPutRsyncdRequest(server string, body PutRsyncdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRsyncdRequestWithBody(server, "application/json", bodyReader)
}

// NewPutRsyncdRequestWithBody generates requests for PutRsyncd with any type of body
func NewPutRsyncdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsyncd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRsyncmodRequest generates requests for GetRsyncmod
func NewGetRsyncmodRequest(server string, params *GetRsyncmodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsyncmod")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRsyncmodRequest calls the generic PostRsyncmod builder with application/json body
func NewPostRsyncmodRequest(server string, body PostRsyncmodJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRsyncmodRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRsyncmodRequestWithBody generates requests for PostRsyncmod with any type of body
func NewPostRsyncmodRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsyncmod")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRsyncmodIdIdRequest generates requests for DeleteRsyncmodIdId
func NewDeleteRsyncmodIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsyncmod/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRsyncmodIdIdRequest generates requests for GetRsyncmodIdId
func NewGetRsyncmodIdIdRequest(server string, id int, params *GetRsyncmodIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsyncmod/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRsyncmodIdIdRequest calls the generic PutRsyncmodIdId builder with application/json body
func NewPutRsyncmodIdIdRequest(server string, id int, body PutRsyncmodIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRsyncmodIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutRsyncmodIdIdRequestWithBody generates requests for PutRsyncmodIdId with any type of body
func NewPutRsyncmodIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsyncmod/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRsynctaskRequest generates requests for GetRsynctask
func NewGetRsynctaskRequest(server string, params *GetRsynctaskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsynctask")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRsynctaskRequest calls the generic PostRsynctask builder with application/json body
func NewPostRsynctaskRequest(server string, body PostRsynctaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRsynctaskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRsynctaskRequestWithBody generates requests for PostRsynctask with any type of body
func NewPostRsynctaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsynctask")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRsynctaskIdIdRequest generates requests for DeleteRsynctaskIdId
func NewDeleteRsynctaskIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsynctask/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRsynctaskIdIdRequest generates requests for GetRsynctaskIdId
func NewGetRsynctaskIdIdRequest(server string, id int, params *GetRsynctaskIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsynctask/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRsynctaskIdIdRequest calls the generic PutRsynctaskIdId builder with application/json body
func NewPutRsynctaskIdIdRequest(server string, id int, body PutRsynctaskIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRsynctaskIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutRsynctaskIdIdRequestWithBody generates requests for PutRsynctaskIdId with any type of body
func NewPutRsynctaskIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsynctask/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRsynctaskIdIdRunRequest calls the generic PostRsynctaskIdIdRun builder with application/json body
func NewPostRsynctaskIdIdRunRequest(server string, id int, body PostRsynctaskIdIdRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRsynctaskIdIdRunRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostRsynctaskIdIdRunRequestWithBody generates requests for PostRsynctaskIdIdRun with any type of body
func NewPostRsynctaskIdIdRunRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rsynctask/id/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetS3Request generates requests for GetS3
func NewGetS3Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/s3")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutS3Request calls the generic PutS3 builder with application/json body
func NewPutS3Request(server string, body PutS3JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutS3RequestWithBody(server, "application/json", bodyReader)
}

// NewPutS3RequestWithBody generates requests for PutS3 with any type of body
func NewPutS3RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/s3")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetS3BindipChoicesRequest generates requests for GetS3BindipChoices
func NewGetS3BindipChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/s3/bindip_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSensorQueryRequest generates requests for GetSensorQuery
func NewGetSensorQueryRequest(server string, params *GetSensorQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sensor/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, params *GetServiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceIdIdRequest generates requests for GetServiceIdId
func NewGetServiceIdIdRequest(server string, id int, params *GetServiceIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutServiceIdIdRequest calls the generic PutServiceIdId builder with application/json body
func NewPutServiceIdIdRequest(server string, id int, body PutServiceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutServiceIdIdRequestWithBody generates requests for PutServiceIdId with any type of body
func NewPutServiceIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceReloadRequest calls the generic PostServiceReload builder with application/json body
func NewPostServiceReloadRequest(server string, body PostServiceReloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceReloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceReloadRequestWithBody generates requests for PostServiceReload with any type of body
func NewPostServiceReloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/reload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceRestartRequest calls the generic PostServiceRestart builder with application/json body
func NewPostServiceRestartRequest(server string, body PostServiceRestartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceRestartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceRestartRequestWithBody generates requests for PostServiceRestart with any type of body
func NewPostServiceRestartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceStartRequest calls the generic PostServiceStart builder with application/json body
func NewPostServiceStartRequest(server string, body PostServiceStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceStartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceStartRequestWithBody generates requests for PostServiceStart with any type of body
func NewPostServiceStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceStartedRequest generates requests for GetServiceStarted
func NewGetServiceStartedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/started")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceStopRequest calls the generic PostServiceStop builder with application/json body
func NewPostServiceStopRequest(server string, body PostServiceStopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceStopRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceStopRequestWithBody generates requests for PostServiceStop with any type of body
func NewPostServiceStopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceTerminateProcessRequest calls the generic PostServiceTerminateProcess builder with application/json body
func NewPostServiceTerminateProcessRequest(server string, body PostServiceTerminateProcessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceTerminateProcessRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceTerminateProcessRequestWithBody generates requests for PostServiceTerminateProcess with any type of body
func NewPostServiceTerminateProcessRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/terminate_process")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingAfpRequest generates requests for GetSharingAfp
func NewGetSharingAfpRequest(server string, params *GetSharingAfpParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/afp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSharingAfpRequest calls the generic PostSharingAfp builder with application/json body
func NewPostSharingAfpRequest(server string, body PostSharingAfpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharingAfpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharingAfpRequestWithBody generates requests for PostSharingAfp with any type of body
func NewPostSharingAfpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/afp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSharingAfpIdIdRequest generates requests for DeleteSharingAfpIdId
func NewDeleteSharingAfpIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/afp/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingAfpIdIdRequest generates requests for GetSharingAfpIdId
func NewGetSharingAfpIdIdRequest(server string, id int, params *GetSharingAfpIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/afp/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSharingAfpIdIdRequest calls the generic PutSharingAfpIdId builder with application/json body
func NewPutSharingAfpIdIdRequest(server string, id int, body PutSharingAfpIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSharingAfpIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSharingAfpIdIdRequestWithBody generates requests for PutSharingAfpIdId with any type of body
func NewPutSharingAfpIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/afp/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingNfsRequest generates requests for GetSharingNfs
func NewGetSharingNfsRequest(server string, params *GetSharingNfsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/nfs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSharingNfsRequest calls the generic PostSharingNfs builder with application/json body
func NewPostSharingNfsRequest(server string, body PostSharingNfsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharingNfsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharingNfsRequestWithBody generates requests for PostSharingNfs with any type of body
func NewPostSharingNfsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/nfs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingNfsHumanIdentifierRequest generates requests for GetSharingNfsHumanIdentifier
func NewGetSharingNfsHumanIdentifierRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/nfs/human_identifier")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSharingNfsIdIdRequest generates requests for DeleteSharingNfsIdId
func NewDeleteSharingNfsIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/nfs/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingNfsIdIdRequest generates requests for GetSharingNfsIdId
func NewGetSharingNfsIdIdRequest(server string, id int, params *GetSharingNfsIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/nfs/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSharingNfsIdIdRequest calls the generic PutSharingNfsIdId builder with application/json body
func NewPutSharingNfsIdIdRequest(server string, id int, body PutSharingNfsIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSharingNfsIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSharingNfsIdIdRequestWithBody generates requests for PutSharingNfsIdId with any type of body
func NewPutSharingNfsIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/nfs/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingSmbRequest generates requests for GetSharingSmb
func NewGetSharingSmbRequest(server string, params *GetSharingSmbParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/smb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSharingSmbRequest calls the generic PostSharingSmb builder with application/json body
func NewPostSharingSmbRequest(server string, body PostSharingSmbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharingSmbRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharingSmbRequestWithBody generates requests for PostSharingSmb with any type of body
func NewPostSharingSmbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/smb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSharingSmbIdIdRequest generates requests for DeleteSharingSmbIdId
func NewDeleteSharingSmbIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/smb/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingSmbIdIdRequest generates requests for GetSharingSmbIdId
func NewGetSharingSmbIdIdRequest(server string, id int, params *GetSharingSmbIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/smb/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSharingSmbIdIdRequest calls the generic PutSharingSmbIdId builder with application/json body
func NewPutSharingSmbIdIdRequest(server string, id int, body PutSharingSmbIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSharingSmbIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSharingSmbIdIdRequestWithBody generates requests for PutSharingSmbIdId with any type of body
func NewPutSharingSmbIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/smb/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingSmbPresetsRequest generates requests for GetSharingSmbPresets
func NewGetSharingSmbPresetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/smb/presets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingWebdavRequest generates requests for GetSharingWebdav
func NewGetSharingWebdavRequest(server string, params *GetSharingWebdavParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/webdav")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSharingWebdavRequest calls the generic PostSharingWebdav builder with application/json body
func NewPostSharingWebdavRequest(server string, body PostSharingWebdavJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharingWebdavRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharingWebdavRequestWithBody generates requests for PostSharingWebdav with any type of body
func NewPostSharingWebdavRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/webdav")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSharingWebdavIdIdRequest generates requests for DeleteSharingWebdavIdId
func NewDeleteSharingWebdavIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/webdav/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingWebdavIdIdRequest generates requests for GetSharingWebdavIdId
func NewGetSharingWebdavIdIdRequest(server string, id int, params *GetSharingWebdavIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/webdav/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSharingWebdavIdIdRequest calls the generic PutSharingWebdavIdId builder with application/json body
func NewPutSharingWebdavIdIdRequest(server string, id int, body PutSharingWebdavIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSharingWebdavIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSharingWebdavIdIdRequestWithBody generates requests for PutSharingWebdavIdId with any type of body
func NewPutSharingWebdavIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sharing/webdav/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmartRequest generates requests for GetSmart
func NewGetSmartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmartRequest calls the generic PutSmart builder with application/json body
func NewPutSmartRequest(server string, body PutSmartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSmartRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSmartRequestWithBody generates requests for PutSmart with any type of body
func NewPutSmartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmartTestRequest generates requests for GetSmartTest
func NewGetSmartTestRequest(server string, params *GetSmartTestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSmartTestRequest calls the generic PostSmartTest builder with application/json body
func NewPostSmartTestRequest(server string, body PostSmartTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmartTestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmartTestRequestWithBody generates requests for PostSmartTest with any type of body
func NewPostSmartTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSmartTestDiskChoicesRequest calls the generic PostSmartTestDiskChoices builder with application/json body
func NewPostSmartTestDiskChoicesRequest(server string, body PostSmartTestDiskChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmartTestDiskChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmartTestDiskChoicesRequestWithBody generates requests for PostSmartTestDiskChoices with any type of body
func NewPostSmartTestDiskChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart/test/disk_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSmartTestIdIdRequest generates requests for DeleteSmartTestIdId
func NewDeleteSmartTestIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart/test/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmartTestIdIdRequest generates requests for GetSmartTestIdId
func NewGetSmartTestIdIdRequest(server string, id int, params *GetSmartTestIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart/test/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmartTestIdIdRequest calls the generic PutSmartTestIdId builder with application/json body
func NewPutSmartTestIdIdRequest(server string, id int, body PutSmartTestIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSmartTestIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSmartTestIdIdRequestWithBody generates requests for PutSmartTestIdId with any type of body
func NewPutSmartTestIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart/test/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSmartTestManualTestRequest calls the generic PostSmartTestManualTest builder with application/json body
func NewPostSmartTestManualTestRequest(server string, body PostSmartTestManualTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmartTestManualTestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmartTestManualTestRequestWithBody generates requests for PostSmartTestManualTest with any type of body
func NewPostSmartTestManualTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart/test/manual_test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmartTestResultsRequest generates requests for GetSmartTestResults
func NewGetSmartTestResultsRequest(server string, params *GetSmartTestResultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smart/test/results")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmbRequest generates requests for GetSmb
func NewGetSmbRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmbRequest calls the generic PutSmb builder with application/json body
func NewPutSmbRequest(server string, body PutSmbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSmbRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSmbRequestWithBody generates requests for PutSmb with any type of body
func NewPutSmbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmbBindipChoicesRequest generates requests for GetSmbBindipChoices
func NewGetSmbBindipChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/bindip_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmbDomainChoicesRequest generates requests for GetSmbDomainChoices
func NewGetSmbDomainChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/domain_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSmbGetRemoteAclRequest calls the generic PostSmbGetRemoteAcl builder with application/json body
func NewPostSmbGetRemoteAclRequest(server string, body PostSmbGetRemoteAclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmbGetRemoteAclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmbGetRemoteAclRequestWithBody generates requests for PostSmbGetRemoteAcl with any type of body
func NewPostSmbGetRemoteAclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/get_remote_acl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmbSharesecRequest generates requests for GetSmbSharesec
func NewGetSmbSharesecRequest(server string, params *GetSmbSharesecParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/sharesec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSmbSharesecRequest calls the generic PostSmbSharesec builder with application/json body
func NewPostSmbSharesecRequest(server string, body PostSmbSharesecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmbSharesecRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmbSharesecRequestWithBody generates requests for PostSmbSharesec with any type of body
func NewPostSmbSharesecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/sharesec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSmbSharesecGetaclRequest calls the generic PostSmbSharesecGetacl builder with application/json body
func NewPostSmbSharesecGetaclRequest(server string, body PostSmbSharesecGetaclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmbSharesecGetaclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmbSharesecGetaclRequestWithBody generates requests for PostSmbSharesecGetacl with any type of body
func NewPostSmbSharesecGetaclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/sharesec/getacl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSmbSharesecIdIdRequest generates requests for DeleteSmbSharesecIdId
func NewDeleteSmbSharesecIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/sharesec/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmbSharesecIdIdRequest generates requests for GetSmbSharesecIdId
func NewGetSmbSharesecIdIdRequest(server string, id int, params *GetSmbSharesecIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/sharesec/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmbSharesecIdIdRequest calls the generic PutSmbSharesecIdId builder with application/json body
func NewPutSmbSharesecIdIdRequest(server string, id int, body PutSmbSharesecIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSmbSharesecIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSmbSharesecIdIdRequestWithBody generates requests for PutSmbSharesecIdId with any type of body
func NewPutSmbSharesecIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/sharesec/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmbSharesecSynchronizeAclsRequest generates requests for GetSmbSharesecSynchronizeAcls
func NewGetSmbSharesecSynchronizeAclsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/sharesec/synchronize_acls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSmbStatusRequest calls the generic PostSmbStatus builder with application/json body
func NewPostSmbStatusRequest(server string, body PostSmbStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmbStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmbStatusRequestWithBody generates requests for PostSmbStatus with any type of body
func NewPostSmbStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmbUnixcharsetChoicesRequest generates requests for GetSmbUnixcharsetChoices
func NewGetSmbUnixcharsetChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/smb/unixcharset_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnmpRequest generates requests for GetSnmp
func NewGetSnmpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snmp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSnmpRequest calls the generic PutSnmp builder with application/json body
func NewPutSnmpRequest(server string, body PutSnmpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSnmpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSnmpRequestWithBody generates requests for PutSnmp with any type of body
func NewPutSnmpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snmp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSshRequest generates requests for GetSsh
func NewGetSshRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ssh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSshRequest calls the generic PutSsh builder with application/json body
func NewPutSshRequest(server string, body PutSshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSshRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSshRequestWithBody generates requests for PutSsh with any type of body
func NewPutSshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ssh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSshBindifaceChoicesRequest generates requests for GetSshBindifaceChoices
func NewGetSshBindifaceChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ssh/bindiface_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaticrouteRequest generates requests for GetStaticroute
func NewGetStaticrouteRequest(server string, params *GetStaticrouteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staticroute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStaticrouteRequest calls the generic PostStaticroute builder with application/json body
func NewPostStaticrouteRequest(server string, body PostStaticrouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStaticrouteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStaticrouteRequestWithBody generates requests for PostStaticroute with any type of body
func NewPostStaticrouteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staticroute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStaticrouteIdIdRequest generates requests for DeleteStaticrouteIdId
func NewDeleteStaticrouteIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staticroute/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaticrouteIdIdRequest generates requests for GetStaticrouteIdId
func NewGetStaticrouteIdIdRequest(server string, id int, params *GetStaticrouteIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staticroute/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutStaticrouteIdIdRequest calls the generic PutStaticrouteIdId builder with application/json body
func NewPutStaticrouteIdIdRequest(server string, id int, body PutStaticrouteIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStaticrouteIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutStaticrouteIdIdRequestWithBody generates requests for PutStaticrouteIdId with any type of body
func NewPutStaticrouteIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staticroute/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStatsGetDataRequest calls the generic PostStatsGetData builder with application/json body
func NewPostStatsGetDataRequest(server string, body PostStatsGetDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStatsGetDataRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStatsGetDataRequestWithBody generates requests for PostStatsGetData with any type of body
func NewPostStatsGetDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stats/get_data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStatsGetDatasetInfoRequest calls the generic PostStatsGetDatasetInfo builder with application/json body
func NewPostStatsGetDatasetInfoRequest(server string, body PostStatsGetDatasetInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStatsGetDatasetInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStatsGetDatasetInfoRequestWithBody generates requests for PostStatsGetDatasetInfo with any type of body
func NewPostStatsGetDatasetInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stats/get_dataset_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatsGetSourcesRequest generates requests for GetStatsGetSources
func NewGetStatsGetSourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stats/get_sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportRequest generates requests for GetSupport
func NewGetSupportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSupportRequest calls the generic PutSupport builder with application/json body
func NewPutSupportRequest(server string, body PutSupportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSupportRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSupportRequestWithBody generates requests for PutSupport with any type of body
func NewPutSupportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSupportFetchCategoriesRequest calls the generic PostSupportFetchCategories builder with application/json body
func NewPostSupportFetchCategoriesRequest(server string, body PostSupportFetchCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSupportFetchCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSupportFetchCategoriesRequestWithBody generates requests for PostSupportFetchCategories with any type of body
func NewPostSupportFetchCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/fetch_categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSupportFieldsRequest generates requests for GetSupportFields
func NewGetSupportFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportIsAvailableRequest generates requests for GetSupportIsAvailable
func NewGetSupportIsAvailableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/is_available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportIsAvailableAndEnabledRequest generates requests for GetSupportIsAvailableAndEnabled
func NewGetSupportIsAvailableAndEnabledRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/is_available_and_enabled")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSupportNewTicketRequest calls the generic PostSupportNewTicket builder with application/json body
func NewPostSupportNewTicketRequest(server string, body PostSupportNewTicketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSupportNewTicketRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSupportNewTicketRequestWithBody generates requests for PostSupportNewTicket with any type of body
func NewPostSupportNewTicketRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/support/new_ticket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemAdvancedRequest generates requests for GetSystemAdvanced
func NewGetSystemAdvancedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/advanced")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemAdvancedRequest calls the generic PutSystemAdvanced builder with application/json body
func NewPutSystemAdvancedRequest(server string, body PutSystemAdvancedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemAdvancedRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemAdvancedRequestWithBody generates requests for PutSystemAdvanced with any type of body
func NewPutSystemAdvancedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/advanced")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemAdvancedSedGlobalPasswordRequest generates requests for GetSystemAdvancedSedGlobalPassword
func NewGetSystemAdvancedSedGlobalPasswordRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/advanced/sed_global_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemAdvancedSerialPortChoicesRequest generates requests for GetSystemAdvancedSerialPortChoices
func NewGetSystemAdvancedSerialPortChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/advanced/serial_port_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemBootIdRequest generates requests for GetSystemBootId
func NewGetSystemBootIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/boot_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemEnvironmentRequest generates requests for GetSystemEnvironment
func NewGetSystemEnvironmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/environment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemFeatureEnabledRequest calls the generic PostSystemFeatureEnabled builder with application/json body
func NewPostSystemFeatureEnabledRequest(server string, body PostSystemFeatureEnabledJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemFeatureEnabledRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemFeatureEnabledRequestWithBody generates requests for PostSystemFeatureEnabled with any type of body
func NewPostSystemFeatureEnabledRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/feature_enabled")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemGeneralRequest generates requests for GetSystemGeneral
func NewGetSystemGeneralRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemGeneralRequest calls the generic PutSystemGeneral builder with application/json body
func NewPutSystemGeneralRequest(server string, body PutSystemGeneralJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemGeneralRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemGeneralRequestWithBody generates requests for PutSystemGeneral with any type of body
func NewPutSystemGeneralRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemGeneralCountryChoicesRequest generates requests for GetSystemGeneralCountryChoices
func NewGetSystemGeneralCountryChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/country_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralKbdmapChoicesRequest generates requests for GetSystemGeneralKbdmapChoices
func NewGetSystemGeneralKbdmapChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/kbdmap_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralLanguageChoicesRequest generates requests for GetSystemGeneralLanguageChoices
func NewGetSystemGeneralLanguageChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/language_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralLocalUrlRequest generates requests for GetSystemGeneralLocalUrl
func NewGetSystemGeneralLocalUrlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/local_url")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralTimezoneChoicesRequest generates requests for GetSystemGeneralTimezoneChoices
func NewGetSystemGeneralTimezoneChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/timezone_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralUiAddressChoicesRequest generates requests for GetSystemGeneralUiAddressChoices
func NewGetSystemGeneralUiAddressChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/ui_address_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralUiCertificateChoicesRequest generates requests for GetSystemGeneralUiCertificateChoices
func NewGetSystemGeneralUiCertificateChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/ui_certificate_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralUiHttpsprotocolsChoicesRequest generates requests for GetSystemGeneralUiHttpsprotocolsChoices
func NewGetSystemGeneralUiHttpsprotocolsChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/ui_httpsprotocols_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralUiRestartRequest calls the generic GetSystemGeneralUiRestart builder with application/json body
func NewGetSystemGeneralUiRestartRequest(server string, body GetSystemGeneralUiRestartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSystemGeneralUiRestartRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSystemGeneralUiRestartRequestWithBody generates requests for GetSystemGeneralUiRestart with any type of body
func NewGetSystemGeneralUiRestartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/ui_restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSystemGeneralUiRestartRequest calls the generic PostSystemGeneralUiRestart builder with application/json body
func NewPostSystemGeneralUiRestartRequest(server string, body PostSystemGeneralUiRestartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemGeneralUiRestartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemGeneralUiRestartRequestWithBody generates requests for PostSystemGeneralUiRestart with any type of body
func NewPostSystemGeneralUiRestartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/ui_restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemGeneralUiV6addressChoicesRequest generates requests for GetSystemGeneralUiV6addressChoices
func NewGetSystemGeneralUiV6addressChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/general/ui_v6address_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemHostIdRequest generates requests for GetSystemHostId
func NewGetSystemHostIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/host_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemInfoRequest generates requests for GetSystemInfo
func NewGetSystemInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemIsFreenasRequest generates requests for GetSystemIsFreenas
func NewGetSystemIsFreenasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/is_freenas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemLicenseUpdateRequest calls the generic PostSystemLicenseUpdate builder with application/json body
func NewPostSystemLicenseUpdateRequest(server string, body PostSystemLicenseUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemLicenseUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemLicenseUpdateRequestWithBody generates requests for PostSystemLicenseUpdate with any type of body
func NewPostSystemLicenseUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/license_update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemNtpserverRequest generates requests for GetSystemNtpserver
func NewGetSystemNtpserverRequest(server string, params *GetSystemNtpserverParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/ntpserver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemNtpserverRequest calls the generic PostSystemNtpserver builder with application/json body
func NewPostSystemNtpserverRequest(server string, body PostSystemNtpserverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemNtpserverRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemNtpserverRequestWithBody generates requests for PostSystemNtpserver with any type of body
func NewPostSystemNtpserverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/ntpserver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSystemNtpserverIdIdRequest generates requests for DeleteSystemNtpserverIdId
func NewDeleteSystemNtpserverIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/ntpserver/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemNtpserverIdIdRequest generates requests for GetSystemNtpserverIdId
func NewGetSystemNtpserverIdIdRequest(server string, id int, params *GetSystemNtpserverIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/ntpserver/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemNtpserverIdIdRequest calls the generic PutSystemNtpserverIdId builder with application/json body
func NewPutSystemNtpserverIdIdRequest(server string, id int, body PutSystemNtpserverIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemNtpserverIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSystemNtpserverIdIdRequestWithBody generates requests for PutSystemNtpserverIdId with any type of body
func NewPutSystemNtpserverIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/ntpserver/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemNtpserverTestNtpServerRequest generates requests for GetSystemNtpserverTestNtpServer
func NewGetSystemNtpserverTestNtpServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/ntpserver/test_ntp_server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemProductNameRequest generates requests for GetSystemProductName
func NewGetSystemProductNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/product_name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemProductTypeRequest generates requests for GetSystemProductType
func NewGetSystemProductTypeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/product_type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemReadyRequest generates requests for GetSystemReady
func NewGetSystemReadyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/ready")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemRebootRequest calls the generic PostSystemReboot builder with application/json body
func NewPostSystemRebootRequest(server string, body PostSystemRebootJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemRebootRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemRebootRequestWithBody generates requests for PostSystemReboot with any type of body
func NewPostSystemRebootRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/reboot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSystemShutdownRequest calls the generic PostSystemShutdown builder with application/json body
func NewPostSystemShutdownRequest(server string, body PostSystemShutdownJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemShutdownRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemShutdownRequestWithBody generates requests for PostSystemShutdown with any type of body
func NewPostSystemShutdownRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemStateRequest generates requests for GetSystemState
func NewGetSystemStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemVersionRequest generates requests for GetSystemVersion
func NewGetSystemVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemdatasetRequest generates requests for GetSystemdataset
func NewGetSystemdatasetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systemdataset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemdatasetRequest calls the generic PutSystemdataset builder with application/json body
func NewPutSystemdatasetRequest(server string, body PutSystemdatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemdatasetRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemdatasetRequestWithBody generates requests for PutSystemdataset with any type of body
func NewPutSystemdatasetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systemdataset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTftpRequest generates requests for GetTftp
func NewGetTftpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tftp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTftpRequest calls the generic PutTftp builder with application/json body
func NewPutTftpRequest(server string, body PutTftpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTftpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTftpRequestWithBody generates requests for PutTftp with any type of body
func NewPutTftpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tftp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTruecommandRequest generates requests for GetTruecommand
func NewGetTruecommandRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truecommand")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTruecommandRequest calls the generic PutTruecommand builder with application/json body
func NewPutTruecommandRequest(server string, body PutTruecommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTruecommandRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTruecommandRequestWithBody generates requests for PutTruecommand with any type of body
func NewPutTruecommandRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truecommand")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTruenasAcceptEulaRequest generates requests for GetTruenasAcceptEula
func NewGetTruenasAcceptEulaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truenas/accept_eula")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTruenasGetChassisHardwareRequest generates requests for GetTruenasGetChassisHardware
func NewGetTruenasGetChassisHardwareRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truenas/get_chassis_hardware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTruenasGetCustomerInformationRequest generates requests for GetTruenasGetCustomerInformation
func NewGetTruenasGetCustomerInformationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truenas/get_customer_information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTruenasGetEulaRequest generates requests for GetTruenasGetEula
func NewGetTruenasGetEulaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truenas/get_eula")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTruenasIsEulaAcceptedRequest generates requests for GetTruenasIsEulaAccepted
func NewGetTruenasIsEulaAcceptedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truenas/is_eula_accepted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTruenasIsProductionRequest generates requests for GetTruenasIsProduction
func NewGetTruenasIsProductionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truenas/is_production")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTruenasSetProductionRequest calls the generic PostTruenasSetProduction builder with application/json body
func NewPostTruenasSetProductionRequest(server string, body PostTruenasSetProductionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTruenasSetProductionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTruenasSetProductionRequestWithBody generates requests for PostTruenasSetProduction with any type of body
func NewPostTruenasSetProductionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truenas/set_production")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTruenasUpdateCustomerInformationRequest calls the generic PostTruenasUpdateCustomerInformation builder with application/json body
func NewPostTruenasUpdateCustomerInformationRequest(server string, body PostTruenasUpdateCustomerInformationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTruenasUpdateCustomerInformationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTruenasUpdateCustomerInformationRequestWithBody generates requests for PostTruenasUpdateCustomerInformation with any type of body
func NewPostTruenasUpdateCustomerInformationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/truenas/update_customer_information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTunableRequest generates requests for GetTunable
func NewGetTunableRequest(server string, params *GetTunableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tunable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTunableRequest calls the generic PostTunable builder with application/json body
func NewPostTunableRequest(server string, body PostTunableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTunableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTunableRequestWithBody generates requests for PostTunable with any type of body
func NewPostTunableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tunable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTunableIdIdRequest generates requests for DeleteTunableIdId
func NewDeleteTunableIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tunable/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTunableIdIdRequest generates requests for GetTunableIdId
func NewGetTunableIdIdRequest(server string, id int, params *GetTunableIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tunable/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTunableIdIdRequest calls the generic PutTunableIdId builder with application/json body
func NewPutTunableIdIdRequest(server string, id int, body PutTunableIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTunableIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTunableIdIdRequestWithBody generates requests for PutTunableIdId with any type of body
func NewPutTunableIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tunable/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTunableTunableTypeChoicesRequest generates requests for GetTunableTunableTypeChoices
func NewGetTunableTunableTypeChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tunable/tunable_type_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUpdateCheckAvailableRequest calls the generic PostUpdateCheckAvailable builder with application/json body
func NewPostUpdateCheckAvailableRequest(server string, body PostUpdateCheckAvailableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateCheckAvailableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateCheckAvailableRequestWithBody generates requests for PostUpdateCheckAvailable with any type of body
func NewPostUpdateCheckAvailableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/check_available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUpdateDownloadRequest generates requests for GetUpdateDownload
func NewGetUpdateDownloadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUpdateGetAutoDownloadRequest generates requests for GetUpdateGetAutoDownload
func NewGetUpdateGetAutoDownloadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/get_auto_download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUpdateGetPendingRequest calls the generic PostUpdateGetPending builder with application/json body
func NewPostUpdateGetPendingRequest(server string, body PostUpdateGetPendingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateGetPendingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateGetPendingRequestWithBody generates requests for PostUpdateGetPending with any type of body
func NewPostUpdateGetPendingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/get_pending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUpdateGetTrainsRequest generates requests for GetUpdateGetTrains
func NewGetUpdateGetTrainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/get_trains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUpdateManualRequest calls the generic PostUpdateManual builder with application/json body
func NewPostUpdateManualRequest(server string, body PostUpdateManualJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateManualRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateManualRequestWithBody generates requests for PostUpdateManual with any type of body
func NewPostUpdateManualRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/manual")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUpdateSetAutoDownloadRequest calls the generic PostUpdateSetAutoDownload builder with application/json body
func NewPostUpdateSetAutoDownloadRequest(server string, body PostUpdateSetAutoDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateSetAutoDownloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateSetAutoDownloadRequestWithBody generates requests for PostUpdateSetAutoDownload with any type of body
func NewPostUpdateSetAutoDownloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/set_auto_download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUpdateSetTrainRequest calls the generic PostUpdateSetTrain builder with application/json body
func NewPostUpdateSetTrainRequest(server string, body PostUpdateSetTrainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateSetTrainRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateSetTrainRequestWithBody generates requests for PostUpdateSetTrain with any type of body
func NewPostUpdateSetTrainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/set_train")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUpdateUpdateRequest calls the generic PostUpdateUpdate builder with application/json body
func NewPostUpdateUpdateRequest(server string, body PostUpdateUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateUpdateRequestWithBody generates requests for PostUpdateUpdate with any type of body
func NewPostUpdateUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUpsRequest generates requests for GetUps
func NewGetUpsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUpsRequest calls the generic PutUps builder with application/json body
func NewPutUpsRequest(server string, body PutUpsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUpsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutUpsRequestWithBody generates requests for PutUps with any type of body
func NewPutUpsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUpsDriverChoicesRequest generates requests for GetUpsDriverChoices
func NewGetUpsDriverChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ups/driver_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUpsPortChoicesRequest generates requests for GetUpsPortChoices
func NewGetUpsPortChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ups/port_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRequest calls the generic PostUser builder with application/json body
func NewPostUserRequest(server string, body PostUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserRequestWithBody generates requests for PostUser with any type of body
func NewPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserGetNextUidRequest generates requests for GetUserGetNextUid
func NewGetUserGetNextUidRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/get_next_uid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserGetUserObjRequest calls the generic PostUserGetUserObj builder with application/json body
func NewPostUserGetUserObjRequest(server string, body PostUserGetUserObjJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserGetUserObjRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserGetUserObjRequestWithBody generates requests for PostUserGetUserObj with any type of body
func NewPostUserGetUserObjRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/get_user_obj")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserHasRootPasswordRequest generates requests for GetUserHasRootPassword
func NewGetUserHasRootPasswordRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/has_root_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserIdIdRequest calls the generic DeleteUserIdId builder with application/json body
func NewDeleteUserIdIdRequest(server string, id int, body DeleteUserIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteUserIdIdRequestWithBody generates requests for DeleteUserIdId with any type of body
func NewDeleteUserIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserIdIdRequest generates requests for GetUserIdId
func NewGetUserIdIdRequest(server string, id int, params *GetUserIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserIdIdRequest calls the generic PutUserIdId builder with application/json body
func NewPutUserIdIdRequest(server string, id int, body PutUserIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutUserIdIdRequestWithBody generates requests for PutUserIdId with any type of body
func NewPutUserIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserIdIdPopAttributeRequest calls the generic PostUserIdIdPopAttribute builder with application/json body
func NewPostUserIdIdPopAttributeRequest(server string, id int, body PostUserIdIdPopAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserIdIdPopAttributeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostUserIdIdPopAttributeRequestWithBody generates requests for PostUserIdIdPopAttribute with any type of body
func NewPostUserIdIdPopAttributeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/id/%s/pop_attribute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserIdIdSetAttributeRequest calls the generic PostUserIdIdSetAttribute builder with application/json body
func NewPostUserIdIdSetAttributeRequest(server string, id int, body PostUserIdIdSetAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserIdIdSetAttributeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostUserIdIdSetAttributeRequestWithBody generates requests for PostUserIdIdSetAttribute with any type of body
func NewPostUserIdIdSetAttributeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/id/%s/set_attribute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserShellChoicesRequest calls the generic PostUserShellChoices builder with application/json body
func NewPostUserShellChoicesRequest(server string, body PostUserShellChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserShellChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserShellChoicesRequestWithBody generates requests for PostUserShellChoices with any type of body
func NewPostUserShellChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/shell_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmRequest generates requests for GetVm
func NewGetVmRequest(server string, params *GetVmParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmRequest calls the generic PostVm builder with application/json body
func NewPostVmRequest(server string, body PostVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmRequestWithBody generates requests for PostVm with any type of body
func NewPostVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmDeviceRequest generates requests for GetVmDevice
func NewGetVmDeviceRequest(server string, params *GetVmDeviceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmDeviceRequest calls the generic PostVmDevice builder with application/json body
func NewPostVmDeviceRequest(server string, body PostVmDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmDeviceRequestWithBody generates requests for PostVmDevice with any type of body
func NewPostVmDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmDeviceIdIdRequest calls the generic DeleteVmDeviceIdId builder with application/json body
func NewDeleteVmDeviceIdIdRequest(server string, id int, body DeleteVmDeviceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmDeviceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteVmDeviceIdIdRequestWithBody generates requests for DeleteVmDeviceIdId with any type of body
func NewDeleteVmDeviceIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/device/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmDeviceIdIdRequest generates requests for GetVmDeviceIdId
func NewGetVmDeviceIdIdRequest(server string, id int, params *GetVmDeviceIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/device/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmDeviceIdIdRequest calls the generic PutVmDeviceIdId builder with application/json body
func NewPutVmDeviceIdIdRequest(server string, id int, body PutVmDeviceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmDeviceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutVmDeviceIdIdRequestWithBody generates requests for PutVmDeviceIdId with any type of body
func NewPutVmDeviceIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/device/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmDeviceNicAttachChoicesRequest generates requests for GetVmDeviceNicAttachChoices
func NewGetVmDeviceNicAttachChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/device/nic_attach_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmDevicePptdevChoicesRequest generates requests for GetVmDevicePptdevChoices
func NewGetVmDevicePptdevChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/device/pptdev_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmDeviceVncBindChoicesRequest generates requests for GetVmDeviceVncBindChoices
func NewGetVmDeviceVncBindChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/device/vnc_bind_choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmFlagsRequest generates requests for GetVmFlags
func NewGetVmFlagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmGetAttachedIfaceRequest calls the generic PostVmGetAttachedIface builder with application/json body
func NewPostVmGetAttachedIfaceRequest(server string, body PostVmGetAttachedIfaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmGetAttachedIfaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmGetAttachedIfaceRequestWithBody generates requests for PostVmGetAttachedIface with any type of body
func NewPostVmGetAttachedIfaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/get_attached_iface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmGetAvailableMemoryRequest calls the generic PostVmGetAvailableMemory builder with application/json body
func NewPostVmGetAvailableMemoryRequest(server string, body PostVmGetAvailableMemoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmGetAvailableMemoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmGetAvailableMemoryRequestWithBody generates requests for PostVmGetAvailableMemory with any type of body
func NewPostVmGetAvailableMemoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/get_available_memory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmGetConsoleRequest calls the generic PostVmGetConsole builder with application/json body
func NewPostVmGetConsoleRequest(server string, body PostVmGetConsoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmGetConsoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmGetConsoleRequestWithBody generates requests for PostVmGetConsole with any type of body
func NewPostVmGetConsoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/get_console")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmGetVmemoryInUseRequest generates requests for GetVmGetVmemoryInUse
func NewGetVmGetVmemoryInUseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/get_vmemory_in_use")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmGetVncRequest calls the generic PostVmGetVnc builder with application/json body
func NewPostVmGetVncRequest(server string, body PostVmGetVncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmGetVncRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmGetVncRequestWithBody generates requests for PostVmGetVnc with any type of body
func NewPostVmGetVncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/get_vnc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmGetVncIpv4Request generates requests for GetVmGetVncIpv4
func NewGetVmGetVncIpv4Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/get_vnc_ipv4")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteVmIdIdRequest calls the generic DeleteVmIdId builder with application/json body
func NewDeleteVmIdIdRequest(server string, id int, body DeleteVmIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteVmIdIdRequestWithBody generates requests for DeleteVmIdId with any type of body
func NewDeleteVmIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmIdIdRequest generates requests for GetVmIdId
func NewGetVmIdIdRequest(server string, id int, params *GetVmIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmIdIdRequest calls the generic PutVmIdId builder with application/json body
func NewPutVmIdIdRequest(server string, id int, body PutVmIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutVmIdIdRequestWithBody generates requests for PutVmIdId with any type of body
func NewPutVmIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdCloneRequest calls the generic PostVmIdIdClone builder with application/json body
func NewPostVmIdIdCloneRequest(server string, id int, body PostVmIdIdCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdCloneRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdCloneRequestWithBody generates requests for PostVmIdIdClone with any type of body
func NewPostVmIdIdCloneRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s/clone", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdPoweroffRequest calls the generic PostVmIdIdPoweroff builder with application/json body
func NewPostVmIdIdPoweroffRequest(server string, id int, body PostVmIdIdPoweroffJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdPoweroffRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdPoweroffRequestWithBody generates requests for PostVmIdIdPoweroff with any type of body
func NewPostVmIdIdPoweroffRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s/poweroff", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdRestartRequest calls the generic PostVmIdIdRestart builder with application/json body
func NewPostVmIdIdRestartRequest(server string, id int, body PostVmIdIdRestartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdRestartRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdRestartRequestWithBody generates requests for PostVmIdIdRestart with any type of body
func NewPostVmIdIdRestartRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdStartRequest calls the generic PostVmIdIdStart builder with application/json body
func NewPostVmIdIdStartRequest(server string, id int, body PostVmIdIdStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdStartRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdStartRequestWithBody generates requests for PostVmIdIdStart with any type of body
func NewPostVmIdIdStartRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdStatusRequest calls the generic PostVmIdIdStatus builder with application/json body
func NewPostVmIdIdStatusRequest(server string, id int, body PostVmIdIdStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdStatusRequestWithBody generates requests for PostVmIdIdStatus with any type of body
func NewPostVmIdIdStatusRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdStopRequest calls the generic PostVmIdIdStop builder with application/json body
func NewPostVmIdIdStopRequest(server string, id int, body PostVmIdIdStopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdStopRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdStopRequestWithBody generates requests for PostVmIdIdStop with any type of body
func NewPostVmIdIdStopRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/id/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmIdentifyHypervisorRequest generates requests for GetVmIdentifyHypervisor
func NewGetVmIdentifyHypervisorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/identify_hypervisor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmRandomMacRequest generates requests for GetVmRandomMac
func NewGetVmRandomMacRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/random_mac")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmVncPortWizardRequest generates requests for GetVmVncPortWizard
func NewGetVmVncPortWizardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/vnc_port_wizard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmwareRequest generates requests for GetVmware
func NewGetVmwareRequest(server string, params *GetVmwareParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmwareRequest calls the generic PostVmware builder with application/json body
func NewPostVmwareRequest(server string, body PostVmwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareRequestWithBody generates requests for PostVmware with any type of body
func NewPostVmwareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmwareDatasetHasVmsRequest calls the generic PostVmwareDatasetHasVms builder with application/json body
func NewPostVmwareDatasetHasVmsRequest(server string, body PostVmwareDatasetHasVmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareDatasetHasVmsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareDatasetHasVmsRequestWithBody generates requests for PostVmwareDatasetHasVms with any type of body
func NewPostVmwareDatasetHasVmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware/dataset_has_vms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmwareGetDatastoresRequest calls the generic PostVmwareGetDatastores builder with application/json body
func NewPostVmwareGetDatastoresRequest(server string, body PostVmwareGetDatastoresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareGetDatastoresRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareGetDatastoresRequestWithBody generates requests for PostVmwareGetDatastores with any type of body
func NewPostVmwareGetDatastoresRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware/get_datastores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmwareGetVirtualMachinesRequest calls the generic PostVmwareGetVirtualMachines builder with application/json body
func NewPostVmwareGetVirtualMachinesRequest(server string, body PostVmwareGetVirtualMachinesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareGetVirtualMachinesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareGetVirtualMachinesRequestWithBody generates requests for PostVmwareGetVirtualMachines with any type of body
func NewPostVmwareGetVirtualMachinesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware/get_virtual_machines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmwareIdIdRequest generates requests for DeleteVmwareIdId
func NewDeleteVmwareIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmwareIdIdRequest generates requests for GetVmwareIdId
func NewGetVmwareIdIdRequest(server string, id int, params *GetVmwareIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmwareIdIdRequest calls the generic PutVmwareIdId builder with application/json body
func NewPutVmwareIdIdRequest(server string, id int, body PutVmwareIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmwareIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutVmwareIdIdRequestWithBody generates requests for PutVmwareIdId with any type of body
func NewPutVmwareIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmwareMatchDatastoresWithDatasetsRequest calls the generic PostVmwareMatchDatastoresWithDatasets builder with application/json body
func NewPostVmwareMatchDatastoresWithDatasetsRequest(server string, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareMatchDatastoresWithDatasetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareMatchDatastoresWithDatasetsRequestWithBody generates requests for PostVmwareMatchDatastoresWithDatasets with any type of body
func NewPostVmwareMatchDatastoresWithDatasetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vmware/match_datastores_with_datasets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWebdavRequest generates requests for GetWebdav
func NewGetWebdavRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webdav")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWebdavRequest calls the generic PutWebdav builder with application/json body
func NewPutWebdavRequest(server string, body PutWebdavJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWebdavRequestWithBody(server, "application/json", bodyReader)
}

// NewPutWebdavRequestWithBody generates requests for PutWebdav with any type of body
func NewPutWebdavRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webdav")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWebuiImageRequest generates requests for GetWebuiImage
func NewGetWebuiImageRequest(server string, params *GetWebuiImageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webui/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWebuiImageIdIdRequest generates requests for DeleteWebuiImageIdId
func NewDeleteWebuiImageIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webui/image/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebuiImageIdIdRequest generates requests for GetWebuiImageIdId
func NewGetWebuiImageIdIdRequest(server string, id int, params *GetWebuiImageIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webui/image/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZfsSnapshotRequest generates requests for GetZfsSnapshot
func NewGetZfsSnapshotRequest(server string, params *GetZfsSnapshotParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zfs/snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostZfsSnapshotRequest calls the generic PostZfsSnapshot builder with application/json body
func NewPostZfsSnapshotRequest(server string, body PostZfsSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZfsSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewPostZfsSnapshotRequestWithBody generates requests for PostZfsSnapshot with any type of body
func NewPostZfsSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zfs/snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostZfsSnapshotCloneRequest calls the generic PostZfsSnapshotClone builder with application/json body
func NewPostZfsSnapshotCloneRequest(server string, body PostZfsSnapshotCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZfsSnapshotCloneRequestWithBody(server, "application/json", bodyReader)
}

// NewPostZfsSnapshotCloneRequestWithBody generates requests for PostZfsSnapshotClone with any type of body
func NewPostZfsSnapshotCloneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zfs/snapshot/clone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteZfsSnapshotIdIdRequest calls the generic DeleteZfsSnapshotIdId builder with application/json body
func NewDeleteZfsSnapshotIdIdRequest(server string, id string, body DeleteZfsSnapshotIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteZfsSnapshotIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteZfsSnapshotIdIdRequestWithBody generates requests for DeleteZfsSnapshotIdId with any type of body
func NewDeleteZfsSnapshotIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zfs/snapshot/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZfsSnapshotIdIdRequest generates requests for GetZfsSnapshotIdId
func NewGetZfsSnapshotIdIdRequest(server string, id string, params *GetZfsSnapshotIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zfs/snapshot/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostZfsSnapshotRemoveRequest calls the generic PostZfsSnapshotRemove builder with application/json body
func NewPostZfsSnapshotRemoveRequest(server string, body PostZfsSnapshotRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZfsSnapshotRemoveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostZfsSnapshotRemoveRequestWithBody generates requests for PostZfsSnapshotRemove with any type of body
func NewPostZfsSnapshotRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zfs/snapshot/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostZfsSnapshotRollbackRequest calls the generic PostZfsSnapshotRollback builder with application/json body
func NewPostZfsSnapshotRollbackRequest(server string, body PostZfsSnapshotRollbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZfsSnapshotRollbackRequestWithBody(server, "application/json", bodyReader)
}

// NewPostZfsSnapshotRollbackRequestWithBody generates requests for PostZfsSnapshotRollback with any type of body
func NewPostZfsSnapshotRollbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zfs/snapshot/rollback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAcmeDnsAuthenticatorWithResponse request
	GetAcmeDnsAuthenticatorWithResponse(ctx context.Context, params *GetAcmeDnsAuthenticatorParams, reqEditors ...RequestEditorFn) (*GetAcmeDnsAuthenticatorResponse, error)

	// PostAcmeDnsAuthenticatorWithBodyWithResponse request with any body
	PostAcmeDnsAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAcmeDnsAuthenticatorResponse, error)

	PostAcmeDnsAuthenticatorWithResponse(ctx context.Context, body PostAcmeDnsAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAcmeDnsAuthenticatorResponse, error)

	// GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse request
	GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse, error)

	// DeleteAcmeDnsAuthenticatorIdIdWithResponse request
	DeleteAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAcmeDnsAuthenticatorIdIdResponse, error)

	// GetAcmeDnsAuthenticatorIdIdWithResponse request
	GetAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int, params *GetAcmeDnsAuthenticatorIdIdParams, reqEditors ...RequestEditorFn) (*GetAcmeDnsAuthenticatorIdIdResponse, error)

	// PutAcmeDnsAuthenticatorIdIdWithBodyWithResponse request with any body
	PutAcmeDnsAuthenticatorIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAcmeDnsAuthenticatorIdIdResponse, error)

	PutAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAcmeDnsAuthenticatorIdIdResponse, error)

	// GetActivedirectoryWithResponse request
	GetActivedirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryResponse, error)

	// PutActivedirectoryWithBodyWithResponse request with any body
	PutActivedirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutActivedirectoryResponse, error)

	PutActivedirectoryWithResponse(ctx context.Context, body PutActivedirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutActivedirectoryResponse, error)

	// GetActivedirectoryChangeTrustAccountPwWithResponse request
	GetActivedirectoryChangeTrustAccountPwWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryChangeTrustAccountPwResponse, error)

	// GetActivedirectoryDomainInfoWithResponse request
	GetActivedirectoryDomainInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryDomainInfoResponse, error)

	// GetActivedirectoryGetSpnListWithResponse request
	GetActivedirectoryGetSpnListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryGetSpnListResponse, error)

	// GetActivedirectoryGetStateWithResponse request
	GetActivedirectoryGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryGetStateResponse, error)

	// PostActivedirectoryLeaveWithBodyWithResponse request with any body
	PostActivedirectoryLeaveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActivedirectoryLeaveResponse, error)

	PostActivedirectoryLeaveWithResponse(ctx context.Context, body PostActivedirectoryLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActivedirectoryLeaveResponse, error)

	// GetActivedirectoryNssInfoChoicesWithResponse request
	GetActivedirectoryNssInfoChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryNssInfoChoicesResponse, error)

	// GetActivedirectoryStartedWithResponse request
	GetActivedirectoryStartedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryStartedResponse, error)

	// GetAfpWithResponse request
	GetAfpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAfpResponse, error)

	// PutAfpWithBodyWithResponse request with any body
	PutAfpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAfpResponse, error)

	PutAfpWithResponse(ctx context.Context, body PutAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAfpResponse, error)

	// GetAfpBindipChoicesWithResponse request
	GetAfpBindipChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAfpBindipChoicesResponse, error)

	// PostAlertDismissWithBodyWithResponse request with any body
	PostAlertDismissWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertDismissResponse, error)

	PostAlertDismissWithResponse(ctx context.Context, body PostAlertDismissJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertDismissResponse, error)

	// GetAlertListWithResponse request
	GetAlertListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertListResponse, error)

	// GetAlertListCategoriesWithResponse request
	GetAlertListCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertListCategoriesResponse, error)

	// GetAlertListPoliciesWithResponse request
	GetAlertListPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertListPoliciesResponse, error)

	// PostAlertRestoreWithBodyWithResponse request with any body
	PostAlertRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertRestoreResponse, error)

	PostAlertRestoreWithResponse(ctx context.Context, body PostAlertRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertRestoreResponse, error)

	// GetAlertclassesWithResponse request
	GetAlertclassesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertclassesResponse, error)

	// PutAlertclassesWithBodyWithResponse request with any body
	PutAlertclassesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertclassesResponse, error)

	PutAlertclassesWithResponse(ctx context.Context, body PutAlertclassesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertclassesResponse, error)

	// GetAlertserviceWithResponse request
	GetAlertserviceWithResponse(ctx context.Context, params *GetAlertserviceParams, reqEditors ...RequestEditorFn) (*GetAlertserviceResponse, error)

	// PostAlertserviceWithBodyWithResponse request with any body
	PostAlertserviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertserviceResponse, error)

	PostAlertserviceWithResponse(ctx context.Context, body PostAlertserviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertserviceResponse, error)

	// DeleteAlertserviceIdIdWithResponse request
	DeleteAlertserviceIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAlertserviceIdIdResponse, error)

	// GetAlertserviceIdIdWithResponse request
	GetAlertserviceIdIdWithResponse(ctx context.Context, id int, params *GetAlertserviceIdIdParams, reqEditors ...RequestEditorFn) (*GetAlertserviceIdIdResponse, error)

	// PutAlertserviceIdIdWithBodyWithResponse request with any body
	PutAlertserviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertserviceIdIdResponse, error)

	PutAlertserviceIdIdWithResponse(ctx context.Context, id int, body PutAlertserviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertserviceIdIdResponse, error)

	// GetAlertserviceListTypesWithResponse request
	GetAlertserviceListTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertserviceListTypesResponse, error)

	// PostAlertserviceTestWithBodyWithResponse request with any body
	PostAlertserviceTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertserviceTestResponse, error)

	PostAlertserviceTestWithResponse(ctx context.Context, body PostAlertserviceTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertserviceTestResponse, error)

	// GetApiKeyWithResponse request
	GetApiKeyWithResponse(ctx context.Context, params *GetApiKeyParams, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error)

	// PostApiKeyWithBodyWithResponse request with any body
	PostApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeyResponse, error)

	PostApiKeyWithResponse(ctx context.Context, body PostApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeyResponse, error)

	// DeleteApiKeyIdIdWithResponse request
	DeleteApiKeyIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiKeyIdIdResponse, error)

	// GetApiKeyIdIdWithResponse request
	GetApiKeyIdIdWithResponse(ctx context.Context, id int, params *GetApiKeyIdIdParams, reqEditors ...RequestEditorFn) (*GetApiKeyIdIdResponse, error)

	// PutApiKeyIdIdWithBodyWithResponse request with any body
	PutApiKeyIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiKeyIdIdResponse, error)

	PutApiKeyIdIdWithResponse(ctx context.Context, id int, body PutApiKeyIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiKeyIdIdResponse, error)

	// PostAuthCheckUserWithBodyWithResponse request with any body
	PostAuthCheckUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthCheckUserResponse, error)

	PostAuthCheckUserWithResponse(ctx context.Context, body PostAuthCheckUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthCheckUserResponse, error)

	// PostAuthGenerateTokenWithBodyWithResponse request with any body
	PostAuthGenerateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthGenerateTokenResponse, error)

	PostAuthGenerateTokenWithResponse(ctx context.Context, body PostAuthGenerateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthGenerateTokenResponse, error)

	// GetAuthSessionsWithResponse request
	GetAuthSessionsWithResponse(ctx context.Context, params *GetAuthSessionsParams, reqEditors ...RequestEditorFn) (*GetAuthSessionsResponse, error)

	// GetAuthTwoFactorAuthWithResponse request
	GetAuthTwoFactorAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthTwoFactorAuthResponse, error)

	// GetAuthTwofactorWithResponse request
	GetAuthTwofactorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthTwofactorResponse, error)

	// PutAuthTwofactorWithBodyWithResponse request with any body
	PutAuthTwofactorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthTwofactorResponse, error)

	PutAuthTwofactorWithResponse(ctx context.Context, body PutAuthTwofactorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthTwofactorResponse, error)

	// GetAuthTwofactorProvisioningUriWithResponse request
	GetAuthTwofactorProvisioningUriWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthTwofactorProvisioningUriResponse, error)

	// GetAuthTwofactorRenewSecretWithResponse request
	GetAuthTwofactorRenewSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthTwofactorRenewSecretResponse, error)

	// PostAuthTwofactorVerifyWithBodyWithResponse request with any body
	PostAuthTwofactorVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthTwofactorVerifyResponse, error)

	PostAuthTwofactorVerifyWithResponse(ctx context.Context, body PostAuthTwofactorVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthTwofactorVerifyResponse, error)

	// PostBootAttachWithBodyWithResponse request with any body
	PostBootAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootAttachResponse, error)

	PostBootAttachWithResponse(ctx context.Context, body PostBootAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootAttachResponse, error)

	// PostBootDetachWithBodyWithResponse request with any body
	PostBootDetachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootDetachResponse, error)

	PostBootDetachWithResponse(ctx context.Context, body PostBootDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootDetachResponse, error)

	// GetBootGetDisksWithResponse request
	GetBootGetDisksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBootGetDisksResponse, error)

	// GetBootGetScrubIntervalWithResponse request
	GetBootGetScrubIntervalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBootGetScrubIntervalResponse, error)

	// GetBootGetStateWithResponse request
	GetBootGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBootGetStateResponse, error)

	// PostBootReplaceWithBodyWithResponse request with any body
	PostBootReplaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootReplaceResponse, error)

	PostBootReplaceWithResponse(ctx context.Context, body PostBootReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootReplaceResponse, error)

	// GetBootScrubWithResponse request
	GetBootScrubWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBootScrubResponse, error)

	// PostBootSetScrubIntervalWithBodyWithResponse request with any body
	PostBootSetScrubIntervalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootSetScrubIntervalResponse, error)

	PostBootSetScrubIntervalWithResponse(ctx context.Context, body PostBootSetScrubIntervalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootSetScrubIntervalResponse, error)

	// GetBootenvWithResponse request
	GetBootenvWithResponse(ctx context.Context, params *GetBootenvParams, reqEditors ...RequestEditorFn) (*GetBootenvResponse, error)

	// PostBootenvWithBodyWithResponse request with any body
	PostBootenvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootenvResponse, error)

	PostBootenvWithResponse(ctx context.Context, body PostBootenvJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootenvResponse, error)

	// DeleteBootenvIdIdWithResponse request
	DeleteBootenvIdIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBootenvIdIdResponse, error)

	// GetBootenvIdIdWithResponse request
	GetBootenvIdIdWithResponse(ctx context.Context, id string, params *GetBootenvIdIdParams, reqEditors ...RequestEditorFn) (*GetBootenvIdIdResponse, error)

	// PutBootenvIdIdWithBodyWithResponse request with any body
	PutBootenvIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBootenvIdIdResponse, error)

	PutBootenvIdIdWithResponse(ctx context.Context, id string, body PutBootenvIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBootenvIdIdResponse, error)

	// PostBootenvIdIdActivateWithBodyWithResponse request with any body
	PostBootenvIdIdActivateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootenvIdIdActivateResponse, error)

	PostBootenvIdIdActivateWithResponse(ctx context.Context, id string, body PostBootenvIdIdActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootenvIdIdActivateResponse, error)

	// PostBootenvIdIdSetAttributeWithBodyWithResponse request with any body
	PostBootenvIdIdSetAttributeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootenvIdIdSetAttributeResponse, error)

	PostBootenvIdIdSetAttributeWithResponse(ctx context.Context, id string, body PostBootenvIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootenvIdIdSetAttributeResponse, error)

	// GetCertificateWithResponse request
	GetCertificateWithResponse(ctx context.Context, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*GetCertificateResponse, error)

	// PostCertificateWithBodyWithResponse request with any body
	PostCertificateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificateResponse, error)

	PostCertificateWithResponse(ctx context.Context, body PostCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificateResponse, error)

	// GetCertificateAcmeServerChoicesWithResponse request
	GetCertificateAcmeServerChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateAcmeServerChoicesResponse, error)

	// GetCertificateCountryChoicesWithResponse request
	GetCertificateCountryChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateCountryChoicesResponse, error)

	// GetCertificateEcCurveChoicesWithResponse request
	GetCertificateEcCurveChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateEcCurveChoicesResponse, error)

	// GetCertificateExtendedKeyUsageChoicesWithResponse request
	GetCertificateExtendedKeyUsageChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateExtendedKeyUsageChoicesResponse, error)

	// DeleteCertificateIdIdWithBodyWithResponse request with any body
	DeleteCertificateIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCertificateIdIdResponse, error)

	DeleteCertificateIdIdWithResponse(ctx context.Context, id int, body DeleteCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCertificateIdIdResponse, error)

	// GetCertificateIdIdWithResponse request
	GetCertificateIdIdWithResponse(ctx context.Context, id int, params *GetCertificateIdIdParams, reqEditors ...RequestEditorFn) (*GetCertificateIdIdResponse, error)

	// PutCertificateIdIdWithBodyWithResponse request with any body
	PutCertificateIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCertificateIdIdResponse, error)

	PutCertificateIdIdWithResponse(ctx context.Context, id int, body PutCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCertificateIdIdResponse, error)

	// GetCertificateKeyTypeChoicesWithResponse request
	GetCertificateKeyTypeChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateKeyTypeChoicesResponse, error)

	// GetCertificateProfilesWithResponse request
	GetCertificateProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateProfilesResponse, error)

	// GetCertificateauthorityWithResponse request
	GetCertificateauthorityWithResponse(ctx context.Context, params *GetCertificateauthorityParams, reqEditors ...RequestEditorFn) (*GetCertificateauthorityResponse, error)

	// PostCertificateauthorityWithBodyWithResponse request with any body
	PostCertificateauthorityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificateauthorityResponse, error)

	PostCertificateauthorityWithResponse(ctx context.Context, body PostCertificateauthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificateauthorityResponse, error)

	// PostCertificateauthorityCaSignCsrWithBodyWithResponse request with any body
	PostCertificateauthorityCaSignCsrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificateauthorityCaSignCsrResponse, error)

	PostCertificateauthorityCaSignCsrWithResponse(ctx context.Context, body PostCertificateauthorityCaSignCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificateauthorityCaSignCsrResponse, error)

	// DeleteCertificateauthorityIdIdWithResponse request
	DeleteCertificateauthorityIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCertificateauthorityIdIdResponse, error)

	// GetCertificateauthorityIdIdWithResponse request
	GetCertificateauthorityIdIdWithResponse(ctx context.Context, id int, params *GetCertificateauthorityIdIdParams, reqEditors ...RequestEditorFn) (*GetCertificateauthorityIdIdResponse, error)

	// PutCertificateauthorityIdIdWithBodyWithResponse request with any body
	PutCertificateauthorityIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCertificateauthorityIdIdResponse, error)

	PutCertificateauthorityIdIdWithResponse(ctx context.Context, id int, body PutCertificateauthorityIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCertificateauthorityIdIdResponse, error)

	// GetCertificateauthorityProfilesWithResponse request
	GetCertificateauthorityProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateauthorityProfilesResponse, error)

	// GetCloudsyncWithResponse request
	GetCloudsyncWithResponse(ctx context.Context, params *GetCloudsyncParams, reqEditors ...RequestEditorFn) (*GetCloudsyncResponse, error)

	// PostCloudsyncWithBodyWithResponse request with any body
	PostCloudsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncResponse, error)

	PostCloudsyncWithResponse(ctx context.Context, body PostCloudsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncResponse, error)

	// GetCloudsyncCommonTaskSchemaWithResponse request
	GetCloudsyncCommonTaskSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCloudsyncCommonTaskSchemaResponse, error)

	// GetCloudsyncCredentialsWithResponse request
	GetCloudsyncCredentialsWithResponse(ctx context.Context, params *GetCloudsyncCredentialsParams, reqEditors ...RequestEditorFn) (*GetCloudsyncCredentialsResponse, error)

	// PostCloudsyncCredentialsWithBodyWithResponse request with any body
	PostCloudsyncCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncCredentialsResponse, error)

	PostCloudsyncCredentialsWithResponse(ctx context.Context, body PostCloudsyncCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncCredentialsResponse, error)

	// DeleteCloudsyncCredentialsIdIdWithResponse request
	DeleteCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCloudsyncCredentialsIdIdResponse, error)

	// GetCloudsyncCredentialsIdIdWithResponse request
	GetCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int, params *GetCloudsyncCredentialsIdIdParams, reqEditors ...RequestEditorFn) (*GetCloudsyncCredentialsIdIdResponse, error)

	// PutCloudsyncCredentialsIdIdWithBodyWithResponse request with any body
	PutCloudsyncCredentialsIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCloudsyncCredentialsIdIdResponse, error)

	PutCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCloudsyncCredentialsIdIdResponse, error)

	// PostCloudsyncCredentialsVerifyWithBodyWithResponse request with any body
	PostCloudsyncCredentialsVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncCredentialsVerifyResponse, error)

	PostCloudsyncCredentialsVerifyWithResponse(ctx context.Context, body PostCloudsyncCredentialsVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncCredentialsVerifyResponse, error)

	// DeleteCloudsyncIdIdWithResponse request
	DeleteCloudsyncIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCloudsyncIdIdResponse, error)

	// GetCloudsyncIdIdWithResponse request
	GetCloudsyncIdIdWithResponse(ctx context.Context, id int, params *GetCloudsyncIdIdParams, reqEditors ...RequestEditorFn) (*GetCloudsyncIdIdResponse, error)

	// PutCloudsyncIdIdWithBodyWithResponse request with any body
	PutCloudsyncIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCloudsyncIdIdResponse, error)

	PutCloudsyncIdIdWithResponse(ctx context.Context, id int, body PutCloudsyncIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCloudsyncIdIdResponse, error)

	// PostCloudsyncIdIdAbortWithBodyWithResponse request with any body
	PostCloudsyncIdIdAbortWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdAbortResponse, error)

	PostCloudsyncIdIdAbortWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdAbortResponse, error)

	// PostCloudsyncIdIdRestoreWithBodyWithResponse request with any body
	PostCloudsyncIdIdRestoreWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdRestoreResponse, error)

	PostCloudsyncIdIdRestoreWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdRestoreResponse, error)

	// PostCloudsyncIdIdSyncWithBodyWithResponse request with any body
	PostCloudsyncIdIdSyncWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdSyncResponse, error)

	PostCloudsyncIdIdSyncWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdSyncResponse, error)

	// PostCloudsyncListBucketsWithBodyWithResponse request with any body
	PostCloudsyncListBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncListBucketsResponse, error)

	PostCloudsyncListBucketsWithResponse(ctx context.Context, body PostCloudsyncListBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncListBucketsResponse, error)

	// PostCloudsyncListDirectoryWithBodyWithResponse request with any body
	PostCloudsyncListDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncListDirectoryResponse, error)

	PostCloudsyncListDirectoryWithResponse(ctx context.Context, body PostCloudsyncListDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncListDirectoryResponse, error)

	// PostCloudsyncOnedriveListDrivesWithBodyWithResponse request with any body
	PostCloudsyncOnedriveListDrivesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncOnedriveListDrivesResponse, error)

	PostCloudsyncOnedriveListDrivesWithResponse(ctx context.Context, body PostCloudsyncOnedriveListDrivesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncOnedriveListDrivesResponse, error)

	// GetCloudsyncProvidersWithResponse request
	GetCloudsyncProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCloudsyncProvidersResponse, error)

	// PostCloudsyncSyncOnetimeWithBodyWithResponse request with any body
	PostCloudsyncSyncOnetimeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncSyncOnetimeResponse, error)

	PostCloudsyncSyncOnetimeWithResponse(ctx context.Context, body PostCloudsyncSyncOnetimeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncSyncOnetimeResponse, error)

	// PostConfigResetWithBodyWithResponse request with any body
	PostConfigResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigResetResponse, error)

	PostConfigResetWithResponse(ctx context.Context, body PostConfigResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigResetResponse, error)

	// PostCoreBulkWithBodyWithResponse request with any body
	PostCoreBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreBulkResponse, error)

	PostCoreBulkWithResponse(ctx context.Context, body PostCoreBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreBulkResponse, error)

	// PostCoreDebugWithBodyWithResponse request with any body
	PostCoreDebugWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreDebugResponse, error)

	PostCoreDebugWithResponse(ctx context.Context, body PostCoreDebugJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreDebugResponse, error)

	// PostCoreDownloadWithBodyWithResponse request with any body
	PostCoreDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreDownloadResponse, error)

	PostCoreDownloadWithResponse(ctx context.Context, body PostCoreDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreDownloadResponse, error)

	// GetCoreGetEventsWithResponse request
	GetCoreGetEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCoreGetEventsResponse, error)

	// GetCoreGetJobsWithResponse request
	GetCoreGetJobsWithResponse(ctx context.Context, params *GetCoreGetJobsParams, reqEditors ...RequestEditorFn) (*GetCoreGetJobsResponse, error)

	// PostCoreGetMethodsWithBodyWithResponse request with any body
	PostCoreGetMethodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreGetMethodsResponse, error)

	PostCoreGetMethodsWithResponse(ctx context.Context, body PostCoreGetMethodsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreGetMethodsResponse, error)

	// GetCoreGetServicesWithResponse request
	GetCoreGetServicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCoreGetServicesResponse, error)

	// PostCoreJobAbortWithBodyWithResponse request with any body
	PostCoreJobAbortWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreJobAbortResponse, error)

	PostCoreJobAbortWithResponse(ctx context.Context, body PostCoreJobAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreJobAbortResponse, error)

	// PostCoreJobUpdateWithBodyWithResponse request with any body
	PostCoreJobUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreJobUpdateResponse, error)

	PostCoreJobUpdateWithResponse(ctx context.Context, body PostCoreJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreJobUpdateResponse, error)

	// PostCoreJobWaitWithBodyWithResponse request with any body
	PostCoreJobWaitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreJobWaitResponse, error)

	PostCoreJobWaitWithResponse(ctx context.Context, body PostCoreJobWaitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreJobWaitResponse, error)

	// GetCorePingWithResponse request
	GetCorePingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCorePingResponse, error)

	// PostCorePingRemoteWithBodyWithResponse request with any body
	PostCorePingRemoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCorePingRemoteResponse, error)

	PostCorePingRemoteWithResponse(ctx context.Context, body PostCorePingRemoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCorePingRemoteResponse, error)

	// PostCoreResizeShellWithBodyWithResponse request with any body
	PostCoreResizeShellWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreResizeShellResponse, error)

	PostCoreResizeShellWithResponse(ctx context.Context, body PostCoreResizeShellJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreResizeShellResponse, error)

	// GetCoreSessionsWithResponse request
	GetCoreSessionsWithResponse(ctx context.Context, params *GetCoreSessionsParams, reqEditors ...RequestEditorFn) (*GetCoreSessionsResponse, error)

	// GetCronjobWithResponse request
	GetCronjobWithResponse(ctx context.Context, params *GetCronjobParams, reqEditors ...RequestEditorFn) (*GetCronjobResponse, error)

	// PostCronjobWithBodyWithResponse request with any body
	PostCronjobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCronjobResponse, error)

	PostCronjobWithResponse(ctx context.Context, body PostCronjobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCronjobResponse, error)

	// DeleteCronjobIdIdWithResponse request
	DeleteCronjobIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCronjobIdIdResponse, error)

	// GetCronjobIdIdWithResponse request
	GetCronjobIdIdWithResponse(ctx context.Context, id int, params *GetCronjobIdIdParams, reqEditors ...RequestEditorFn) (*GetCronjobIdIdResponse, error)

	// PutCronjobIdIdWithBodyWithResponse request with any body
	PutCronjobIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCronjobIdIdResponse, error)

	PutCronjobIdIdWithResponse(ctx context.Context, id int, body PutCronjobIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCronjobIdIdResponse, error)

	// PostCronjobRunWithBodyWithResponse request with any body
	PostCronjobRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCronjobRunResponse, error)

	PostCronjobRunWithResponse(ctx context.Context, body PostCronjobRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCronjobRunResponse, error)

	// PostDeviceGetInfoWithBodyWithResponse request with any body
	PostDeviceGetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeviceGetInfoResponse, error)

	PostDeviceGetInfoWithResponse(ctx context.Context, body PostDeviceGetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeviceGetInfoResponse, error)

	// GetDirectoryservicesCacheRefreshWithResponse request
	GetDirectoryservicesCacheRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDirectoryservicesCacheRefreshResponse, error)

	// GetDirectoryservicesGetStateWithResponse request
	GetDirectoryservicesGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDirectoryservicesGetStateResponse, error)

	// GetDiskWithResponse request
	GetDiskWithResponse(ctx context.Context, params *GetDiskParams, reqEditors ...RequestEditorFn) (*GetDiskResponse, error)

	// PostDiskGetEncryptedWithBodyWithResponse request with any body
	PostDiskGetEncryptedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskGetEncryptedResponse, error)

	PostDiskGetEncryptedWithResponse(ctx context.Context, body PostDiskGetEncryptedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskGetEncryptedResponse, error)

	// PostDiskGetUnusedWithBodyWithResponse request with any body
	PostDiskGetUnusedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskGetUnusedResponse, error)

	PostDiskGetUnusedWithResponse(ctx context.Context, body PostDiskGetUnusedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskGetUnusedResponse, error)

	// GetDiskIdIdWithResponse request
	GetDiskIdIdWithResponse(ctx context.Context, id int, params *GetDiskIdIdParams, reqEditors ...RequestEditorFn) (*GetDiskIdIdResponse, error)

	// PutDiskIdIdWithBodyWithResponse request with any body
	PutDiskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDiskIdIdResponse, error)

	PutDiskIdIdWithResponse(ctx context.Context, id int, body PutDiskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDiskIdIdResponse, error)

	// GetDiskLabelToDevWithResponse request
	GetDiskLabelToDevWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDiskLabelToDevResponse, error)

	// PostDiskOverprovisionWithBodyWithResponse request with any body
	PostDiskOverprovisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskOverprovisionResponse, error)

	PostDiskOverprovisionWithResponse(ctx context.Context, body PostDiskOverprovisionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskOverprovisionResponse, error)

	// GetDiskSedDevNameWithResponse request
	GetDiskSedDevNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDiskSedDevNameResponse, error)

	// PostDiskSmartAttributesWithBodyWithResponse request with any body
	PostDiskSmartAttributesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskSmartAttributesResponse, error)

	PostDiskSmartAttributesWithResponse(ctx context.Context, body PostDiskSmartAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskSmartAttributesResponse, error)

	// PostDiskSpindownWithBodyWithResponse request with any body
	PostDiskSpindownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskSpindownResponse, error)

	PostDiskSpindownWithResponse(ctx context.Context, body PostDiskSpindownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskSpindownResponse, error)

	// PostDiskTemperatureWithBodyWithResponse request with any body
	PostDiskTemperatureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskTemperatureResponse, error)

	PostDiskTemperatureWithResponse(ctx context.Context, body PostDiskTemperatureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskTemperatureResponse, error)

	// PostDiskTemperaturesWithBodyWithResponse request with any body
	PostDiskTemperaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskTemperaturesResponse, error)

	PostDiskTemperaturesWithResponse(ctx context.Context, body PostDiskTemperaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskTemperaturesResponse, error)

	// PostDiskUnoverprovisionWithBodyWithResponse request with any body
	PostDiskUnoverprovisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskUnoverprovisionResponse, error)

	PostDiskUnoverprovisionWithResponse(ctx context.Context, body PostDiskUnoverprovisionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskUnoverprovisionResponse, error)

	// PostDiskWipeWithBodyWithResponse request with any body
	PostDiskWipeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskWipeResponse, error)

	PostDiskWipeWithResponse(ctx context.Context, body PostDiskWipeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskWipeResponse, error)

	// GetDnsQueryWithResponse request
	GetDnsQueryWithResponse(ctx context.Context, params *GetDnsQueryParams, reqEditors ...RequestEditorFn) (*GetDnsQueryResponse, error)

	// GetDyndnsWithResponse request
	GetDyndnsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDyndnsResponse, error)

	// PutDyndnsWithBodyWithResponse request with any body
	PutDyndnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDyndnsResponse, error)

	PutDyndnsWithResponse(ctx context.Context, body PutDyndnsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDyndnsResponse, error)

	// GetDyndnsProviderChoicesWithResponse request
	GetDyndnsProviderChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDyndnsProviderChoicesResponse, error)

	// GetEc2MetaWithResponse request
	GetEc2MetaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2MetaResponse, error)

	// GetEc2InstanceIdWithResponse request
	GetEc2InstanceIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2InstanceIdResponse, error)

	// GetEc2SetNtpServersWithResponse request
	GetEc2SetNtpServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2SetNtpServersResponse, error)

	// GetEc2SetRootSshPublicKeyWithResponse request
	GetEc2SetRootSshPublicKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2SetRootSshPublicKeyResponse, error)

	// GetEc2SetupWithResponse request
	GetEc2SetupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2SetupResponse, error)

	// GetEnclosureWithResponse request
	GetEnclosureWithResponse(ctx context.Context, params *GetEnclosureParams, reqEditors ...RequestEditorFn) (*GetEnclosureResponse, error)

	// GetEnclosureIdIdWithResponse request
	GetEnclosureIdIdWithResponse(ctx context.Context, id int, params *GetEnclosureIdIdParams, reqEditors ...RequestEditorFn) (*GetEnclosureIdIdResponse, error)

	// PutEnclosureIdIdWithBodyWithResponse request with any body
	PutEnclosureIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEnclosureIdIdResponse, error)

	PutEnclosureIdIdWithResponse(ctx context.Context, id int, body PutEnclosureIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEnclosureIdIdResponse, error)

	// PostEnclosureSetSlotStatusWithBodyWithResponse request with any body
	PostEnclosureSetSlotStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnclosureSetSlotStatusResponse, error)

	PostEnclosureSetSlotStatusWithResponse(ctx context.Context, body PostEnclosureSetSlotStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnclosureSetSlotStatusResponse, error)

	// GetFailoverWithResponse request
	GetFailoverWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverResponse, error)

	// PutFailoverWithBodyWithResponse request with any body
	PutFailoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFailoverResponse, error)

	PutFailoverWithResponse(ctx context.Context, body PutFailoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFailoverResponse, error)

	// PostFailoverCallRemoteWithBodyWithResponse request with any body
	PostFailoverCallRemoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverCallRemoteResponse, error)

	PostFailoverCallRemoteWithResponse(ctx context.Context, body PostFailoverCallRemoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverCallRemoteResponse, error)

	// PostFailoverControlWithBodyWithResponse request with any body
	PostFailoverControlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverControlResponse, error)

	PostFailoverControlWithResponse(ctx context.Context, body PostFailoverControlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverControlResponse, error)

	// GetFailoverForceMasterWithResponse request
	GetFailoverForceMasterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverForceMasterResponse, error)

	// GetFailoverHardwareWithResponse request
	GetFailoverHardwareWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverHardwareResponse, error)

	// GetFailoverInProgressWithResponse request
	GetFailoverInProgressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverInProgressResponse, error)

	// GetFailoverLicensedWithResponse request
	GetFailoverLicensedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverLicensedResponse, error)

	// GetFailoverNodeWithResponse request
	GetFailoverNodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverNodeResponse, error)

	// GetFailoverStatusWithResponse request
	GetFailoverStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverStatusResponse, error)

	// GetFailoverSyncFromPeerWithResponse request
	GetFailoverSyncFromPeerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverSyncFromPeerResponse, error)

	// PostFailoverSyncToPeerWithBodyWithResponse request with any body
	PostFailoverSyncToPeerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverSyncToPeerResponse, error)

	PostFailoverSyncToPeerWithResponse(ctx context.Context, body PostFailoverSyncToPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverSyncToPeerResponse, error)

	// PostFailoverUnlockWithBodyWithResponse request with any body
	PostFailoverUnlockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverUnlockResponse, error)

	PostFailoverUnlockWithResponse(ctx context.Context, body PostFailoverUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverUnlockResponse, error)

	// PostFailoverUpgradeWithBodyWithResponse request with any body
	PostFailoverUpgradeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverUpgradeResponse, error)

	PostFailoverUpgradeWithResponse(ctx context.Context, body PostFailoverUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverUpgradeResponse, error)

	// GetFailoverUpgradeFinishWithResponse request
	GetFailoverUpgradeFinishWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverUpgradeFinishResponse, error)

	// GetFailoverUpgradePendingWithResponse request
	GetFailoverUpgradePendingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverUpgradePendingResponse, error)

	// GetFcportWithResponse request
	GetFcportWithResponse(ctx context.Context, params *GetFcportParams, reqEditors ...RequestEditorFn) (*GetFcportResponse, error)

	// GetFcportIdIdWithResponse request
	GetFcportIdIdWithResponse(ctx context.Context, id int, params *GetFcportIdIdParams, reqEditors ...RequestEditorFn) (*GetFcportIdIdResponse, error)

	// PutFcportIdIdWithBodyWithResponse request with any body
	PutFcportIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFcportIdIdResponse, error)

	PutFcportIdIdWithResponse(ctx context.Context, id int, body PutFcportIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFcportIdIdResponse, error)

	// PostFilesystemAclIsTrivialWithBodyWithResponse request with any body
	PostFilesystemAclIsTrivialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemAclIsTrivialResponse, error)

	PostFilesystemAclIsTrivialWithResponse(ctx context.Context, body PostFilesystemAclIsTrivialJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemAclIsTrivialResponse, error)

	// PostFilesystemChownWithBodyWithResponse request with any body
	PostFilesystemChownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemChownResponse, error)

	PostFilesystemChownWithResponse(ctx context.Context, body PostFilesystemChownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemChownResponse, error)

	// GetFilesystemDefaultAclChoicesWithResponse request
	GetFilesystemDefaultAclChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFilesystemDefaultAclChoicesResponse, error)

	// PostFilesystemGetDefaultAclWithBodyWithResponse request with any body
	PostFilesystemGetDefaultAclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemGetDefaultAclResponse, error)

	PostFilesystemGetDefaultAclWithResponse(ctx context.Context, body PostFilesystemGetDefaultAclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemGetDefaultAclResponse, error)

	// PostFilesystemGetaclWithBodyWithResponse request with any body
	PostFilesystemGetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemGetaclResponse, error)

	PostFilesystemGetaclWithResponse(ctx context.Context, body PostFilesystemGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemGetaclResponse, error)

	// PostFilesystemListdirWithBodyWithResponse request with any body
	PostFilesystemListdirWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemListdirResponse, error)

	PostFilesystemListdirWithResponse(ctx context.Context, body PostFilesystemListdirJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemListdirResponse, error)

	// PostFilesystemSetaclWithBodyWithResponse request with any body
	PostFilesystemSetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemSetaclResponse, error)

	PostFilesystemSetaclWithResponse(ctx context.Context, body PostFilesystemSetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemSetaclResponse, error)

	// PostFilesystemSetpermWithBodyWithResponse request with any body
	PostFilesystemSetpermWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemSetpermResponse, error)

	PostFilesystemSetpermWithResponse(ctx context.Context, body PostFilesystemSetpermJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemSetpermResponse, error)

	// PostFilesystemStatWithBodyWithResponse request with any body
	PostFilesystemStatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemStatResponse, error)

	PostFilesystemStatWithResponse(ctx context.Context, body PostFilesystemStatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemStatResponse, error)

	// PostFilesystemStatfsWithBodyWithResponse request with any body
	PostFilesystemStatfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemStatfsResponse, error)

	PostFilesystemStatfsWithResponse(ctx context.Context, body PostFilesystemStatfsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemStatfsResponse, error)

	// GetFtpWithResponse request
	GetFtpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFtpResponse, error)

	// PutFtpWithBodyWithResponse request with any body
	PutFtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFtpResponse, error)

	PutFtpWithResponse(ctx context.Context, body PutFtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFtpResponse, error)

	// GetGroupWithResponse request
	GetGroupWithResponse(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*GetGroupResponse, error)

	// PostGroupWithBodyWithResponse request with any body
	PostGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupResponse, error)

	PostGroupWithResponse(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupResponse, error)

	// PostGroupGetGroupObjWithBodyWithResponse request with any body
	PostGroupGetGroupObjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupGetGroupObjResponse, error)

	PostGroupGetGroupObjWithResponse(ctx context.Context, body PostGroupGetGroupObjJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupGetGroupObjResponse, error)

	// GetGroupGetNextGidWithResponse request
	GetGroupGetNextGidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGroupGetNextGidResponse, error)

	// DeleteGroupIdIdWithBodyWithResponse request with any body
	DeleteGroupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGroupIdIdResponse, error)

	DeleteGroupIdIdWithResponse(ctx context.Context, id int, body DeleteGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupIdIdResponse, error)

	// GetGroupIdIdWithResponse request
	GetGroupIdIdWithResponse(ctx context.Context, id int, params *GetGroupIdIdParams, reqEditors ...RequestEditorFn) (*GetGroupIdIdResponse, error)

	// PutGroupIdIdWithBodyWithResponse request with any body
	PutGroupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupIdIdResponse, error)

	PutGroupIdIdWithResponse(ctx context.Context, id int, body PutGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupIdIdResponse, error)

	// GetIdmapWithResponse request
	GetIdmapWithResponse(ctx context.Context, params *GetIdmapParams, reqEditors ...RequestEditorFn) (*GetIdmapResponse, error)

	// PostIdmapWithBodyWithResponse request with any body
	PostIdmapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdmapResponse, error)

	PostIdmapWithResponse(ctx context.Context, body PostIdmapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdmapResponse, error)

	// GetIdmapBackendChoicesWithResponse request
	GetIdmapBackendChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIdmapBackendChoicesResponse, error)

	// GetIdmapBackendOptionsWithResponse request
	GetIdmapBackendOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIdmapBackendOptionsResponse, error)

	// GetIdmapClearIdmapCacheWithResponse request
	GetIdmapClearIdmapCacheWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIdmapClearIdmapCacheResponse, error)

	// DeleteIdmapIdIdWithResponse request
	DeleteIdmapIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteIdmapIdIdResponse, error)

	// GetIdmapIdIdWithResponse request
	GetIdmapIdIdWithResponse(ctx context.Context, id int, params *GetIdmapIdIdParams, reqEditors ...RequestEditorFn) (*GetIdmapIdIdResponse, error)

	// PutIdmapIdIdWithBodyWithResponse request with any body
	PutIdmapIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdmapIdIdResponse, error)

	PutIdmapIdIdWithResponse(ctx context.Context, id int, body PutIdmapIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdmapIdIdResponse, error)

	// PostIdmapOptionsChoicesWithBodyWithResponse request with any body
	PostIdmapOptionsChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdmapOptionsChoicesResponse, error)

	PostIdmapOptionsChoicesWithResponse(ctx context.Context, body PostIdmapOptionsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdmapOptionsChoicesResponse, error)

	// GetInitshutdownscriptWithResponse request
	GetInitshutdownscriptWithResponse(ctx context.Context, params *GetInitshutdownscriptParams, reqEditors ...RequestEditorFn) (*GetInitshutdownscriptResponse, error)

	// PostInitshutdownscriptWithBodyWithResponse request with any body
	PostInitshutdownscriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInitshutdownscriptResponse, error)

	PostInitshutdownscriptWithResponse(ctx context.Context, body PostInitshutdownscriptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInitshutdownscriptResponse, error)

	// DeleteInitshutdownscriptIdIdWithResponse request
	DeleteInitshutdownscriptIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteInitshutdownscriptIdIdResponse, error)

	// GetInitshutdownscriptIdIdWithResponse request
	GetInitshutdownscriptIdIdWithResponse(ctx context.Context, id int, params *GetInitshutdownscriptIdIdParams, reqEditors ...RequestEditorFn) (*GetInitshutdownscriptIdIdResponse, error)

	// PutInitshutdownscriptIdIdWithBodyWithResponse request with any body
	PutInitshutdownscriptIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInitshutdownscriptIdIdResponse, error)

	PutInitshutdownscriptIdIdWithResponse(ctx context.Context, id int, body PutInitshutdownscriptIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInitshutdownscriptIdIdResponse, error)

	// GetInterfaceWithResponse request
	GetInterfaceWithResponse(ctx context.Context, params *GetInterfaceParams, reqEditors ...RequestEditorFn) (*GetInterfaceResponse, error)

	// PostInterfaceWithBodyWithResponse request with any body
	PostInterfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceResponse, error)

	PostInterfaceWithResponse(ctx context.Context, body PostInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceResponse, error)

	// PostInterfaceBridgeMembersChoicesWithBodyWithResponse request with any body
	PostInterfaceBridgeMembersChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceBridgeMembersChoicesResponse, error)

	PostInterfaceBridgeMembersChoicesWithResponse(ctx context.Context, body PostInterfaceBridgeMembersChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceBridgeMembersChoicesResponse, error)

	// GetInterfaceCheckinWithResponse request
	GetInterfaceCheckinWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceCheckinResponse, error)

	// GetInterfaceCheckinWaitingWithResponse request
	GetInterfaceCheckinWaitingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceCheckinWaitingResponse, error)

	// PostInterfaceChoicesWithBodyWithResponse request with any body
	PostInterfaceChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceChoicesResponse, error)

	PostInterfaceChoicesWithResponse(ctx context.Context, body PostInterfaceChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceChoicesResponse, error)

	// PostInterfaceCommitWithBodyWithResponse request with any body
	PostInterfaceCommitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceCommitResponse, error)

	PostInterfaceCommitWithResponse(ctx context.Context, body PostInterfaceCommitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceCommitResponse, error)

	// GetInterfaceEnableCapabilitiesIndividuallyWithResponse request
	GetInterfaceEnableCapabilitiesIndividuallyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceEnableCapabilitiesIndividuallyResponse, error)

	// GetInterfaceHasPendingChangesWithResponse request
	GetInterfaceHasPendingChangesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceHasPendingChangesResponse, error)

	// DeleteInterfaceIdIdWithResponse request
	DeleteInterfaceIdIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteInterfaceIdIdResponse, error)

	// GetInterfaceIdIdWithResponse request
	GetInterfaceIdIdWithResponse(ctx context.Context, id string, params *GetInterfaceIdIdParams, reqEditors ...RequestEditorFn) (*GetInterfaceIdIdResponse, error)

	// PutInterfaceIdIdWithBodyWithResponse request with any body
	PutInterfaceIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInterfaceIdIdResponse, error)

	PutInterfaceIdIdWithResponse(ctx context.Context, id string, body PutInterfaceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInterfaceIdIdResponse, error)

	// PostInterfaceIpInUseWithBodyWithResponse request with any body
	PostInterfaceIpInUseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceIpInUseResponse, error)

	PostInterfaceIpInUseWithResponse(ctx context.Context, body PostInterfaceIpInUseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceIpInUseResponse, error)

	// PostInterfaceLagPortsChoicesWithBodyWithResponse request with any body
	PostInterfaceLagPortsChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceLagPortsChoicesResponse, error)

	PostInterfaceLagPortsChoicesWithResponse(ctx context.Context, body PostInterfaceLagPortsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceLagPortsChoicesResponse, error)

	// GetInterfaceLagSetupWithResponse request
	GetInterfaceLagSetupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceLagSetupResponse, error)

	// GetInterfaceRollbackWithResponse request
	GetInterfaceRollbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceRollbackResponse, error)

	// GetInterfaceVlanParentInterfaceChoicesWithResponse request
	GetInterfaceVlanParentInterfaceChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceVlanParentInterfaceChoicesResponse, error)

	// GetInterfaceVlanSetupWithResponse request
	GetInterfaceVlanSetupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceVlanSetupResponse, error)

	// GetIpmiWithResponse request
	GetIpmiWithResponse(ctx context.Context, params *GetIpmiParams, reqEditors ...RequestEditorFn) (*GetIpmiResponse, error)

	// GetIpmiChannelsWithResponse request
	GetIpmiChannelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpmiChannelsResponse, error)

	// GetIpmiIdIdWithResponse request
	GetIpmiIdIdWithResponse(ctx context.Context, id int, params *GetIpmiIdIdParams, reqEditors ...RequestEditorFn) (*GetIpmiIdIdResponse, error)

	// PutIpmiIdIdWithBodyWithResponse request with any body
	PutIpmiIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIpmiIdIdResponse, error)

	PutIpmiIdIdWithResponse(ctx context.Context, id int, body PutIpmiIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIpmiIdIdResponse, error)

	// PostIpmiIdentifyWithBodyWithResponse request with any body
	PostIpmiIdentifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIpmiIdentifyResponse, error)

	PostIpmiIdentifyWithResponse(ctx context.Context, body PostIpmiIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIpmiIdentifyResponse, error)

	// GetIpmiIsLoadedWithResponse request
	GetIpmiIsLoadedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpmiIsLoadedResponse, error)

	// GetIscsiAuthWithResponse request
	GetIscsiAuthWithResponse(ctx context.Context, params *GetIscsiAuthParams, reqEditors ...RequestEditorFn) (*GetIscsiAuthResponse, error)

	// PostIscsiAuthWithBodyWithResponse request with any body
	PostIscsiAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiAuthResponse, error)

	PostIscsiAuthWithResponse(ctx context.Context, body PostIscsiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiAuthResponse, error)

	// DeleteIscsiAuthIdIdWithResponse request
	DeleteIscsiAuthIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteIscsiAuthIdIdResponse, error)

	// GetIscsiAuthIdIdWithResponse request
	GetIscsiAuthIdIdWithResponse(ctx context.Context, id int, params *GetIscsiAuthIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiAuthIdIdResponse, error)

	// PutIscsiAuthIdIdWithBodyWithResponse request with any body
	PutIscsiAuthIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiAuthIdIdResponse, error)

	PutIscsiAuthIdIdWithResponse(ctx context.Context, id int, body PutIscsiAuthIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiAuthIdIdResponse, error)

	// GetIscsiExtentWithResponse request
	GetIscsiExtentWithResponse(ctx context.Context, params *GetIscsiExtentParams, reqEditors ...RequestEditorFn) (*GetIscsiExtentResponse, error)

	// PostIscsiExtentWithBodyWithResponse request with any body
	PostIscsiExtentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiExtentResponse, error)

	PostIscsiExtentWithResponse(ctx context.Context, body PostIscsiExtentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiExtentResponse, error)

	// PostIscsiExtentDiskChoicesWithBodyWithResponse request with any body
	PostIscsiExtentDiskChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiExtentDiskChoicesResponse, error)

	PostIscsiExtentDiskChoicesWithResponse(ctx context.Context, body PostIscsiExtentDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiExtentDiskChoicesResponse, error)

	// DeleteIscsiExtentIdIdWithBodyWithResponse request with any body
	DeleteIscsiExtentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiExtentIdIdResponse, error)

	DeleteIscsiExtentIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiExtentIdIdResponse, error)

	// GetIscsiExtentIdIdWithResponse request
	GetIscsiExtentIdIdWithResponse(ctx context.Context, id int, params *GetIscsiExtentIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiExtentIdIdResponse, error)

	// PutIscsiExtentIdIdWithBodyWithResponse request with any body
	PutIscsiExtentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiExtentIdIdResponse, error)

	PutIscsiExtentIdIdWithResponse(ctx context.Context, id int, body PutIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiExtentIdIdResponse, error)

	// GetIscsiGlobalWithResponse request
	GetIscsiGlobalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIscsiGlobalResponse, error)

	// PutIscsiGlobalWithBodyWithResponse request with any body
	PutIscsiGlobalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiGlobalResponse, error)

	PutIscsiGlobalWithResponse(ctx context.Context, body PutIscsiGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiGlobalResponse, error)

	// GetIscsiGlobalAluaEnabledWithResponse request
	GetIscsiGlobalAluaEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIscsiGlobalAluaEnabledResponse, error)

	// GetIscsiGlobalSessionsWithResponse request
	GetIscsiGlobalSessionsWithResponse(ctx context.Context, params *GetIscsiGlobalSessionsParams, reqEditors ...RequestEditorFn) (*GetIscsiGlobalSessionsResponse, error)

	// GetIscsiInitiatorWithResponse request
	GetIscsiInitiatorWithResponse(ctx context.Context, params *GetIscsiInitiatorParams, reqEditors ...RequestEditorFn) (*GetIscsiInitiatorResponse, error)

	// PostIscsiInitiatorWithBodyWithResponse request with any body
	PostIscsiInitiatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiInitiatorResponse, error)

	PostIscsiInitiatorWithResponse(ctx context.Context, body PostIscsiInitiatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiInitiatorResponse, error)

	// DeleteIscsiInitiatorIdIdWithResponse request
	DeleteIscsiInitiatorIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteIscsiInitiatorIdIdResponse, error)

	// GetIscsiInitiatorIdIdWithResponse request
	GetIscsiInitiatorIdIdWithResponse(ctx context.Context, id int, params *GetIscsiInitiatorIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiInitiatorIdIdResponse, error)

	// PutIscsiInitiatorIdIdWithBodyWithResponse request with any body
	PutIscsiInitiatorIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiInitiatorIdIdResponse, error)

	PutIscsiInitiatorIdIdWithResponse(ctx context.Context, id int, body PutIscsiInitiatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiInitiatorIdIdResponse, error)

	// GetIscsiPortalWithResponse request
	GetIscsiPortalWithResponse(ctx context.Context, params *GetIscsiPortalParams, reqEditors ...RequestEditorFn) (*GetIscsiPortalResponse, error)

	// PostIscsiPortalWithBodyWithResponse request with any body
	PostIscsiPortalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiPortalResponse, error)

	PostIscsiPortalWithResponse(ctx context.Context, body PostIscsiPortalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiPortalResponse, error)

	// DeleteIscsiPortalIdIdWithResponse request
	DeleteIscsiPortalIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteIscsiPortalIdIdResponse, error)

	// GetIscsiPortalIdIdWithResponse request
	GetIscsiPortalIdIdWithResponse(ctx context.Context, id int, params *GetIscsiPortalIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiPortalIdIdResponse, error)

	// PutIscsiPortalIdIdWithBodyWithResponse request with any body
	PutIscsiPortalIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiPortalIdIdResponse, error)

	PutIscsiPortalIdIdWithResponse(ctx context.Context, id int, body PutIscsiPortalIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiPortalIdIdResponse, error)

	// GetIscsiPortalListenIpChoicesWithResponse request
	GetIscsiPortalListenIpChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIscsiPortalListenIpChoicesResponse, error)

	// GetIscsiTargetWithResponse request
	GetIscsiTargetWithResponse(ctx context.Context, params *GetIscsiTargetParams, reqEditors ...RequestEditorFn) (*GetIscsiTargetResponse, error)

	// PostIscsiTargetWithBodyWithResponse request with any body
	PostIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiTargetResponse, error)

	PostIscsiTargetWithResponse(ctx context.Context, body PostIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiTargetResponse, error)

	// DeleteIscsiTargetIdIdWithBodyWithResponse request with any body
	DeleteIscsiTargetIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetIdIdResponse, error)

	DeleteIscsiTargetIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetIdIdResponse, error)

	// GetIscsiTargetIdIdWithResponse request
	GetIscsiTargetIdIdWithResponse(ctx context.Context, id int, params *GetIscsiTargetIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiTargetIdIdResponse, error)

	// PutIscsiTargetIdIdWithBodyWithResponse request with any body
	PutIscsiTargetIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiTargetIdIdResponse, error)

	PutIscsiTargetIdIdWithResponse(ctx context.Context, id int, body PutIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiTargetIdIdResponse, error)

	// GetIscsiTargetextentWithResponse request
	GetIscsiTargetextentWithResponse(ctx context.Context, params *GetIscsiTargetextentParams, reqEditors ...RequestEditorFn) (*GetIscsiTargetextentResponse, error)

	// PostIscsiTargetextentWithBodyWithResponse request with any body
	PostIscsiTargetextentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiTargetextentResponse, error)

	PostIscsiTargetextentWithResponse(ctx context.Context, body PostIscsiTargetextentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiTargetextentResponse, error)

	// DeleteIscsiTargetextentIdIdWithBodyWithResponse request with any body
	DeleteIscsiTargetextentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetextentIdIdResponse, error)

	DeleteIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetextentIdIdResponse, error)

	// GetIscsiTargetextentIdIdWithResponse request
	GetIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, params *GetIscsiTargetextentIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiTargetextentIdIdResponse, error)

	// PutIscsiTargetextentIdIdWithBodyWithResponse request with any body
	PutIscsiTargetextentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiTargetextentIdIdResponse, error)

	PutIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, body PutIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiTargetextentIdIdResponse, error)

	// GetJailWithResponse request
	GetJailWithResponse(ctx context.Context, params *GetJailParams, reqEditors ...RequestEditorFn) (*GetJailResponse, error)

	// PostJailWithBodyWithResponse request with any body
	PostJailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailResponse, error)

	PostJailWithResponse(ctx context.Context, body PostJailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailResponse, error)

	// PostJailActivateWithBodyWithResponse request with any body
	PostJailActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailActivateResponse, error)

	PostJailActivateWithResponse(ctx context.Context, body PostJailActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailActivateResponse, error)

	// PostJailCleanWithBodyWithResponse request with any body
	PostJailCleanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailCleanResponse, error)

	PostJailCleanWithResponse(ctx context.Context, body PostJailCleanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailCleanResponse, error)

	// GetJailDefaultConfigurationWithResponse request
	GetJailDefaultConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJailDefaultConfigurationResponse, error)

	// PostJailExecWithBodyWithResponse request with any body
	PostJailExecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailExecResponse, error)

	PostJailExecWithResponse(ctx context.Context, body PostJailExecJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailExecResponse, error)

	// PostJailExportWithBodyWithResponse request with any body
	PostJailExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailExportResponse, error)

	PostJailExportWithResponse(ctx context.Context, body PostJailExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailExportResponse, error)

	// PostJailFetchWithBodyWithResponse request with any body
	PostJailFetchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailFetchResponse, error)

	PostJailFetchWithResponse(ctx context.Context, body PostJailFetchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailFetchResponse, error)

	// PostJailFstabWithBodyWithResponse request with any body
	PostJailFstabWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailFstabResponse, error)

	PostJailFstabWithResponse(ctx context.Context, body PostJailFstabJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailFstabResponse, error)

	// GetJailGetActivatedPoolWithResponse request
	GetJailGetActivatedPoolWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJailGetActivatedPoolResponse, error)

	// DeleteJailIdIdWithBodyWithResponse request with any body
	DeleteJailIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteJailIdIdResponse, error)

	DeleteJailIdIdWithResponse(ctx context.Context, id string, body DeleteJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteJailIdIdResponse, error)

	// GetJailIdIdWithResponse request
	GetJailIdIdWithResponse(ctx context.Context, id string, params *GetJailIdIdParams, reqEditors ...RequestEditorFn) (*GetJailIdIdResponse, error)

	// PutJailIdIdWithBodyWithResponse request with any body
	PutJailIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJailIdIdResponse, error)

	PutJailIdIdWithResponse(ctx context.Context, id string, body PutJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJailIdIdResponse, error)

	// PostJailIdIdCloneWithBodyWithResponse request with any body
	PostJailIdIdCloneWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailIdIdCloneResponse, error)

	PostJailIdIdCloneWithResponse(ctx context.Context, id string, body PostJailIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailIdIdCloneResponse, error)

	// PostJailImportImageWithBodyWithResponse request with any body
	PostJailImportImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailImportImageResponse, error)

	PostJailImportImageWithResponse(ctx context.Context, body PostJailImportImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailImportImageResponse, error)

	// GetJailInterfaceChoicesWithResponse request
	GetJailInterfaceChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJailInterfaceChoicesResponse, error)

	// PostJailRcActionWithBodyWithResponse request with any body
	PostJailRcActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailRcActionResponse, error)

	PostJailRcActionWithResponse(ctx context.Context, body PostJailRcActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailRcActionResponse, error)

	// PostJailReleasesChoicesWithBodyWithResponse request with any body
	PostJailReleasesChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailReleasesChoicesResponse, error)

	PostJailReleasesChoicesWithResponse(ctx context.Context, body PostJailReleasesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailReleasesChoicesResponse, error)

	// PostJailRestartWithBodyWithResponse request with any body
	PostJailRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailRestartResponse, error)

	PostJailRestartWithResponse(ctx context.Context, body PostJailRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailRestartResponse, error)

	// PostJailStartWithBodyWithResponse request with any body
	PostJailStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailStartResponse, error)

	PostJailStartWithResponse(ctx context.Context, body PostJailStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailStartResponse, error)

	// PostJailStopWithBodyWithResponse request with any body
	PostJailStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailStopResponse, error)

	PostJailStopWithResponse(ctx context.Context, body PostJailStopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailStopResponse, error)

	// PostJailUpdateDefaultsWithBodyWithResponse request with any body
	PostJailUpdateDefaultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailUpdateDefaultsResponse, error)

	PostJailUpdateDefaultsWithResponse(ctx context.Context, body PostJailUpdateDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailUpdateDefaultsResponse, error)

	// PostJailUpdateToLatestPatchWithBodyWithResponse request with any body
	PostJailUpdateToLatestPatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailUpdateToLatestPatchResponse, error)

	PostJailUpdateToLatestPatchWithResponse(ctx context.Context, body PostJailUpdateToLatestPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailUpdateToLatestPatchResponse, error)

	// GetJailVnetDefaultInterfaceChoicesWithResponse request
	GetJailVnetDefaultInterfaceChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJailVnetDefaultInterfaceChoicesResponse, error)

	// GetKerberosWithResponse request
	GetKerberosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKerberosResponse, error)

	// PutKerberosWithBodyWithResponse request with any body
	PutKerberosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKerberosResponse, error)

	PutKerberosWithResponse(ctx context.Context, body PutKerberosJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKerberosResponse, error)

	// GetKerberosKeytabWithResponse request
	GetKerberosKeytabWithResponse(ctx context.Context, params *GetKerberosKeytabParams, reqEditors ...RequestEditorFn) (*GetKerberosKeytabResponse, error)

	// PostKerberosKeytabWithBodyWithResponse request with any body
	PostKerberosKeytabWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKerberosKeytabResponse, error)

	PostKerberosKeytabWithResponse(ctx context.Context, body PostKerberosKeytabJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKerberosKeytabResponse, error)

	// DeleteKerberosKeytabIdIdWithResponse request
	DeleteKerberosKeytabIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteKerberosKeytabIdIdResponse, error)

	// GetKerberosKeytabIdIdWithResponse request
	GetKerberosKeytabIdIdWithResponse(ctx context.Context, id int, params *GetKerberosKeytabIdIdParams, reqEditors ...RequestEditorFn) (*GetKerberosKeytabIdIdResponse, error)

	// PutKerberosKeytabIdIdWithBodyWithResponse request with any body
	PutKerberosKeytabIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKerberosKeytabIdIdResponse, error)

	PutKerberosKeytabIdIdWithResponse(ctx context.Context, id int, body PutKerberosKeytabIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKerberosKeytabIdIdResponse, error)

	// GetKerberosKeytabSystemKeytabListWithResponse request
	GetKerberosKeytabSystemKeytabListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKerberosKeytabSystemKeytabListResponse, error)

	// GetKerberosRealmWithResponse request
	GetKerberosRealmWithResponse(ctx context.Context, params *GetKerberosRealmParams, reqEditors ...RequestEditorFn) (*GetKerberosRealmResponse, error)

	// PostKerberosRealmWithBodyWithResponse request with any body
	PostKerberosRealmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKerberosRealmResponse, error)

	PostKerberosRealmWithResponse(ctx context.Context, body PostKerberosRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKerberosRealmResponse, error)

	// DeleteKerberosRealmIdIdWithResponse request
	DeleteKerberosRealmIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteKerberosRealmIdIdResponse, error)

	// GetKerberosRealmIdIdWithResponse request
	GetKerberosRealmIdIdWithResponse(ctx context.Context, id int, params *GetKerberosRealmIdIdParams, reqEditors ...RequestEditorFn) (*GetKerberosRealmIdIdResponse, error)

	// PutKerberosRealmIdIdWithBodyWithResponse request with any body
	PutKerberosRealmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKerberosRealmIdIdResponse, error)

	PutKerberosRealmIdIdWithResponse(ctx context.Context, id int, body PutKerberosRealmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKerberosRealmIdIdResponse, error)

	// GetKeychaincredentialWithResponse request
	GetKeychaincredentialWithResponse(ctx context.Context, params *GetKeychaincredentialParams, reqEditors ...RequestEditorFn) (*GetKeychaincredentialResponse, error)

	// PostKeychaincredentialWithBodyWithResponse request with any body
	PostKeychaincredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeychaincredentialResponse, error)

	PostKeychaincredentialWithResponse(ctx context.Context, body PostKeychaincredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeychaincredentialResponse, error)

	// GetKeychaincredentialGenerateSshKeyPairWithResponse request
	GetKeychaincredentialGenerateSshKeyPairWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKeychaincredentialGenerateSshKeyPairResponse, error)

	// DeleteKeychaincredentialIdIdWithBodyWithResponse request with any body
	DeleteKeychaincredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteKeychaincredentialIdIdResponse, error)

	DeleteKeychaincredentialIdIdWithResponse(ctx context.Context, id int, body DeleteKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteKeychaincredentialIdIdResponse, error)

	// GetKeychaincredentialIdIdWithResponse request
	GetKeychaincredentialIdIdWithResponse(ctx context.Context, id int, params *GetKeychaincredentialIdIdParams, reqEditors ...RequestEditorFn) (*GetKeychaincredentialIdIdResponse, error)

	// PutKeychaincredentialIdIdWithBodyWithResponse request with any body
	PutKeychaincredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKeychaincredentialIdIdResponse, error)

	PutKeychaincredentialIdIdWithResponse(ctx context.Context, id int, body PutKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKeychaincredentialIdIdResponse, error)

	// PostKeychaincredentialRemoteSshHostKeyScanWithBodyWithResponse request with any body
	PostKeychaincredentialRemoteSshHostKeyScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error)

	PostKeychaincredentialRemoteSshHostKeyScanWithResponse(ctx context.Context, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error)

	// PostKeychaincredentialRemoteSshSemiautomaticSetupWithBodyWithResponse request with any body
	PostKeychaincredentialRemoteSshSemiautomaticSetupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error)

	PostKeychaincredentialRemoteSshSemiautomaticSetupWithResponse(ctx context.Context, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error)

	// PostKeychaincredentialUsedByWithBodyWithResponse request with any body
	PostKeychaincredentialUsedByWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeychaincredentialUsedByResponse, error)

	PostKeychaincredentialUsedByWithResponse(ctx context.Context, body PostKeychaincredentialUsedByJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeychaincredentialUsedByResponse, error)

	// GetKmipWithResponse request
	GetKmipWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKmipResponse, error)

	// PutKmipWithBodyWithResponse request with any body
	PutKmipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKmipResponse, error)

	PutKmipWithResponse(ctx context.Context, body PutKmipJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKmipResponse, error)

	// GetKmipClearSyncPendingKeysWithResponse request
	GetKmipClearSyncPendingKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKmipClearSyncPendingKeysResponse, error)

	// GetKmipKmipSyncPendingWithResponse request
	GetKmipKmipSyncPendingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKmipKmipSyncPendingResponse, error)

	// GetKmipSyncKeysWithResponse request
	GetKmipSyncKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKmipSyncKeysResponse, error)

	// GetLdapWithResponse request
	GetLdapWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapResponse, error)

	// PutLdapWithBodyWithResponse request with any body
	PutLdapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLdapResponse, error)

	PutLdapWithResponse(ctx context.Context, body PutLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLdapResponse, error)

	// GetLdapGetStateWithResponse request
	GetLdapGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapGetStateResponse, error)

	// GetLdapSchemaChoicesWithResponse request
	GetLdapSchemaChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapSchemaChoicesResponse, error)

	// GetLdapSslChoicesWithResponse request
	GetLdapSslChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapSslChoicesResponse, error)

	// GetLldpWithResponse request
	GetLldpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLldpResponse, error)

	// PutLldpWithBodyWithResponse request with any body
	PutLldpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLldpResponse, error)

	PutLldpWithResponse(ctx context.Context, body PutLldpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLldpResponse, error)

	// GetLldpCountryChoicesWithResponse request
	GetLldpCountryChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLldpCountryChoicesResponse, error)

	// GetMailWithResponse request
	GetMailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMailResponse, error)

	// PutMailWithBodyWithResponse request with any body
	PutMailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMailResponse, error)

	PutMailWithResponse(ctx context.Context, body PutMailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMailResponse, error)

	// PostMailSendWithBodyWithResponse request with any body
	PostMailSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMailSendResponse, error)

	PostMailSendWithResponse(ctx context.Context, body PostMailSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMailSendResponse, error)

	// GetMultipathWithResponse request
	GetMultipathWithResponse(ctx context.Context, params *GetMultipathParams, reqEditors ...RequestEditorFn) (*GetMultipathResponse, error)

	// GetMultipathIdIdWithResponse request
	GetMultipathIdIdWithResponse(ctx context.Context, id string, params *GetMultipathIdIdParams, reqEditors ...RequestEditorFn) (*GetMultipathIdIdResponse, error)

	// GetNetworkConfigurationWithResponse request
	GetNetworkConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNetworkConfigurationResponse, error)

	// PutNetworkConfigurationWithBodyWithResponse request with any body
	PutNetworkConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNetworkConfigurationResponse, error)

	PutNetworkConfigurationWithResponse(ctx context.Context, body PutNetworkConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNetworkConfigurationResponse, error)

	// GetNetworkGeneralSummaryWithResponse request
	GetNetworkGeneralSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNetworkGeneralSummaryResponse, error)

	// GetNfsWithResponse request
	GetNfsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNfsResponse, error)

	// PutNfsWithBodyWithResponse request with any body
	PutNfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNfsResponse, error)

	PutNfsWithResponse(ctx context.Context, body PutNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNfsResponse, error)

	// PostNfsAddPrincipalWithBodyWithResponse request with any body
	PostNfsAddPrincipalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNfsAddPrincipalResponse, error)

	PostNfsAddPrincipalWithResponse(ctx context.Context, body PostNfsAddPrincipalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNfsAddPrincipalResponse, error)

	// GetNfsBindipChoicesWithResponse request
	GetNfsBindipChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNfsBindipChoicesResponse, error)

	// GetNisWithResponse request
	GetNisWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNisResponse, error)

	// PutNisWithBodyWithResponse request with any body
	PutNisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNisResponse, error)

	PutNisWithResponse(ctx context.Context, body PutNisJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNisResponse, error)

	// GetNisGetStateWithResponse request
	GetNisGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNisGetStateResponse, error)

	// GetOpenvpnClientWithResponse request
	GetOpenvpnClientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnClientResponse, error)

	// PutOpenvpnClientWithBodyWithResponse request with any body
	PutOpenvpnClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOpenvpnClientResponse, error)

	PutOpenvpnClientWithResponse(ctx context.Context, body PutOpenvpnClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOpenvpnClientResponse, error)

	// GetOpenvpnClientAuthenticationAlgorithmChoicesWithResponse request
	GetOpenvpnClientAuthenticationAlgorithmChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnClientAuthenticationAlgorithmChoicesResponse, error)

	// GetOpenvpnClientCipherChoicesWithResponse request
	GetOpenvpnClientCipherChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnClientCipherChoicesResponse, error)

	// GetOpenvpnServerWithResponse request
	GetOpenvpnServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnServerResponse, error)

	// PutOpenvpnServerWithBodyWithResponse request with any body
	PutOpenvpnServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOpenvpnServerResponse, error)

	PutOpenvpnServerWithResponse(ctx context.Context, body PutOpenvpnServerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOpenvpnServerResponse, error)

	// GetOpenvpnServerAuthenticationAlgorithmChoicesWithResponse request
	GetOpenvpnServerAuthenticationAlgorithmChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnServerAuthenticationAlgorithmChoicesResponse, error)

	// GetOpenvpnServerCipherChoicesWithResponse request
	GetOpenvpnServerCipherChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnServerCipherChoicesResponse, error)

	// PostOpenvpnServerClientConfigurationGenerationWithBodyWithResponse request with any body
	PostOpenvpnServerClientConfigurationGenerationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOpenvpnServerClientConfigurationGenerationResponse, error)

	PostOpenvpnServerClientConfigurationGenerationWithResponse(ctx context.Context, body PostOpenvpnServerClientConfigurationGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOpenvpnServerClientConfigurationGenerationResponse, error)

	// GetOpenvpnServerRenewStaticKeyWithResponse request
	GetOpenvpnServerRenewStaticKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnServerRenewStaticKeyResponse, error)

	// GetPluginWithResponse request
	GetPluginWithResponse(ctx context.Context, params *GetPluginParams, reqEditors ...RequestEditorFn) (*GetPluginResponse, error)

	// PostPluginWithBodyWithResponse request with any body
	PostPluginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginResponse, error)

	PostPluginWithResponse(ctx context.Context, body PostPluginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginResponse, error)

	// PostPluginAvailableWithBodyWithResponse request with any body
	PostPluginAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginAvailableResponse, error)

	PostPluginAvailableWithResponse(ctx context.Context, body PostPluginAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginAvailableResponse, error)

	// PostPluginBranchesChoicesWithBodyWithResponse request with any body
	PostPluginBranchesChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginBranchesChoicesResponse, error)

	PostPluginBranchesChoicesWithResponse(ctx context.Context, body PostPluginBranchesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginBranchesChoicesResponse, error)

	// PostPluginDefaultsWithBodyWithResponse request with any body
	PostPluginDefaultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginDefaultsResponse, error)

	PostPluginDefaultsWithResponse(ctx context.Context, body PostPluginDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginDefaultsResponse, error)

	// DeletePluginIdIdWithResponse request
	DeletePluginIdIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePluginIdIdResponse, error)

	// GetPluginIdIdWithResponse request
	GetPluginIdIdWithResponse(ctx context.Context, id string, params *GetPluginIdIdParams, reqEditors ...RequestEditorFn) (*GetPluginIdIdResponse, error)

	// PutPluginIdIdWithBodyWithResponse request with any body
	PutPluginIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPluginIdIdResponse, error)

	PutPluginIdIdWithResponse(ctx context.Context, id string, body PutPluginIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPluginIdIdResponse, error)

	// GetPluginOfficialRepositoriesWithResponse request
	GetPluginOfficialRepositoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPluginOfficialRepositoriesResponse, error)

	// GetPluginRetrieveVersionsForReposWithResponse request
	GetPluginRetrieveVersionsForReposWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPluginRetrieveVersionsForReposResponse, error)

	// PostPluginUpdatePluginWithBodyWithResponse request with any body
	PostPluginUpdatePluginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginUpdatePluginResponse, error)

	PostPluginUpdatePluginWithResponse(ctx context.Context, body PostPluginUpdatePluginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginUpdatePluginResponse, error)

	// GetPoolWithResponse request
	GetPoolWithResponse(ctx context.Context, params *GetPoolParams, reqEditors ...RequestEditorFn) (*GetPoolResponse, error)

	// PostPoolWithBodyWithResponse request with any body
	PostPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolResponse, error)

	PostPoolWithResponse(ctx context.Context, body PostPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolResponse, error)

	// PostPoolAttachWithBodyWithResponse request with any body
	PostPoolAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolAttachResponse, error)

	PostPoolAttachWithResponse(ctx context.Context, body PostPoolAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolAttachResponse, error)

	// GetPoolDatasetWithResponse request
	GetPoolDatasetWithResponse(ctx context.Context, params *GetPoolDatasetParams, reqEditors ...RequestEditorFn) (*GetPoolDatasetResponse, error)

	// PostPoolDatasetWithBodyWithResponse request with any body
	PostPoolDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetResponse, error)

	PostPoolDatasetWithResponse(ctx context.Context, body PostPoolDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetResponse, error)

	// PostPoolDatasetChangeKeyWithBodyWithResponse request with any body
	PostPoolDatasetChangeKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetChangeKeyResponse, error)

	PostPoolDatasetChangeKeyWithResponse(ctx context.Context, body PostPoolDatasetChangeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetChangeKeyResponse, error)

	// GetPoolDatasetCompressionChoicesWithResponse request
	GetPoolDatasetCompressionChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolDatasetCompressionChoicesResponse, error)

	// GetPoolDatasetEncryptionAlgorithmChoicesWithResponse request
	GetPoolDatasetEncryptionAlgorithmChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolDatasetEncryptionAlgorithmChoicesResponse, error)

	// PostPoolDatasetEncryptionSummaryWithBodyWithResponse request with any body
	PostPoolDatasetEncryptionSummaryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetEncryptionSummaryResponse, error)

	PostPoolDatasetEncryptionSummaryWithResponse(ctx context.Context, body PostPoolDatasetEncryptionSummaryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetEncryptionSummaryResponse, error)

	// PostPoolDatasetExportKeyWithBodyWithResponse request with any body
	PostPoolDatasetExportKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetExportKeyResponse, error)

	PostPoolDatasetExportKeyWithResponse(ctx context.Context, body PostPoolDatasetExportKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetExportKeyResponse, error)

	// DeletePoolDatasetIdIdWithBodyWithResponse request with any body
	DeletePoolDatasetIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePoolDatasetIdIdResponse, error)

	DeletePoolDatasetIdIdWithResponse(ctx context.Context, id string, body DeletePoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePoolDatasetIdIdResponse, error)

	// GetPoolDatasetIdIdWithResponse request
	GetPoolDatasetIdIdWithResponse(ctx context.Context, id string, params *GetPoolDatasetIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolDatasetIdIdResponse, error)

	// PutPoolDatasetIdIdWithBodyWithResponse request with any body
	PutPoolDatasetIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolDatasetIdIdResponse, error)

	PutPoolDatasetIdIdWithResponse(ctx context.Context, id string, body PutPoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolDatasetIdIdResponse, error)

	// PostPoolDatasetIdIdAttachmentsWithBodyWithResponse request with any body
	PostPoolDatasetIdIdAttachmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdAttachmentsResponse, error)

	PostPoolDatasetIdIdAttachmentsWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdAttachmentsResponse, error)

	// PostPoolDatasetIdIdGetQuotaWithBodyWithResponse request with any body
	PostPoolDatasetIdIdGetQuotaWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdGetQuotaResponse, error)

	PostPoolDatasetIdIdGetQuotaWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdGetQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdGetQuotaResponse, error)

	// PostPoolDatasetIdIdPermissionWithBodyWithResponse request with any body
	PostPoolDatasetIdIdPermissionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdPermissionResponse, error)

	PostPoolDatasetIdIdPermissionWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdPermissionResponse, error)

	// PostPoolDatasetIdIdProcessesWithBodyWithResponse request with any body
	PostPoolDatasetIdIdProcessesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdProcessesResponse, error)

	PostPoolDatasetIdIdProcessesWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdProcessesResponse, error)

	// PostPoolDatasetIdIdPromoteWithBodyWithResponse request with any body
	PostPoolDatasetIdIdPromoteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdPromoteResponse, error)

	PostPoolDatasetIdIdPromoteWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdPromoteResponse, error)

	// PostPoolDatasetIdIdSetQuotaWithBodyWithResponse request with any body
	PostPoolDatasetIdIdSetQuotaWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdSetQuotaResponse, error)

	PostPoolDatasetIdIdSetQuotaWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdSetQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdSetQuotaResponse, error)

	// PostPoolDatasetInheritParentEncryptionPropertiesWithBodyWithResponse request with any body
	PostPoolDatasetInheritParentEncryptionPropertiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetInheritParentEncryptionPropertiesResponse, error)

	PostPoolDatasetInheritParentEncryptionPropertiesWithResponse(ctx context.Context, body PostPoolDatasetInheritParentEncryptionPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetInheritParentEncryptionPropertiesResponse, error)

	// PostPoolDatasetLockWithBodyWithResponse request with any body
	PostPoolDatasetLockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetLockResponse, error)

	PostPoolDatasetLockWithResponse(ctx context.Context, body PostPoolDatasetLockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetLockResponse, error)

	// PostPoolDatasetRecommendedZvolBlocksizeWithBodyWithResponse request with any body
	PostPoolDatasetRecommendedZvolBlocksizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error)

	PostPoolDatasetRecommendedZvolBlocksizeWithResponse(ctx context.Context, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error)

	// PostPoolDatasetUnlockWithBodyWithResponse request with any body
	PostPoolDatasetUnlockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetUnlockResponse, error)

	PostPoolDatasetUnlockWithResponse(ctx context.Context, body PostPoolDatasetUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetUnlockResponse, error)

	// GetPoolDatasetUserpropWithResponse request
	GetPoolDatasetUserpropWithResponse(ctx context.Context, params *GetPoolDatasetUserpropParams, reqEditors ...RequestEditorFn) (*GetPoolDatasetUserpropResponse, error)

	// PostPoolDatasetUserpropWithBodyWithResponse request with any body
	PostPoolDatasetUserpropWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetUserpropResponse, error)

	PostPoolDatasetUserpropWithResponse(ctx context.Context, body PostPoolDatasetUserpropJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetUserpropResponse, error)

	// DeletePoolDatasetUserpropIdIdWithBodyWithResponse request with any body
	DeletePoolDatasetUserpropIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePoolDatasetUserpropIdIdResponse, error)

	DeletePoolDatasetUserpropIdIdWithResponse(ctx context.Context, id string, body DeletePoolDatasetUserpropIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePoolDatasetUserpropIdIdResponse, error)

	// GetPoolDatasetUserpropIdIdWithResponse request
	GetPoolDatasetUserpropIdIdWithResponse(ctx context.Context, id string, params *GetPoolDatasetUserpropIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolDatasetUserpropIdIdResponse, error)

	// PutPoolDatasetUserpropIdIdWithBodyWithResponse request with any body
	PutPoolDatasetUserpropIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolDatasetUserpropIdIdResponse, error)

	PutPoolDatasetUserpropIdIdWithResponse(ctx context.Context, id string, body PutPoolDatasetUserpropIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolDatasetUserpropIdIdResponse, error)

	// PostPoolFilesystemChoicesWithBodyWithResponse request with any body
	PostPoolFilesystemChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolFilesystemChoicesResponse, error)

	PostPoolFilesystemChoicesWithResponse(ctx context.Context, body PostPoolFilesystemChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolFilesystemChoicesResponse, error)

	// GetPoolIdIdWithResponse request
	GetPoolIdIdWithResponse(ctx context.Context, id int, params *GetPoolIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolIdIdResponse, error)

	// PutPoolIdIdWithBodyWithResponse request with any body
	PutPoolIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolIdIdResponse, error)

	PutPoolIdIdWithResponse(ctx context.Context, id int, body PutPoolIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolIdIdResponse, error)

	// PostPoolIdIdAttachmentsWithBodyWithResponse request with any body
	PostPoolIdIdAttachmentsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdAttachmentsResponse, error)

	PostPoolIdIdAttachmentsWithResponse(ctx context.Context, id int, body PostPoolIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdAttachmentsResponse, error)

	// PostPoolIdIdDetachWithBodyWithResponse request with any body
	PostPoolIdIdDetachWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdDetachResponse, error)

	PostPoolIdIdDetachWithResponse(ctx context.Context, id int, body PostPoolIdIdDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdDetachResponse, error)

	// PostPoolIdIdDownloadEncryptionKeyWithBodyWithResponse request with any body
	PostPoolIdIdDownloadEncryptionKeyWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdDownloadEncryptionKeyResponse, error)

	PostPoolIdIdDownloadEncryptionKeyWithResponse(ctx context.Context, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdDownloadEncryptionKeyResponse, error)

	// PostPoolIdIdExpandWithBodyWithResponse request with any body
	PostPoolIdIdExpandWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdExpandResponse, error)

	PostPoolIdIdExpandWithResponse(ctx context.Context, id int, body PostPoolIdIdExpandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdExpandResponse, error)

	// PostPoolIdIdExportWithBodyWithResponse request with any body
	PostPoolIdIdExportWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdExportResponse, error)

	PostPoolIdIdExportWithResponse(ctx context.Context, id int, body PostPoolIdIdExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdExportResponse, error)

	// PostPoolIdIdGetDisksWithBodyWithResponse request with any body
	PostPoolIdIdGetDisksWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdGetDisksResponse, error)

	PostPoolIdIdGetDisksWithResponse(ctx context.Context, id int, body PostPoolIdIdGetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdGetDisksResponse, error)

	// PostPoolIdIdIsUpgradedWithBodyWithResponse request with any body
	PostPoolIdIdIsUpgradedWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdIsUpgradedResponse, error)

	PostPoolIdIdIsUpgradedWithResponse(ctx context.Context, id int, body PostPoolIdIdIsUpgradedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdIsUpgradedResponse, error)

	// PostPoolIdIdLockWithBodyWithResponse request with any body
	PostPoolIdIdLockWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdLockResponse, error)

	PostPoolIdIdLockWithResponse(ctx context.Context, id int, body PostPoolIdIdLockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdLockResponse, error)

	// PostPoolIdIdOfflineWithBodyWithResponse request with any body
	PostPoolIdIdOfflineWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdOfflineResponse, error)

	PostPoolIdIdOfflineWithResponse(ctx context.Context, id int, body PostPoolIdIdOfflineJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdOfflineResponse, error)

	// PostPoolIdIdOnlineWithBodyWithResponse request with any body
	PostPoolIdIdOnlineWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdOnlineResponse, error)

	PostPoolIdIdOnlineWithResponse(ctx context.Context, id int, body PostPoolIdIdOnlineJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdOnlineResponse, error)

	// PostPoolIdIdPassphraseWithBodyWithResponse request with any body
	PostPoolIdIdPassphraseWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdPassphraseResponse, error)

	PostPoolIdIdPassphraseWithResponse(ctx context.Context, id int, body PostPoolIdIdPassphraseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdPassphraseResponse, error)

	// PostPoolIdIdProcessesWithBodyWithResponse request with any body
	PostPoolIdIdProcessesWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdProcessesResponse, error)

	PostPoolIdIdProcessesWithResponse(ctx context.Context, id int, body PostPoolIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdProcessesResponse, error)

	// PostPoolIdIdRecoverykeyRmWithBodyWithResponse request with any body
	PostPoolIdIdRecoverykeyRmWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdRecoverykeyRmResponse, error)

	PostPoolIdIdRecoverykeyRmWithResponse(ctx context.Context, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdRecoverykeyRmResponse, error)

	// PostPoolIdIdRekeyWithBodyWithResponse request with any body
	PostPoolIdIdRekeyWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdRekeyResponse, error)

	PostPoolIdIdRekeyWithResponse(ctx context.Context, id int, body PostPoolIdIdRekeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdRekeyResponse, error)

	// PostPoolIdIdRemoveWithBodyWithResponse request with any body
	PostPoolIdIdRemoveWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdRemoveResponse, error)

	PostPoolIdIdRemoveWithResponse(ctx context.Context, id int, body PostPoolIdIdRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdRemoveResponse, error)

	// PostPoolIdIdReplaceWithBodyWithResponse request with any body
	PostPoolIdIdReplaceWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdReplaceResponse, error)

	PostPoolIdIdReplaceWithResponse(ctx context.Context, id int, body PostPoolIdIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdReplaceResponse, error)

	// PostPoolIdIdScrubWithBodyWithResponse request with any body
	PostPoolIdIdScrubWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdScrubResponse, error)

	PostPoolIdIdScrubWithResponse(ctx context.Context, id int, body PostPoolIdIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdScrubResponse, error)

	// PostPoolIdIdUnlockWithBodyWithResponse request with any body
	PostPoolIdIdUnlockWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdUnlockResponse, error)

	PostPoolIdIdUnlockWithResponse(ctx context.Context, id int, body PostPoolIdIdUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdUnlockResponse, error)

	// PostPoolIdIdUpgradeWithBodyWithResponse request with any body
	PostPoolIdIdUpgradeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdUpgradeResponse, error)

	PostPoolIdIdUpgradeWithResponse(ctx context.Context, id int, body PostPoolIdIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdUpgradeResponse, error)

	// PostPoolImportDiskWithBodyWithResponse request with any body
	PostPoolImportDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolImportDiskResponse, error)

	PostPoolImportDiskWithResponse(ctx context.Context, body PostPoolImportDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolImportDiskResponse, error)

	// PostPoolImportDiskAutodetectFsTypeWithBodyWithResponse request with any body
	PostPoolImportDiskAutodetectFsTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolImportDiskAutodetectFsTypeResponse, error)

	PostPoolImportDiskAutodetectFsTypeWithResponse(ctx context.Context, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolImportDiskAutodetectFsTypeResponse, error)

	// GetPoolImportDiskMsdosfsLocalesWithResponse request
	GetPoolImportDiskMsdosfsLocalesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolImportDiskMsdosfsLocalesResponse, error)

	// GetPoolImportFindWithResponse request
	GetPoolImportFindWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolImportFindResponse, error)

	// PostPoolImportPoolWithBodyWithResponse request with any body
	PostPoolImportPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolImportPoolResponse, error)

	PostPoolImportPoolWithResponse(ctx context.Context, body PostPoolImportPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolImportPoolResponse, error)

	// GetPoolResilverWithResponse request
	GetPoolResilverWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolResilverResponse, error)

	// PutPoolResilverWithBodyWithResponse request with any body
	PutPoolResilverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolResilverResponse, error)

	PutPoolResilverWithResponse(ctx context.Context, body PutPoolResilverJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolResilverResponse, error)

	// GetPoolScrubWithResponse request
	GetPoolScrubWithResponse(ctx context.Context, params *GetPoolScrubParams, reqEditors ...RequestEditorFn) (*GetPoolScrubResponse, error)

	// PostPoolScrubWithBodyWithResponse request with any body
	PostPoolScrubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolScrubResponse, error)

	PostPoolScrubWithResponse(ctx context.Context, body PostPoolScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolScrubResponse, error)

	// DeletePoolScrubIdIdWithResponse request
	DeletePoolScrubIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePoolScrubIdIdResponse, error)

	// GetPoolScrubIdIdWithResponse request
	GetPoolScrubIdIdWithResponse(ctx context.Context, id int, params *GetPoolScrubIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolScrubIdIdResponse, error)

	// PutPoolScrubIdIdWithBodyWithResponse request with any body
	PutPoolScrubIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolScrubIdIdResponse, error)

	PutPoolScrubIdIdWithResponse(ctx context.Context, id int, body PutPoolScrubIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolScrubIdIdResponse, error)

	// PostPoolScrubRunWithBodyWithResponse request with any body
	PostPoolScrubRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolScrubRunResponse, error)

	PostPoolScrubRunWithResponse(ctx context.Context, body PostPoolScrubRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolScrubRunResponse, error)

	// GetPoolSnapshottaskWithResponse request
	GetPoolSnapshottaskWithResponse(ctx context.Context, params *GetPoolSnapshottaskParams, reqEditors ...RequestEditorFn) (*GetPoolSnapshottaskResponse, error)

	// PostPoolSnapshottaskWithBodyWithResponse request with any body
	PostPoolSnapshottaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolSnapshottaskResponse, error)

	PostPoolSnapshottaskWithResponse(ctx context.Context, body PostPoolSnapshottaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolSnapshottaskResponse, error)

	// DeletePoolSnapshottaskIdIdWithResponse request
	DeletePoolSnapshottaskIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePoolSnapshottaskIdIdResponse, error)

	// GetPoolSnapshottaskIdIdWithResponse request
	GetPoolSnapshottaskIdIdWithResponse(ctx context.Context, id int, params *GetPoolSnapshottaskIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolSnapshottaskIdIdResponse, error)

	// PutPoolSnapshottaskIdIdWithBodyWithResponse request with any body
	PutPoolSnapshottaskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolSnapshottaskIdIdResponse, error)

	PutPoolSnapshottaskIdIdWithResponse(ctx context.Context, id int, body PutPoolSnapshottaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolSnapshottaskIdIdResponse, error)

	// PostPoolSnapshottaskIdIdRunWithBodyWithResponse request with any body
	PostPoolSnapshottaskIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolSnapshottaskIdIdRunResponse, error)

	PostPoolSnapshottaskIdIdRunWithResponse(ctx context.Context, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolSnapshottaskIdIdRunResponse, error)

	// PostPoolUnlockServicesRestartChoicesWithBodyWithResponse request with any body
	PostPoolUnlockServicesRestartChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolUnlockServicesRestartChoicesResponse, error)

	PostPoolUnlockServicesRestartChoicesWithResponse(ctx context.Context, body PostPoolUnlockServicesRestartChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolUnlockServicesRestartChoicesResponse, error)

	// GetReplicationWithResponse request
	GetReplicationWithResponse(ctx context.Context, params *GetReplicationParams, reqEditors ...RequestEditorFn) (*GetReplicationResponse, error)

	// PostReplicationWithBodyWithResponse request with any body
	PostReplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationResponse, error)

	PostReplicationWithResponse(ctx context.Context, body PostReplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationResponse, error)

	// GetReplicationConfigWithResponse request
	GetReplicationConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReplicationConfigResponse, error)

	// PutReplicationConfigWithBodyWithResponse request with any body
	PutReplicationConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReplicationConfigResponse, error)

	PutReplicationConfigWithResponse(ctx context.Context, body PutReplicationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReplicationConfigResponse, error)

	// PostReplicationCountEligibleManualSnapshotsWithBodyWithResponse request with any body
	PostReplicationCountEligibleManualSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationCountEligibleManualSnapshotsResponse, error)

	PostReplicationCountEligibleManualSnapshotsWithResponse(ctx context.Context, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationCountEligibleManualSnapshotsResponse, error)

	// PostReplicationCreateDatasetWithBodyWithResponse request with any body
	PostReplicationCreateDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationCreateDatasetResponse, error)

	PostReplicationCreateDatasetWithResponse(ctx context.Context, body PostReplicationCreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationCreateDatasetResponse, error)

	// DeleteReplicationIdIdWithResponse request
	DeleteReplicationIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteReplicationIdIdResponse, error)

	// GetReplicationIdIdWithResponse request
	GetReplicationIdIdWithResponse(ctx context.Context, id int, params *GetReplicationIdIdParams, reqEditors ...RequestEditorFn) (*GetReplicationIdIdResponse, error)

	// PutReplicationIdIdWithBodyWithResponse request with any body
	PutReplicationIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReplicationIdIdResponse, error)

	PutReplicationIdIdWithResponse(ctx context.Context, id int, body PutReplicationIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReplicationIdIdResponse, error)

	// PostReplicationIdIdRestoreWithBodyWithResponse request with any body
	PostReplicationIdIdRestoreWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationIdIdRestoreResponse, error)

	PostReplicationIdIdRestoreWithResponse(ctx context.Context, id int, body PostReplicationIdIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationIdIdRestoreResponse, error)

	// PostReplicationIdIdRunWithBodyWithResponse request with any body
	PostReplicationIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationIdIdRunResponse, error)

	PostReplicationIdIdRunWithResponse(ctx context.Context, id int, body PostReplicationIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationIdIdRunResponse, error)

	// PostReplicationListDatasetsWithBodyWithResponse request with any body
	PostReplicationListDatasetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationListDatasetsResponse, error)

	PostReplicationListDatasetsWithResponse(ctx context.Context, body PostReplicationListDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationListDatasetsResponse, error)

	// GetReplicationListNamingSchemasWithResponse request
	GetReplicationListNamingSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReplicationListNamingSchemasResponse, error)

	// PostReplicationTargetUnmatchedSnapshotsWithBodyWithResponse request with any body
	PostReplicationTargetUnmatchedSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationTargetUnmatchedSnapshotsResponse, error)

	PostReplicationTargetUnmatchedSnapshotsWithResponse(ctx context.Context, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationTargetUnmatchedSnapshotsResponse, error)

	// GetReportingWithResponse request
	GetReportingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReportingResponse, error)

	// PutReportingWithBodyWithResponse request with any body
	PutReportingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReportingResponse, error)

	PutReportingWithResponse(ctx context.Context, body PutReportingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReportingResponse, error)

	// PostReportingGetDataWithBodyWithResponse request with any body
	PostReportingGetDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReportingGetDataResponse, error)

	PostReportingGetDataWithResponse(ctx context.Context, body PostReportingGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReportingGetDataResponse, error)

	// GetReportingGraphsWithResponse request
	GetReportingGraphsWithResponse(ctx context.Context, params *GetReportingGraphsParams, reqEditors ...RequestEditorFn) (*GetReportingGraphsResponse, error)

	// PostRouteIpv4gwReachableWithBodyWithResponse request with any body
	PostRouteIpv4gwReachableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRouteIpv4gwReachableResponse, error)

	PostRouteIpv4gwReachableWithResponse(ctx context.Context, body PostRouteIpv4gwReachableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRouteIpv4gwReachableResponse, error)

	// GetRouteSystemRoutesWithResponse request
	GetRouteSystemRoutesWithResponse(ctx context.Context, params *GetRouteSystemRoutesParams, reqEditors ...RequestEditorFn) (*GetRouteSystemRoutesResponse, error)

	// GetRsyncdWithResponse request
	GetRsyncdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRsyncdResponse, error)

	// PutRsyncdWithBodyWithResponse request with any body
	PutRsyncdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRsyncdResponse, error)

	PutRsyncdWithResponse(ctx context.Context, body PutRsyncdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRsyncdResponse, error)

	// GetRsyncmodWithResponse request
	GetRsyncmodWithResponse(ctx context.Context, params *GetRsyncmodParams, reqEditors ...RequestEditorFn) (*GetRsyncmodResponse, error)

	// PostRsyncmodWithBodyWithResponse request with any body
	PostRsyncmodWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRsyncmodResponse, error)

	PostRsyncmodWithResponse(ctx context.Context, body PostRsyncmodJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRsyncmodResponse, error)

	// DeleteRsyncmodIdIdWithResponse request
	DeleteRsyncmodIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRsyncmodIdIdResponse, error)

	// GetRsyncmodIdIdWithResponse request
	GetRsyncmodIdIdWithResponse(ctx context.Context, id int, params *GetRsyncmodIdIdParams, reqEditors ...RequestEditorFn) (*GetRsyncmodIdIdResponse, error)

	// PutRsyncmodIdIdWithBodyWithResponse request with any body
	PutRsyncmodIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRsyncmodIdIdResponse, error)

	PutRsyncmodIdIdWithResponse(ctx context.Context, id int, body PutRsyncmodIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRsyncmodIdIdResponse, error)

	// GetRsynctaskWithResponse request
	GetRsynctaskWithResponse(ctx context.Context, params *GetRsynctaskParams, reqEditors ...RequestEditorFn) (*GetRsynctaskResponse, error)

	// PostRsynctaskWithBodyWithResponse request with any body
	PostRsynctaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRsynctaskResponse, error)

	PostRsynctaskWithResponse(ctx context.Context, body PostRsynctaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRsynctaskResponse, error)

	// DeleteRsynctaskIdIdWithResponse request
	DeleteRsynctaskIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRsynctaskIdIdResponse, error)

	// GetRsynctaskIdIdWithResponse request
	GetRsynctaskIdIdWithResponse(ctx context.Context, id int, params *GetRsynctaskIdIdParams, reqEditors ...RequestEditorFn) (*GetRsynctaskIdIdResponse, error)

	// PutRsynctaskIdIdWithBodyWithResponse request with any body
	PutRsynctaskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRsynctaskIdIdResponse, error)

	PutRsynctaskIdIdWithResponse(ctx context.Context, id int, body PutRsynctaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRsynctaskIdIdResponse, error)

	// PostRsynctaskIdIdRunWithBodyWithResponse request with any body
	PostRsynctaskIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRsynctaskIdIdRunResponse, error)

	PostRsynctaskIdIdRunWithResponse(ctx context.Context, id int, body PostRsynctaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRsynctaskIdIdRunResponse, error)

	// GetS3WithResponse request
	GetS3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetS3Response, error)

	// PutS3WithBodyWithResponse request with any body
	PutS3WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutS3Response, error)

	PutS3WithResponse(ctx context.Context, body PutS3JSONRequestBody, reqEditors ...RequestEditorFn) (*PutS3Response, error)

	// GetS3BindipChoicesWithResponse request
	GetS3BindipChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetS3BindipChoicesResponse, error)

	// GetSensorQueryWithResponse request
	GetSensorQueryWithResponse(ctx context.Context, params *GetSensorQueryParams, reqEditors ...RequestEditorFn) (*GetSensorQueryResponse, error)

	// GetServiceWithResponse request
	GetServiceWithResponse(ctx context.Context, params *GetServiceParams, reqEditors ...RequestEditorFn) (*GetServiceResponse, error)

	// GetServiceIdIdWithResponse request
	GetServiceIdIdWithResponse(ctx context.Context, id int, params *GetServiceIdIdParams, reqEditors ...RequestEditorFn) (*GetServiceIdIdResponse, error)

	// PutServiceIdIdWithBodyWithResponse request with any body
	PutServiceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceIdIdResponse, error)

	PutServiceIdIdWithResponse(ctx context.Context, id int, body PutServiceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceIdIdResponse, error)

	// PostServiceReloadWithBodyWithResponse request with any body
	PostServiceReloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceReloadResponse, error)

	PostServiceReloadWithResponse(ctx context.Context, body PostServiceReloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceReloadResponse, error)

	// PostServiceRestartWithBodyWithResponse request with any body
	PostServiceRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceRestartResponse, error)

	PostServiceRestartWithResponse(ctx context.Context, body PostServiceRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceRestartResponse, error)

	// PostServiceStartWithBodyWithResponse request with any body
	PostServiceStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceStartResponse, error)

	PostServiceStartWithResponse(ctx context.Context, body PostServiceStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceStartResponse, error)

	// GetServiceStartedWithResponse request
	GetServiceStartedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceStartedResponse, error)

	// PostServiceStopWithBodyWithResponse request with any body
	PostServiceStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceStopResponse, error)

	PostServiceStopWithResponse(ctx context.Context, body PostServiceStopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceStopResponse, error)

	// PostServiceTerminateProcessWithBodyWithResponse request with any body
	PostServiceTerminateProcessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceTerminateProcessResponse, error)

	PostServiceTerminateProcessWithResponse(ctx context.Context, body PostServiceTerminateProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceTerminateProcessResponse, error)

	// GetSharingAfpWithResponse request
	GetSharingAfpWithResponse(ctx context.Context, params *GetSharingAfpParams, reqEditors ...RequestEditorFn) (*GetSharingAfpResponse, error)

	// PostSharingAfpWithBodyWithResponse request with any body
	PostSharingAfpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharingAfpResponse, error)

	PostSharingAfpWithResponse(ctx context.Context, body PostSharingAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharingAfpResponse, error)

	// DeleteSharingAfpIdIdWithResponse request
	DeleteSharingAfpIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSharingAfpIdIdResponse, error)

	// GetSharingAfpIdIdWithResponse request
	GetSharingAfpIdIdWithResponse(ctx context.Context, id int, params *GetSharingAfpIdIdParams, reqEditors ...RequestEditorFn) (*GetSharingAfpIdIdResponse, error)

	// PutSharingAfpIdIdWithBodyWithResponse request with any body
	PutSharingAfpIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSharingAfpIdIdResponse, error)

	PutSharingAfpIdIdWithResponse(ctx context.Context, id int, body PutSharingAfpIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSharingAfpIdIdResponse, error)

	// GetSharingNfsWithResponse request
	GetSharingNfsWithResponse(ctx context.Context, params *GetSharingNfsParams, reqEditors ...RequestEditorFn) (*GetSharingNfsResponse, error)

	// PostSharingNfsWithBodyWithResponse request with any body
	PostSharingNfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharingNfsResponse, error)

	PostSharingNfsWithResponse(ctx context.Context, body PostSharingNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharingNfsResponse, error)

	// GetSharingNfsHumanIdentifierWithResponse request
	GetSharingNfsHumanIdentifierWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSharingNfsHumanIdentifierResponse, error)

	// DeleteSharingNfsIdIdWithResponse request
	DeleteSharingNfsIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSharingNfsIdIdResponse, error)

	// GetSharingNfsIdIdWithResponse request
	GetSharingNfsIdIdWithResponse(ctx context.Context, id int, params *GetSharingNfsIdIdParams, reqEditors ...RequestEditorFn) (*GetSharingNfsIdIdResponse, error)

	// PutSharingNfsIdIdWithBodyWithResponse request with any body
	PutSharingNfsIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSharingNfsIdIdResponse, error)

	PutSharingNfsIdIdWithResponse(ctx context.Context, id int, body PutSharingNfsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSharingNfsIdIdResponse, error)

	// GetSharingSmbWithResponse request
	GetSharingSmbWithResponse(ctx context.Context, params *GetSharingSmbParams, reqEditors ...RequestEditorFn) (*GetSharingSmbResponse, error)

	// PostSharingSmbWithBodyWithResponse request with any body
	PostSharingSmbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharingSmbResponse, error)

	PostSharingSmbWithResponse(ctx context.Context, body PostSharingSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharingSmbResponse, error)

	// DeleteSharingSmbIdIdWithResponse request
	DeleteSharingSmbIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSharingSmbIdIdResponse, error)

	// GetSharingSmbIdIdWithResponse request
	GetSharingSmbIdIdWithResponse(ctx context.Context, id int, params *GetSharingSmbIdIdParams, reqEditors ...RequestEditorFn) (*GetSharingSmbIdIdResponse, error)

	// PutSharingSmbIdIdWithBodyWithResponse request with any body
	PutSharingSmbIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSharingSmbIdIdResponse, error)

	PutSharingSmbIdIdWithResponse(ctx context.Context, id int, body PutSharingSmbIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSharingSmbIdIdResponse, error)

	// GetSharingSmbPresetsWithResponse request
	GetSharingSmbPresetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSharingSmbPresetsResponse, error)

	// GetSharingWebdavWithResponse request
	GetSharingWebdavWithResponse(ctx context.Context, params *GetSharingWebdavParams, reqEditors ...RequestEditorFn) (*GetSharingWebdavResponse, error)

	// PostSharingWebdavWithBodyWithResponse request with any body
	PostSharingWebdavWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharingWebdavResponse, error)

	PostSharingWebdavWithResponse(ctx context.Context, body PostSharingWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharingWebdavResponse, error)

	// DeleteSharingWebdavIdIdWithResponse request
	DeleteSharingWebdavIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSharingWebdavIdIdResponse, error)

	// GetSharingWebdavIdIdWithResponse request
	GetSharingWebdavIdIdWithResponse(ctx context.Context, id int, params *GetSharingWebdavIdIdParams, reqEditors ...RequestEditorFn) (*GetSharingWebdavIdIdResponse, error)

	// PutSharingWebdavIdIdWithBodyWithResponse request with any body
	PutSharingWebdavIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSharingWebdavIdIdResponse, error)

	PutSharingWebdavIdIdWithResponse(ctx context.Context, id int, body PutSharingWebdavIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSharingWebdavIdIdResponse, error)

	// GetSmartWithResponse request
	GetSmartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmartResponse, error)

	// PutSmartWithBodyWithResponse request with any body
	PutSmartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSmartResponse, error)

	PutSmartWithResponse(ctx context.Context, body PutSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSmartResponse, error)

	// GetSmartTestWithResponse request
	GetSmartTestWithResponse(ctx context.Context, params *GetSmartTestParams, reqEditors ...RequestEditorFn) (*GetSmartTestResponse, error)

	// PostSmartTestWithBodyWithResponse request with any body
	PostSmartTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmartTestResponse, error)

	PostSmartTestWithResponse(ctx context.Context, body PostSmartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmartTestResponse, error)

	// PostSmartTestDiskChoicesWithBodyWithResponse request with any body
	PostSmartTestDiskChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmartTestDiskChoicesResponse, error)

	PostSmartTestDiskChoicesWithResponse(ctx context.Context, body PostSmartTestDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmartTestDiskChoicesResponse, error)

	// DeleteSmartTestIdIdWithResponse request
	DeleteSmartTestIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSmartTestIdIdResponse, error)

	// GetSmartTestIdIdWithResponse request
	GetSmartTestIdIdWithResponse(ctx context.Context, id int, params *GetSmartTestIdIdParams, reqEditors ...RequestEditorFn) (*GetSmartTestIdIdResponse, error)

	// PutSmartTestIdIdWithBodyWithResponse request with any body
	PutSmartTestIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSmartTestIdIdResponse, error)

	PutSmartTestIdIdWithResponse(ctx context.Context, id int, body PutSmartTestIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSmartTestIdIdResponse, error)

	// PostSmartTestManualTestWithBodyWithResponse request with any body
	PostSmartTestManualTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmartTestManualTestResponse, error)

	PostSmartTestManualTestWithResponse(ctx context.Context, body PostSmartTestManualTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmartTestManualTestResponse, error)

	// GetSmartTestResultsWithResponse request
	GetSmartTestResultsWithResponse(ctx context.Context, params *GetSmartTestResultsParams, reqEditors ...RequestEditorFn) (*GetSmartTestResultsResponse, error)

	// GetSmbWithResponse request
	GetSmbWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbResponse, error)

	// PutSmbWithBodyWithResponse request with any body
	PutSmbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSmbResponse, error)

	PutSmbWithResponse(ctx context.Context, body PutSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSmbResponse, error)

	// GetSmbBindipChoicesWithResponse request
	GetSmbBindipChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbBindipChoicesResponse, error)

	// GetSmbDomainChoicesWithResponse request
	GetSmbDomainChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbDomainChoicesResponse, error)

	// PostSmbGetRemoteAclWithBodyWithResponse request with any body
	PostSmbGetRemoteAclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmbGetRemoteAclResponse, error)

	PostSmbGetRemoteAclWithResponse(ctx context.Context, body PostSmbGetRemoteAclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmbGetRemoteAclResponse, error)

	// GetSmbSharesecWithResponse request
	GetSmbSharesecWithResponse(ctx context.Context, params *GetSmbSharesecParams, reqEditors ...RequestEditorFn) (*GetSmbSharesecResponse, error)

	// PostSmbSharesecWithBodyWithResponse request with any body
	PostSmbSharesecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmbSharesecResponse, error)

	PostSmbSharesecWithResponse(ctx context.Context, body PostSmbSharesecJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmbSharesecResponse, error)

	// PostSmbSharesecGetaclWithBodyWithResponse request with any body
	PostSmbSharesecGetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmbSharesecGetaclResponse, error)

	PostSmbSharesecGetaclWithResponse(ctx context.Context, body PostSmbSharesecGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmbSharesecGetaclResponse, error)

	// DeleteSmbSharesecIdIdWithResponse request
	DeleteSmbSharesecIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSmbSharesecIdIdResponse, error)

	// GetSmbSharesecIdIdWithResponse request
	GetSmbSharesecIdIdWithResponse(ctx context.Context, id int, params *GetSmbSharesecIdIdParams, reqEditors ...RequestEditorFn) (*GetSmbSharesecIdIdResponse, error)

	// PutSmbSharesecIdIdWithBodyWithResponse request with any body
	PutSmbSharesecIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSmbSharesecIdIdResponse, error)

	PutSmbSharesecIdIdWithResponse(ctx context.Context, id int, body PutSmbSharesecIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSmbSharesecIdIdResponse, error)

	// GetSmbSharesecSynchronizeAclsWithResponse request
	GetSmbSharesecSynchronizeAclsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbSharesecSynchronizeAclsResponse, error)

	// PostSmbStatusWithBodyWithResponse request with any body
	PostSmbStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmbStatusResponse, error)

	PostSmbStatusWithResponse(ctx context.Context, body PostSmbStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmbStatusResponse, error)

	// GetSmbUnixcharsetChoicesWithResponse request
	GetSmbUnixcharsetChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbUnixcharsetChoicesResponse, error)

	// GetSnmpWithResponse request
	GetSnmpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSnmpResponse, error)

	// PutSnmpWithBodyWithResponse request with any body
	PutSnmpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSnmpResponse, error)

	PutSnmpWithResponse(ctx context.Context, body PutSnmpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSnmpResponse, error)

	// GetSshWithResponse request
	GetSshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSshResponse, error)

	// PutSshWithBodyWithResponse request with any body
	PutSshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSshResponse, error)

	PutSshWithResponse(ctx context.Context, body PutSshJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSshResponse, error)

	// GetSshBindifaceChoicesWithResponse request
	GetSshBindifaceChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSshBindifaceChoicesResponse, error)

	// GetStaticrouteWithResponse request
	GetStaticrouteWithResponse(ctx context.Context, params *GetStaticrouteParams, reqEditors ...RequestEditorFn) (*GetStaticrouteResponse, error)

	// PostStaticrouteWithBodyWithResponse request with any body
	PostStaticrouteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStaticrouteResponse, error)

	PostStaticrouteWithResponse(ctx context.Context, body PostStaticrouteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStaticrouteResponse, error)

	// DeleteStaticrouteIdIdWithResponse request
	DeleteStaticrouteIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteStaticrouteIdIdResponse, error)

	// GetStaticrouteIdIdWithResponse request
	GetStaticrouteIdIdWithResponse(ctx context.Context, id int, params *GetStaticrouteIdIdParams, reqEditors ...RequestEditorFn) (*GetStaticrouteIdIdResponse, error)

	// PutStaticrouteIdIdWithBodyWithResponse request with any body
	PutStaticrouteIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStaticrouteIdIdResponse, error)

	PutStaticrouteIdIdWithResponse(ctx context.Context, id int, body PutStaticrouteIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStaticrouteIdIdResponse, error)

	// PostStatsGetDataWithBodyWithResponse request with any body
	PostStatsGetDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatsGetDataResponse, error)

	PostStatsGetDataWithResponse(ctx context.Context, body PostStatsGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatsGetDataResponse, error)

	// PostStatsGetDatasetInfoWithBodyWithResponse request with any body
	PostStatsGetDatasetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatsGetDatasetInfoResponse, error)

	PostStatsGetDatasetInfoWithResponse(ctx context.Context, body PostStatsGetDatasetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatsGetDatasetInfoResponse, error)

	// GetStatsGetSourcesWithResponse request
	GetStatsGetSourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsGetSourcesResponse, error)

	// GetSupportWithResponse request
	GetSupportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportResponse, error)

	// PutSupportWithBodyWithResponse request with any body
	PutSupportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSupportResponse, error)

	PutSupportWithResponse(ctx context.Context, body PutSupportJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSupportResponse, error)

	// PostSupportFetchCategoriesWithBodyWithResponse request with any body
	PostSupportFetchCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSupportFetchCategoriesResponse, error)

	PostSupportFetchCategoriesWithResponse(ctx context.Context, body PostSupportFetchCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSupportFetchCategoriesResponse, error)

	// GetSupportFieldsWithResponse request
	GetSupportFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportFieldsResponse, error)

	// GetSupportIsAvailableWithResponse request
	GetSupportIsAvailableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportIsAvailableResponse, error)

	// GetSupportIsAvailableAndEnabledWithResponse request
	GetSupportIsAvailableAndEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportIsAvailableAndEnabledResponse, error)

	// PostSupportNewTicketWithBodyWithResponse request with any body
	PostSupportNewTicketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSupportNewTicketResponse, error)

	PostSupportNewTicketWithResponse(ctx context.Context, body PostSupportNewTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSupportNewTicketResponse, error)

	// GetSystemAdvancedWithResponse request
	GetSystemAdvancedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemAdvancedResponse, error)

	// PutSystemAdvancedWithBodyWithResponse request with any body
	PutSystemAdvancedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemAdvancedResponse, error)

	PutSystemAdvancedWithResponse(ctx context.Context, body PutSystemAdvancedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemAdvancedResponse, error)

	// GetSystemAdvancedSedGlobalPasswordWithResponse request
	GetSystemAdvancedSedGlobalPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemAdvancedSedGlobalPasswordResponse, error)

	// GetSystemAdvancedSerialPortChoicesWithResponse request
	GetSystemAdvancedSerialPortChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemAdvancedSerialPortChoicesResponse, error)

	// GetSystemBootIdWithResponse request
	GetSystemBootIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemBootIdResponse, error)

	// GetSystemEnvironmentWithResponse request
	GetSystemEnvironmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemEnvironmentResponse, error)

	// PostSystemFeatureEnabledWithBodyWithResponse request with any body
	PostSystemFeatureEnabledWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemFeatureEnabledResponse, error)

	PostSystemFeatureEnabledWithResponse(ctx context.Context, body PostSystemFeatureEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemFeatureEnabledResponse, error)

	// GetSystemGeneralWithResponse request
	GetSystemGeneralWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralResponse, error)

	// PutSystemGeneralWithBodyWithResponse request with any body
	PutSystemGeneralWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemGeneralResponse, error)

	PutSystemGeneralWithResponse(ctx context.Context, body PutSystemGeneralJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemGeneralResponse, error)

	// GetSystemGeneralCountryChoicesWithResponse request
	GetSystemGeneralCountryChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralCountryChoicesResponse, error)

	// GetSystemGeneralKbdmapChoicesWithResponse request
	GetSystemGeneralKbdmapChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralKbdmapChoicesResponse, error)

	// GetSystemGeneralLanguageChoicesWithResponse request
	GetSystemGeneralLanguageChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralLanguageChoicesResponse, error)

	// GetSystemGeneralLocalUrlWithResponse request
	GetSystemGeneralLocalUrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralLocalUrlResponse, error)

	// GetSystemGeneralTimezoneChoicesWithResponse request
	GetSystemGeneralTimezoneChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralTimezoneChoicesResponse, error)

	// GetSystemGeneralUiAddressChoicesWithResponse request
	GetSystemGeneralUiAddressChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiAddressChoicesResponse, error)

	// GetSystemGeneralUiCertificateChoicesWithResponse request
	GetSystemGeneralUiCertificateChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiCertificateChoicesResponse, error)

	// GetSystemGeneralUiHttpsprotocolsChoicesWithResponse request
	GetSystemGeneralUiHttpsprotocolsChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiHttpsprotocolsChoicesResponse, error)

	// GetSystemGeneralUiRestartWithBodyWithResponse request with any body
	GetSystemGeneralUiRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiRestartResponse, error)

	GetSystemGeneralUiRestartWithResponse(ctx context.Context, body GetSystemGeneralUiRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiRestartResponse, error)

	// PostSystemGeneralUiRestartWithBodyWithResponse request with any body
	PostSystemGeneralUiRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemGeneralUiRestartResponse, error)

	PostSystemGeneralUiRestartWithResponse(ctx context.Context, body PostSystemGeneralUiRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemGeneralUiRestartResponse, error)

	// GetSystemGeneralUiV6addressChoicesWithResponse request
	GetSystemGeneralUiV6addressChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiV6addressChoicesResponse, error)

	// GetSystemHostIdWithResponse request
	GetSystemHostIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemHostIdResponse, error)

	// GetSystemInfoWithResponse request
	GetSystemInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemInfoResponse, error)

	// GetSystemIsFreenasWithResponse request
	GetSystemIsFreenasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemIsFreenasResponse, error)

	// PostSystemLicenseUpdateWithBodyWithResponse request with any body
	PostSystemLicenseUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemLicenseUpdateResponse, error)

	PostSystemLicenseUpdateWithResponse(ctx context.Context, body PostSystemLicenseUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemLicenseUpdateResponse, error)

	// GetSystemNtpserverWithResponse request
	GetSystemNtpserverWithResponse(ctx context.Context, params *GetSystemNtpserverParams, reqEditors ...RequestEditorFn) (*GetSystemNtpserverResponse, error)

	// PostSystemNtpserverWithBodyWithResponse request with any body
	PostSystemNtpserverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemNtpserverResponse, error)

	PostSystemNtpserverWithResponse(ctx context.Context, body PostSystemNtpserverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemNtpserverResponse, error)

	// DeleteSystemNtpserverIdIdWithResponse request
	DeleteSystemNtpserverIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSystemNtpserverIdIdResponse, error)

	// GetSystemNtpserverIdIdWithResponse request
	GetSystemNtpserverIdIdWithResponse(ctx context.Context, id int, params *GetSystemNtpserverIdIdParams, reqEditors ...RequestEditorFn) (*GetSystemNtpserverIdIdResponse, error)

	// PutSystemNtpserverIdIdWithBodyWithResponse request with any body
	PutSystemNtpserverIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemNtpserverIdIdResponse, error)

	PutSystemNtpserverIdIdWithResponse(ctx context.Context, id int, body PutSystemNtpserverIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemNtpserverIdIdResponse, error)

	// GetSystemNtpserverTestNtpServerWithResponse request
	GetSystemNtpserverTestNtpServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemNtpserverTestNtpServerResponse, error)

	// GetSystemProductNameWithResponse request
	GetSystemProductNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemProductNameResponse, error)

	// GetSystemProductTypeWithResponse request
	GetSystemProductTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemProductTypeResponse, error)

	// GetSystemReadyWithResponse request
	GetSystemReadyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemReadyResponse, error)

	// PostSystemRebootWithBodyWithResponse request with any body
	PostSystemRebootWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemRebootResponse, error)

	PostSystemRebootWithResponse(ctx context.Context, body PostSystemRebootJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemRebootResponse, error)

	// PostSystemShutdownWithBodyWithResponse request with any body
	PostSystemShutdownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemShutdownResponse, error)

	PostSystemShutdownWithResponse(ctx context.Context, body PostSystemShutdownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemShutdownResponse, error)

	// GetSystemStateWithResponse request
	GetSystemStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemStateResponse, error)

	// GetSystemVersionWithResponse request
	GetSystemVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemVersionResponse, error)

	// GetSystemdatasetWithResponse request
	GetSystemdatasetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemdatasetResponse, error)

	// PutSystemdatasetWithBodyWithResponse request with any body
	PutSystemdatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemdatasetResponse, error)

	PutSystemdatasetWithResponse(ctx context.Context, body PutSystemdatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemdatasetResponse, error)

	// GetTftpWithResponse request
	GetTftpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTftpResponse, error)

	// PutTftpWithBodyWithResponse request with any body
	PutTftpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTftpResponse, error)

	PutTftpWithResponse(ctx context.Context, body PutTftpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTftpResponse, error)

	// GetTruecommandWithResponse request
	GetTruecommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruecommandResponse, error)

	// PutTruecommandWithBodyWithResponse request with any body
	PutTruecommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTruecommandResponse, error)

	PutTruecommandWithResponse(ctx context.Context, body PutTruecommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTruecommandResponse, error)

	// GetTruenasAcceptEulaWithResponse request
	GetTruenasAcceptEulaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasAcceptEulaResponse, error)

	// GetTruenasGetChassisHardwareWithResponse request
	GetTruenasGetChassisHardwareWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasGetChassisHardwareResponse, error)

	// GetTruenasGetCustomerInformationWithResponse request
	GetTruenasGetCustomerInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasGetCustomerInformationResponse, error)

	// GetTruenasGetEulaWithResponse request
	GetTruenasGetEulaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasGetEulaResponse, error)

	// GetTruenasIsEulaAcceptedWithResponse request
	GetTruenasIsEulaAcceptedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasIsEulaAcceptedResponse, error)

	// GetTruenasIsProductionWithResponse request
	GetTruenasIsProductionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasIsProductionResponse, error)

	// PostTruenasSetProductionWithBodyWithResponse request with any body
	PostTruenasSetProductionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTruenasSetProductionResponse, error)

	PostTruenasSetProductionWithResponse(ctx context.Context, body PostTruenasSetProductionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTruenasSetProductionResponse, error)

	// PostTruenasUpdateCustomerInformationWithBodyWithResponse request with any body
	PostTruenasUpdateCustomerInformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTruenasUpdateCustomerInformationResponse, error)

	PostTruenasUpdateCustomerInformationWithResponse(ctx context.Context, body PostTruenasUpdateCustomerInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTruenasUpdateCustomerInformationResponse, error)

	// GetTunableWithResponse request
	GetTunableWithResponse(ctx context.Context, params *GetTunableParams, reqEditors ...RequestEditorFn) (*GetTunableResponse, error)

	// PostTunableWithBodyWithResponse request with any body
	PostTunableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTunableResponse, error)

	PostTunableWithResponse(ctx context.Context, body PostTunableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTunableResponse, error)

	// DeleteTunableIdIdWithResponse request
	DeleteTunableIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTunableIdIdResponse, error)

	// GetTunableIdIdWithResponse request
	GetTunableIdIdWithResponse(ctx context.Context, id int, params *GetTunableIdIdParams, reqEditors ...RequestEditorFn) (*GetTunableIdIdResponse, error)

	// PutTunableIdIdWithBodyWithResponse request with any body
	PutTunableIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTunableIdIdResponse, error)

	PutTunableIdIdWithResponse(ctx context.Context, id int, body PutTunableIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTunableIdIdResponse, error)

	// GetTunableTunableTypeChoicesWithResponse request
	GetTunableTunableTypeChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTunableTunableTypeChoicesResponse, error)

	// PostUpdateCheckAvailableWithBodyWithResponse request with any body
	PostUpdateCheckAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateCheckAvailableResponse, error)

	PostUpdateCheckAvailableWithResponse(ctx context.Context, body PostUpdateCheckAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateCheckAvailableResponse, error)

	// GetUpdateDownloadWithResponse request
	GetUpdateDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpdateDownloadResponse, error)

	// GetUpdateGetAutoDownloadWithResponse request
	GetUpdateGetAutoDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpdateGetAutoDownloadResponse, error)

	// PostUpdateGetPendingWithBodyWithResponse request with any body
	PostUpdateGetPendingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateGetPendingResponse, error)

	PostUpdateGetPendingWithResponse(ctx context.Context, body PostUpdateGetPendingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateGetPendingResponse, error)

	// GetUpdateGetTrainsWithResponse request
	GetUpdateGetTrainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpdateGetTrainsResponse, error)

	// PostUpdateManualWithBodyWithResponse request with any body
	PostUpdateManualWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateManualResponse, error)

	PostUpdateManualWithResponse(ctx context.Context, body PostUpdateManualJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateManualResponse, error)

	// PostUpdateSetAutoDownloadWithBodyWithResponse request with any body
	PostUpdateSetAutoDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateSetAutoDownloadResponse, error)

	PostUpdateSetAutoDownloadWithResponse(ctx context.Context, body PostUpdateSetAutoDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateSetAutoDownloadResponse, error)

	// PostUpdateSetTrainWithBodyWithResponse request with any body
	PostUpdateSetTrainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateSetTrainResponse, error)

	PostUpdateSetTrainWithResponse(ctx context.Context, body PostUpdateSetTrainJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateSetTrainResponse, error)

	// PostUpdateUpdateWithBodyWithResponse request with any body
	PostUpdateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateUpdateResponse, error)

	PostUpdateUpdateWithResponse(ctx context.Context, body PostUpdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateUpdateResponse, error)

	// GetUpsWithResponse request
	GetUpsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpsResponse, error)

	// PutUpsWithBodyWithResponse request with any body
	PutUpsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUpsResponse, error)

	PutUpsWithResponse(ctx context.Context, body PutUpsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUpsResponse, error)

	// GetUpsDriverChoicesWithResponse request
	GetUpsDriverChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpsDriverChoicesResponse, error)

	// GetUpsPortChoicesWithResponse request
	GetUpsPortChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpsPortChoicesResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// PostUserWithBodyWithResponse request with any body
	PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	// GetUserGetNextUidWithResponse request
	GetUserGetNextUidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserGetNextUidResponse, error)

	// PostUserGetUserObjWithBodyWithResponse request with any body
	PostUserGetUserObjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserGetUserObjResponse, error)

	PostUserGetUserObjWithResponse(ctx context.Context, body PostUserGetUserObjJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserGetUserObjResponse, error)

	// GetUserHasRootPasswordWithResponse request
	GetUserHasRootPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserHasRootPasswordResponse, error)

	// DeleteUserIdIdWithBodyWithResponse request with any body
	DeleteUserIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserIdIdResponse, error)

	DeleteUserIdIdWithResponse(ctx context.Context, id int, body DeleteUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserIdIdResponse, error)

	// GetUserIdIdWithResponse request
	GetUserIdIdWithResponse(ctx context.Context, id int, params *GetUserIdIdParams, reqEditors ...RequestEditorFn) (*GetUserIdIdResponse, error)

	// PutUserIdIdWithBodyWithResponse request with any body
	PutUserIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserIdIdResponse, error)

	PutUserIdIdWithResponse(ctx context.Context, id int, body PutUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserIdIdResponse, error)

	// PostUserIdIdPopAttributeWithBodyWithResponse request with any body
	PostUserIdIdPopAttributeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserIdIdPopAttributeResponse, error)

	PostUserIdIdPopAttributeWithResponse(ctx context.Context, id int, body PostUserIdIdPopAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserIdIdPopAttributeResponse, error)

	// PostUserIdIdSetAttributeWithBodyWithResponse request with any body
	PostUserIdIdSetAttributeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserIdIdSetAttributeResponse, error)

	PostUserIdIdSetAttributeWithResponse(ctx context.Context, id int, body PostUserIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserIdIdSetAttributeResponse, error)

	// PostUserShellChoicesWithBodyWithResponse request with any body
	PostUserShellChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserShellChoicesResponse, error)

	PostUserShellChoicesWithResponse(ctx context.Context, body PostUserShellChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserShellChoicesResponse, error)

	// GetVmWithResponse request
	GetVmWithResponse(ctx context.Context, params *GetVmParams, reqEditors ...RequestEditorFn) (*GetVmResponse, error)

	// PostVmWithBodyWithResponse request with any body
	PostVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmResponse, error)

	PostVmWithResponse(ctx context.Context, body PostVmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmResponse, error)

	// GetVmDeviceWithResponse request
	GetVmDeviceWithResponse(ctx context.Context, params *GetVmDeviceParams, reqEditors ...RequestEditorFn) (*GetVmDeviceResponse, error)

	// PostVmDeviceWithBodyWithResponse request with any body
	PostVmDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmDeviceResponse, error)

	PostVmDeviceWithResponse(ctx context.Context, body PostVmDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmDeviceResponse, error)

	// DeleteVmDeviceIdIdWithBodyWithResponse request with any body
	DeleteVmDeviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmDeviceIdIdResponse, error)

	DeleteVmDeviceIdIdWithResponse(ctx context.Context, id int, body DeleteVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmDeviceIdIdResponse, error)

	// GetVmDeviceIdIdWithResponse request
	GetVmDeviceIdIdWithResponse(ctx context.Context, id int, params *GetVmDeviceIdIdParams, reqEditors ...RequestEditorFn) (*GetVmDeviceIdIdResponse, error)

	// PutVmDeviceIdIdWithBodyWithResponse request with any body
	PutVmDeviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmDeviceIdIdResponse, error)

	PutVmDeviceIdIdWithResponse(ctx context.Context, id int, body PutVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmDeviceIdIdResponse, error)

	// GetVmDeviceNicAttachChoicesWithResponse request
	GetVmDeviceNicAttachChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmDeviceNicAttachChoicesResponse, error)

	// GetVmDevicePptdevChoicesWithResponse request
	GetVmDevicePptdevChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmDevicePptdevChoicesResponse, error)

	// GetVmDeviceVncBindChoicesWithResponse request
	GetVmDeviceVncBindChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmDeviceVncBindChoicesResponse, error)

	// GetVmFlagsWithResponse request
	GetVmFlagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmFlagsResponse, error)

	// PostVmGetAttachedIfaceWithBodyWithResponse request with any body
	PostVmGetAttachedIfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmGetAttachedIfaceResponse, error)

	PostVmGetAttachedIfaceWithResponse(ctx context.Context, body PostVmGetAttachedIfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmGetAttachedIfaceResponse, error)

	// PostVmGetAvailableMemoryWithBodyWithResponse request with any body
	PostVmGetAvailableMemoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmGetAvailableMemoryResponse, error)

	PostVmGetAvailableMemoryWithResponse(ctx context.Context, body PostVmGetAvailableMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmGetAvailableMemoryResponse, error)

	// PostVmGetConsoleWithBodyWithResponse request with any body
	PostVmGetConsoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmGetConsoleResponse, error)

	PostVmGetConsoleWithResponse(ctx context.Context, body PostVmGetConsoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmGetConsoleResponse, error)

	// GetVmGetVmemoryInUseWithResponse request
	GetVmGetVmemoryInUseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmGetVmemoryInUseResponse, error)

	// PostVmGetVncWithBodyWithResponse request with any body
	PostVmGetVncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmGetVncResponse, error)

	PostVmGetVncWithResponse(ctx context.Context, body PostVmGetVncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmGetVncResponse, error)

	// GetVmGetVncIpv4WithResponse request
	GetVmGetVncIpv4WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmGetVncIpv4Response, error)

	// DeleteVmIdIdWithBodyWithResponse request with any body
	DeleteVmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmIdIdResponse, error)

	DeleteVmIdIdWithResponse(ctx context.Context, id int, body DeleteVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmIdIdResponse, error)

	// GetVmIdIdWithResponse request
	GetVmIdIdWithResponse(ctx context.Context, id int, params *GetVmIdIdParams, reqEditors ...RequestEditorFn) (*GetVmIdIdResponse, error)

	// PutVmIdIdWithBodyWithResponse request with any body
	PutVmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmIdIdResponse, error)

	PutVmIdIdWithResponse(ctx context.Context, id int, body PutVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmIdIdResponse, error)

	// PostVmIdIdCloneWithBodyWithResponse request with any body
	PostVmIdIdCloneWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdCloneResponse, error)

	PostVmIdIdCloneWithResponse(ctx context.Context, id int, body PostVmIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdCloneResponse, error)

	// PostVmIdIdPoweroffWithBodyWithResponse request with any body
	PostVmIdIdPoweroffWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdPoweroffResponse, error)

	PostVmIdIdPoweroffWithResponse(ctx context.Context, id int, body PostVmIdIdPoweroffJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdPoweroffResponse, error)

	// PostVmIdIdRestartWithBodyWithResponse request with any body
	PostVmIdIdRestartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdRestartResponse, error)

	PostVmIdIdRestartWithResponse(ctx context.Context, id int, body PostVmIdIdRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdRestartResponse, error)

	// PostVmIdIdStartWithBodyWithResponse request with any body
	PostVmIdIdStartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdStartResponse, error)

	PostVmIdIdStartWithResponse(ctx context.Context, id int, body PostVmIdIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdStartResponse, error)

	// PostVmIdIdStatusWithBodyWithResponse request with any body
	PostVmIdIdStatusWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdStatusResponse, error)

	PostVmIdIdStatusWithResponse(ctx context.Context, id int, body PostVmIdIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdStatusResponse, error)

	// PostVmIdIdStopWithBodyWithResponse request with any body
	PostVmIdIdStopWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdStopResponse, error)

	PostVmIdIdStopWithResponse(ctx context.Context, id int, body PostVmIdIdStopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdStopResponse, error)

	// GetVmIdentifyHypervisorWithResponse request
	GetVmIdentifyHypervisorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmIdentifyHypervisorResponse, error)

	// GetVmRandomMacWithResponse request
	GetVmRandomMacWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmRandomMacResponse, error)

	// GetVmVncPortWizardWithResponse request
	GetVmVncPortWizardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmVncPortWizardResponse, error)

	// GetVmwareWithResponse request
	GetVmwareWithResponse(ctx context.Context, params *GetVmwareParams, reqEditors ...RequestEditorFn) (*GetVmwareResponse, error)

	// PostVmwareWithBodyWithResponse request with any body
	PostVmwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareResponse, error)

	PostVmwareWithResponse(ctx context.Context, body PostVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareResponse, error)

	// PostVmwareDatasetHasVmsWithBodyWithResponse request with any body
	PostVmwareDatasetHasVmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareDatasetHasVmsResponse, error)

	PostVmwareDatasetHasVmsWithResponse(ctx context.Context, body PostVmwareDatasetHasVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareDatasetHasVmsResponse, error)

	// PostVmwareGetDatastoresWithBodyWithResponse request with any body
	PostVmwareGetDatastoresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareGetDatastoresResponse, error)

	PostVmwareGetDatastoresWithResponse(ctx context.Context, body PostVmwareGetDatastoresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareGetDatastoresResponse, error)

	// PostVmwareGetVirtualMachinesWithBodyWithResponse request with any body
	PostVmwareGetVirtualMachinesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareGetVirtualMachinesResponse, error)

	PostVmwareGetVirtualMachinesWithResponse(ctx context.Context, body PostVmwareGetVirtualMachinesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareGetVirtualMachinesResponse, error)

	// DeleteVmwareIdIdWithResponse request
	DeleteVmwareIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteVmwareIdIdResponse, error)

	// GetVmwareIdIdWithResponse request
	GetVmwareIdIdWithResponse(ctx context.Context, id int, params *GetVmwareIdIdParams, reqEditors ...RequestEditorFn) (*GetVmwareIdIdResponse, error)

	// PutVmwareIdIdWithBodyWithResponse request with any body
	PutVmwareIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmwareIdIdResponse, error)

	PutVmwareIdIdWithResponse(ctx context.Context, id int, body PutVmwareIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmwareIdIdResponse, error)

	// PostVmwareMatchDatastoresWithDatasetsWithBodyWithResponse request with any body
	PostVmwareMatchDatastoresWithDatasetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareMatchDatastoresWithDatasetsResponse, error)

	PostVmwareMatchDatastoresWithDatasetsWithResponse(ctx context.Context, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareMatchDatastoresWithDatasetsResponse, error)

	// GetWebdavWithResponse request
	GetWebdavWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWebdavResponse, error)

	// PutWebdavWithBodyWithResponse request with any body
	PutWebdavWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWebdavResponse, error)

	PutWebdavWithResponse(ctx context.Context, body PutWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWebdavResponse, error)

	// GetWebuiImageWithResponse request
	GetWebuiImageWithResponse(ctx context.Context, params *GetWebuiImageParams, reqEditors ...RequestEditorFn) (*GetWebuiImageResponse, error)

	// DeleteWebuiImageIdIdWithResponse request
	DeleteWebuiImageIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteWebuiImageIdIdResponse, error)

	// GetWebuiImageIdIdWithResponse request
	GetWebuiImageIdIdWithResponse(ctx context.Context, id int, params *GetWebuiImageIdIdParams, reqEditors ...RequestEditorFn) (*GetWebuiImageIdIdResponse, error)

	// GetZfsSnapshotWithResponse request
	GetZfsSnapshotWithResponse(ctx context.Context, params *GetZfsSnapshotParams, reqEditors ...RequestEditorFn) (*GetZfsSnapshotResponse, error)

	// PostZfsSnapshotWithBodyWithResponse request with any body
	PostZfsSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZfsSnapshotResponse, error)

	PostZfsSnapshotWithResponse(ctx context.Context, body PostZfsSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZfsSnapshotResponse, error)

	// PostZfsSnapshotCloneWithBodyWithResponse request with any body
	PostZfsSnapshotCloneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZfsSnapshotCloneResponse, error)

	PostZfsSnapshotCloneWithResponse(ctx context.Context, body PostZfsSnapshotCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZfsSnapshotCloneResponse, error)

	// DeleteZfsSnapshotIdIdWithBodyWithResponse request with any body
	DeleteZfsSnapshotIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteZfsSnapshotIdIdResponse, error)

	DeleteZfsSnapshotIdIdWithResponse(ctx context.Context, id string, body DeleteZfsSnapshotIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteZfsSnapshotIdIdResponse, error)

	// GetZfsSnapshotIdIdWithResponse request
	GetZfsSnapshotIdIdWithResponse(ctx context.Context, id string, params *GetZfsSnapshotIdIdParams, reqEditors ...RequestEditorFn) (*GetZfsSnapshotIdIdResponse, error)

	// PostZfsSnapshotRemoveWithBodyWithResponse request with any body
	PostZfsSnapshotRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZfsSnapshotRemoveResponse, error)

	PostZfsSnapshotRemoveWithResponse(ctx context.Context, body PostZfsSnapshotRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZfsSnapshotRemoveResponse, error)

	// PostZfsSnapshotRollbackWithBodyWithResponse request with any body
	PostZfsSnapshotRollbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZfsSnapshotRollbackResponse, error)

	PostZfsSnapshotRollbackWithResponse(ctx context.Context, body PostZfsSnapshotRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZfsSnapshotRollbackResponse, error)
}

type GetAcmeDnsAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAcmeDnsAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAcmeDnsAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAcmeDnsAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAcmeDnsAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAcmeDnsAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAcmeDnsAuthenticatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAcmeDnsAuthenticatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAcmeDnsAuthenticatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAcmeDnsAuthenticatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAcmeDnsAuthenticatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAcmeDnsAuthenticatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAcmeDnsAuthenticatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAcmeDnsAuthenticatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAcmeDnsAuthenticatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutActivedirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutActivedirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutActivedirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryChangeTrustAccountPwResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryChangeTrustAccountPwResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryChangeTrustAccountPwResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryDomainInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryDomainInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryDomainInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryGetSpnListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryGetSpnListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryGetSpnListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActivedirectoryLeaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostActivedirectoryLeaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActivedirectoryLeaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryNssInfoChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryNssInfoChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryNssInfoChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryStartedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryStartedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryStartedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAfpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAfpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAfpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAfpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAfpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAfpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAfpBindipChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAfpBindipChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAfpBindipChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertDismissResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertDismissResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertDismissResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertListCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertListCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertListCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertListPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertListPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertListPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertclassesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertclassesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertclassesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAlertclassesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAlertclassesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAlertclassesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertserviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertserviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertserviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertserviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertserviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertserviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertserviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAlertserviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertserviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertserviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertserviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertserviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAlertserviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAlertserviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAlertserviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertserviceListTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertserviceListTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertserviceListTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertserviceTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertserviceTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertserviceTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeyIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeyIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeyIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiKeyIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiKeyIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiKeyIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiKeyIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthCheckUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthCheckUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthCheckUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthGenerateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthGenerateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthGenerateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthTwoFactorAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthTwoFactorAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthTwoFactorAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthTwofactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthTwofactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthTwofactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAuthTwofactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAuthTwofactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAuthTwofactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthTwofactorProvisioningUriResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthTwofactorProvisioningUriResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthTwofactorProvisioningUriResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthTwofactorRenewSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthTwofactorRenewSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthTwofactorRenewSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthTwofactorVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthTwofactorVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthTwofactorVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootAttachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootAttachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootAttachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootDetachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootDetachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootDetachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootGetDisksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootGetDisksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootGetDisksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootGetScrubIntervalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootGetScrubIntervalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootGetScrubIntervalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootSetScrubIntervalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootSetScrubIntervalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootSetScrubIntervalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootenvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootenvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootenvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootenvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootenvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootenvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBootenvIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBootenvIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBootenvIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootenvIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootenvIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootenvIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBootenvIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutBootenvIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBootenvIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootenvIdIdActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootenvIdIdActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootenvIdIdActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootenvIdIdSetAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootenvIdIdSetAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootenvIdIdSetAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateAcmeServerChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateAcmeServerChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateAcmeServerChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateCountryChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateCountryChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateCountryChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateEcCurveChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateEcCurveChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateEcCurveChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateExtendedKeyUsageChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateExtendedKeyUsageChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateExtendedKeyUsageChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCertificateIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCertificateIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCertificateIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCertificateIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCertificateIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCertificateIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateKeyTypeChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateKeyTypeChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateKeyTypeChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateauthorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateauthorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateauthorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCertificateauthorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCertificateauthorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCertificateauthorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCertificateauthorityCaSignCsrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCertificateauthorityCaSignCsrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCertificateauthorityCaSignCsrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCertificateauthorityIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCertificateauthorityIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCertificateauthorityIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateauthorityIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateauthorityIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateauthorityIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCertificateauthorityIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCertificateauthorityIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCertificateauthorityIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateauthorityProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateauthorityProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateauthorityProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncCommonTaskSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncCommonTaskSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncCommonTaskSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCloudsyncCredentialsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCloudsyncCredentialsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCloudsyncCredentialsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncCredentialsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncCredentialsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncCredentialsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCloudsyncCredentialsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCloudsyncCredentialsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCloudsyncCredentialsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncCredentialsVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncCredentialsVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncCredentialsVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCloudsyncIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCloudsyncIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCloudsyncIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCloudsyncIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCloudsyncIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCloudsyncIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncIdIdAbortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncIdIdAbortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncIdIdAbortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncIdIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncIdIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncIdIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncIdIdSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncIdIdSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncIdIdSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncListBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncListBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncListBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncListDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncListDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncListDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncOnedriveListDrivesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncOnedriveListDrivesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncOnedriveListDrivesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncSyncOnetimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncSyncOnetimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncSyncOnetimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConfigResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreDebugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreDebugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreDebugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreGetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCoreGetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreGetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreGetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCoreGetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreGetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreGetMethodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreGetMethodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreGetMethodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreGetServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCoreGetServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreGetServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreJobAbortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreJobAbortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreJobAbortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreJobUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreJobUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreJobUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreJobWaitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreJobWaitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreJobWaitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorePingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCorePingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorePingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCorePingRemoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCorePingRemoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCorePingRemoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreResizeShellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreResizeShellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreResizeShellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCoreSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCronjobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCronjobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCronjobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCronjobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCronjobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCronjobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCronjobIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCronjobIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCronjobIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCronjobIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCronjobIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCronjobIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCronjobIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCronjobIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCronjobIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCronjobRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCronjobRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCronjobRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeviceGetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDeviceGetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeviceGetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDirectoryservicesCacheRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDirectoryservicesCacheRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDirectoryservicesCacheRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDirectoryservicesGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDirectoryservicesGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDirectoryservicesGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskGetEncryptedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskGetEncryptedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskGetEncryptedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskGetUnusedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskGetUnusedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskGetUnusedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDiskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDiskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDiskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDiskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiskLabelToDevResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDiskLabelToDevResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiskLabelToDevResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskOverprovisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskOverprovisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskOverprovisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiskSedDevNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDiskSedDevNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiskSedDevNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskSmartAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskSmartAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskSmartAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskSpindownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskSpindownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskSpindownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskTemperatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskTemperatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskTemperatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskTemperaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskTemperaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskTemperaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskUnoverprovisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskUnoverprovisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskUnoverprovisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskWipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskWipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskWipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDnsQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDnsQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDnsQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDyndnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDyndnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDyndnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDyndnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDyndnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDyndnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDyndnsProviderChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDyndnsProviderChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDyndnsProviderChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEc2MetaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEc2MetaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEc2MetaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEc2InstanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEc2InstanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEc2InstanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEc2SetNtpServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEc2SetNtpServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEc2SetNtpServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEc2SetRootSshPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEc2SetRootSshPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEc2SetRootSshPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEc2SetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEc2SetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEc2SetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnclosureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnclosureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnclosureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnclosureIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetEnclosureIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnclosureIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEnclosureIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutEnclosureIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEnclosureIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEnclosureSetSlotStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEnclosureSetSlotStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnclosureSetSlotStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFailoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutFailoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFailoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFailoverCallRemoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFailoverCallRemoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFailoverCallRemoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFailoverControlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFailoverControlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFailoverControlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverForceMasterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverForceMasterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverForceMasterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverHardwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverHardwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverHardwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverInProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverInProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverInProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverLicensedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverLicensedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverLicensedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverSyncFromPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverSyncFromPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverSyncFromPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFailoverSyncToPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFailoverSyncToPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFailoverSyncToPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFailoverUnlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFailoverUnlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFailoverUnlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFailoverUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFailoverUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFailoverUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverUpgradeFinishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverUpgradeFinishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverUpgradeFinishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFailoverUpgradePendingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFailoverUpgradePendingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFailoverUpgradePendingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFcportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFcportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFcportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFcportIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFcportIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFcportIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFcportIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutFcportIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFcportIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemAclIsTrivialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemAclIsTrivialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemAclIsTrivialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemChownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemChownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemChownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilesystemDefaultAclChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFilesystemDefaultAclChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilesystemDefaultAclChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemGetDefaultAclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemGetDefaultAclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemGetDefaultAclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemGetaclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemGetaclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemGetaclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemListdirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemListdirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemListdirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemSetaclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemSetaclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemSetaclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemSetpermResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemSetpermResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemSetpermResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemStatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemStatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemStatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemStatfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemStatfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemStatfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutFtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupGetGroupObjResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupGetGroupObjResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupGetGroupObjResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupGetNextGidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGroupGetNextGidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupGetNextGidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGroupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutGroupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapBackendChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapBackendChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapBackendChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapBackendOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapBackendOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapBackendOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapClearIdmapCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapClearIdmapCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapClearIdmapCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapOptionsChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapOptionsChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapOptionsChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInitshutdownscriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInitshutdownscriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInitshutdownscriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInitshutdownscriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInitshutdownscriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInitshutdownscriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInitshutdownscriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInitshutdownscriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInitshutdownscriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInitshutdownscriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInitshutdownscriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInitshutdownscriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInitshutdownscriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutInitshutdownscriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInitshutdownscriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceBridgeMembersChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceBridgeMembersChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceBridgeMembersChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceCheckinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceCheckinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceCheckinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceCheckinWaitingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceCheckinWaitingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceCheckinWaitingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceCommitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceCommitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceCommitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceEnableCapabilitiesIndividuallyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceEnableCapabilitiesIndividuallyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceEnableCapabilitiesIndividuallyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceHasPendingChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceHasPendingChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceHasPendingChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInterfaceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInterfaceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInterfaceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInterfaceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutInterfaceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInterfaceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceIpInUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceIpInUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceIpInUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceLagPortsChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceLagPortsChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceLagPortsChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceLagSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceLagSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceLagSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceRollbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceRollbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceRollbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceVlanParentInterfaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceVlanParentInterfaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceVlanParentInterfaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceVlanSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceVlanSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceVlanSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpmiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmiChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpmiChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmiChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmiIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpmiIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmiIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIpmiIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIpmiIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIpmiIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIpmiIdentifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIpmiIdentifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIpmiIdentifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmiIsLoadedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpmiIsLoadedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmiIsLoadedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiAuthIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiAuthIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiAuthIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiAuthIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiAuthIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiAuthIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiAuthIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiAuthIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiAuthIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiExtentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiExtentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiExtentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiExtentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiExtentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiExtentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiExtentDiskChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiExtentDiskChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiExtentDiskChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiExtentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiExtentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiExtentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiExtentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiExtentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiExtentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiExtentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiExtentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiExtentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiGlobalAluaEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiGlobalAluaEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiGlobalAluaEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiGlobalSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiGlobalSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiGlobalSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiInitiatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiInitiatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiInitiatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiInitiatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiInitiatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiInitiatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiInitiatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiInitiatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiInitiatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiInitiatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiInitiatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiInitiatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiInitiatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiInitiatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiInitiatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiPortalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiPortalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiPortalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiPortalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiPortalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiPortalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiPortalIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiPortalIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiPortalIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiPortalIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiPortalIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiPortalIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiPortalIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiPortalIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiPortalIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiPortalListenIpChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiPortalListenIpChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiPortalListenIpChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiTargetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiTargetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiTargetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiTargetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiTargetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiTargetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetextentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetextentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetextentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiTargetextentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiTargetextentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiTargetextentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiTargetextentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiTargetextentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiTargetextentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetextentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetextentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetextentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiTargetextentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiTargetextentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiTargetextentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailCleanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailCleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailCleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailDefaultConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailDefaultConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailDefaultConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailExecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailExecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailExecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailFetchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailFetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailFetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailFstabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailFstabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailFstabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailGetActivatedPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailGetActivatedPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailGetActivatedPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJailIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteJailIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJailIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJailIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutJailIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJailIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailIdIdCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailIdIdCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailIdIdCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailImportImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailImportImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailImportImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailInterfaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailInterfaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailInterfaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailRcActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailRcActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailRcActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailReleasesChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailReleasesChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailReleasesChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailUpdateDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailUpdateDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailUpdateDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailUpdateToLatestPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailUpdateToLatestPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailUpdateToLatestPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailVnetDefaultInterfaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailVnetDefaultInterfaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailVnetDefaultInterfaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKerberosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKerberosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKerberosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosKeytabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosKeytabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosKeytabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKerberosKeytabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKerberosKeytabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKerberosKeytabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKerberosKeytabIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKerberosKeytabIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKerberosKeytabIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosKeytabIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosKeytabIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosKeytabIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKerberosKeytabIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKerberosKeytabIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKerberosKeytabIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosKeytabSystemKeytabListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosKeytabSystemKeytabListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosKeytabSystemKeytabListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKerberosRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKerberosRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKerberosRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKerberosRealmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKerberosRealmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKerberosRealmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosRealmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosRealmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosRealmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKerberosRealmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKerberosRealmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKerberosRealmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeychaincredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKeychaincredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeychaincredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeychaincredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeychaincredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeychaincredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeychaincredentialGenerateSshKeyPairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKeychaincredentialGenerateSshKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeychaincredentialGenerateSshKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeychaincredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKeychaincredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeychaincredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeychaincredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKeychaincredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeychaincredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKeychaincredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKeychaincredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKeychaincredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeychaincredentialRemoteSshHostKeyScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeychaincredentialRemoteSshHostKeyScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeychaincredentialRemoteSshHostKeyScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeychaincredentialRemoteSshSemiautomaticSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeychaincredentialRemoteSshSemiautomaticSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeychaincredentialRemoteSshSemiautomaticSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeychaincredentialUsedByResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeychaincredentialUsedByResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeychaincredentialUsedByResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKmipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKmipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKmipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKmipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKmipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKmipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKmipClearSyncPendingKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKmipClearSyncPendingKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKmipClearSyncPendingKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKmipKmipSyncPendingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKmipKmipSyncPendingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKmipKmipSyncPendingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKmipSyncKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKmipSyncKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKmipSyncKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLdapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLdapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLdapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapSchemaChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapSchemaChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapSchemaChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapSslChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapSslChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapSslChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLldpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLldpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLldpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLldpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLldpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLldpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLldpCountryChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLldpCountryChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLldpCountryChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMailSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMailSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMailSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMultipathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMultipathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMultipathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMultipathIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMultipathIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMultipathIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNetworkConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNetworkConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutNetworkConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNetworkConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkGeneralSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNetworkGeneralSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkGeneralSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutNfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNfsAddPrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNfsAddPrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNfsAddPrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNfsBindipChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNfsBindipChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNfsBindipChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutNisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNisGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNisGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNisGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenvpnClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenvpnClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenvpnClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOpenvpnClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOpenvpnClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOpenvpnClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenvpnClientAuthenticationAlgorithmChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenvpnClientAuthenticationAlgorithmChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenvpnClientAuthenticationAlgorithmChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenvpnClientCipherChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenvpnClientCipherChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenvpnClientCipherChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenvpnServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenvpnServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenvpnServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOpenvpnServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOpenvpnServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOpenvpnServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenvpnServerAuthenticationAlgorithmChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenvpnServerAuthenticationAlgorithmChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenvpnServerAuthenticationAlgorithmChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenvpnServerCipherChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenvpnServerCipherChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenvpnServerCipherChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOpenvpnServerClientConfigurationGenerationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOpenvpnServerClientConfigurationGenerationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOpenvpnServerClientConfigurationGenerationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenvpnServerRenewStaticKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenvpnServerRenewStaticKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenvpnServerRenewStaticKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginBranchesChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginBranchesChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginBranchesChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePluginIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePluginIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePluginIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPluginIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPluginIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPluginIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginOfficialRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginOfficialRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginOfficialRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginRetrieveVersionsForReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginRetrieveVersionsForReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginRetrieveVersionsForReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginUpdatePluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginUpdatePluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginUpdatePluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolAttachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolAttachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolAttachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetChangeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetChangeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetChangeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolDatasetCompressionChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolDatasetCompressionChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolDatasetCompressionChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolDatasetEncryptionAlgorithmChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolDatasetEncryptionAlgorithmChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolDatasetEncryptionAlgorithmChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetEncryptionSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetEncryptionSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetEncryptionSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetExportKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetExportKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetExportKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePoolDatasetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePoolDatasetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePoolDatasetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolDatasetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolDatasetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolDatasetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolDatasetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolDatasetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolDatasetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdGetQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdGetQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdGetQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdProcessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdProcessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdProcessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdPromoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdPromoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdPromoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdSetQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdSetQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdSetQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetInheritParentEncryptionPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetInheritParentEncryptionPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetInheritParentEncryptionPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetLockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetLockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetLockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetRecommendedZvolBlocksizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetRecommendedZvolBlocksizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetRecommendedZvolBlocksizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetUnlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetUnlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetUnlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolDatasetUserpropResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolDatasetUserpropResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolDatasetUserpropResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetUserpropResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetUserpropResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetUserpropResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePoolDatasetUserpropIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePoolDatasetUserpropIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePoolDatasetUserpropIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolDatasetUserpropIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolDatasetUserpropIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolDatasetUserpropIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolDatasetUserpropIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolDatasetUserpropIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolDatasetUserpropIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolFilesystemChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolFilesystemChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolFilesystemChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdDetachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdDetachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdDetachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdDownloadEncryptionKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdDownloadEncryptionKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdDownloadEncryptionKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdExpandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdExpandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdExpandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdGetDisksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdGetDisksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdGetDisksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdIsUpgradedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdIsUpgradedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdIsUpgradedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdLockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdLockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdLockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdOfflineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdOfflineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdOfflineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdOnlineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdOnlineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdOnlineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdPassphraseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdPassphraseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdPassphraseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdProcessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdProcessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdProcessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdRecoverykeyRmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdRecoverykeyRmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdRecoverykeyRmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdRekeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdRekeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdRekeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdUnlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdUnlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdUnlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolImportDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolImportDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolImportDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolImportDiskAutodetectFsTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolImportDiskAutodetectFsTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolImportDiskAutodetectFsTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolImportDiskMsdosfsLocalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolImportDiskMsdosfsLocalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolImportDiskMsdosfsLocalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolImportFindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolImportFindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolImportFindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolImportPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolImportPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolImportPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolResilverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolResilverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolResilverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolResilverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolResilverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolResilverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePoolScrubIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePoolScrubIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePoolScrubIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolScrubIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolScrubIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolScrubIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolScrubIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolScrubIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolScrubIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolScrubRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolScrubRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolScrubRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolSnapshottaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolSnapshottaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolSnapshottaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolSnapshottaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolSnapshottaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolSnapshottaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePoolSnapshottaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePoolSnapshottaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePoolSnapshottaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolSnapshottaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolSnapshottaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolSnapshottaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolSnapshottaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolSnapshottaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolSnapshottaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolSnapshottaskIdIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolSnapshottaskIdIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolSnapshottaskIdIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolUnlockServicesRestartChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolUnlockServicesRestartChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolUnlockServicesRestartChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplicationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReplicationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplicationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutReplicationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutReplicationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutReplicationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationCountEligibleManualSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationCountEligibleManualSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationCountEligibleManualSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationCreateDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationCreateDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationCreateDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReplicationIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReplicationIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReplicationIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplicationIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReplicationIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplicationIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutReplicationIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutReplicationIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutReplicationIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationIdIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationIdIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationIdIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationIdIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationIdIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationIdIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationListDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationListDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationListDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplicationListNamingSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReplicationListNamingSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplicationListNamingSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationTargetUnmatchedSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationTargetUnmatchedSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationTargetUnmatchedSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReportingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutReportingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutReportingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutReportingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReportingGetDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReportingGetDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReportingGetDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportingGraphsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReportingGraphsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportingGraphsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRouteIpv4gwReachableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRouteIpv4gwReachableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRouteIpv4gwReachableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRouteSystemRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRouteSystemRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRouteSystemRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsyncdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsyncdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsyncdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRsyncdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRsyncdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRsyncdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsyncmodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsyncmodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsyncmodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRsyncmodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRsyncmodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRsyncmodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRsyncmodIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRsyncmodIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRsyncmodIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsyncmodIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsyncmodIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsyncmodIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRsyncmodIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRsyncmodIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRsyncmodIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsynctaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsynctaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsynctaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRsynctaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRsynctaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRsynctaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRsynctaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRsynctaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRsynctaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsynctaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsynctaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsynctaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRsynctaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRsynctaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRsynctaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRsynctaskIdIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRsynctaskIdIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRsynctaskIdIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetS3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetS3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetS3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutS3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutS3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutS3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetS3BindipChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetS3BindipChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetS3BindipChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSensorQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSensorQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSensorQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutServiceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceReloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceReloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceReloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceStartedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceStartedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceStartedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceTerminateProcessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceTerminateProcessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceTerminateProcessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingAfpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingAfpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingAfpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharingAfpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSharingAfpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharingAfpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSharingAfpIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSharingAfpIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSharingAfpIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingAfpIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingAfpIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingAfpIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSharingAfpIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSharingAfpIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSharingAfpIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingNfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingNfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingNfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharingNfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSharingNfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharingNfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingNfsHumanIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingNfsHumanIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingNfsHumanIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSharingNfsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSharingNfsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSharingNfsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingNfsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingNfsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingNfsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSharingNfsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSharingNfsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSharingNfsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingSmbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingSmbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingSmbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharingSmbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSharingSmbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharingSmbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSharingSmbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSharingSmbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSharingSmbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingSmbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingSmbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingSmbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSharingSmbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSharingSmbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSharingSmbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingSmbPresetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingSmbPresetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingSmbPresetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingWebdavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingWebdavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingWebdavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharingWebdavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSharingWebdavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharingWebdavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSharingWebdavIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSharingWebdavIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSharingWebdavIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingWebdavIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingWebdavIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingWebdavIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSharingWebdavIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSharingWebdavIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSharingWebdavIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSmartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmartTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmartTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmartTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmartTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmartTestDiskChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmartTestDiskChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmartTestDiskChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmartTestIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSmartTestIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmartTestIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartTestIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmartTestIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartTestIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmartTestIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSmartTestIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmartTestIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmartTestManualTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmartTestManualTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmartTestManualTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartTestResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmartTestResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartTestResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSmbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbBindipChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbBindipChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbBindipChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbDomainChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbDomainChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbDomainChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmbGetRemoteAclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmbGetRemoteAclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmbGetRemoteAclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbSharesecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbSharesecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbSharesecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmbSharesecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmbSharesecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmbSharesecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmbSharesecGetaclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmbSharesecGetaclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmbSharesecGetaclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmbSharesecIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSmbSharesecIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmbSharesecIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbSharesecIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbSharesecIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbSharesecIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmbSharesecIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSmbSharesecIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmbSharesecIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbSharesecSynchronizeAclsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbSharesecSynchronizeAclsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbSharesecSynchronizeAclsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmbStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmbStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmbStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbUnixcharsetChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbUnixcharsetChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbUnixcharsetChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnmpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSnmpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnmpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSnmpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSnmpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSnmpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSshBindifaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSshBindifaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSshBindifaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaticrouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStaticrouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaticrouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStaticrouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostStaticrouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStaticrouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStaticrouteIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStaticrouteIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStaticrouteIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaticrouteIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStaticrouteIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaticrouteIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStaticrouteIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutStaticrouteIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStaticrouteIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatsGetDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostStatsGetDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatsGetDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatsGetDatasetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostStatsGetDatasetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatsGetDatasetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsGetSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatsGetSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsGetSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSupportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSupportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSupportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSupportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSupportFetchCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSupportFetchCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSupportFetchCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSupportFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportIsAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSupportIsAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportIsAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportIsAvailableAndEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSupportIsAvailableAndEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportIsAvailableAndEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSupportNewTicketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSupportNewTicketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSupportNewTicketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemAdvancedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemAdvancedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemAdvancedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemAdvancedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemAdvancedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemAdvancedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemAdvancedSedGlobalPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemAdvancedSedGlobalPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemAdvancedSedGlobalPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemAdvancedSerialPortChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemAdvancedSerialPortChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemAdvancedSerialPortChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemBootIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemBootIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemBootIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemFeatureEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemFeatureEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemFeatureEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemGeneralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemGeneralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemGeneralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralCountryChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralCountryChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralCountryChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralKbdmapChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralKbdmapChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralKbdmapChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralLanguageChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralLanguageChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralLanguageChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralLocalUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralLocalUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralLocalUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralTimezoneChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralTimezoneChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralTimezoneChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiAddressChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiAddressChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiAddressChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiCertificateChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiCertificateChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiCertificateChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiHttpsprotocolsChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiHttpsprotocolsChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiHttpsprotocolsChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemGeneralUiRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemGeneralUiRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemGeneralUiRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiV6addressChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiV6addressChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiV6addressChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemHostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemHostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemHostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemIsFreenasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemIsFreenasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemIsFreenasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemLicenseUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemLicenseUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemLicenseUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemNtpserverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemNtpserverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemNtpserverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemNtpserverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemNtpserverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemNtpserverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSystemNtpserverIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSystemNtpserverIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSystemNtpserverIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemNtpserverIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemNtpserverIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemNtpserverIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemNtpserverIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemNtpserverIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemNtpserverIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemNtpserverTestNtpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemNtpserverTestNtpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemNtpserverTestNtpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemProductNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemProductNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemProductNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemProductTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemProductTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemProductTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemReadyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemReadyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemReadyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemRebootResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemRebootResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemRebootResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemdatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemdatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemdatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemdatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemdatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemdatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTftpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTftpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTftpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTftpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTftpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTftpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTruecommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTruecommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTruecommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTruecommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTruecommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTruecommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTruenasAcceptEulaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTruenasAcceptEulaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTruenasAcceptEulaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTruenasGetChassisHardwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTruenasGetChassisHardwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTruenasGetChassisHardwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTruenasGetCustomerInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTruenasGetCustomerInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTruenasGetCustomerInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTruenasGetEulaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTruenasGetEulaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTruenasGetEulaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTruenasIsEulaAcceptedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTruenasIsEulaAcceptedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTruenasIsEulaAcceptedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTruenasIsProductionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTruenasIsProductionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTruenasIsProductionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTruenasSetProductionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTruenasSetProductionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTruenasSetProductionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTruenasUpdateCustomerInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTruenasUpdateCustomerInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTruenasUpdateCustomerInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTunableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTunableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTunableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTunableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTunableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTunableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTunableIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTunableIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTunableIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTunableIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTunableIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTunableIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTunableIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTunableIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTunableIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTunableTunableTypeChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTunableTunableTypeChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTunableTunableTypeChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateCheckAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateCheckAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateCheckAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpdateDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateGetAutoDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpdateGetAutoDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateGetAutoDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateGetPendingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateGetPendingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateGetPendingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateGetTrainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpdateGetTrainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateGetTrainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateManualResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateManualResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateManualResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateSetAutoDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateSetAutoDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateSetAutoDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateSetTrainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateSetTrainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateSetTrainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpsDriverChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpsDriverChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpsDriverChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpsPortChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpsPortChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpsPortChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGetNextUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserGetNextUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGetNextUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserGetUserObjResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserGetUserObjResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserGetUserObjResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserHasRootPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserHasRootPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserHasRootPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserIdIdPopAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserIdIdPopAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserIdIdPopAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserIdIdSetAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserIdIdSetAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserIdIdSetAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserShellChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserShellChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserShellChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmDeviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVmDeviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmDeviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDeviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDeviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDeviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmDeviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmDeviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmDeviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDeviceNicAttachChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDeviceNicAttachChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDeviceNicAttachChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDevicePptdevChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDevicePptdevChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDevicePptdevChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDeviceVncBindChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDeviceVncBindChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDeviceVncBindChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmGetAttachedIfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmGetAttachedIfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmGetAttachedIfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmGetAvailableMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmGetAvailableMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmGetAvailableMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmGetConsoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmGetConsoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmGetConsoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmGetVmemoryInUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmGetVmemoryInUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmGetVmemoryInUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmGetVncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmGetVncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmGetVncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmGetVncIpv4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmGetVncIpv4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmGetVncIpv4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdPoweroffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdPoweroffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdPoweroffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmIdentifyHypervisorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmIdentifyHypervisorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmIdentifyHypervisorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmRandomMacResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmRandomMacResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmRandomMacResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmVncPortWizardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmVncPortWizardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmVncPortWizardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareDatasetHasVmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareDatasetHasVmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareDatasetHasVmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareGetDatastoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareGetDatastoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareGetDatastoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareGetVirtualMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareGetVirtualMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareGetVirtualMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmwareIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVmwareIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmwareIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmwareIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmwareIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmwareIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmwareIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmwareIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmwareIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareMatchDatastoresWithDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareMatchDatastoresWithDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareMatchDatastoresWithDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebdavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebdavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebdavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWebdavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutWebdavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWebdavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebuiImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebuiImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebuiImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebuiImageIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWebuiImageIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebuiImageIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebuiImageIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebuiImageIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebuiImageIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZfsSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetZfsSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZfsSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZfsSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostZfsSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZfsSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZfsSnapshotCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostZfsSnapshotCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZfsSnapshotCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteZfsSnapshotIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteZfsSnapshotIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteZfsSnapshotIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZfsSnapshotIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetZfsSnapshotIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZfsSnapshotIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZfsSnapshotRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostZfsSnapshotRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZfsSnapshotRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZfsSnapshotRollbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostZfsSnapshotRollbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZfsSnapshotRollbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAcmeDnsAuthenticatorWithResponse request returning *GetAcmeDnsAuthenticatorResponse
func (c *ClientWithResponses) GetAcmeDnsAuthenticatorWithResponse(ctx context.Context, params *GetAcmeDnsAuthenticatorParams, reqEditors ...RequestEditorFn) (*GetAcmeDnsAuthenticatorResponse, error) {
	rsp, err := c.GetAcmeDnsAuthenticator(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAcmeDnsAuthenticatorResponse(rsp)
}

// PostAcmeDnsAuthenticatorWithBodyWithResponse request with arbitrary body returning *PostAcmeDnsAuthenticatorResponse
func (c *ClientWithResponses) PostAcmeDnsAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAcmeDnsAuthenticatorResponse, error) {
	rsp, err := c.PostAcmeDnsAuthenticatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAcmeDnsAuthenticatorResponse(rsp)
}

func (c *ClientWithResponses) PostAcmeDnsAuthenticatorWithResponse(ctx context.Context, body PostAcmeDnsAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAcmeDnsAuthenticatorResponse, error) {
	rsp, err := c.PostAcmeDnsAuthenticator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAcmeDnsAuthenticatorResponse(rsp)
}

// GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse request returning *GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse
func (c *ClientWithResponses) GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse, error) {
	rsp, err := c.GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAcmeDnsAuthenticatorAuthenticatorSchemasResponse(rsp)
}

// DeleteAcmeDnsAuthenticatorIdIdWithResponse request returning *DeleteAcmeDnsAuthenticatorIdIdResponse
func (c *ClientWithResponses) DeleteAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAcmeDnsAuthenticatorIdIdResponse, error) {
	rsp, err := c.DeleteAcmeDnsAuthenticatorIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAcmeDnsAuthenticatorIdIdResponse(rsp)
}

// GetAcmeDnsAuthenticatorIdIdWithResponse request returning *GetAcmeDnsAuthenticatorIdIdResponse
func (c *ClientWithResponses) GetAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int, params *GetAcmeDnsAuthenticatorIdIdParams, reqEditors ...RequestEditorFn) (*GetAcmeDnsAuthenticatorIdIdResponse, error) {
	rsp, err := c.GetAcmeDnsAuthenticatorIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAcmeDnsAuthenticatorIdIdResponse(rsp)
}

// PutAcmeDnsAuthenticatorIdIdWithBodyWithResponse request with arbitrary body returning *PutAcmeDnsAuthenticatorIdIdResponse
func (c *ClientWithResponses) PutAcmeDnsAuthenticatorIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAcmeDnsAuthenticatorIdIdResponse, error) {
	rsp, err := c.PutAcmeDnsAuthenticatorIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAcmeDnsAuthenticatorIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAcmeDnsAuthenticatorIdIdResponse, error) {
	rsp, err := c.PutAcmeDnsAuthenticatorIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAcmeDnsAuthenticatorIdIdResponse(rsp)
}

// GetActivedirectoryWithResponse request returning *GetActivedirectoryResponse
func (c *ClientWithResponses) GetActivedirectoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryResponse, error) {
	rsp, err := c.GetActivedirectory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryResponse(rsp)
}

// PutActivedirectoryWithBodyWithResponse request with arbitrary body returning *PutActivedirectoryResponse
func (c *ClientWithResponses) PutActivedirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutActivedirectoryResponse, error) {
	rsp, err := c.PutActivedirectoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutActivedirectoryResponse(rsp)
}

func (c *ClientWithResponses) PutActivedirectoryWithResponse(ctx context.Context, body PutActivedirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutActivedirectoryResponse, error) {
	rsp, err := c.PutActivedirectory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutActivedirectoryResponse(rsp)
}

// GetActivedirectoryChangeTrustAccountPwWithResponse request returning *GetActivedirectoryChangeTrustAccountPwResponse
func (c *ClientWithResponses) GetActivedirectoryChangeTrustAccountPwWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryChangeTrustAccountPwResponse, error) {
	rsp, err := c.GetActivedirectoryChangeTrustAccountPw(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryChangeTrustAccountPwResponse(rsp)
}

// GetActivedirectoryDomainInfoWithResponse request returning *GetActivedirectoryDomainInfoResponse
func (c *ClientWithResponses) GetActivedirectoryDomainInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryDomainInfoResponse, error) {
	rsp, err := c.GetActivedirectoryDomainInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryDomainInfoResponse(rsp)
}

// GetActivedirectoryGetSpnListWithResponse request returning *GetActivedirectoryGetSpnListResponse
func (c *ClientWithResponses) GetActivedirectoryGetSpnListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryGetSpnListResponse, error) {
	rsp, err := c.GetActivedirectoryGetSpnList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryGetSpnListResponse(rsp)
}

// GetActivedirectoryGetStateWithResponse request returning *GetActivedirectoryGetStateResponse
func (c *ClientWithResponses) GetActivedirectoryGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryGetStateResponse, error) {
	rsp, err := c.GetActivedirectoryGetState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryGetStateResponse(rsp)
}

// PostActivedirectoryLeaveWithBodyWithResponse request with arbitrary body returning *PostActivedirectoryLeaveResponse
func (c *ClientWithResponses) PostActivedirectoryLeaveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActivedirectoryLeaveResponse, error) {
	rsp, err := c.PostActivedirectoryLeaveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActivedirectoryLeaveResponse(rsp)
}

func (c *ClientWithResponses) PostActivedirectoryLeaveWithResponse(ctx context.Context, body PostActivedirectoryLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActivedirectoryLeaveResponse, error) {
	rsp, err := c.PostActivedirectoryLeave(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActivedirectoryLeaveResponse(rsp)
}

// GetActivedirectoryNssInfoChoicesWithResponse request returning *GetActivedirectoryNssInfoChoicesResponse
func (c *ClientWithResponses) GetActivedirectoryNssInfoChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryNssInfoChoicesResponse, error) {
	rsp, err := c.GetActivedirectoryNssInfoChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryNssInfoChoicesResponse(rsp)
}

// GetActivedirectoryStartedWithResponse request returning *GetActivedirectoryStartedResponse
func (c *ClientWithResponses) GetActivedirectoryStartedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivedirectoryStartedResponse, error) {
	rsp, err := c.GetActivedirectoryStarted(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryStartedResponse(rsp)
}

// GetAfpWithResponse request returning *GetAfpResponse
func (c *ClientWithResponses) GetAfpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAfpResponse, error) {
	rsp, err := c.GetAfp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAfpResponse(rsp)
}

// PutAfpWithBodyWithResponse request with arbitrary body returning *PutAfpResponse
func (c *ClientWithResponses) PutAfpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAfpResponse, error) {
	rsp, err := c.PutAfpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAfpResponse(rsp)
}

func (c *ClientWithResponses) PutAfpWithResponse(ctx context.Context, body PutAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAfpResponse, error) {
	rsp, err := c.PutAfp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAfpResponse(rsp)
}

// GetAfpBindipChoicesWithResponse request returning *GetAfpBindipChoicesResponse
func (c *ClientWithResponses) GetAfpBindipChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAfpBindipChoicesResponse, error) {
	rsp, err := c.GetAfpBindipChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAfpBindipChoicesResponse(rsp)
}

// PostAlertDismissWithBodyWithResponse request with arbitrary body returning *PostAlertDismissResponse
func (c *ClientWithResponses) PostAlertDismissWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertDismissResponse, error) {
	rsp, err := c.PostAlertDismissWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertDismissResponse(rsp)
}

func (c *ClientWithResponses) PostAlertDismissWithResponse(ctx context.Context, body PostAlertDismissJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertDismissResponse, error) {
	rsp, err := c.PostAlertDismiss(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertDismissResponse(rsp)
}

// GetAlertListWithResponse request returning *GetAlertListResponse
func (c *ClientWithResponses) GetAlertListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertListResponse, error) {
	rsp, err := c.GetAlertList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertListResponse(rsp)
}

// GetAlertListCategoriesWithResponse request returning *GetAlertListCategoriesResponse
func (c *ClientWithResponses) GetAlertListCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertListCategoriesResponse, error) {
	rsp, err := c.GetAlertListCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertListCategoriesResponse(rsp)
}

// GetAlertListPoliciesWithResponse request returning *GetAlertListPoliciesResponse
func (c *ClientWithResponses) GetAlertListPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertListPoliciesResponse, error) {
	rsp, err := c.GetAlertListPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertListPoliciesResponse(rsp)
}

// PostAlertRestoreWithBodyWithResponse request with arbitrary body returning *PostAlertRestoreResponse
func (c *ClientWithResponses) PostAlertRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertRestoreResponse, error) {
	rsp, err := c.PostAlertRestoreWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostAlertRestoreWithResponse(ctx context.Context, body PostAlertRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertRestoreResponse, error) {
	rsp, err := c.PostAlertRestore(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertRestoreResponse(rsp)
}

// GetAlertclassesWithResponse request returning *GetAlertclassesResponse
func (c *ClientWithResponses) GetAlertclassesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertclassesResponse, error) {
	rsp, err := c.GetAlertclasses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertclassesResponse(rsp)
}

// PutAlertclassesWithBodyWithResponse request with arbitrary body returning *PutAlertclassesResponse
func (c *ClientWithResponses) PutAlertclassesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertclassesResponse, error) {
	rsp, err := c.PutAlertclassesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertclassesResponse(rsp)
}

func (c *ClientWithResponses) PutAlertclassesWithResponse(ctx context.Context, body PutAlertclassesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertclassesResponse, error) {
	rsp, err := c.PutAlertclasses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertclassesResponse(rsp)
}

// GetAlertserviceWithResponse request returning *GetAlertserviceResponse
func (c *ClientWithResponses) GetAlertserviceWithResponse(ctx context.Context, params *GetAlertserviceParams, reqEditors ...RequestEditorFn) (*GetAlertserviceResponse, error) {
	rsp, err := c.GetAlertservice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertserviceResponse(rsp)
}

// PostAlertserviceWithBodyWithResponse request with arbitrary body returning *PostAlertserviceResponse
func (c *ClientWithResponses) PostAlertserviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertserviceResponse, error) {
	rsp, err := c.PostAlertserviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertserviceResponse(rsp)
}

func (c *ClientWithResponses) PostAlertserviceWithResponse(ctx context.Context, body PostAlertserviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertserviceResponse, error) {
	rsp, err := c.PostAlertservice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertserviceResponse(rsp)
}

// DeleteAlertserviceIdIdWithResponse request returning *DeleteAlertserviceIdIdResponse
func (c *ClientWithResponses) DeleteAlertserviceIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAlertserviceIdIdResponse, error) {
	rsp, err := c.DeleteAlertserviceIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertserviceIdIdResponse(rsp)
}

// GetAlertserviceIdIdWithResponse request returning *GetAlertserviceIdIdResponse
func (c *ClientWithResponses) GetAlertserviceIdIdWithResponse(ctx context.Context, id int, params *GetAlertserviceIdIdParams, reqEditors ...RequestEditorFn) (*GetAlertserviceIdIdResponse, error) {
	rsp, err := c.GetAlertserviceIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertserviceIdIdResponse(rsp)
}

// PutAlertserviceIdIdWithBodyWithResponse request with arbitrary body returning *PutAlertserviceIdIdResponse
func (c *ClientWithResponses) PutAlertserviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertserviceIdIdResponse, error) {
	rsp, err := c.PutAlertserviceIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertserviceIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutAlertserviceIdIdWithResponse(ctx context.Context, id int, body PutAlertserviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertserviceIdIdResponse, error) {
	rsp, err := c.PutAlertserviceIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertserviceIdIdResponse(rsp)
}

// GetAlertserviceListTypesWithResponse request returning *GetAlertserviceListTypesResponse
func (c *ClientWithResponses) GetAlertserviceListTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertserviceListTypesResponse, error) {
	rsp, err := c.GetAlertserviceListTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertserviceListTypesResponse(rsp)
}

// PostAlertserviceTestWithBodyWithResponse request with arbitrary body returning *PostAlertserviceTestResponse
func (c *ClientWithResponses) PostAlertserviceTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertserviceTestResponse, error) {
	rsp, err := c.PostAlertserviceTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertserviceTestResponse(rsp)
}

func (c *ClientWithResponses) PostAlertserviceTestWithResponse(ctx context.Context, body PostAlertserviceTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertserviceTestResponse, error) {
	rsp, err := c.PostAlertserviceTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertserviceTestResponse(rsp)
}

// GetApiKeyWithResponse request returning *GetApiKeyResponse
func (c *ClientWithResponses) GetApiKeyWithResponse(ctx context.Context, params *GetApiKeyParams, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error) {
	rsp, err := c.GetApiKey(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyResponse(rsp)
}

// PostApiKeyWithBodyWithResponse request with arbitrary body returning *PostApiKeyResponse
func (c *ClientWithResponses) PostApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeyResponse, error) {
	rsp, err := c.PostApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostApiKeyWithResponse(ctx context.Context, body PostApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeyResponse, error) {
	rsp, err := c.PostApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeyResponse(rsp)
}

// DeleteApiKeyIdIdWithResponse request returning *DeleteApiKeyIdIdResponse
func (c *ClientWithResponses) DeleteApiKeyIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiKeyIdIdResponse, error) {
	rsp, err := c.DeleteApiKeyIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeyIdIdResponse(rsp)
}

// GetApiKeyIdIdWithResponse request returning *GetApiKeyIdIdResponse
func (c *ClientWithResponses) GetApiKeyIdIdWithResponse(ctx context.Context, id int, params *GetApiKeyIdIdParams, reqEditors ...RequestEditorFn) (*GetApiKeyIdIdResponse, error) {
	rsp, err := c.GetApiKeyIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyIdIdResponse(rsp)
}

// PutApiKeyIdIdWithBodyWithResponse request with arbitrary body returning *PutApiKeyIdIdResponse
func (c *ClientWithResponses) PutApiKeyIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiKeyIdIdResponse, error) {
	rsp, err := c.PutApiKeyIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiKeyIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiKeyIdIdWithResponse(ctx context.Context, id int, body PutApiKeyIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiKeyIdIdResponse, error) {
	rsp, err := c.PutApiKeyIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiKeyIdIdResponse(rsp)
}

// PostAuthCheckUserWithBodyWithResponse request with arbitrary body returning *PostAuthCheckUserResponse
func (c *ClientWithResponses) PostAuthCheckUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthCheckUserResponse, error) {
	rsp, err := c.PostAuthCheckUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthCheckUserResponse(rsp)
}

func (c *ClientWithResponses) PostAuthCheckUserWithResponse(ctx context.Context, body PostAuthCheckUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthCheckUserResponse, error) {
	rsp, err := c.PostAuthCheckUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthCheckUserResponse(rsp)
}

// PostAuthGenerateTokenWithBodyWithResponse request with arbitrary body returning *PostAuthGenerateTokenResponse
func (c *ClientWithResponses) PostAuthGenerateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthGenerateTokenResponse, error) {
	rsp, err := c.PostAuthGenerateTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthGenerateTokenResponse(rsp)
}

func (c *ClientWithResponses) PostAuthGenerateTokenWithResponse(ctx context.Context, body PostAuthGenerateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthGenerateTokenResponse, error) {
	rsp, err := c.PostAuthGenerateToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthGenerateTokenResponse(rsp)
}

// GetAuthSessionsWithResponse request returning *GetAuthSessionsResponse
func (c *ClientWithResponses) GetAuthSessionsWithResponse(ctx context.Context, params *GetAuthSessionsParams, reqEditors ...RequestEditorFn) (*GetAuthSessionsResponse, error) {
	rsp, err := c.GetAuthSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthSessionsResponse(rsp)
}

// GetAuthTwoFactorAuthWithResponse request returning *GetAuthTwoFactorAuthResponse
func (c *ClientWithResponses) GetAuthTwoFactorAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthTwoFactorAuthResponse, error) {
	rsp, err := c.GetAuthTwoFactorAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthTwoFactorAuthResponse(rsp)
}

// GetAuthTwofactorWithResponse request returning *GetAuthTwofactorResponse
func (c *ClientWithResponses) GetAuthTwofactorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthTwofactorResponse, error) {
	rsp, err := c.GetAuthTwofactor(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthTwofactorResponse(rsp)
}

// PutAuthTwofactorWithBodyWithResponse request with arbitrary body returning *PutAuthTwofactorResponse
func (c *ClientWithResponses) PutAuthTwofactorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthTwofactorResponse, error) {
	rsp, err := c.PutAuthTwofactorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthTwofactorResponse(rsp)
}

func (c *ClientWithResponses) PutAuthTwofactorWithResponse(ctx context.Context, body PutAuthTwofactorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthTwofactorResponse, error) {
	rsp, err := c.PutAuthTwofactor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthTwofactorResponse(rsp)
}

// GetAuthTwofactorProvisioningUriWithResponse request returning *GetAuthTwofactorProvisioningUriResponse
func (c *ClientWithResponses) GetAuthTwofactorProvisioningUriWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthTwofactorProvisioningUriResponse, error) {
	rsp, err := c.GetAuthTwofactorProvisioningUri(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthTwofactorProvisioningUriResponse(rsp)
}

// GetAuthTwofactorRenewSecretWithResponse request returning *GetAuthTwofactorRenewSecretResponse
func (c *ClientWithResponses) GetAuthTwofactorRenewSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthTwofactorRenewSecretResponse, error) {
	rsp, err := c.GetAuthTwofactorRenewSecret(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthTwofactorRenewSecretResponse(rsp)
}

// PostAuthTwofactorVerifyWithBodyWithResponse request with arbitrary body returning *PostAuthTwofactorVerifyResponse
func (c *ClientWithResponses) PostAuthTwofactorVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthTwofactorVerifyResponse, error) {
	rsp, err := c.PostAuthTwofactorVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthTwofactorVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostAuthTwofactorVerifyWithResponse(ctx context.Context, body PostAuthTwofactorVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthTwofactorVerifyResponse, error) {
	rsp, err := c.PostAuthTwofactorVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthTwofactorVerifyResponse(rsp)
}

// PostBootAttachWithBodyWithResponse request with arbitrary body returning *PostBootAttachResponse
func (c *ClientWithResponses) PostBootAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootAttachResponse, error) {
	rsp, err := c.PostBootAttachWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootAttachResponse(rsp)
}

func (c *ClientWithResponses) PostBootAttachWithResponse(ctx context.Context, body PostBootAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootAttachResponse, error) {
	rsp, err := c.PostBootAttach(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootAttachResponse(rsp)
}

// PostBootDetachWithBodyWithResponse request with arbitrary body returning *PostBootDetachResponse
func (c *ClientWithResponses) PostBootDetachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootDetachResponse, error) {
	rsp, err := c.PostBootDetachWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootDetachResponse(rsp)
}

func (c *ClientWithResponses) PostBootDetachWithResponse(ctx context.Context, body PostBootDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootDetachResponse, error) {
	rsp, err := c.PostBootDetach(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootDetachResponse(rsp)
}

// GetBootGetDisksWithResponse request returning *GetBootGetDisksResponse
func (c *ClientWithResponses) GetBootGetDisksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBootGetDisksResponse, error) {
	rsp, err := c.GetBootGetDisks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBootGetDisksResponse(rsp)
}

// GetBootGetScrubIntervalWithResponse request returning *GetBootGetScrubIntervalResponse
func (c *ClientWithResponses) GetBootGetScrubIntervalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBootGetScrubIntervalResponse, error) {
	rsp, err := c.GetBootGetScrubInterval(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBootGetScrubIntervalResponse(rsp)
}

// GetBootGetStateWithResponse request returning *GetBootGetStateResponse
func (c *ClientWithResponses) GetBootGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBootGetStateResponse, error) {
	rsp, err := c.GetBootGetState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBootGetStateResponse(rsp)
}

// PostBootReplaceWithBodyWithResponse request with arbitrary body returning *PostBootReplaceResponse
func (c *ClientWithResponses) PostBootReplaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootReplaceResponse, error) {
	rsp, err := c.PostBootReplaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootReplaceResponse(rsp)
}

func (c *ClientWithResponses) PostBootReplaceWithResponse(ctx context.Context, body PostBootReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootReplaceResponse, error) {
	rsp, err := c.PostBootReplace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootReplaceResponse(rsp)
}

// GetBootScrubWithResponse request returning *GetBootScrubResponse
func (c *ClientWithResponses) GetBootScrubWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBootScrubResponse, error) {
	rsp, err := c.GetBootScrub(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBootScrubResponse(rsp)
}

// PostBootSetScrubIntervalWithBodyWithResponse request with arbitrary body returning *PostBootSetScrubIntervalResponse
func (c *ClientWithResponses) PostBootSetScrubIntervalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootSetScrubIntervalResponse, error) {
	rsp, err := c.PostBootSetScrubIntervalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootSetScrubIntervalResponse(rsp)
}

func (c *ClientWithResponses) PostBootSetScrubIntervalWithResponse(ctx context.Context, body PostBootSetScrubIntervalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootSetScrubIntervalResponse, error) {
	rsp, err := c.PostBootSetScrubInterval(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootSetScrubIntervalResponse(rsp)
}

// GetBootenvWithResponse request returning *GetBootenvResponse
func (c *ClientWithResponses) GetBootenvWithResponse(ctx context.Context, params *GetBootenvParams, reqEditors ...RequestEditorFn) (*GetBootenvResponse, error) {
	rsp, err := c.GetBootenv(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBootenvResponse(rsp)
}

// PostBootenvWithBodyWithResponse request with arbitrary body returning *PostBootenvResponse
func (c *ClientWithResponses) PostBootenvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootenvResponse, error) {
	rsp, err := c.PostBootenvWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvResponse(rsp)
}

func (c *ClientWithResponses) PostBootenvWithResponse(ctx context.Context, body PostBootenvJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootenvResponse, error) {
	rsp, err := c.PostBootenv(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvResponse(rsp)
}

// DeleteBootenvIdIdWithResponse request returning *DeleteBootenvIdIdResponse
func (c *ClientWithResponses) DeleteBootenvIdIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBootenvIdIdResponse, error) {
	rsp, err := c.DeleteBootenvIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBootenvIdIdResponse(rsp)
}

// GetBootenvIdIdWithResponse request returning *GetBootenvIdIdResponse
func (c *ClientWithResponses) GetBootenvIdIdWithResponse(ctx context.Context, id string, params *GetBootenvIdIdParams, reqEditors ...RequestEditorFn) (*GetBootenvIdIdResponse, error) {
	rsp, err := c.GetBootenvIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBootenvIdIdResponse(rsp)
}

// PutBootenvIdIdWithBodyWithResponse request with arbitrary body returning *PutBootenvIdIdResponse
func (c *ClientWithResponses) PutBootenvIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBootenvIdIdResponse, error) {
	rsp, err := c.PutBootenvIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBootenvIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutBootenvIdIdWithResponse(ctx context.Context, id string, body PutBootenvIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBootenvIdIdResponse, error) {
	rsp, err := c.PutBootenvIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBootenvIdIdResponse(rsp)
}

// PostBootenvIdIdActivateWithBodyWithResponse request with arbitrary body returning *PostBootenvIdIdActivateResponse
func (c *ClientWithResponses) PostBootenvIdIdActivateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootenvIdIdActivateResponse, error) {
	rsp, err := c.PostBootenvIdIdActivateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvIdIdActivateResponse(rsp)
}

func (c *ClientWithResponses) PostBootenvIdIdActivateWithResponse(ctx context.Context, id string, body PostBootenvIdIdActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootenvIdIdActivateResponse, error) {
	rsp, err := c.PostBootenvIdIdActivate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvIdIdActivateResponse(rsp)
}

// PostBootenvIdIdSetAttributeWithBodyWithResponse request with arbitrary body returning *PostBootenvIdIdSetAttributeResponse
func (c *ClientWithResponses) PostBootenvIdIdSetAttributeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBootenvIdIdSetAttributeResponse, error) {
	rsp, err := c.PostBootenvIdIdSetAttributeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvIdIdSetAttributeResponse(rsp)
}

func (c *ClientWithResponses) PostBootenvIdIdSetAttributeWithResponse(ctx context.Context, id string, body PostBootenvIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBootenvIdIdSetAttributeResponse, error) {
	rsp, err := c.PostBootenvIdIdSetAttribute(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvIdIdSetAttributeResponse(rsp)
}

// GetCertificateWithResponse request returning *GetCertificateResponse
func (c *ClientWithResponses) GetCertificateWithResponse(ctx context.Context, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*GetCertificateResponse, error) {
	rsp, err := c.GetCertificate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateResponse(rsp)
}

// PostCertificateWithBodyWithResponse request with arbitrary body returning *PostCertificateResponse
func (c *ClientWithResponses) PostCertificateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificateResponse, error) {
	rsp, err := c.PostCertificateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateResponse(rsp)
}

func (c *ClientWithResponses) PostCertificateWithResponse(ctx context.Context, body PostCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificateResponse, error) {
	rsp, err := c.PostCertificate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateResponse(rsp)
}

// GetCertificateAcmeServerChoicesWithResponse request returning *GetCertificateAcmeServerChoicesResponse
func (c *ClientWithResponses) GetCertificateAcmeServerChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateAcmeServerChoicesResponse, error) {
	rsp, err := c.GetCertificateAcmeServerChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateAcmeServerChoicesResponse(rsp)
}

// GetCertificateCountryChoicesWithResponse request returning *GetCertificateCountryChoicesResponse
func (c *ClientWithResponses) GetCertificateCountryChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateCountryChoicesResponse, error) {
	rsp, err := c.GetCertificateCountryChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateCountryChoicesResponse(rsp)
}

// GetCertificateEcCurveChoicesWithResponse request returning *GetCertificateEcCurveChoicesResponse
func (c *ClientWithResponses) GetCertificateEcCurveChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateEcCurveChoicesResponse, error) {
	rsp, err := c.GetCertificateEcCurveChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateEcCurveChoicesResponse(rsp)
}

// GetCertificateExtendedKeyUsageChoicesWithResponse request returning *GetCertificateExtendedKeyUsageChoicesResponse
func (c *ClientWithResponses) GetCertificateExtendedKeyUsageChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateExtendedKeyUsageChoicesResponse, error) {
	rsp, err := c.GetCertificateExtendedKeyUsageChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateExtendedKeyUsageChoicesResponse(rsp)
}

// DeleteCertificateIdIdWithBodyWithResponse request with arbitrary body returning *DeleteCertificateIdIdResponse
func (c *ClientWithResponses) DeleteCertificateIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCertificateIdIdResponse, error) {
	rsp, err := c.DeleteCertificateIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertificateIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteCertificateIdIdWithResponse(ctx context.Context, id int, body DeleteCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCertificateIdIdResponse, error) {
	rsp, err := c.DeleteCertificateIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertificateIdIdResponse(rsp)
}

// GetCertificateIdIdWithResponse request returning *GetCertificateIdIdResponse
func (c *ClientWithResponses) GetCertificateIdIdWithResponse(ctx context.Context, id int, params *GetCertificateIdIdParams, reqEditors ...RequestEditorFn) (*GetCertificateIdIdResponse, error) {
	rsp, err := c.GetCertificateIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateIdIdResponse(rsp)
}

// PutCertificateIdIdWithBodyWithResponse request with arbitrary body returning *PutCertificateIdIdResponse
func (c *ClientWithResponses) PutCertificateIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCertificateIdIdResponse, error) {
	rsp, err := c.PutCertificateIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCertificateIdIdWithResponse(ctx context.Context, id int, body PutCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCertificateIdIdResponse, error) {
	rsp, err := c.PutCertificateIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateIdIdResponse(rsp)
}

// GetCertificateKeyTypeChoicesWithResponse request returning *GetCertificateKeyTypeChoicesResponse
func (c *ClientWithResponses) GetCertificateKeyTypeChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateKeyTypeChoicesResponse, error) {
	rsp, err := c.GetCertificateKeyTypeChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateKeyTypeChoicesResponse(rsp)
}

// GetCertificateProfilesWithResponse request returning *GetCertificateProfilesResponse
func (c *ClientWithResponses) GetCertificateProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateProfilesResponse, error) {
	rsp, err := c.GetCertificateProfiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateProfilesResponse(rsp)
}

// GetCertificateauthorityWithResponse request returning *GetCertificateauthorityResponse
func (c *ClientWithResponses) GetCertificateauthorityWithResponse(ctx context.Context, params *GetCertificateauthorityParams, reqEditors ...RequestEditorFn) (*GetCertificateauthorityResponse, error) {
	rsp, err := c.GetCertificateauthority(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateauthorityResponse(rsp)
}

// PostCertificateauthorityWithBodyWithResponse request with arbitrary body returning *PostCertificateauthorityResponse
func (c *ClientWithResponses) PostCertificateauthorityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificateauthorityResponse, error) {
	rsp, err := c.PostCertificateauthorityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateauthorityResponse(rsp)
}

func (c *ClientWithResponses) PostCertificateauthorityWithResponse(ctx context.Context, body PostCertificateauthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificateauthorityResponse, error) {
	rsp, err := c.PostCertificateauthority(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateauthorityResponse(rsp)
}

// PostCertificateauthorityCaSignCsrWithBodyWithResponse request with arbitrary body returning *PostCertificateauthorityCaSignCsrResponse
func (c *ClientWithResponses) PostCertificateauthorityCaSignCsrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificateauthorityCaSignCsrResponse, error) {
	rsp, err := c.PostCertificateauthorityCaSignCsrWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateauthorityCaSignCsrResponse(rsp)
}

func (c *ClientWithResponses) PostCertificateauthorityCaSignCsrWithResponse(ctx context.Context, body PostCertificateauthorityCaSignCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificateauthorityCaSignCsrResponse, error) {
	rsp, err := c.PostCertificateauthorityCaSignCsr(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateauthorityCaSignCsrResponse(rsp)
}

// DeleteCertificateauthorityIdIdWithResponse request returning *DeleteCertificateauthorityIdIdResponse
func (c *ClientWithResponses) DeleteCertificateauthorityIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCertificateauthorityIdIdResponse, error) {
	rsp, err := c.DeleteCertificateauthorityIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertificateauthorityIdIdResponse(rsp)
}

// GetCertificateauthorityIdIdWithResponse request returning *GetCertificateauthorityIdIdResponse
func (c *ClientWithResponses) GetCertificateauthorityIdIdWithResponse(ctx context.Context, id int, params *GetCertificateauthorityIdIdParams, reqEditors ...RequestEditorFn) (*GetCertificateauthorityIdIdResponse, error) {
	rsp, err := c.GetCertificateauthorityIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateauthorityIdIdResponse(rsp)
}

// PutCertificateauthorityIdIdWithBodyWithResponse request with arbitrary body returning *PutCertificateauthorityIdIdResponse
func (c *ClientWithResponses) PutCertificateauthorityIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCertificateauthorityIdIdResponse, error) {
	rsp, err := c.PutCertificateauthorityIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateauthorityIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCertificateauthorityIdIdWithResponse(ctx context.Context, id int, body PutCertificateauthorityIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCertificateauthorityIdIdResponse, error) {
	rsp, err := c.PutCertificateauthorityIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateauthorityIdIdResponse(rsp)
}

// GetCertificateauthorityProfilesWithResponse request returning *GetCertificateauthorityProfilesResponse
func (c *ClientWithResponses) GetCertificateauthorityProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCertificateauthorityProfilesResponse, error) {
	rsp, err := c.GetCertificateauthorityProfiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateauthorityProfilesResponse(rsp)
}

// GetCloudsyncWithResponse request returning *GetCloudsyncResponse
func (c *ClientWithResponses) GetCloudsyncWithResponse(ctx context.Context, params *GetCloudsyncParams, reqEditors ...RequestEditorFn) (*GetCloudsyncResponse, error) {
	rsp, err := c.GetCloudsync(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncResponse(rsp)
}

// PostCloudsyncWithBodyWithResponse request with arbitrary body returning *PostCloudsyncResponse
func (c *ClientWithResponses) PostCloudsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncResponse, error) {
	rsp, err := c.PostCloudsyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncWithResponse(ctx context.Context, body PostCloudsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncResponse, error) {
	rsp, err := c.PostCloudsync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncResponse(rsp)
}

// GetCloudsyncCommonTaskSchemaWithResponse request returning *GetCloudsyncCommonTaskSchemaResponse
func (c *ClientWithResponses) GetCloudsyncCommonTaskSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCloudsyncCommonTaskSchemaResponse, error) {
	rsp, err := c.GetCloudsyncCommonTaskSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncCommonTaskSchemaResponse(rsp)
}

// GetCloudsyncCredentialsWithResponse request returning *GetCloudsyncCredentialsResponse
func (c *ClientWithResponses) GetCloudsyncCredentialsWithResponse(ctx context.Context, params *GetCloudsyncCredentialsParams, reqEditors ...RequestEditorFn) (*GetCloudsyncCredentialsResponse, error) {
	rsp, err := c.GetCloudsyncCredentials(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncCredentialsResponse(rsp)
}

// PostCloudsyncCredentialsWithBodyWithResponse request with arbitrary body returning *PostCloudsyncCredentialsResponse
func (c *ClientWithResponses) PostCloudsyncCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncCredentialsResponse, error) {
	rsp, err := c.PostCloudsyncCredentialsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncCredentialsResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncCredentialsWithResponse(ctx context.Context, body PostCloudsyncCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncCredentialsResponse, error) {
	rsp, err := c.PostCloudsyncCredentials(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncCredentialsResponse(rsp)
}

// DeleteCloudsyncCredentialsIdIdWithResponse request returning *DeleteCloudsyncCredentialsIdIdResponse
func (c *ClientWithResponses) DeleteCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCloudsyncCredentialsIdIdResponse, error) {
	rsp, err := c.DeleteCloudsyncCredentialsIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCloudsyncCredentialsIdIdResponse(rsp)
}

// GetCloudsyncCredentialsIdIdWithResponse request returning *GetCloudsyncCredentialsIdIdResponse
func (c *ClientWithResponses) GetCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int, params *GetCloudsyncCredentialsIdIdParams, reqEditors ...RequestEditorFn) (*GetCloudsyncCredentialsIdIdResponse, error) {
	rsp, err := c.GetCloudsyncCredentialsIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncCredentialsIdIdResponse(rsp)
}

// PutCloudsyncCredentialsIdIdWithBodyWithResponse request with arbitrary body returning *PutCloudsyncCredentialsIdIdResponse
func (c *ClientWithResponses) PutCloudsyncCredentialsIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCloudsyncCredentialsIdIdResponse, error) {
	rsp, err := c.PutCloudsyncCredentialsIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudsyncCredentialsIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCloudsyncCredentialsIdIdResponse, error) {
	rsp, err := c.PutCloudsyncCredentialsIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudsyncCredentialsIdIdResponse(rsp)
}

// PostCloudsyncCredentialsVerifyWithBodyWithResponse request with arbitrary body returning *PostCloudsyncCredentialsVerifyResponse
func (c *ClientWithResponses) PostCloudsyncCredentialsVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncCredentialsVerifyResponse, error) {
	rsp, err := c.PostCloudsyncCredentialsVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncCredentialsVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncCredentialsVerifyWithResponse(ctx context.Context, body PostCloudsyncCredentialsVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncCredentialsVerifyResponse, error) {
	rsp, err := c.PostCloudsyncCredentialsVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncCredentialsVerifyResponse(rsp)
}

// DeleteCloudsyncIdIdWithResponse request returning *DeleteCloudsyncIdIdResponse
func (c *ClientWithResponses) DeleteCloudsyncIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCloudsyncIdIdResponse, error) {
	rsp, err := c.DeleteCloudsyncIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCloudsyncIdIdResponse(rsp)
}

// GetCloudsyncIdIdWithResponse request returning *GetCloudsyncIdIdResponse
func (c *ClientWithResponses) GetCloudsyncIdIdWithResponse(ctx context.Context, id int, params *GetCloudsyncIdIdParams, reqEditors ...RequestEditorFn) (*GetCloudsyncIdIdResponse, error) {
	rsp, err := c.GetCloudsyncIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncIdIdResponse(rsp)
}

// PutCloudsyncIdIdWithBodyWithResponse request with arbitrary body returning *PutCloudsyncIdIdResponse
func (c *ClientWithResponses) PutCloudsyncIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCloudsyncIdIdResponse, error) {
	rsp, err := c.PutCloudsyncIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudsyncIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCloudsyncIdIdWithResponse(ctx context.Context, id int, body PutCloudsyncIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCloudsyncIdIdResponse, error) {
	rsp, err := c.PutCloudsyncIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudsyncIdIdResponse(rsp)
}

// PostCloudsyncIdIdAbortWithBodyWithResponse request with arbitrary body returning *PostCloudsyncIdIdAbortResponse
func (c *ClientWithResponses) PostCloudsyncIdIdAbortWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdAbortResponse, error) {
	rsp, err := c.PostCloudsyncIdIdAbortWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdAbortResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncIdIdAbortWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdAbortResponse, error) {
	rsp, err := c.PostCloudsyncIdIdAbort(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdAbortResponse(rsp)
}

// PostCloudsyncIdIdRestoreWithBodyWithResponse request with arbitrary body returning *PostCloudsyncIdIdRestoreResponse
func (c *ClientWithResponses) PostCloudsyncIdIdRestoreWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdRestoreResponse, error) {
	rsp, err := c.PostCloudsyncIdIdRestoreWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncIdIdRestoreWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdRestoreResponse, error) {
	rsp, err := c.PostCloudsyncIdIdRestore(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdRestoreResponse(rsp)
}

// PostCloudsyncIdIdSyncWithBodyWithResponse request with arbitrary body returning *PostCloudsyncIdIdSyncResponse
func (c *ClientWithResponses) PostCloudsyncIdIdSyncWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdSyncResponse, error) {
	rsp, err := c.PostCloudsyncIdIdSyncWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdSyncResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncIdIdSyncWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncIdIdSyncResponse, error) {
	rsp, err := c.PostCloudsyncIdIdSync(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdSyncResponse(rsp)
}

// PostCloudsyncListBucketsWithBodyWithResponse request with arbitrary body returning *PostCloudsyncListBucketsResponse
func (c *ClientWithResponses) PostCloudsyncListBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncListBucketsResponse, error) {
	rsp, err := c.PostCloudsyncListBucketsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncListBucketsResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncListBucketsWithResponse(ctx context.Context, body PostCloudsyncListBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncListBucketsResponse, error) {
	rsp, err := c.PostCloudsyncListBuckets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncListBucketsResponse(rsp)
}

// PostCloudsyncListDirectoryWithBodyWithResponse request with arbitrary body returning *PostCloudsyncListDirectoryResponse
func (c *ClientWithResponses) PostCloudsyncListDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncListDirectoryResponse, error) {
	rsp, err := c.PostCloudsyncListDirectoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncListDirectoryResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncListDirectoryWithResponse(ctx context.Context, body PostCloudsyncListDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncListDirectoryResponse, error) {
	rsp, err := c.PostCloudsyncListDirectory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncListDirectoryResponse(rsp)
}

// PostCloudsyncOnedriveListDrivesWithBodyWithResponse request with arbitrary body returning *PostCloudsyncOnedriveListDrivesResponse
func (c *ClientWithResponses) PostCloudsyncOnedriveListDrivesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncOnedriveListDrivesResponse, error) {
	rsp, err := c.PostCloudsyncOnedriveListDrivesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncOnedriveListDrivesResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncOnedriveListDrivesWithResponse(ctx context.Context, body PostCloudsyncOnedriveListDrivesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncOnedriveListDrivesResponse, error) {
	rsp, err := c.PostCloudsyncOnedriveListDrives(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncOnedriveListDrivesResponse(rsp)
}

// GetCloudsyncProvidersWithResponse request returning *GetCloudsyncProvidersResponse
func (c *ClientWithResponses) GetCloudsyncProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCloudsyncProvidersResponse, error) {
	rsp, err := c.GetCloudsyncProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncProvidersResponse(rsp)
}

// PostCloudsyncSyncOnetimeWithBodyWithResponse request with arbitrary body returning *PostCloudsyncSyncOnetimeResponse
func (c *ClientWithResponses) PostCloudsyncSyncOnetimeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCloudsyncSyncOnetimeResponse, error) {
	rsp, err := c.PostCloudsyncSyncOnetimeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncSyncOnetimeResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncSyncOnetimeWithResponse(ctx context.Context, body PostCloudsyncSyncOnetimeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCloudsyncSyncOnetimeResponse, error) {
	rsp, err := c.PostCloudsyncSyncOnetime(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncSyncOnetimeResponse(rsp)
}

// PostConfigResetWithBodyWithResponse request with arbitrary body returning *PostConfigResetResponse
func (c *ClientWithResponses) PostConfigResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigResetResponse, error) {
	rsp, err := c.PostConfigResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigResetResponse(rsp)
}

func (c *ClientWithResponses) PostConfigResetWithResponse(ctx context.Context, body PostConfigResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigResetResponse, error) {
	rsp, err := c.PostConfigReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigResetResponse(rsp)
}

// PostCoreBulkWithBodyWithResponse request with arbitrary body returning *PostCoreBulkResponse
func (c *ClientWithResponses) PostCoreBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreBulkResponse, error) {
	rsp, err := c.PostCoreBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreBulkResponse(rsp)
}

func (c *ClientWithResponses) PostCoreBulkWithResponse(ctx context.Context, body PostCoreBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreBulkResponse, error) {
	rsp, err := c.PostCoreBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreBulkResponse(rsp)
}

// PostCoreDebugWithBodyWithResponse request with arbitrary body returning *PostCoreDebugResponse
func (c *ClientWithResponses) PostCoreDebugWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreDebugResponse, error) {
	rsp, err := c.PostCoreDebugWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreDebugResponse(rsp)
}

func (c *ClientWithResponses) PostCoreDebugWithResponse(ctx context.Context, body PostCoreDebugJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreDebugResponse, error) {
	rsp, err := c.PostCoreDebug(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreDebugResponse(rsp)
}

// PostCoreDownloadWithBodyWithResponse request with arbitrary body returning *PostCoreDownloadResponse
func (c *ClientWithResponses) PostCoreDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreDownloadResponse, error) {
	rsp, err := c.PostCoreDownloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostCoreDownloadWithResponse(ctx context.Context, body PostCoreDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreDownloadResponse, error) {
	rsp, err := c.PostCoreDownload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreDownloadResponse(rsp)
}

// GetCoreGetEventsWithResponse request returning *GetCoreGetEventsResponse
func (c *ClientWithResponses) GetCoreGetEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCoreGetEventsResponse, error) {
	rsp, err := c.GetCoreGetEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreGetEventsResponse(rsp)
}

// GetCoreGetJobsWithResponse request returning *GetCoreGetJobsResponse
func (c *ClientWithResponses) GetCoreGetJobsWithResponse(ctx context.Context, params *GetCoreGetJobsParams, reqEditors ...RequestEditorFn) (*GetCoreGetJobsResponse, error) {
	rsp, err := c.GetCoreGetJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreGetJobsResponse(rsp)
}

// PostCoreGetMethodsWithBodyWithResponse request with arbitrary body returning *PostCoreGetMethodsResponse
func (c *ClientWithResponses) PostCoreGetMethodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreGetMethodsResponse, error) {
	rsp, err := c.PostCoreGetMethodsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreGetMethodsResponse(rsp)
}

func (c *ClientWithResponses) PostCoreGetMethodsWithResponse(ctx context.Context, body PostCoreGetMethodsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreGetMethodsResponse, error) {
	rsp, err := c.PostCoreGetMethods(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreGetMethodsResponse(rsp)
}

// GetCoreGetServicesWithResponse request returning *GetCoreGetServicesResponse
func (c *ClientWithResponses) GetCoreGetServicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCoreGetServicesResponse, error) {
	rsp, err := c.GetCoreGetServices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreGetServicesResponse(rsp)
}

// PostCoreJobAbortWithBodyWithResponse request with arbitrary body returning *PostCoreJobAbortResponse
func (c *ClientWithResponses) PostCoreJobAbortWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreJobAbortResponse, error) {
	rsp, err := c.PostCoreJobAbortWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobAbortResponse(rsp)
}

func (c *ClientWithResponses) PostCoreJobAbortWithResponse(ctx context.Context, body PostCoreJobAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreJobAbortResponse, error) {
	rsp, err := c.PostCoreJobAbort(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobAbortResponse(rsp)
}

// PostCoreJobUpdateWithBodyWithResponse request with arbitrary body returning *PostCoreJobUpdateResponse
func (c *ClientWithResponses) PostCoreJobUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreJobUpdateResponse, error) {
	rsp, err := c.PostCoreJobUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostCoreJobUpdateWithResponse(ctx context.Context, body PostCoreJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreJobUpdateResponse, error) {
	rsp, err := c.PostCoreJobUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobUpdateResponse(rsp)
}

// PostCoreJobWaitWithBodyWithResponse request with arbitrary body returning *PostCoreJobWaitResponse
func (c *ClientWithResponses) PostCoreJobWaitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreJobWaitResponse, error) {
	rsp, err := c.PostCoreJobWaitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobWaitResponse(rsp)
}

func (c *ClientWithResponses) PostCoreJobWaitWithResponse(ctx context.Context, body PostCoreJobWaitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreJobWaitResponse, error) {
	rsp, err := c.PostCoreJobWait(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobWaitResponse(rsp)
}

// GetCorePingWithResponse request returning *GetCorePingResponse
func (c *ClientWithResponses) GetCorePingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCorePingResponse, error) {
	rsp, err := c.GetCorePing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorePingResponse(rsp)
}

// PostCorePingRemoteWithBodyWithResponse request with arbitrary body returning *PostCorePingRemoteResponse
func (c *ClientWithResponses) PostCorePingRemoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCorePingRemoteResponse, error) {
	rsp, err := c.PostCorePingRemoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCorePingRemoteResponse(rsp)
}

func (c *ClientWithResponses) PostCorePingRemoteWithResponse(ctx context.Context, body PostCorePingRemoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCorePingRemoteResponse, error) {
	rsp, err := c.PostCorePingRemote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCorePingRemoteResponse(rsp)
}

// PostCoreResizeShellWithBodyWithResponse request with arbitrary body returning *PostCoreResizeShellResponse
func (c *ClientWithResponses) PostCoreResizeShellWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCoreResizeShellResponse, error) {
	rsp, err := c.PostCoreResizeShellWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreResizeShellResponse(rsp)
}

func (c *ClientWithResponses) PostCoreResizeShellWithResponse(ctx context.Context, body PostCoreResizeShellJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCoreResizeShellResponse, error) {
	rsp, err := c.PostCoreResizeShell(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreResizeShellResponse(rsp)
}

// GetCoreSessionsWithResponse request returning *GetCoreSessionsResponse
func (c *ClientWithResponses) GetCoreSessionsWithResponse(ctx context.Context, params *GetCoreSessionsParams, reqEditors ...RequestEditorFn) (*GetCoreSessionsResponse, error) {
	rsp, err := c.GetCoreSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreSessionsResponse(rsp)
}

// GetCronjobWithResponse request returning *GetCronjobResponse
func (c *ClientWithResponses) GetCronjobWithResponse(ctx context.Context, params *GetCronjobParams, reqEditors ...RequestEditorFn) (*GetCronjobResponse, error) {
	rsp, err := c.GetCronjob(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCronjobResponse(rsp)
}

// PostCronjobWithBodyWithResponse request with arbitrary body returning *PostCronjobResponse
func (c *ClientWithResponses) PostCronjobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCronjobResponse, error) {
	rsp, err := c.PostCronjobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCronjobResponse(rsp)
}

func (c *ClientWithResponses) PostCronjobWithResponse(ctx context.Context, body PostCronjobJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCronjobResponse, error) {
	rsp, err := c.PostCronjob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCronjobResponse(rsp)
}

// DeleteCronjobIdIdWithResponse request returning *DeleteCronjobIdIdResponse
func (c *ClientWithResponses) DeleteCronjobIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCronjobIdIdResponse, error) {
	rsp, err := c.DeleteCronjobIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCronjobIdIdResponse(rsp)
}

// GetCronjobIdIdWithResponse request returning *GetCronjobIdIdResponse
func (c *ClientWithResponses) GetCronjobIdIdWithResponse(ctx context.Context, id int, params *GetCronjobIdIdParams, reqEditors ...RequestEditorFn) (*GetCronjobIdIdResponse, error) {
	rsp, err := c.GetCronjobIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCronjobIdIdResponse(rsp)
}

// PutCronjobIdIdWithBodyWithResponse request with arbitrary body returning *PutCronjobIdIdResponse
func (c *ClientWithResponses) PutCronjobIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCronjobIdIdResponse, error) {
	rsp, err := c.PutCronjobIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCronjobIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCronjobIdIdWithResponse(ctx context.Context, id int, body PutCronjobIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCronjobIdIdResponse, error) {
	rsp, err := c.PutCronjobIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCronjobIdIdResponse(rsp)
}

// PostCronjobRunWithBodyWithResponse request with arbitrary body returning *PostCronjobRunResponse
func (c *ClientWithResponses) PostCronjobRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCronjobRunResponse, error) {
	rsp, err := c.PostCronjobRunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCronjobRunResponse(rsp)
}

func (c *ClientWithResponses) PostCronjobRunWithResponse(ctx context.Context, body PostCronjobRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCronjobRunResponse, error) {
	rsp, err := c.PostCronjobRun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCronjobRunResponse(rsp)
}

// PostDeviceGetInfoWithBodyWithResponse request with arbitrary body returning *PostDeviceGetInfoResponse
func (c *ClientWithResponses) PostDeviceGetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeviceGetInfoResponse, error) {
	rsp, err := c.PostDeviceGetInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceGetInfoResponse(rsp)
}

func (c *ClientWithResponses) PostDeviceGetInfoWithResponse(ctx context.Context, body PostDeviceGetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeviceGetInfoResponse, error) {
	rsp, err := c.PostDeviceGetInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceGetInfoResponse(rsp)
}

// GetDirectoryservicesCacheRefreshWithResponse request returning *GetDirectoryservicesCacheRefreshResponse
func (c *ClientWithResponses) GetDirectoryservicesCacheRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDirectoryservicesCacheRefreshResponse, error) {
	rsp, err := c.GetDirectoryservicesCacheRefresh(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDirectoryservicesCacheRefreshResponse(rsp)
}

// GetDirectoryservicesGetStateWithResponse request returning *GetDirectoryservicesGetStateResponse
func (c *ClientWithResponses) GetDirectoryservicesGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDirectoryservicesGetStateResponse, error) {
	rsp, err := c.GetDirectoryservicesGetState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDirectoryservicesGetStateResponse(rsp)
}

// GetDiskWithResponse request returning *GetDiskResponse
func (c *ClientWithResponses) GetDiskWithResponse(ctx context.Context, params *GetDiskParams, reqEditors ...RequestEditorFn) (*GetDiskResponse, error) {
	rsp, err := c.GetDisk(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiskResponse(rsp)
}

// PostDiskGetEncryptedWithBodyWithResponse request with arbitrary body returning *PostDiskGetEncryptedResponse
func (c *ClientWithResponses) PostDiskGetEncryptedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskGetEncryptedResponse, error) {
	rsp, err := c.PostDiskGetEncryptedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskGetEncryptedResponse(rsp)
}

func (c *ClientWithResponses) PostDiskGetEncryptedWithResponse(ctx context.Context, body PostDiskGetEncryptedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskGetEncryptedResponse, error) {
	rsp, err := c.PostDiskGetEncrypted(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskGetEncryptedResponse(rsp)
}

// PostDiskGetUnusedWithBodyWithResponse request with arbitrary body returning *PostDiskGetUnusedResponse
func (c *ClientWithResponses) PostDiskGetUnusedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskGetUnusedResponse, error) {
	rsp, err := c.PostDiskGetUnusedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskGetUnusedResponse(rsp)
}

func (c *ClientWithResponses) PostDiskGetUnusedWithResponse(ctx context.Context, body PostDiskGetUnusedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskGetUnusedResponse, error) {
	rsp, err := c.PostDiskGetUnused(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskGetUnusedResponse(rsp)
}

// GetDiskIdIdWithResponse request returning *GetDiskIdIdResponse
func (c *ClientWithResponses) GetDiskIdIdWithResponse(ctx context.Context, id int, params *GetDiskIdIdParams, reqEditors ...RequestEditorFn) (*GetDiskIdIdResponse, error) {
	rsp, err := c.GetDiskIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiskIdIdResponse(rsp)
}

// PutDiskIdIdWithBodyWithResponse request with arbitrary body returning *PutDiskIdIdResponse
func (c *ClientWithResponses) PutDiskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDiskIdIdResponse, error) {
	rsp, err := c.PutDiskIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDiskIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutDiskIdIdWithResponse(ctx context.Context, id int, body PutDiskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDiskIdIdResponse, error) {
	rsp, err := c.PutDiskIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDiskIdIdResponse(rsp)
}

// GetDiskLabelToDevWithResponse request returning *GetDiskLabelToDevResponse
func (c *ClientWithResponses) GetDiskLabelToDevWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDiskLabelToDevResponse, error) {
	rsp, err := c.GetDiskLabelToDev(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiskLabelToDevResponse(rsp)
}

// PostDiskOverprovisionWithBodyWithResponse request with arbitrary body returning *PostDiskOverprovisionResponse
func (c *ClientWithResponses) PostDiskOverprovisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskOverprovisionResponse, error) {
	rsp, err := c.PostDiskOverprovisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskOverprovisionResponse(rsp)
}

func (c *ClientWithResponses) PostDiskOverprovisionWithResponse(ctx context.Context, body PostDiskOverprovisionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskOverprovisionResponse, error) {
	rsp, err := c.PostDiskOverprovision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskOverprovisionResponse(rsp)
}

// GetDiskSedDevNameWithResponse request returning *GetDiskSedDevNameResponse
func (c *ClientWithResponses) GetDiskSedDevNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDiskSedDevNameResponse, error) {
	rsp, err := c.GetDiskSedDevName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiskSedDevNameResponse(rsp)
}

// PostDiskSmartAttributesWithBodyWithResponse request with arbitrary body returning *PostDiskSmartAttributesResponse
func (c *ClientWithResponses) PostDiskSmartAttributesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskSmartAttributesResponse, error) {
	rsp, err := c.PostDiskSmartAttributesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskSmartAttributesResponse(rsp)
}

func (c *ClientWithResponses) PostDiskSmartAttributesWithResponse(ctx context.Context, body PostDiskSmartAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskSmartAttributesResponse, error) {
	rsp, err := c.PostDiskSmartAttributes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskSmartAttributesResponse(rsp)
}

// PostDiskSpindownWithBodyWithResponse request with arbitrary body returning *PostDiskSpindownResponse
func (c *ClientWithResponses) PostDiskSpindownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskSpindownResponse, error) {
	rsp, err := c.PostDiskSpindownWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskSpindownResponse(rsp)
}

func (c *ClientWithResponses) PostDiskSpindownWithResponse(ctx context.Context, body PostDiskSpindownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskSpindownResponse, error) {
	rsp, err := c.PostDiskSpindown(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskSpindownResponse(rsp)
}

// PostDiskTemperatureWithBodyWithResponse request with arbitrary body returning *PostDiskTemperatureResponse
func (c *ClientWithResponses) PostDiskTemperatureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskTemperatureResponse, error) {
	rsp, err := c.PostDiskTemperatureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskTemperatureResponse(rsp)
}

func (c *ClientWithResponses) PostDiskTemperatureWithResponse(ctx context.Context, body PostDiskTemperatureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskTemperatureResponse, error) {
	rsp, err := c.PostDiskTemperature(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskTemperatureResponse(rsp)
}

// PostDiskTemperaturesWithBodyWithResponse request with arbitrary body returning *PostDiskTemperaturesResponse
func (c *ClientWithResponses) PostDiskTemperaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskTemperaturesResponse, error) {
	rsp, err := c.PostDiskTemperaturesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskTemperaturesResponse(rsp)
}

func (c *ClientWithResponses) PostDiskTemperaturesWithResponse(ctx context.Context, body PostDiskTemperaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskTemperaturesResponse, error) {
	rsp, err := c.PostDiskTemperatures(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskTemperaturesResponse(rsp)
}

// PostDiskUnoverprovisionWithBodyWithResponse request with arbitrary body returning *PostDiskUnoverprovisionResponse
func (c *ClientWithResponses) PostDiskUnoverprovisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskUnoverprovisionResponse, error) {
	rsp, err := c.PostDiskUnoverprovisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskUnoverprovisionResponse(rsp)
}

func (c *ClientWithResponses) PostDiskUnoverprovisionWithResponse(ctx context.Context, body PostDiskUnoverprovisionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskUnoverprovisionResponse, error) {
	rsp, err := c.PostDiskUnoverprovision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskUnoverprovisionResponse(rsp)
}

// PostDiskWipeWithBodyWithResponse request with arbitrary body returning *PostDiskWipeResponse
func (c *ClientWithResponses) PostDiskWipeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDiskWipeResponse, error) {
	rsp, err := c.PostDiskWipeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskWipeResponse(rsp)
}

func (c *ClientWithResponses) PostDiskWipeWithResponse(ctx context.Context, body PostDiskWipeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDiskWipeResponse, error) {
	rsp, err := c.PostDiskWipe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskWipeResponse(rsp)
}

// GetDnsQueryWithResponse request returning *GetDnsQueryResponse
func (c *ClientWithResponses) GetDnsQueryWithResponse(ctx context.Context, params *GetDnsQueryParams, reqEditors ...RequestEditorFn) (*GetDnsQueryResponse, error) {
	rsp, err := c.GetDnsQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDnsQueryResponse(rsp)
}

// GetDyndnsWithResponse request returning *GetDyndnsResponse
func (c *ClientWithResponses) GetDyndnsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDyndnsResponse, error) {
	rsp, err := c.GetDyndns(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDyndnsResponse(rsp)
}

// PutDyndnsWithBodyWithResponse request with arbitrary body returning *PutDyndnsResponse
func (c *ClientWithResponses) PutDyndnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDyndnsResponse, error) {
	rsp, err := c.PutDyndnsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDyndnsResponse(rsp)
}

func (c *ClientWithResponses) PutDyndnsWithResponse(ctx context.Context, body PutDyndnsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDyndnsResponse, error) {
	rsp, err := c.PutDyndns(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDyndnsResponse(rsp)
}

// GetDyndnsProviderChoicesWithResponse request returning *GetDyndnsProviderChoicesResponse
func (c *ClientWithResponses) GetDyndnsProviderChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDyndnsProviderChoicesResponse, error) {
	rsp, err := c.GetDyndnsProviderChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDyndnsProviderChoicesResponse(rsp)
}

// GetEc2MetaWithResponse request returning *GetEc2MetaResponse
func (c *ClientWithResponses) GetEc2MetaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2MetaResponse, error) {
	rsp, err := c.GetEc2Meta(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEc2MetaResponse(rsp)
}

// GetEc2InstanceIdWithResponse request returning *GetEc2InstanceIdResponse
func (c *ClientWithResponses) GetEc2InstanceIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2InstanceIdResponse, error) {
	rsp, err := c.GetEc2InstanceId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEc2InstanceIdResponse(rsp)
}

// GetEc2SetNtpServersWithResponse request returning *GetEc2SetNtpServersResponse
func (c *ClientWithResponses) GetEc2SetNtpServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2SetNtpServersResponse, error) {
	rsp, err := c.GetEc2SetNtpServers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEc2SetNtpServersResponse(rsp)
}

// GetEc2SetRootSshPublicKeyWithResponse request returning *GetEc2SetRootSshPublicKeyResponse
func (c *ClientWithResponses) GetEc2SetRootSshPublicKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2SetRootSshPublicKeyResponse, error) {
	rsp, err := c.GetEc2SetRootSshPublicKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEc2SetRootSshPublicKeyResponse(rsp)
}

// GetEc2SetupWithResponse request returning *GetEc2SetupResponse
func (c *ClientWithResponses) GetEc2SetupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEc2SetupResponse, error) {
	rsp, err := c.GetEc2Setup(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEc2SetupResponse(rsp)
}

// GetEnclosureWithResponse request returning *GetEnclosureResponse
func (c *ClientWithResponses) GetEnclosureWithResponse(ctx context.Context, params *GetEnclosureParams, reqEditors ...RequestEditorFn) (*GetEnclosureResponse, error) {
	rsp, err := c.GetEnclosure(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnclosureResponse(rsp)
}

// GetEnclosureIdIdWithResponse request returning *GetEnclosureIdIdResponse
func (c *ClientWithResponses) GetEnclosureIdIdWithResponse(ctx context.Context, id int, params *GetEnclosureIdIdParams, reqEditors ...RequestEditorFn) (*GetEnclosureIdIdResponse, error) {
	rsp, err := c.GetEnclosureIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnclosureIdIdResponse(rsp)
}

// PutEnclosureIdIdWithBodyWithResponse request with arbitrary body returning *PutEnclosureIdIdResponse
func (c *ClientWithResponses) PutEnclosureIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEnclosureIdIdResponse, error) {
	rsp, err := c.PutEnclosureIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEnclosureIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutEnclosureIdIdWithResponse(ctx context.Context, id int, body PutEnclosureIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEnclosureIdIdResponse, error) {
	rsp, err := c.PutEnclosureIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEnclosureIdIdResponse(rsp)
}

// PostEnclosureSetSlotStatusWithBodyWithResponse request with arbitrary body returning *PostEnclosureSetSlotStatusResponse
func (c *ClientWithResponses) PostEnclosureSetSlotStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnclosureSetSlotStatusResponse, error) {
	rsp, err := c.PostEnclosureSetSlotStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnclosureSetSlotStatusResponse(rsp)
}

func (c *ClientWithResponses) PostEnclosureSetSlotStatusWithResponse(ctx context.Context, body PostEnclosureSetSlotStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnclosureSetSlotStatusResponse, error) {
	rsp, err := c.PostEnclosureSetSlotStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnclosureSetSlotStatusResponse(rsp)
}

// GetFailoverWithResponse request returning *GetFailoverResponse
func (c *ClientWithResponses) GetFailoverWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverResponse, error) {
	rsp, err := c.GetFailover(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverResponse(rsp)
}

// PutFailoverWithBodyWithResponse request with arbitrary body returning *PutFailoverResponse
func (c *ClientWithResponses) PutFailoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFailoverResponse, error) {
	rsp, err := c.PutFailoverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFailoverResponse(rsp)
}

func (c *ClientWithResponses) PutFailoverWithResponse(ctx context.Context, body PutFailoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFailoverResponse, error) {
	rsp, err := c.PutFailover(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFailoverResponse(rsp)
}

// PostFailoverCallRemoteWithBodyWithResponse request with arbitrary body returning *PostFailoverCallRemoteResponse
func (c *ClientWithResponses) PostFailoverCallRemoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverCallRemoteResponse, error) {
	rsp, err := c.PostFailoverCallRemoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverCallRemoteResponse(rsp)
}

func (c *ClientWithResponses) PostFailoverCallRemoteWithResponse(ctx context.Context, body PostFailoverCallRemoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverCallRemoteResponse, error) {
	rsp, err := c.PostFailoverCallRemote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverCallRemoteResponse(rsp)
}

// PostFailoverControlWithBodyWithResponse request with arbitrary body returning *PostFailoverControlResponse
func (c *ClientWithResponses) PostFailoverControlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverControlResponse, error) {
	rsp, err := c.PostFailoverControlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverControlResponse(rsp)
}

func (c *ClientWithResponses) PostFailoverControlWithResponse(ctx context.Context, body PostFailoverControlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverControlResponse, error) {
	rsp, err := c.PostFailoverControl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverControlResponse(rsp)
}

// GetFailoverForceMasterWithResponse request returning *GetFailoverForceMasterResponse
func (c *ClientWithResponses) GetFailoverForceMasterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverForceMasterResponse, error) {
	rsp, err := c.GetFailoverForceMaster(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverForceMasterResponse(rsp)
}

// GetFailoverHardwareWithResponse request returning *GetFailoverHardwareResponse
func (c *ClientWithResponses) GetFailoverHardwareWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverHardwareResponse, error) {
	rsp, err := c.GetFailoverHardware(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverHardwareResponse(rsp)
}

// GetFailoverInProgressWithResponse request returning *GetFailoverInProgressResponse
func (c *ClientWithResponses) GetFailoverInProgressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverInProgressResponse, error) {
	rsp, err := c.GetFailoverInProgress(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverInProgressResponse(rsp)
}

// GetFailoverLicensedWithResponse request returning *GetFailoverLicensedResponse
func (c *ClientWithResponses) GetFailoverLicensedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverLicensedResponse, error) {
	rsp, err := c.GetFailoverLicensed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverLicensedResponse(rsp)
}

// GetFailoverNodeWithResponse request returning *GetFailoverNodeResponse
func (c *ClientWithResponses) GetFailoverNodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverNodeResponse, error) {
	rsp, err := c.GetFailoverNode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverNodeResponse(rsp)
}

// GetFailoverStatusWithResponse request returning *GetFailoverStatusResponse
func (c *ClientWithResponses) GetFailoverStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverStatusResponse, error) {
	rsp, err := c.GetFailoverStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverStatusResponse(rsp)
}

// GetFailoverSyncFromPeerWithResponse request returning *GetFailoverSyncFromPeerResponse
func (c *ClientWithResponses) GetFailoverSyncFromPeerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverSyncFromPeerResponse, error) {
	rsp, err := c.GetFailoverSyncFromPeer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverSyncFromPeerResponse(rsp)
}

// PostFailoverSyncToPeerWithBodyWithResponse request with arbitrary body returning *PostFailoverSyncToPeerResponse
func (c *ClientWithResponses) PostFailoverSyncToPeerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverSyncToPeerResponse, error) {
	rsp, err := c.PostFailoverSyncToPeerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverSyncToPeerResponse(rsp)
}

func (c *ClientWithResponses) PostFailoverSyncToPeerWithResponse(ctx context.Context, body PostFailoverSyncToPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverSyncToPeerResponse, error) {
	rsp, err := c.PostFailoverSyncToPeer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverSyncToPeerResponse(rsp)
}

// PostFailoverUnlockWithBodyWithResponse request with arbitrary body returning *PostFailoverUnlockResponse
func (c *ClientWithResponses) PostFailoverUnlockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverUnlockResponse, error) {
	rsp, err := c.PostFailoverUnlockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverUnlockResponse(rsp)
}

func (c *ClientWithResponses) PostFailoverUnlockWithResponse(ctx context.Context, body PostFailoverUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverUnlockResponse, error) {
	rsp, err := c.PostFailoverUnlock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverUnlockResponse(rsp)
}

// PostFailoverUpgradeWithBodyWithResponse request with arbitrary body returning *PostFailoverUpgradeResponse
func (c *ClientWithResponses) PostFailoverUpgradeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFailoverUpgradeResponse, error) {
	rsp, err := c.PostFailoverUpgradeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverUpgradeResponse(rsp)
}

func (c *ClientWithResponses) PostFailoverUpgradeWithResponse(ctx context.Context, body PostFailoverUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFailoverUpgradeResponse, error) {
	rsp, err := c.PostFailoverUpgrade(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFailoverUpgradeResponse(rsp)
}

// GetFailoverUpgradeFinishWithResponse request returning *GetFailoverUpgradeFinishResponse
func (c *ClientWithResponses) GetFailoverUpgradeFinishWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverUpgradeFinishResponse, error) {
	rsp, err := c.GetFailoverUpgradeFinish(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverUpgradeFinishResponse(rsp)
}

// GetFailoverUpgradePendingWithResponse request returning *GetFailoverUpgradePendingResponse
func (c *ClientWithResponses) GetFailoverUpgradePendingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFailoverUpgradePendingResponse, error) {
	rsp, err := c.GetFailoverUpgradePending(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFailoverUpgradePendingResponse(rsp)
}

// GetFcportWithResponse request returning *GetFcportResponse
func (c *ClientWithResponses) GetFcportWithResponse(ctx context.Context, params *GetFcportParams, reqEditors ...RequestEditorFn) (*GetFcportResponse, error) {
	rsp, err := c.GetFcport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFcportResponse(rsp)
}

// GetFcportIdIdWithResponse request returning *GetFcportIdIdResponse
func (c *ClientWithResponses) GetFcportIdIdWithResponse(ctx context.Context, id int, params *GetFcportIdIdParams, reqEditors ...RequestEditorFn) (*GetFcportIdIdResponse, error) {
	rsp, err := c.GetFcportIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFcportIdIdResponse(rsp)
}

// PutFcportIdIdWithBodyWithResponse request with arbitrary body returning *PutFcportIdIdResponse
func (c *ClientWithResponses) PutFcportIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFcportIdIdResponse, error) {
	rsp, err := c.PutFcportIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFcportIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutFcportIdIdWithResponse(ctx context.Context, id int, body PutFcportIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFcportIdIdResponse, error) {
	rsp, err := c.PutFcportIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFcportIdIdResponse(rsp)
}

// PostFilesystemAclIsTrivialWithBodyWithResponse request with arbitrary body returning *PostFilesystemAclIsTrivialResponse
func (c *ClientWithResponses) PostFilesystemAclIsTrivialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemAclIsTrivialResponse, error) {
	rsp, err := c.PostFilesystemAclIsTrivialWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemAclIsTrivialResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemAclIsTrivialWithResponse(ctx context.Context, body PostFilesystemAclIsTrivialJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemAclIsTrivialResponse, error) {
	rsp, err := c.PostFilesystemAclIsTrivial(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemAclIsTrivialResponse(rsp)
}

// PostFilesystemChownWithBodyWithResponse request with arbitrary body returning *PostFilesystemChownResponse
func (c *ClientWithResponses) PostFilesystemChownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemChownResponse, error) {
	rsp, err := c.PostFilesystemChownWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemChownResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemChownWithResponse(ctx context.Context, body PostFilesystemChownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemChownResponse, error) {
	rsp, err := c.PostFilesystemChown(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemChownResponse(rsp)
}

// GetFilesystemDefaultAclChoicesWithResponse request returning *GetFilesystemDefaultAclChoicesResponse
func (c *ClientWithResponses) GetFilesystemDefaultAclChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFilesystemDefaultAclChoicesResponse, error) {
	rsp, err := c.GetFilesystemDefaultAclChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilesystemDefaultAclChoicesResponse(rsp)
}

// PostFilesystemGetDefaultAclWithBodyWithResponse request with arbitrary body returning *PostFilesystemGetDefaultAclResponse
func (c *ClientWithResponses) PostFilesystemGetDefaultAclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemGetDefaultAclResponse, error) {
	rsp, err := c.PostFilesystemGetDefaultAclWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemGetDefaultAclResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemGetDefaultAclWithResponse(ctx context.Context, body PostFilesystemGetDefaultAclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemGetDefaultAclResponse, error) {
	rsp, err := c.PostFilesystemGetDefaultAcl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemGetDefaultAclResponse(rsp)
}

// PostFilesystemGetaclWithBodyWithResponse request with arbitrary body returning *PostFilesystemGetaclResponse
func (c *ClientWithResponses) PostFilesystemGetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemGetaclResponse, error) {
	rsp, err := c.PostFilesystemGetaclWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemGetaclResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemGetaclWithResponse(ctx context.Context, body PostFilesystemGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemGetaclResponse, error) {
	rsp, err := c.PostFilesystemGetacl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemGetaclResponse(rsp)
}

// PostFilesystemListdirWithBodyWithResponse request with arbitrary body returning *PostFilesystemListdirResponse
func (c *ClientWithResponses) PostFilesystemListdirWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemListdirResponse, error) {
	rsp, err := c.PostFilesystemListdirWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemListdirResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemListdirWithResponse(ctx context.Context, body PostFilesystemListdirJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemListdirResponse, error) {
	rsp, err := c.PostFilesystemListdir(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemListdirResponse(rsp)
}

// PostFilesystemSetaclWithBodyWithResponse request with arbitrary body returning *PostFilesystemSetaclResponse
func (c *ClientWithResponses) PostFilesystemSetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemSetaclResponse, error) {
	rsp, err := c.PostFilesystemSetaclWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemSetaclResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemSetaclWithResponse(ctx context.Context, body PostFilesystemSetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemSetaclResponse, error) {
	rsp, err := c.PostFilesystemSetacl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemSetaclResponse(rsp)
}

// PostFilesystemSetpermWithBodyWithResponse request with arbitrary body returning *PostFilesystemSetpermResponse
func (c *ClientWithResponses) PostFilesystemSetpermWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemSetpermResponse, error) {
	rsp, err := c.PostFilesystemSetpermWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemSetpermResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemSetpermWithResponse(ctx context.Context, body PostFilesystemSetpermJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemSetpermResponse, error) {
	rsp, err := c.PostFilesystemSetperm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemSetpermResponse(rsp)
}

// PostFilesystemStatWithBodyWithResponse request with arbitrary body returning *PostFilesystemStatResponse
func (c *ClientWithResponses) PostFilesystemStatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemStatResponse, error) {
	rsp, err := c.PostFilesystemStatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemStatResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemStatWithResponse(ctx context.Context, body PostFilesystemStatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemStatResponse, error) {
	rsp, err := c.PostFilesystemStat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemStatResponse(rsp)
}

// PostFilesystemStatfsWithBodyWithResponse request with arbitrary body returning *PostFilesystemStatfsResponse
func (c *ClientWithResponses) PostFilesystemStatfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemStatfsResponse, error) {
	rsp, err := c.PostFilesystemStatfsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemStatfsResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemStatfsWithResponse(ctx context.Context, body PostFilesystemStatfsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemStatfsResponse, error) {
	rsp, err := c.PostFilesystemStatfs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemStatfsResponse(rsp)
}

// GetFtpWithResponse request returning *GetFtpResponse
func (c *ClientWithResponses) GetFtpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFtpResponse, error) {
	rsp, err := c.GetFtp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFtpResponse(rsp)
}

// PutFtpWithBodyWithResponse request with arbitrary body returning *PutFtpResponse
func (c *ClientWithResponses) PutFtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFtpResponse, error) {
	rsp, err := c.PutFtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFtpResponse(rsp)
}

func (c *ClientWithResponses) PutFtpWithResponse(ctx context.Context, body PutFtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFtpResponse, error) {
	rsp, err := c.PutFtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFtpResponse(rsp)
}

// GetGroupWithResponse request returning *GetGroupResponse
func (c *ClientWithResponses) GetGroupWithResponse(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*GetGroupResponse, error) {
	rsp, err := c.GetGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupResponse(rsp)
}

// PostGroupWithBodyWithResponse request with arbitrary body returning *PostGroupResponse
func (c *ClientWithResponses) PostGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupResponse, error) {
	rsp, err := c.PostGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupResponse(rsp)
}

func (c *ClientWithResponses) PostGroupWithResponse(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupResponse, error) {
	rsp, err := c.PostGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupResponse(rsp)
}

// PostGroupGetGroupObjWithBodyWithResponse request with arbitrary body returning *PostGroupGetGroupObjResponse
func (c *ClientWithResponses) PostGroupGetGroupObjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupGetGroupObjResponse, error) {
	rsp, err := c.PostGroupGetGroupObjWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupGetGroupObjResponse(rsp)
}

func (c *ClientWithResponses) PostGroupGetGroupObjWithResponse(ctx context.Context, body PostGroupGetGroupObjJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupGetGroupObjResponse, error) {
	rsp, err := c.PostGroupGetGroupObj(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupGetGroupObjResponse(rsp)
}

// GetGroupGetNextGidWithResponse request returning *GetGroupGetNextGidResponse
func (c *ClientWithResponses) GetGroupGetNextGidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGroupGetNextGidResponse, error) {
	rsp, err := c.GetGroupGetNextGid(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupGetNextGidResponse(rsp)
}

// DeleteGroupIdIdWithBodyWithResponse request with arbitrary body returning *DeleteGroupIdIdResponse
func (c *ClientWithResponses) DeleteGroupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGroupIdIdResponse, error) {
	rsp, err := c.DeleteGroupIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteGroupIdIdWithResponse(ctx context.Context, id int, body DeleteGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupIdIdResponse, error) {
	rsp, err := c.DeleteGroupIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupIdIdResponse(rsp)
}

// GetGroupIdIdWithResponse request returning *GetGroupIdIdResponse
func (c *ClientWithResponses) GetGroupIdIdWithResponse(ctx context.Context, id int, params *GetGroupIdIdParams, reqEditors ...RequestEditorFn) (*GetGroupIdIdResponse, error) {
	rsp, err := c.GetGroupIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupIdIdResponse(rsp)
}

// PutGroupIdIdWithBodyWithResponse request with arbitrary body returning *PutGroupIdIdResponse
func (c *ClientWithResponses) PutGroupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupIdIdResponse, error) {
	rsp, err := c.PutGroupIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutGroupIdIdWithResponse(ctx context.Context, id int, body PutGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupIdIdResponse, error) {
	rsp, err := c.PutGroupIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupIdIdResponse(rsp)
}

// GetIdmapWithResponse request returning *GetIdmapResponse
func (c *ClientWithResponses) GetIdmapWithResponse(ctx context.Context, params *GetIdmapParams, reqEditors ...RequestEditorFn) (*GetIdmapResponse, error) {
	rsp, err := c.GetIdmap(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapResponse(rsp)
}

// PostIdmapWithBodyWithResponse request with arbitrary body returning *PostIdmapResponse
func (c *ClientWithResponses) PostIdmapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdmapResponse, error) {
	rsp, err := c.PostIdmapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapWithResponse(ctx context.Context, body PostIdmapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdmapResponse, error) {
	rsp, err := c.PostIdmap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapResponse(rsp)
}

// GetIdmapBackendChoicesWithResponse request returning *GetIdmapBackendChoicesResponse
func (c *ClientWithResponses) GetIdmapBackendChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIdmapBackendChoicesResponse, error) {
	rsp, err := c.GetIdmapBackendChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapBackendChoicesResponse(rsp)
}

// GetIdmapBackendOptionsWithResponse request returning *GetIdmapBackendOptionsResponse
func (c *ClientWithResponses) GetIdmapBackendOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIdmapBackendOptionsResponse, error) {
	rsp, err := c.GetIdmapBackendOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapBackendOptionsResponse(rsp)
}

// GetIdmapClearIdmapCacheWithResponse request returning *GetIdmapClearIdmapCacheResponse
func (c *ClientWithResponses) GetIdmapClearIdmapCacheWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIdmapClearIdmapCacheResponse, error) {
	rsp, err := c.GetIdmapClearIdmapCache(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapClearIdmapCacheResponse(rsp)
}

// DeleteIdmapIdIdWithResponse request returning *DeleteIdmapIdIdResponse
func (c *ClientWithResponses) DeleteIdmapIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteIdmapIdIdResponse, error) {
	rsp, err := c.DeleteIdmapIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapIdIdResponse(rsp)
}

// GetIdmapIdIdWithResponse request returning *GetIdmapIdIdResponse
func (c *ClientWithResponses) GetIdmapIdIdWithResponse(ctx context.Context, id int, params *GetIdmapIdIdParams, reqEditors ...RequestEditorFn) (*GetIdmapIdIdResponse, error) {
	rsp, err := c.GetIdmapIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapIdIdResponse(rsp)
}

// PutIdmapIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapIdIdResponse
func (c *ClientWithResponses) PutIdmapIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdmapIdIdResponse, error) {
	rsp, err := c.PutIdmapIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapIdIdWithResponse(ctx context.Context, id int, body PutIdmapIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdmapIdIdResponse, error) {
	rsp, err := c.PutIdmapIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapIdIdResponse(rsp)
}

// PostIdmapOptionsChoicesWithBodyWithResponse request with arbitrary body returning *PostIdmapOptionsChoicesResponse
func (c *ClientWithResponses) PostIdmapOptionsChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdmapOptionsChoicesResponse, error) {
	rsp, err := c.PostIdmapOptionsChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapOptionsChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapOptionsChoicesWithResponse(ctx context.Context, body PostIdmapOptionsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdmapOptionsChoicesResponse, error) {
	rsp, err := c.PostIdmapOptionsChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapOptionsChoicesResponse(rsp)
}

// GetInitshutdownscriptWithResponse request returning *GetInitshutdownscriptResponse
func (c *ClientWithResponses) GetInitshutdownscriptWithResponse(ctx context.Context, params *GetInitshutdownscriptParams, reqEditors ...RequestEditorFn) (*GetInitshutdownscriptResponse, error) {
	rsp, err := c.GetInitshutdownscript(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInitshutdownscriptResponse(rsp)
}

// PostInitshutdownscriptWithBodyWithResponse request with arbitrary body returning *PostInitshutdownscriptResponse
func (c *ClientWithResponses) PostInitshutdownscriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInitshutdownscriptResponse, error) {
	rsp, err := c.PostInitshutdownscriptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInitshutdownscriptResponse(rsp)
}

func (c *ClientWithResponses) PostInitshutdownscriptWithResponse(ctx context.Context, body PostInitshutdownscriptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInitshutdownscriptResponse, error) {
	rsp, err := c.PostInitshutdownscript(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInitshutdownscriptResponse(rsp)
}

// DeleteInitshutdownscriptIdIdWithResponse request returning *DeleteInitshutdownscriptIdIdResponse
func (c *ClientWithResponses) DeleteInitshutdownscriptIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteInitshutdownscriptIdIdResponse, error) {
	rsp, err := c.DeleteInitshutdownscriptIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInitshutdownscriptIdIdResponse(rsp)
}

// GetInitshutdownscriptIdIdWithResponse request returning *GetInitshutdownscriptIdIdResponse
func (c *ClientWithResponses) GetInitshutdownscriptIdIdWithResponse(ctx context.Context, id int, params *GetInitshutdownscriptIdIdParams, reqEditors ...RequestEditorFn) (*GetInitshutdownscriptIdIdResponse, error) {
	rsp, err := c.GetInitshutdownscriptIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInitshutdownscriptIdIdResponse(rsp)
}

// PutInitshutdownscriptIdIdWithBodyWithResponse request with arbitrary body returning *PutInitshutdownscriptIdIdResponse
func (c *ClientWithResponses) PutInitshutdownscriptIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInitshutdownscriptIdIdResponse, error) {
	rsp, err := c.PutInitshutdownscriptIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInitshutdownscriptIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutInitshutdownscriptIdIdWithResponse(ctx context.Context, id int, body PutInitshutdownscriptIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInitshutdownscriptIdIdResponse, error) {
	rsp, err := c.PutInitshutdownscriptIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInitshutdownscriptIdIdResponse(rsp)
}

// GetInterfaceWithResponse request returning *GetInterfaceResponse
func (c *ClientWithResponses) GetInterfaceWithResponse(ctx context.Context, params *GetInterfaceParams, reqEditors ...RequestEditorFn) (*GetInterfaceResponse, error) {
	rsp, err := c.GetInterface(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceResponse(rsp)
}

// PostInterfaceWithBodyWithResponse request with arbitrary body returning *PostInterfaceResponse
func (c *ClientWithResponses) PostInterfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceResponse, error) {
	rsp, err := c.PostInterfaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceWithResponse(ctx context.Context, body PostInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceResponse, error) {
	rsp, err := c.PostInterface(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceResponse(rsp)
}

// PostInterfaceBridgeMembersChoicesWithBodyWithResponse request with arbitrary body returning *PostInterfaceBridgeMembersChoicesResponse
func (c *ClientWithResponses) PostInterfaceBridgeMembersChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceBridgeMembersChoicesResponse, error) {
	rsp, err := c.PostInterfaceBridgeMembersChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceBridgeMembersChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceBridgeMembersChoicesWithResponse(ctx context.Context, body PostInterfaceBridgeMembersChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceBridgeMembersChoicesResponse, error) {
	rsp, err := c.PostInterfaceBridgeMembersChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceBridgeMembersChoicesResponse(rsp)
}

// GetInterfaceCheckinWithResponse request returning *GetInterfaceCheckinResponse
func (c *ClientWithResponses) GetInterfaceCheckinWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceCheckinResponse, error) {
	rsp, err := c.GetInterfaceCheckin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceCheckinResponse(rsp)
}

// GetInterfaceCheckinWaitingWithResponse request returning *GetInterfaceCheckinWaitingResponse
func (c *ClientWithResponses) GetInterfaceCheckinWaitingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceCheckinWaitingResponse, error) {
	rsp, err := c.GetInterfaceCheckinWaiting(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceCheckinWaitingResponse(rsp)
}

// PostInterfaceChoicesWithBodyWithResponse request with arbitrary body returning *PostInterfaceChoicesResponse
func (c *ClientWithResponses) PostInterfaceChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceChoicesResponse, error) {
	rsp, err := c.PostInterfaceChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceChoicesWithResponse(ctx context.Context, body PostInterfaceChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceChoicesResponse, error) {
	rsp, err := c.PostInterfaceChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceChoicesResponse(rsp)
}

// PostInterfaceCommitWithBodyWithResponse request with arbitrary body returning *PostInterfaceCommitResponse
func (c *ClientWithResponses) PostInterfaceCommitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceCommitResponse, error) {
	rsp, err := c.PostInterfaceCommitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceCommitResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceCommitWithResponse(ctx context.Context, body PostInterfaceCommitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceCommitResponse, error) {
	rsp, err := c.PostInterfaceCommit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceCommitResponse(rsp)
}

// GetInterfaceEnableCapabilitiesIndividuallyWithResponse request returning *GetInterfaceEnableCapabilitiesIndividuallyResponse
func (c *ClientWithResponses) GetInterfaceEnableCapabilitiesIndividuallyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceEnableCapabilitiesIndividuallyResponse, error) {
	rsp, err := c.GetInterfaceEnableCapabilitiesIndividually(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceEnableCapabilitiesIndividuallyResponse(rsp)
}

// GetInterfaceHasPendingChangesWithResponse request returning *GetInterfaceHasPendingChangesResponse
func (c *ClientWithResponses) GetInterfaceHasPendingChangesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceHasPendingChangesResponse, error) {
	rsp, err := c.GetInterfaceHasPendingChanges(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceHasPendingChangesResponse(rsp)
}

// DeleteInterfaceIdIdWithResponse request returning *DeleteInterfaceIdIdResponse
func (c *ClientWithResponses) DeleteInterfaceIdIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteInterfaceIdIdResponse, error) {
	rsp, err := c.DeleteInterfaceIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInterfaceIdIdResponse(rsp)
}

// GetInterfaceIdIdWithResponse request returning *GetInterfaceIdIdResponse
func (c *ClientWithResponses) GetInterfaceIdIdWithResponse(ctx context.Context, id string, params *GetInterfaceIdIdParams, reqEditors ...RequestEditorFn) (*GetInterfaceIdIdResponse, error) {
	rsp, err := c.GetInterfaceIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceIdIdResponse(rsp)
}

// PutInterfaceIdIdWithBodyWithResponse request with arbitrary body returning *PutInterfaceIdIdResponse
func (c *ClientWithResponses) PutInterfaceIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInterfaceIdIdResponse, error) {
	rsp, err := c.PutInterfaceIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInterfaceIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutInterfaceIdIdWithResponse(ctx context.Context, id string, body PutInterfaceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInterfaceIdIdResponse, error) {
	rsp, err := c.PutInterfaceIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInterfaceIdIdResponse(rsp)
}

// PostInterfaceIpInUseWithBodyWithResponse request with arbitrary body returning *PostInterfaceIpInUseResponse
func (c *ClientWithResponses) PostInterfaceIpInUseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceIpInUseResponse, error) {
	rsp, err := c.PostInterfaceIpInUseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceIpInUseResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceIpInUseWithResponse(ctx context.Context, body PostInterfaceIpInUseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceIpInUseResponse, error) {
	rsp, err := c.PostInterfaceIpInUse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceIpInUseResponse(rsp)
}

// PostInterfaceLagPortsChoicesWithBodyWithResponse request with arbitrary body returning *PostInterfaceLagPortsChoicesResponse
func (c *ClientWithResponses) PostInterfaceLagPortsChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInterfaceLagPortsChoicesResponse, error) {
	rsp, err := c.PostInterfaceLagPortsChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceLagPortsChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceLagPortsChoicesWithResponse(ctx context.Context, body PostInterfaceLagPortsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInterfaceLagPortsChoicesResponse, error) {
	rsp, err := c.PostInterfaceLagPortsChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceLagPortsChoicesResponse(rsp)
}

// GetInterfaceLagSetupWithResponse request returning *GetInterfaceLagSetupResponse
func (c *ClientWithResponses) GetInterfaceLagSetupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceLagSetupResponse, error) {
	rsp, err := c.GetInterfaceLagSetup(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceLagSetupResponse(rsp)
}

// GetInterfaceRollbackWithResponse request returning *GetInterfaceRollbackResponse
func (c *ClientWithResponses) GetInterfaceRollbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceRollbackResponse, error) {
	rsp, err := c.GetInterfaceRollback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceRollbackResponse(rsp)
}

// GetInterfaceVlanParentInterfaceChoicesWithResponse request returning *GetInterfaceVlanParentInterfaceChoicesResponse
func (c *ClientWithResponses) GetInterfaceVlanParentInterfaceChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceVlanParentInterfaceChoicesResponse, error) {
	rsp, err := c.GetInterfaceVlanParentInterfaceChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceVlanParentInterfaceChoicesResponse(rsp)
}

// GetInterfaceVlanSetupWithResponse request returning *GetInterfaceVlanSetupResponse
func (c *ClientWithResponses) GetInterfaceVlanSetupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInterfaceVlanSetupResponse, error) {
	rsp, err := c.GetInterfaceVlanSetup(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceVlanSetupResponse(rsp)
}

// GetIpmiWithResponse request returning *GetIpmiResponse
func (c *ClientWithResponses) GetIpmiWithResponse(ctx context.Context, params *GetIpmiParams, reqEditors ...RequestEditorFn) (*GetIpmiResponse, error) {
	rsp, err := c.GetIpmi(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmiResponse(rsp)
}

// GetIpmiChannelsWithResponse request returning *GetIpmiChannelsResponse
func (c *ClientWithResponses) GetIpmiChannelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpmiChannelsResponse, error) {
	rsp, err := c.GetIpmiChannels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmiChannelsResponse(rsp)
}

// GetIpmiIdIdWithResponse request returning *GetIpmiIdIdResponse
func (c *ClientWithResponses) GetIpmiIdIdWithResponse(ctx context.Context, id int, params *GetIpmiIdIdParams, reqEditors ...RequestEditorFn) (*GetIpmiIdIdResponse, error) {
	rsp, err := c.GetIpmiIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmiIdIdResponse(rsp)
}

// PutIpmiIdIdWithBodyWithResponse request with arbitrary body returning *PutIpmiIdIdResponse
func (c *ClientWithResponses) PutIpmiIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIpmiIdIdResponse, error) {
	rsp, err := c.PutIpmiIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIpmiIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIpmiIdIdWithResponse(ctx context.Context, id int, body PutIpmiIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIpmiIdIdResponse, error) {
	rsp, err := c.PutIpmiIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIpmiIdIdResponse(rsp)
}

// PostIpmiIdentifyWithBodyWithResponse request with arbitrary body returning *PostIpmiIdentifyResponse
func (c *ClientWithResponses) PostIpmiIdentifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIpmiIdentifyResponse, error) {
	rsp, err := c.PostIpmiIdentifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIpmiIdentifyResponse(rsp)
}

func (c *ClientWithResponses) PostIpmiIdentifyWithResponse(ctx context.Context, body PostIpmiIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIpmiIdentifyResponse, error) {
	rsp, err := c.PostIpmiIdentify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIpmiIdentifyResponse(rsp)
}

// GetIpmiIsLoadedWithResponse request returning *GetIpmiIsLoadedResponse
func (c *ClientWithResponses) GetIpmiIsLoadedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpmiIsLoadedResponse, error) {
	rsp, err := c.GetIpmiIsLoaded(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmiIsLoadedResponse(rsp)
}

// GetIscsiAuthWithResponse request returning *GetIscsiAuthResponse
func (c *ClientWithResponses) GetIscsiAuthWithResponse(ctx context.Context, params *GetIscsiAuthParams, reqEditors ...RequestEditorFn) (*GetIscsiAuthResponse, error) {
	rsp, err := c.GetIscsiAuth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiAuthResponse(rsp)
}

// PostIscsiAuthWithBodyWithResponse request with arbitrary body returning *PostIscsiAuthResponse
func (c *ClientWithResponses) PostIscsiAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiAuthResponse, error) {
	rsp, err := c.PostIscsiAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiAuthResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiAuthWithResponse(ctx context.Context, body PostIscsiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiAuthResponse, error) {
	rsp, err := c.PostIscsiAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiAuthResponse(rsp)
}

// DeleteIscsiAuthIdIdWithResponse request returning *DeleteIscsiAuthIdIdResponse
func (c *ClientWithResponses) DeleteIscsiAuthIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteIscsiAuthIdIdResponse, error) {
	rsp, err := c.DeleteIscsiAuthIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiAuthIdIdResponse(rsp)
}

// GetIscsiAuthIdIdWithResponse request returning *GetIscsiAuthIdIdResponse
func (c *ClientWithResponses) GetIscsiAuthIdIdWithResponse(ctx context.Context, id int, params *GetIscsiAuthIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiAuthIdIdResponse, error) {
	rsp, err := c.GetIscsiAuthIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiAuthIdIdResponse(rsp)
}

// PutIscsiAuthIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiAuthIdIdResponse
func (c *ClientWithResponses) PutIscsiAuthIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiAuthIdIdResponse, error) {
	rsp, err := c.PutIscsiAuthIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiAuthIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiAuthIdIdWithResponse(ctx context.Context, id int, body PutIscsiAuthIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiAuthIdIdResponse, error) {
	rsp, err := c.PutIscsiAuthIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiAuthIdIdResponse(rsp)
}

// GetIscsiExtentWithResponse request returning *GetIscsiExtentResponse
func (c *ClientWithResponses) GetIscsiExtentWithResponse(ctx context.Context, params *GetIscsiExtentParams, reqEditors ...RequestEditorFn) (*GetIscsiExtentResponse, error) {
	rsp, err := c.GetIscsiExtent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiExtentResponse(rsp)
}

// PostIscsiExtentWithBodyWithResponse request with arbitrary body returning *PostIscsiExtentResponse
func (c *ClientWithResponses) PostIscsiExtentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiExtentResponse, error) {
	rsp, err := c.PostIscsiExtentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiExtentResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiExtentWithResponse(ctx context.Context, body PostIscsiExtentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiExtentResponse, error) {
	rsp, err := c.PostIscsiExtent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiExtentResponse(rsp)
}

// PostIscsiExtentDiskChoicesWithBodyWithResponse request with arbitrary body returning *PostIscsiExtentDiskChoicesResponse
func (c *ClientWithResponses) PostIscsiExtentDiskChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiExtentDiskChoicesResponse, error) {
	rsp, err := c.PostIscsiExtentDiskChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiExtentDiskChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiExtentDiskChoicesWithResponse(ctx context.Context, body PostIscsiExtentDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiExtentDiskChoicesResponse, error) {
	rsp, err := c.PostIscsiExtentDiskChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiExtentDiskChoicesResponse(rsp)
}

// DeleteIscsiExtentIdIdWithBodyWithResponse request with arbitrary body returning *DeleteIscsiExtentIdIdResponse
func (c *ClientWithResponses) DeleteIscsiExtentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiExtentIdIdResponse, error) {
	rsp, err := c.DeleteIscsiExtentIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiExtentIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiExtentIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiExtentIdIdResponse, error) {
	rsp, err := c.DeleteIscsiExtentIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiExtentIdIdResponse(rsp)
}

// GetIscsiExtentIdIdWithResponse request returning *GetIscsiExtentIdIdResponse
func (c *ClientWithResponses) GetIscsiExtentIdIdWithResponse(ctx context.Context, id int, params *GetIscsiExtentIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiExtentIdIdResponse, error) {
	rsp, err := c.GetIscsiExtentIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiExtentIdIdResponse(rsp)
}

// PutIscsiExtentIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiExtentIdIdResponse
func (c *ClientWithResponses) PutIscsiExtentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiExtentIdIdResponse, error) {
	rsp, err := c.PutIscsiExtentIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiExtentIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiExtentIdIdWithResponse(ctx context.Context, id int, body PutIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiExtentIdIdResponse, error) {
	rsp, err := c.PutIscsiExtentIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiExtentIdIdResponse(rsp)
}

// GetIscsiGlobalWithResponse request returning *GetIscsiGlobalResponse
func (c *ClientWithResponses) GetIscsiGlobalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIscsiGlobalResponse, error) {
	rsp, err := c.GetIscsiGlobal(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiGlobalResponse(rsp)
}

// PutIscsiGlobalWithBodyWithResponse request with arbitrary body returning *PutIscsiGlobalResponse
func (c *ClientWithResponses) PutIscsiGlobalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiGlobalResponse, error) {
	rsp, err := c.PutIscsiGlobalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiGlobalResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiGlobalWithResponse(ctx context.Context, body PutIscsiGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiGlobalResponse, error) {
	rsp, err := c.PutIscsiGlobal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiGlobalResponse(rsp)
}

// GetIscsiGlobalAluaEnabledWithResponse request returning *GetIscsiGlobalAluaEnabledResponse
func (c *ClientWithResponses) GetIscsiGlobalAluaEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIscsiGlobalAluaEnabledResponse, error) {
	rsp, err := c.GetIscsiGlobalAluaEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiGlobalAluaEnabledResponse(rsp)
}

// GetIscsiGlobalSessionsWithResponse request returning *GetIscsiGlobalSessionsResponse
func (c *ClientWithResponses) GetIscsiGlobalSessionsWithResponse(ctx context.Context, params *GetIscsiGlobalSessionsParams, reqEditors ...RequestEditorFn) (*GetIscsiGlobalSessionsResponse, error) {
	rsp, err := c.GetIscsiGlobalSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiGlobalSessionsResponse(rsp)
}

// GetIscsiInitiatorWithResponse request returning *GetIscsiInitiatorResponse
func (c *ClientWithResponses) GetIscsiInitiatorWithResponse(ctx context.Context, params *GetIscsiInitiatorParams, reqEditors ...RequestEditorFn) (*GetIscsiInitiatorResponse, error) {
	rsp, err := c.GetIscsiInitiator(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiInitiatorResponse(rsp)
}

// PostIscsiInitiatorWithBodyWithResponse request with arbitrary body returning *PostIscsiInitiatorResponse
func (c *ClientWithResponses) PostIscsiInitiatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiInitiatorResponse, error) {
	rsp, err := c.PostIscsiInitiatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiInitiatorResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiInitiatorWithResponse(ctx context.Context, body PostIscsiInitiatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiInitiatorResponse, error) {
	rsp, err := c.PostIscsiInitiator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiInitiatorResponse(rsp)
}

// DeleteIscsiInitiatorIdIdWithResponse request returning *DeleteIscsiInitiatorIdIdResponse
func (c *ClientWithResponses) DeleteIscsiInitiatorIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteIscsiInitiatorIdIdResponse, error) {
	rsp, err := c.DeleteIscsiInitiatorIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiInitiatorIdIdResponse(rsp)
}

// GetIscsiInitiatorIdIdWithResponse request returning *GetIscsiInitiatorIdIdResponse
func (c *ClientWithResponses) GetIscsiInitiatorIdIdWithResponse(ctx context.Context, id int, params *GetIscsiInitiatorIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiInitiatorIdIdResponse, error) {
	rsp, err := c.GetIscsiInitiatorIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiInitiatorIdIdResponse(rsp)
}

// PutIscsiInitiatorIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiInitiatorIdIdResponse
func (c *ClientWithResponses) PutIscsiInitiatorIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiInitiatorIdIdResponse, error) {
	rsp, err := c.PutIscsiInitiatorIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiInitiatorIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiInitiatorIdIdWithResponse(ctx context.Context, id int, body PutIscsiInitiatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiInitiatorIdIdResponse, error) {
	rsp, err := c.PutIscsiInitiatorIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiInitiatorIdIdResponse(rsp)
}

// GetIscsiPortalWithResponse request returning *GetIscsiPortalResponse
func (c *ClientWithResponses) GetIscsiPortalWithResponse(ctx context.Context, params *GetIscsiPortalParams, reqEditors ...RequestEditorFn) (*GetIscsiPortalResponse, error) {
	rsp, err := c.GetIscsiPortal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiPortalResponse(rsp)
}

// PostIscsiPortalWithBodyWithResponse request with arbitrary body returning *PostIscsiPortalResponse
func (c *ClientWithResponses) PostIscsiPortalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiPortalResponse, error) {
	rsp, err := c.PostIscsiPortalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiPortalResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiPortalWithResponse(ctx context.Context, body PostIscsiPortalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiPortalResponse, error) {
	rsp, err := c.PostIscsiPortal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiPortalResponse(rsp)
}

// DeleteIscsiPortalIdIdWithResponse request returning *DeleteIscsiPortalIdIdResponse
func (c *ClientWithResponses) DeleteIscsiPortalIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteIscsiPortalIdIdResponse, error) {
	rsp, err := c.DeleteIscsiPortalIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiPortalIdIdResponse(rsp)
}

// GetIscsiPortalIdIdWithResponse request returning *GetIscsiPortalIdIdResponse
func (c *ClientWithResponses) GetIscsiPortalIdIdWithResponse(ctx context.Context, id int, params *GetIscsiPortalIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiPortalIdIdResponse, error) {
	rsp, err := c.GetIscsiPortalIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiPortalIdIdResponse(rsp)
}

// PutIscsiPortalIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiPortalIdIdResponse
func (c *ClientWithResponses) PutIscsiPortalIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiPortalIdIdResponse, error) {
	rsp, err := c.PutIscsiPortalIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiPortalIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiPortalIdIdWithResponse(ctx context.Context, id int, body PutIscsiPortalIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiPortalIdIdResponse, error) {
	rsp, err := c.PutIscsiPortalIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiPortalIdIdResponse(rsp)
}

// GetIscsiPortalListenIpChoicesWithResponse request returning *GetIscsiPortalListenIpChoicesResponse
func (c *ClientWithResponses) GetIscsiPortalListenIpChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIscsiPortalListenIpChoicesResponse, error) {
	rsp, err := c.GetIscsiPortalListenIpChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiPortalListenIpChoicesResponse(rsp)
}

// GetIscsiTargetWithResponse request returning *GetIscsiTargetResponse
func (c *ClientWithResponses) GetIscsiTargetWithResponse(ctx context.Context, params *GetIscsiTargetParams, reqEditors ...RequestEditorFn) (*GetIscsiTargetResponse, error) {
	rsp, err := c.GetIscsiTarget(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetResponse(rsp)
}

// PostIscsiTargetWithBodyWithResponse request with arbitrary body returning *PostIscsiTargetResponse
func (c *ClientWithResponses) PostIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiTargetResponse, error) {
	rsp, err := c.PostIscsiTargetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiTargetResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiTargetWithResponse(ctx context.Context, body PostIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiTargetResponse, error) {
	rsp, err := c.PostIscsiTarget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiTargetResponse(rsp)
}

// DeleteIscsiTargetIdIdWithBodyWithResponse request with arbitrary body returning *DeleteIscsiTargetIdIdResponse
func (c *ClientWithResponses) DeleteIscsiTargetIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetIdIdResponse, error) {
	rsp, err := c.DeleteIscsiTargetIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiTargetIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetIdIdResponse, error) {
	rsp, err := c.DeleteIscsiTargetIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetIdIdResponse(rsp)
}

// GetIscsiTargetIdIdWithResponse request returning *GetIscsiTargetIdIdResponse
func (c *ClientWithResponses) GetIscsiTargetIdIdWithResponse(ctx context.Context, id int, params *GetIscsiTargetIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiTargetIdIdResponse, error) {
	rsp, err := c.GetIscsiTargetIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetIdIdResponse(rsp)
}

// PutIscsiTargetIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiTargetIdIdResponse
func (c *ClientWithResponses) PutIscsiTargetIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiTargetIdIdResponse, error) {
	rsp, err := c.PutIscsiTargetIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiTargetIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiTargetIdIdWithResponse(ctx context.Context, id int, body PutIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiTargetIdIdResponse, error) {
	rsp, err := c.PutIscsiTargetIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiTargetIdIdResponse(rsp)
}

// GetIscsiTargetextentWithResponse request returning *GetIscsiTargetextentResponse
func (c *ClientWithResponses) GetIscsiTargetextentWithResponse(ctx context.Context, params *GetIscsiTargetextentParams, reqEditors ...RequestEditorFn) (*GetIscsiTargetextentResponse, error) {
	rsp, err := c.GetIscsiTargetextent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetextentResponse(rsp)
}

// PostIscsiTargetextentWithBodyWithResponse request with arbitrary body returning *PostIscsiTargetextentResponse
func (c *ClientWithResponses) PostIscsiTargetextentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIscsiTargetextentResponse, error) {
	rsp, err := c.PostIscsiTargetextentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiTargetextentResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiTargetextentWithResponse(ctx context.Context, body PostIscsiTargetextentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIscsiTargetextentResponse, error) {
	rsp, err := c.PostIscsiTargetextent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiTargetextentResponse(rsp)
}

// DeleteIscsiTargetextentIdIdWithBodyWithResponse request with arbitrary body returning *DeleteIscsiTargetextentIdIdResponse
func (c *ClientWithResponses) DeleteIscsiTargetextentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.DeleteIscsiTargetextentIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetextentIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.DeleteIscsiTargetextentIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetextentIdIdResponse(rsp)
}

// GetIscsiTargetextentIdIdWithResponse request returning *GetIscsiTargetextentIdIdResponse
func (c *ClientWithResponses) GetIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, params *GetIscsiTargetextentIdIdParams, reqEditors ...RequestEditorFn) (*GetIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.GetIscsiTargetextentIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetextentIdIdResponse(rsp)
}

// PutIscsiTargetextentIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiTargetextentIdIdResponse
func (c *ClientWithResponses) PutIscsiTargetextentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.PutIscsiTargetextentIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiTargetextentIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, body PutIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.PutIscsiTargetextentIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiTargetextentIdIdResponse(rsp)
}

// GetJailWithResponse request returning *GetJailResponse
func (c *ClientWithResponses) GetJailWithResponse(ctx context.Context, params *GetJailParams, reqEditors ...RequestEditorFn) (*GetJailResponse, error) {
	rsp, err := c.GetJail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJailResponse(rsp)
}

// PostJailWithBodyWithResponse request with arbitrary body returning *PostJailResponse
func (c *ClientWithResponses) PostJailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailResponse, error) {
	rsp, err := c.PostJailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailResponse(rsp)
}

func (c *ClientWithResponses) PostJailWithResponse(ctx context.Context, body PostJailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailResponse, error) {
	rsp, err := c.PostJail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailResponse(rsp)
}

// PostJailActivateWithBodyWithResponse request with arbitrary body returning *PostJailActivateResponse
func (c *ClientWithResponses) PostJailActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailActivateResponse, error) {
	rsp, err := c.PostJailActivateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailActivateResponse(rsp)
}

func (c *ClientWithResponses) PostJailActivateWithResponse(ctx context.Context, body PostJailActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailActivateResponse, error) {
	rsp, err := c.PostJailActivate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailActivateResponse(rsp)
}

// PostJailCleanWithBodyWithResponse request with arbitrary body returning *PostJailCleanResponse
func (c *ClientWithResponses) PostJailCleanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailCleanResponse, error) {
	rsp, err := c.PostJailCleanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailCleanResponse(rsp)
}

func (c *ClientWithResponses) PostJailCleanWithResponse(ctx context.Context, body PostJailCleanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailCleanResponse, error) {
	rsp, err := c.PostJailClean(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailCleanResponse(rsp)
}

// GetJailDefaultConfigurationWithResponse request returning *GetJailDefaultConfigurationResponse
func (c *ClientWithResponses) GetJailDefaultConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJailDefaultConfigurationResponse, error) {
	rsp, err := c.GetJailDefaultConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJailDefaultConfigurationResponse(rsp)
}

// PostJailExecWithBodyWithResponse request with arbitrary body returning *PostJailExecResponse
func (c *ClientWithResponses) PostJailExecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailExecResponse, error) {
	rsp, err := c.PostJailExecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailExecResponse(rsp)
}

func (c *ClientWithResponses) PostJailExecWithResponse(ctx context.Context, body PostJailExecJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailExecResponse, error) {
	rsp, err := c.PostJailExec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailExecResponse(rsp)
}

// PostJailExportWithBodyWithResponse request with arbitrary body returning *PostJailExportResponse
func (c *ClientWithResponses) PostJailExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailExportResponse, error) {
	rsp, err := c.PostJailExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailExportResponse(rsp)
}

func (c *ClientWithResponses) PostJailExportWithResponse(ctx context.Context, body PostJailExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailExportResponse, error) {
	rsp, err := c.PostJailExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailExportResponse(rsp)
}

// PostJailFetchWithBodyWithResponse request with arbitrary body returning *PostJailFetchResponse
func (c *ClientWithResponses) PostJailFetchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailFetchResponse, error) {
	rsp, err := c.PostJailFetchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailFetchResponse(rsp)
}

func (c *ClientWithResponses) PostJailFetchWithResponse(ctx context.Context, body PostJailFetchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailFetchResponse, error) {
	rsp, err := c.PostJailFetch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailFetchResponse(rsp)
}

// PostJailFstabWithBodyWithResponse request with arbitrary body returning *PostJailFstabResponse
func (c *ClientWithResponses) PostJailFstabWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailFstabResponse, error) {
	rsp, err := c.PostJailFstabWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailFstabResponse(rsp)
}

func (c *ClientWithResponses) PostJailFstabWithResponse(ctx context.Context, body PostJailFstabJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailFstabResponse, error) {
	rsp, err := c.PostJailFstab(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailFstabResponse(rsp)
}

// GetJailGetActivatedPoolWithResponse request returning *GetJailGetActivatedPoolResponse
func (c *ClientWithResponses) GetJailGetActivatedPoolWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJailGetActivatedPoolResponse, error) {
	rsp, err := c.GetJailGetActivatedPool(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJailGetActivatedPoolResponse(rsp)
}

// DeleteJailIdIdWithBodyWithResponse request with arbitrary body returning *DeleteJailIdIdResponse
func (c *ClientWithResponses) DeleteJailIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteJailIdIdResponse, error) {
	rsp, err := c.DeleteJailIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJailIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteJailIdIdWithResponse(ctx context.Context, id string, body DeleteJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteJailIdIdResponse, error) {
	rsp, err := c.DeleteJailIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJailIdIdResponse(rsp)
}

// GetJailIdIdWithResponse request returning *GetJailIdIdResponse
func (c *ClientWithResponses) GetJailIdIdWithResponse(ctx context.Context, id string, params *GetJailIdIdParams, reqEditors ...RequestEditorFn) (*GetJailIdIdResponse, error) {
	rsp, err := c.GetJailIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJailIdIdResponse(rsp)
}

// PutJailIdIdWithBodyWithResponse request with arbitrary body returning *PutJailIdIdResponse
func (c *ClientWithResponses) PutJailIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJailIdIdResponse, error) {
	rsp, err := c.PutJailIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJailIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutJailIdIdWithResponse(ctx context.Context, id string, body PutJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJailIdIdResponse, error) {
	rsp, err := c.PutJailIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJailIdIdResponse(rsp)
}

// PostJailIdIdCloneWithBodyWithResponse request with arbitrary body returning *PostJailIdIdCloneResponse
func (c *ClientWithResponses) PostJailIdIdCloneWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailIdIdCloneResponse, error) {
	rsp, err := c.PostJailIdIdCloneWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailIdIdCloneResponse(rsp)
}

func (c *ClientWithResponses) PostJailIdIdCloneWithResponse(ctx context.Context, id string, body PostJailIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailIdIdCloneResponse, error) {
	rsp, err := c.PostJailIdIdClone(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailIdIdCloneResponse(rsp)
}

// PostJailImportImageWithBodyWithResponse request with arbitrary body returning *PostJailImportImageResponse
func (c *ClientWithResponses) PostJailImportImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailImportImageResponse, error) {
	rsp, err := c.PostJailImportImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailImportImageResponse(rsp)
}

func (c *ClientWithResponses) PostJailImportImageWithResponse(ctx context.Context, body PostJailImportImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailImportImageResponse, error) {
	rsp, err := c.PostJailImportImage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailImportImageResponse(rsp)
}

// GetJailInterfaceChoicesWithResponse request returning *GetJailInterfaceChoicesResponse
func (c *ClientWithResponses) GetJailInterfaceChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJailInterfaceChoicesResponse, error) {
	rsp, err := c.GetJailInterfaceChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJailInterfaceChoicesResponse(rsp)
}

// PostJailRcActionWithBodyWithResponse request with arbitrary body returning *PostJailRcActionResponse
func (c *ClientWithResponses) PostJailRcActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailRcActionResponse, error) {
	rsp, err := c.PostJailRcActionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailRcActionResponse(rsp)
}

func (c *ClientWithResponses) PostJailRcActionWithResponse(ctx context.Context, body PostJailRcActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailRcActionResponse, error) {
	rsp, err := c.PostJailRcAction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailRcActionResponse(rsp)
}

// PostJailReleasesChoicesWithBodyWithResponse request with arbitrary body returning *PostJailReleasesChoicesResponse
func (c *ClientWithResponses) PostJailReleasesChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailReleasesChoicesResponse, error) {
	rsp, err := c.PostJailReleasesChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailReleasesChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostJailReleasesChoicesWithResponse(ctx context.Context, body PostJailReleasesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailReleasesChoicesResponse, error) {
	rsp, err := c.PostJailReleasesChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailReleasesChoicesResponse(rsp)
}

// PostJailRestartWithBodyWithResponse request with arbitrary body returning *PostJailRestartResponse
func (c *ClientWithResponses) PostJailRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailRestartResponse, error) {
	rsp, err := c.PostJailRestartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailRestartResponse(rsp)
}

func (c *ClientWithResponses) PostJailRestartWithResponse(ctx context.Context, body PostJailRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailRestartResponse, error) {
	rsp, err := c.PostJailRestart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailRestartResponse(rsp)
}

// PostJailStartWithBodyWithResponse request with arbitrary body returning *PostJailStartResponse
func (c *ClientWithResponses) PostJailStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailStartResponse, error) {
	rsp, err := c.PostJailStartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailStartResponse(rsp)
}

func (c *ClientWithResponses) PostJailStartWithResponse(ctx context.Context, body PostJailStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailStartResponse, error) {
	rsp, err := c.PostJailStart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailStartResponse(rsp)
}

// PostJailStopWithBodyWithResponse request with arbitrary body returning *PostJailStopResponse
func (c *ClientWithResponses) PostJailStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailStopResponse, error) {
	rsp, err := c.PostJailStopWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailStopResponse(rsp)
}

func (c *ClientWithResponses) PostJailStopWithResponse(ctx context.Context, body PostJailStopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailStopResponse, error) {
	rsp, err := c.PostJailStop(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailStopResponse(rsp)
}

// PostJailUpdateDefaultsWithBodyWithResponse request with arbitrary body returning *PostJailUpdateDefaultsResponse
func (c *ClientWithResponses) PostJailUpdateDefaultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailUpdateDefaultsResponse, error) {
	rsp, err := c.PostJailUpdateDefaultsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailUpdateDefaultsResponse(rsp)
}

func (c *ClientWithResponses) PostJailUpdateDefaultsWithResponse(ctx context.Context, body PostJailUpdateDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailUpdateDefaultsResponse, error) {
	rsp, err := c.PostJailUpdateDefaults(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailUpdateDefaultsResponse(rsp)
}

// PostJailUpdateToLatestPatchWithBodyWithResponse request with arbitrary body returning *PostJailUpdateToLatestPatchResponse
func (c *ClientWithResponses) PostJailUpdateToLatestPatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJailUpdateToLatestPatchResponse, error) {
	rsp, err := c.PostJailUpdateToLatestPatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailUpdateToLatestPatchResponse(rsp)
}

func (c *ClientWithResponses) PostJailUpdateToLatestPatchWithResponse(ctx context.Context, body PostJailUpdateToLatestPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJailUpdateToLatestPatchResponse, error) {
	rsp, err := c.PostJailUpdateToLatestPatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJailUpdateToLatestPatchResponse(rsp)
}

// GetJailVnetDefaultInterfaceChoicesWithResponse request returning *GetJailVnetDefaultInterfaceChoicesResponse
func (c *ClientWithResponses) GetJailVnetDefaultInterfaceChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJailVnetDefaultInterfaceChoicesResponse, error) {
	rsp, err := c.GetJailVnetDefaultInterfaceChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJailVnetDefaultInterfaceChoicesResponse(rsp)
}

// GetKerberosWithResponse request returning *GetKerberosResponse
func (c *ClientWithResponses) GetKerberosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKerberosResponse, error) {
	rsp, err := c.GetKerberos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosResponse(rsp)
}

// PutKerberosWithBodyWithResponse request with arbitrary body returning *PutKerberosResponse
func (c *ClientWithResponses) PutKerberosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKerberosResponse, error) {
	rsp, err := c.PutKerberosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosResponse(rsp)
}

func (c *ClientWithResponses) PutKerberosWithResponse(ctx context.Context, body PutKerberosJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKerberosResponse, error) {
	rsp, err := c.PutKerberos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosResponse(rsp)
}

// GetKerberosKeytabWithResponse request returning *GetKerberosKeytabResponse
func (c *ClientWithResponses) GetKerberosKeytabWithResponse(ctx context.Context, params *GetKerberosKeytabParams, reqEditors ...RequestEditorFn) (*GetKerberosKeytabResponse, error) {
	rsp, err := c.GetKerberosKeytab(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosKeytabResponse(rsp)
}

// PostKerberosKeytabWithBodyWithResponse request with arbitrary body returning *PostKerberosKeytabResponse
func (c *ClientWithResponses) PostKerberosKeytabWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKerberosKeytabResponse, error) {
	rsp, err := c.PostKerberosKeytabWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKerberosKeytabResponse(rsp)
}

func (c *ClientWithResponses) PostKerberosKeytabWithResponse(ctx context.Context, body PostKerberosKeytabJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKerberosKeytabResponse, error) {
	rsp, err := c.PostKerberosKeytab(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKerberosKeytabResponse(rsp)
}

// DeleteKerberosKeytabIdIdWithResponse request returning *DeleteKerberosKeytabIdIdResponse
func (c *ClientWithResponses) DeleteKerberosKeytabIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteKerberosKeytabIdIdResponse, error) {
	rsp, err := c.DeleteKerberosKeytabIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKerberosKeytabIdIdResponse(rsp)
}

// GetKerberosKeytabIdIdWithResponse request returning *GetKerberosKeytabIdIdResponse
func (c *ClientWithResponses) GetKerberosKeytabIdIdWithResponse(ctx context.Context, id int, params *GetKerberosKeytabIdIdParams, reqEditors ...RequestEditorFn) (*GetKerberosKeytabIdIdResponse, error) {
	rsp, err := c.GetKerberosKeytabIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosKeytabIdIdResponse(rsp)
}

// PutKerberosKeytabIdIdWithBodyWithResponse request with arbitrary body returning *PutKerberosKeytabIdIdResponse
func (c *ClientWithResponses) PutKerberosKeytabIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKerberosKeytabIdIdResponse, error) {
	rsp, err := c.PutKerberosKeytabIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosKeytabIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutKerberosKeytabIdIdWithResponse(ctx context.Context, id int, body PutKerberosKeytabIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKerberosKeytabIdIdResponse, error) {
	rsp, err := c.PutKerberosKeytabIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosKeytabIdIdResponse(rsp)
}

// GetKerberosKeytabSystemKeytabListWithResponse request returning *GetKerberosKeytabSystemKeytabListResponse
func (c *ClientWithResponses) GetKerberosKeytabSystemKeytabListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKerberosKeytabSystemKeytabListResponse, error) {
	rsp, err := c.GetKerberosKeytabSystemKeytabList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosKeytabSystemKeytabListResponse(rsp)
}

// GetKerberosRealmWithResponse request returning *GetKerberosRealmResponse
func (c *ClientWithResponses) GetKerberosRealmWithResponse(ctx context.Context, params *GetKerberosRealmParams, reqEditors ...RequestEditorFn) (*GetKerberosRealmResponse, error) {
	rsp, err := c.GetKerberosRealm(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosRealmResponse(rsp)
}

// PostKerberosRealmWithBodyWithResponse request with arbitrary body returning *PostKerberosRealmResponse
func (c *ClientWithResponses) PostKerberosRealmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKerberosRealmResponse, error) {
	rsp, err := c.PostKerberosRealmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKerberosRealmResponse(rsp)
}

func (c *ClientWithResponses) PostKerberosRealmWithResponse(ctx context.Context, body PostKerberosRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKerberosRealmResponse, error) {
	rsp, err := c.PostKerberosRealm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKerberosRealmResponse(rsp)
}

// DeleteKerberosRealmIdIdWithResponse request returning *DeleteKerberosRealmIdIdResponse
func (c *ClientWithResponses) DeleteKerberosRealmIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteKerberosRealmIdIdResponse, error) {
	rsp, err := c.DeleteKerberosRealmIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKerberosRealmIdIdResponse(rsp)
}

// GetKerberosRealmIdIdWithResponse request returning *GetKerberosRealmIdIdResponse
func (c *ClientWithResponses) GetKerberosRealmIdIdWithResponse(ctx context.Context, id int, params *GetKerberosRealmIdIdParams, reqEditors ...RequestEditorFn) (*GetKerberosRealmIdIdResponse, error) {
	rsp, err := c.GetKerberosRealmIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosRealmIdIdResponse(rsp)
}

// PutKerberosRealmIdIdWithBodyWithResponse request with arbitrary body returning *PutKerberosRealmIdIdResponse
func (c *ClientWithResponses) PutKerberosRealmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKerberosRealmIdIdResponse, error) {
	rsp, err := c.PutKerberosRealmIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosRealmIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutKerberosRealmIdIdWithResponse(ctx context.Context, id int, body PutKerberosRealmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKerberosRealmIdIdResponse, error) {
	rsp, err := c.PutKerberosRealmIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosRealmIdIdResponse(rsp)
}

// GetKeychaincredentialWithResponse request returning *GetKeychaincredentialResponse
func (c *ClientWithResponses) GetKeychaincredentialWithResponse(ctx context.Context, params *GetKeychaincredentialParams, reqEditors ...RequestEditorFn) (*GetKeychaincredentialResponse, error) {
	rsp, err := c.GetKeychaincredential(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeychaincredentialResponse(rsp)
}

// PostKeychaincredentialWithBodyWithResponse request with arbitrary body returning *PostKeychaincredentialResponse
func (c *ClientWithResponses) PostKeychaincredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeychaincredentialResponse, error) {
	rsp, err := c.PostKeychaincredentialWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialResponse(rsp)
}

func (c *ClientWithResponses) PostKeychaincredentialWithResponse(ctx context.Context, body PostKeychaincredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeychaincredentialResponse, error) {
	rsp, err := c.PostKeychaincredential(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialResponse(rsp)
}

// GetKeychaincredentialGenerateSshKeyPairWithResponse request returning *GetKeychaincredentialGenerateSshKeyPairResponse
func (c *ClientWithResponses) GetKeychaincredentialGenerateSshKeyPairWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKeychaincredentialGenerateSshKeyPairResponse, error) {
	rsp, err := c.GetKeychaincredentialGenerateSshKeyPair(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeychaincredentialGenerateSshKeyPairResponse(rsp)
}

// DeleteKeychaincredentialIdIdWithBodyWithResponse request with arbitrary body returning *DeleteKeychaincredentialIdIdResponse
func (c *ClientWithResponses) DeleteKeychaincredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteKeychaincredentialIdIdResponse, error) {
	rsp, err := c.DeleteKeychaincredentialIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeychaincredentialIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteKeychaincredentialIdIdWithResponse(ctx context.Context, id int, body DeleteKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteKeychaincredentialIdIdResponse, error) {
	rsp, err := c.DeleteKeychaincredentialIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeychaincredentialIdIdResponse(rsp)
}

// GetKeychaincredentialIdIdWithResponse request returning *GetKeychaincredentialIdIdResponse
func (c *ClientWithResponses) GetKeychaincredentialIdIdWithResponse(ctx context.Context, id int, params *GetKeychaincredentialIdIdParams, reqEditors ...RequestEditorFn) (*GetKeychaincredentialIdIdResponse, error) {
	rsp, err := c.GetKeychaincredentialIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeychaincredentialIdIdResponse(rsp)
}

// PutKeychaincredentialIdIdWithBodyWithResponse request with arbitrary body returning *PutKeychaincredentialIdIdResponse
func (c *ClientWithResponses) PutKeychaincredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKeychaincredentialIdIdResponse, error) {
	rsp, err := c.PutKeychaincredentialIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKeychaincredentialIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutKeychaincredentialIdIdWithResponse(ctx context.Context, id int, body PutKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKeychaincredentialIdIdResponse, error) {
	rsp, err := c.PutKeychaincredentialIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKeychaincredentialIdIdResponse(rsp)
}

// PostKeychaincredentialRemoteSshHostKeyScanWithBodyWithResponse request with arbitrary body returning *PostKeychaincredentialRemoteSshHostKeyScanResponse
func (c *ClientWithResponses) PostKeychaincredentialRemoteSshHostKeyScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error) {
	rsp, err := c.PostKeychaincredentialRemoteSshHostKeyScanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialRemoteSshHostKeyScanResponse(rsp)
}

func (c *ClientWithResponses) PostKeychaincredentialRemoteSshHostKeyScanWithResponse(ctx context.Context, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error) {
	rsp, err := c.PostKeychaincredentialRemoteSshHostKeyScan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialRemoteSshHostKeyScanResponse(rsp)
}

// PostKeychaincredentialRemoteSshSemiautomaticSetupWithBodyWithResponse request with arbitrary body returning *PostKeychaincredentialRemoteSshSemiautomaticSetupResponse
func (c *ClientWithResponses) PostKeychaincredentialRemoteSshSemiautomaticSetupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error) {
	rsp, err := c.PostKeychaincredentialRemoteSshSemiautomaticSetupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialRemoteSshSemiautomaticSetupResponse(rsp)
}

func (c *ClientWithResponses) PostKeychaincredentialRemoteSshSemiautomaticSetupWithResponse(ctx context.Context, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error) {
	rsp, err := c.PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialRemoteSshSemiautomaticSetupResponse(rsp)
}

// PostKeychaincredentialUsedByWithBodyWithResponse request with arbitrary body returning *PostKeychaincredentialUsedByResponse
func (c *ClientWithResponses) PostKeychaincredentialUsedByWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKeychaincredentialUsedByResponse, error) {
	rsp, err := c.PostKeychaincredentialUsedByWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialUsedByResponse(rsp)
}

func (c *ClientWithResponses) PostKeychaincredentialUsedByWithResponse(ctx context.Context, body PostKeychaincredentialUsedByJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKeychaincredentialUsedByResponse, error) {
	rsp, err := c.PostKeychaincredentialUsedBy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialUsedByResponse(rsp)
}

// GetKmipWithResponse request returning *GetKmipResponse
func (c *ClientWithResponses) GetKmipWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKmipResponse, error) {
	rsp, err := c.GetKmip(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKmipResponse(rsp)
}

// PutKmipWithBodyWithResponse request with arbitrary body returning *PutKmipResponse
func (c *ClientWithResponses) PutKmipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutKmipResponse, error) {
	rsp, err := c.PutKmipWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKmipResponse(rsp)
}

func (c *ClientWithResponses) PutKmipWithResponse(ctx context.Context, body PutKmipJSONRequestBody, reqEditors ...RequestEditorFn) (*PutKmipResponse, error) {
	rsp, err := c.PutKmip(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutKmipResponse(rsp)
}

// GetKmipClearSyncPendingKeysWithResponse request returning *GetKmipClearSyncPendingKeysResponse
func (c *ClientWithResponses) GetKmipClearSyncPendingKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKmipClearSyncPendingKeysResponse, error) {
	rsp, err := c.GetKmipClearSyncPendingKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKmipClearSyncPendingKeysResponse(rsp)
}

// GetKmipKmipSyncPendingWithResponse request returning *GetKmipKmipSyncPendingResponse
func (c *ClientWithResponses) GetKmipKmipSyncPendingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKmipKmipSyncPendingResponse, error) {
	rsp, err := c.GetKmipKmipSyncPending(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKmipKmipSyncPendingResponse(rsp)
}

// GetKmipSyncKeysWithResponse request returning *GetKmipSyncKeysResponse
func (c *ClientWithResponses) GetKmipSyncKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKmipSyncKeysResponse, error) {
	rsp, err := c.GetKmipSyncKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKmipSyncKeysResponse(rsp)
}

// GetLdapWithResponse request returning *GetLdapResponse
func (c *ClientWithResponses) GetLdapWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapResponse, error) {
	rsp, err := c.GetLdap(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapResponse(rsp)
}

// PutLdapWithBodyWithResponse request with arbitrary body returning *PutLdapResponse
func (c *ClientWithResponses) PutLdapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLdapResponse, error) {
	rsp, err := c.PutLdapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLdapResponse(rsp)
}

func (c *ClientWithResponses) PutLdapWithResponse(ctx context.Context, body PutLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLdapResponse, error) {
	rsp, err := c.PutLdap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLdapResponse(rsp)
}

// GetLdapGetStateWithResponse request returning *GetLdapGetStateResponse
func (c *ClientWithResponses) GetLdapGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapGetStateResponse, error) {
	rsp, err := c.GetLdapGetState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapGetStateResponse(rsp)
}

// GetLdapSchemaChoicesWithResponse request returning *GetLdapSchemaChoicesResponse
func (c *ClientWithResponses) GetLdapSchemaChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapSchemaChoicesResponse, error) {
	rsp, err := c.GetLdapSchemaChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapSchemaChoicesResponse(rsp)
}

// GetLdapSslChoicesWithResponse request returning *GetLdapSslChoicesResponse
func (c *ClientWithResponses) GetLdapSslChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapSslChoicesResponse, error) {
	rsp, err := c.GetLdapSslChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapSslChoicesResponse(rsp)
}

// GetLldpWithResponse request returning *GetLldpResponse
func (c *ClientWithResponses) GetLldpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLldpResponse, error) {
	rsp, err := c.GetLldp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLldpResponse(rsp)
}

// PutLldpWithBodyWithResponse request with arbitrary body returning *PutLldpResponse
func (c *ClientWithResponses) PutLldpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLldpResponse, error) {
	rsp, err := c.PutLldpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLldpResponse(rsp)
}

func (c *ClientWithResponses) PutLldpWithResponse(ctx context.Context, body PutLldpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLldpResponse, error) {
	rsp, err := c.PutLldp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLldpResponse(rsp)
}

// GetLldpCountryChoicesWithResponse request returning *GetLldpCountryChoicesResponse
func (c *ClientWithResponses) GetLldpCountryChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLldpCountryChoicesResponse, error) {
	rsp, err := c.GetLldpCountryChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLldpCountryChoicesResponse(rsp)
}

// GetMailWithResponse request returning *GetMailResponse
func (c *ClientWithResponses) GetMailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMailResponse, error) {
	rsp, err := c.GetMail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMailResponse(rsp)
}

// PutMailWithBodyWithResponse request with arbitrary body returning *PutMailResponse
func (c *ClientWithResponses) PutMailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMailResponse, error) {
	rsp, err := c.PutMailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMailResponse(rsp)
}

func (c *ClientWithResponses) PutMailWithResponse(ctx context.Context, body PutMailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMailResponse, error) {
	rsp, err := c.PutMail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMailResponse(rsp)
}

// PostMailSendWithBodyWithResponse request with arbitrary body returning *PostMailSendResponse
func (c *ClientWithResponses) PostMailSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMailSendResponse, error) {
	rsp, err := c.PostMailSendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMailSendResponse(rsp)
}

func (c *ClientWithResponses) PostMailSendWithResponse(ctx context.Context, body PostMailSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMailSendResponse, error) {
	rsp, err := c.PostMailSend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMailSendResponse(rsp)
}

// GetMultipathWithResponse request returning *GetMultipathResponse
func (c *ClientWithResponses) GetMultipathWithResponse(ctx context.Context, params *GetMultipathParams, reqEditors ...RequestEditorFn) (*GetMultipathResponse, error) {
	rsp, err := c.GetMultipath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMultipathResponse(rsp)
}

// GetMultipathIdIdWithResponse request returning *GetMultipathIdIdResponse
func (c *ClientWithResponses) GetMultipathIdIdWithResponse(ctx context.Context, id string, params *GetMultipathIdIdParams, reqEditors ...RequestEditorFn) (*GetMultipathIdIdResponse, error) {
	rsp, err := c.GetMultipathIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMultipathIdIdResponse(rsp)
}

// GetNetworkConfigurationWithResponse request returning *GetNetworkConfigurationResponse
func (c *ClientWithResponses) GetNetworkConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNetworkConfigurationResponse, error) {
	rsp, err := c.GetNetworkConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkConfigurationResponse(rsp)
}

// PutNetworkConfigurationWithBodyWithResponse request with arbitrary body returning *PutNetworkConfigurationResponse
func (c *ClientWithResponses) PutNetworkConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNetworkConfigurationResponse, error) {
	rsp, err := c.PutNetworkConfigurationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNetworkConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PutNetworkConfigurationWithResponse(ctx context.Context, body PutNetworkConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNetworkConfigurationResponse, error) {
	rsp, err := c.PutNetworkConfiguration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNetworkConfigurationResponse(rsp)
}

// GetNetworkGeneralSummaryWithResponse request returning *GetNetworkGeneralSummaryResponse
func (c *ClientWithResponses) GetNetworkGeneralSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNetworkGeneralSummaryResponse, error) {
	rsp, err := c.GetNetworkGeneralSummary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkGeneralSummaryResponse(rsp)
}

// GetNfsWithResponse request returning *GetNfsResponse
func (c *ClientWithResponses) GetNfsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNfsResponse, error) {
	rsp, err := c.GetNfs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsResponse(rsp)
}

// PutNfsWithBodyWithResponse request with arbitrary body returning *PutNfsResponse
func (c *ClientWithResponses) PutNfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNfsResponse, error) {
	rsp, err := c.PutNfsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNfsResponse(rsp)
}

func (c *ClientWithResponses) PutNfsWithResponse(ctx context.Context, body PutNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNfsResponse, error) {
	rsp, err := c.PutNfs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNfsResponse(rsp)
}

// PostNfsAddPrincipalWithBodyWithResponse request with arbitrary body returning *PostNfsAddPrincipalResponse
func (c *ClientWithResponses) PostNfsAddPrincipalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNfsAddPrincipalResponse, error) {
	rsp, err := c.PostNfsAddPrincipalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNfsAddPrincipalResponse(rsp)
}

func (c *ClientWithResponses) PostNfsAddPrincipalWithResponse(ctx context.Context, body PostNfsAddPrincipalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNfsAddPrincipalResponse, error) {
	rsp, err := c.PostNfsAddPrincipal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNfsAddPrincipalResponse(rsp)
}

// GetNfsBindipChoicesWithResponse request returning *GetNfsBindipChoicesResponse
func (c *ClientWithResponses) GetNfsBindipChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNfsBindipChoicesResponse, error) {
	rsp, err := c.GetNfsBindipChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsBindipChoicesResponse(rsp)
}

// GetNisWithResponse request returning *GetNisResponse
func (c *ClientWithResponses) GetNisWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNisResponse, error) {
	rsp, err := c.GetNis(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNisResponse(rsp)
}

// PutNisWithBodyWithResponse request with arbitrary body returning *PutNisResponse
func (c *ClientWithResponses) PutNisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNisResponse, error) {
	rsp, err := c.PutNisWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNisResponse(rsp)
}

func (c *ClientWithResponses) PutNisWithResponse(ctx context.Context, body PutNisJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNisResponse, error) {
	rsp, err := c.PutNis(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNisResponse(rsp)
}

// GetNisGetStateWithResponse request returning *GetNisGetStateResponse
func (c *ClientWithResponses) GetNisGetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNisGetStateResponse, error) {
	rsp, err := c.GetNisGetState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNisGetStateResponse(rsp)
}

// GetOpenvpnClientWithResponse request returning *GetOpenvpnClientResponse
func (c *ClientWithResponses) GetOpenvpnClientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnClientResponse, error) {
	rsp, err := c.GetOpenvpnClient(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenvpnClientResponse(rsp)
}

// PutOpenvpnClientWithBodyWithResponse request with arbitrary body returning *PutOpenvpnClientResponse
func (c *ClientWithResponses) PutOpenvpnClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOpenvpnClientResponse, error) {
	rsp, err := c.PutOpenvpnClientWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOpenvpnClientResponse(rsp)
}

func (c *ClientWithResponses) PutOpenvpnClientWithResponse(ctx context.Context, body PutOpenvpnClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOpenvpnClientResponse, error) {
	rsp, err := c.PutOpenvpnClient(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOpenvpnClientResponse(rsp)
}

// GetOpenvpnClientAuthenticationAlgorithmChoicesWithResponse request returning *GetOpenvpnClientAuthenticationAlgorithmChoicesResponse
func (c *ClientWithResponses) GetOpenvpnClientAuthenticationAlgorithmChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnClientAuthenticationAlgorithmChoicesResponse, error) {
	rsp, err := c.GetOpenvpnClientAuthenticationAlgorithmChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenvpnClientAuthenticationAlgorithmChoicesResponse(rsp)
}

// GetOpenvpnClientCipherChoicesWithResponse request returning *GetOpenvpnClientCipherChoicesResponse
func (c *ClientWithResponses) GetOpenvpnClientCipherChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnClientCipherChoicesResponse, error) {
	rsp, err := c.GetOpenvpnClientCipherChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenvpnClientCipherChoicesResponse(rsp)
}

// GetOpenvpnServerWithResponse request returning *GetOpenvpnServerResponse
func (c *ClientWithResponses) GetOpenvpnServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnServerResponse, error) {
	rsp, err := c.GetOpenvpnServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenvpnServerResponse(rsp)
}

// PutOpenvpnServerWithBodyWithResponse request with arbitrary body returning *PutOpenvpnServerResponse
func (c *ClientWithResponses) PutOpenvpnServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOpenvpnServerResponse, error) {
	rsp, err := c.PutOpenvpnServerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOpenvpnServerResponse(rsp)
}

func (c *ClientWithResponses) PutOpenvpnServerWithResponse(ctx context.Context, body PutOpenvpnServerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOpenvpnServerResponse, error) {
	rsp, err := c.PutOpenvpnServer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOpenvpnServerResponse(rsp)
}

// GetOpenvpnServerAuthenticationAlgorithmChoicesWithResponse request returning *GetOpenvpnServerAuthenticationAlgorithmChoicesResponse
func (c *ClientWithResponses) GetOpenvpnServerAuthenticationAlgorithmChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnServerAuthenticationAlgorithmChoicesResponse, error) {
	rsp, err := c.GetOpenvpnServerAuthenticationAlgorithmChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenvpnServerAuthenticationAlgorithmChoicesResponse(rsp)
}

// GetOpenvpnServerCipherChoicesWithResponse request returning *GetOpenvpnServerCipherChoicesResponse
func (c *ClientWithResponses) GetOpenvpnServerCipherChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnServerCipherChoicesResponse, error) {
	rsp, err := c.GetOpenvpnServerCipherChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenvpnServerCipherChoicesResponse(rsp)
}

// PostOpenvpnServerClientConfigurationGenerationWithBodyWithResponse request with arbitrary body returning *PostOpenvpnServerClientConfigurationGenerationResponse
func (c *ClientWithResponses) PostOpenvpnServerClientConfigurationGenerationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOpenvpnServerClientConfigurationGenerationResponse, error) {
	rsp, err := c.PostOpenvpnServerClientConfigurationGenerationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOpenvpnServerClientConfigurationGenerationResponse(rsp)
}

func (c *ClientWithResponses) PostOpenvpnServerClientConfigurationGenerationWithResponse(ctx context.Context, body PostOpenvpnServerClientConfigurationGenerationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOpenvpnServerClientConfigurationGenerationResponse, error) {
	rsp, err := c.PostOpenvpnServerClientConfigurationGeneration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOpenvpnServerClientConfigurationGenerationResponse(rsp)
}

// GetOpenvpnServerRenewStaticKeyWithResponse request returning *GetOpenvpnServerRenewStaticKeyResponse
func (c *ClientWithResponses) GetOpenvpnServerRenewStaticKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenvpnServerRenewStaticKeyResponse, error) {
	rsp, err := c.GetOpenvpnServerRenewStaticKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenvpnServerRenewStaticKeyResponse(rsp)
}

// GetPluginWithResponse request returning *GetPluginResponse
func (c *ClientWithResponses) GetPluginWithResponse(ctx context.Context, params *GetPluginParams, reqEditors ...RequestEditorFn) (*GetPluginResponse, error) {
	rsp, err := c.GetPlugin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginResponse(rsp)
}

// PostPluginWithBodyWithResponse request with arbitrary body returning *PostPluginResponse
func (c *ClientWithResponses) PostPluginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginResponse, error) {
	rsp, err := c.PostPluginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginResponse(rsp)
}

func (c *ClientWithResponses) PostPluginWithResponse(ctx context.Context, body PostPluginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginResponse, error) {
	rsp, err := c.PostPlugin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginResponse(rsp)
}

// PostPluginAvailableWithBodyWithResponse request with arbitrary body returning *PostPluginAvailableResponse
func (c *ClientWithResponses) PostPluginAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginAvailableResponse, error) {
	rsp, err := c.PostPluginAvailableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginAvailableResponse(rsp)
}

func (c *ClientWithResponses) PostPluginAvailableWithResponse(ctx context.Context, body PostPluginAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginAvailableResponse, error) {
	rsp, err := c.PostPluginAvailable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginAvailableResponse(rsp)
}

// PostPluginBranchesChoicesWithBodyWithResponse request with arbitrary body returning *PostPluginBranchesChoicesResponse
func (c *ClientWithResponses) PostPluginBranchesChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginBranchesChoicesResponse, error) {
	rsp, err := c.PostPluginBranchesChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginBranchesChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostPluginBranchesChoicesWithResponse(ctx context.Context, body PostPluginBranchesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginBranchesChoicesResponse, error) {
	rsp, err := c.PostPluginBranchesChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginBranchesChoicesResponse(rsp)
}

// PostPluginDefaultsWithBodyWithResponse request with arbitrary body returning *PostPluginDefaultsResponse
func (c *ClientWithResponses) PostPluginDefaultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginDefaultsResponse, error) {
	rsp, err := c.PostPluginDefaultsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginDefaultsResponse(rsp)
}

func (c *ClientWithResponses) PostPluginDefaultsWithResponse(ctx context.Context, body PostPluginDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginDefaultsResponse, error) {
	rsp, err := c.PostPluginDefaults(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginDefaultsResponse(rsp)
}

// DeletePluginIdIdWithResponse request returning *DeletePluginIdIdResponse
func (c *ClientWithResponses) DeletePluginIdIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePluginIdIdResponse, error) {
	rsp, err := c.DeletePluginIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePluginIdIdResponse(rsp)
}

// GetPluginIdIdWithResponse request returning *GetPluginIdIdResponse
func (c *ClientWithResponses) GetPluginIdIdWithResponse(ctx context.Context, id string, params *GetPluginIdIdParams, reqEditors ...RequestEditorFn) (*GetPluginIdIdResponse, error) {
	rsp, err := c.GetPluginIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginIdIdResponse(rsp)
}

// PutPluginIdIdWithBodyWithResponse request with arbitrary body returning *PutPluginIdIdResponse
func (c *ClientWithResponses) PutPluginIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPluginIdIdResponse, error) {
	rsp, err := c.PutPluginIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPluginIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPluginIdIdWithResponse(ctx context.Context, id string, body PutPluginIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPluginIdIdResponse, error) {
	rsp, err := c.PutPluginIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPluginIdIdResponse(rsp)
}

// GetPluginOfficialRepositoriesWithResponse request returning *GetPluginOfficialRepositoriesResponse
func (c *ClientWithResponses) GetPluginOfficialRepositoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPluginOfficialRepositoriesResponse, error) {
	rsp, err := c.GetPluginOfficialRepositories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginOfficialRepositoriesResponse(rsp)
}

// GetPluginRetrieveVersionsForReposWithResponse request returning *GetPluginRetrieveVersionsForReposResponse
func (c *ClientWithResponses) GetPluginRetrieveVersionsForReposWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPluginRetrieveVersionsForReposResponse, error) {
	rsp, err := c.GetPluginRetrieveVersionsForRepos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginRetrieveVersionsForReposResponse(rsp)
}

// PostPluginUpdatePluginWithBodyWithResponse request with arbitrary body returning *PostPluginUpdatePluginResponse
func (c *ClientWithResponses) PostPluginUpdatePluginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPluginUpdatePluginResponse, error) {
	rsp, err := c.PostPluginUpdatePluginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginUpdatePluginResponse(rsp)
}

func (c *ClientWithResponses) PostPluginUpdatePluginWithResponse(ctx context.Context, body PostPluginUpdatePluginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPluginUpdatePluginResponse, error) {
	rsp, err := c.PostPluginUpdatePlugin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginUpdatePluginResponse(rsp)
}

// GetPoolWithResponse request returning *GetPoolResponse
func (c *ClientWithResponses) GetPoolWithResponse(ctx context.Context, params *GetPoolParams, reqEditors ...RequestEditorFn) (*GetPoolResponse, error) {
	rsp, err := c.GetPool(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolResponse(rsp)
}

// PostPoolWithBodyWithResponse request with arbitrary body returning *PostPoolResponse
func (c *ClientWithResponses) PostPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolResponse, error) {
	rsp, err := c.PostPoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolResponse(rsp)
}

func (c *ClientWithResponses) PostPoolWithResponse(ctx context.Context, body PostPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolResponse, error) {
	rsp, err := c.PostPool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolResponse(rsp)
}

// PostPoolAttachWithBodyWithResponse request with arbitrary body returning *PostPoolAttachResponse
func (c *ClientWithResponses) PostPoolAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolAttachResponse, error) {
	rsp, err := c.PostPoolAttachWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolAttachResponse(rsp)
}

func (c *ClientWithResponses) PostPoolAttachWithResponse(ctx context.Context, body PostPoolAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolAttachResponse, error) {
	rsp, err := c.PostPoolAttach(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolAttachResponse(rsp)
}

// GetPoolDatasetWithResponse request returning *GetPoolDatasetResponse
func (c *ClientWithResponses) GetPoolDatasetWithResponse(ctx context.Context, params *GetPoolDatasetParams, reqEditors ...RequestEditorFn) (*GetPoolDatasetResponse, error) {
	rsp, err := c.GetPoolDataset(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolDatasetResponse(rsp)
}

// PostPoolDatasetWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetResponse
func (c *ClientWithResponses) PostPoolDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetResponse, error) {
	rsp, err := c.PostPoolDatasetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetWithResponse(ctx context.Context, body PostPoolDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetResponse, error) {
	rsp, err := c.PostPoolDataset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetResponse(rsp)
}

// PostPoolDatasetChangeKeyWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetChangeKeyResponse
func (c *ClientWithResponses) PostPoolDatasetChangeKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetChangeKeyResponse, error) {
	rsp, err := c.PostPoolDatasetChangeKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetChangeKeyResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetChangeKeyWithResponse(ctx context.Context, body PostPoolDatasetChangeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetChangeKeyResponse, error) {
	rsp, err := c.PostPoolDatasetChangeKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetChangeKeyResponse(rsp)
}

// GetPoolDatasetCompressionChoicesWithResponse request returning *GetPoolDatasetCompressionChoicesResponse
func (c *ClientWithResponses) GetPoolDatasetCompressionChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolDatasetCompressionChoicesResponse, error) {
	rsp, err := c.GetPoolDatasetCompressionChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolDatasetCompressionChoicesResponse(rsp)
}

// GetPoolDatasetEncryptionAlgorithmChoicesWithResponse request returning *GetPoolDatasetEncryptionAlgorithmChoicesResponse
func (c *ClientWithResponses) GetPoolDatasetEncryptionAlgorithmChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolDatasetEncryptionAlgorithmChoicesResponse, error) {
	rsp, err := c.GetPoolDatasetEncryptionAlgorithmChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolDatasetEncryptionAlgorithmChoicesResponse(rsp)
}

// PostPoolDatasetEncryptionSummaryWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetEncryptionSummaryResponse
func (c *ClientWithResponses) PostPoolDatasetEncryptionSummaryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetEncryptionSummaryResponse, error) {
	rsp, err := c.PostPoolDatasetEncryptionSummaryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetEncryptionSummaryResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetEncryptionSummaryWithResponse(ctx context.Context, body PostPoolDatasetEncryptionSummaryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetEncryptionSummaryResponse, error) {
	rsp, err := c.PostPoolDatasetEncryptionSummary(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetEncryptionSummaryResponse(rsp)
}

// PostPoolDatasetExportKeyWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetExportKeyResponse
func (c *ClientWithResponses) PostPoolDatasetExportKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetExportKeyResponse, error) {
	rsp, err := c.PostPoolDatasetExportKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetExportKeyResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetExportKeyWithResponse(ctx context.Context, body PostPoolDatasetExportKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetExportKeyResponse, error) {
	rsp, err := c.PostPoolDatasetExportKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetExportKeyResponse(rsp)
}

// DeletePoolDatasetIdIdWithBodyWithResponse request with arbitrary body returning *DeletePoolDatasetIdIdResponse
func (c *ClientWithResponses) DeletePoolDatasetIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePoolDatasetIdIdResponse, error) {
	rsp, err := c.DeletePoolDatasetIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolDatasetIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeletePoolDatasetIdIdWithResponse(ctx context.Context, id string, body DeletePoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePoolDatasetIdIdResponse, error) {
	rsp, err := c.DeletePoolDatasetIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolDatasetIdIdResponse(rsp)
}

// GetPoolDatasetIdIdWithResponse request returning *GetPoolDatasetIdIdResponse
func (c *ClientWithResponses) GetPoolDatasetIdIdWithResponse(ctx context.Context, id string, params *GetPoolDatasetIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolDatasetIdIdResponse, error) {
	rsp, err := c.GetPoolDatasetIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolDatasetIdIdResponse(rsp)
}

// PutPoolDatasetIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolDatasetIdIdResponse
func (c *ClientWithResponses) PutPoolDatasetIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolDatasetIdIdResponse, error) {
	rsp, err := c.PutPoolDatasetIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolDatasetIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolDatasetIdIdWithResponse(ctx context.Context, id string, body PutPoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolDatasetIdIdResponse, error) {
	rsp, err := c.PutPoolDatasetIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolDatasetIdIdResponse(rsp)
}

// PostPoolDatasetIdIdAttachmentsWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdAttachmentsResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdAttachmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdAttachmentsResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdAttachmentsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdAttachmentsResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdAttachmentsWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdAttachmentsResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdAttachments(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdAttachmentsResponse(rsp)
}

// PostPoolDatasetIdIdGetQuotaWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdGetQuotaResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdGetQuotaWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdGetQuotaResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdGetQuotaWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdGetQuotaResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdGetQuotaWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdGetQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdGetQuotaResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdGetQuota(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdGetQuotaResponse(rsp)
}

// PostPoolDatasetIdIdPermissionWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdPermissionResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdPermissionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdPermissionResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdPermissionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdPermissionResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdPermissionWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdPermissionResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdPermission(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdPermissionResponse(rsp)
}

// PostPoolDatasetIdIdProcessesWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdProcessesResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdProcessesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdProcessesResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdProcessesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdProcessesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdProcessesWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdProcessesResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdProcesses(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdProcessesResponse(rsp)
}

// PostPoolDatasetIdIdPromoteWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdPromoteResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdPromoteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdPromoteResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdPromoteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdPromoteResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdPromoteWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdPromoteResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdPromote(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdPromoteResponse(rsp)
}

// PostPoolDatasetIdIdSetQuotaWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdSetQuotaResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdSetQuotaWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdSetQuotaResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdSetQuotaWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdSetQuotaResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdSetQuotaWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdSetQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetIdIdSetQuotaResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdSetQuota(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdSetQuotaResponse(rsp)
}

// PostPoolDatasetInheritParentEncryptionPropertiesWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetInheritParentEncryptionPropertiesResponse
func (c *ClientWithResponses) PostPoolDatasetInheritParentEncryptionPropertiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetInheritParentEncryptionPropertiesResponse, error) {
	rsp, err := c.PostPoolDatasetInheritParentEncryptionPropertiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetInheritParentEncryptionPropertiesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetInheritParentEncryptionPropertiesWithResponse(ctx context.Context, body PostPoolDatasetInheritParentEncryptionPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetInheritParentEncryptionPropertiesResponse, error) {
	rsp, err := c.PostPoolDatasetInheritParentEncryptionProperties(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetInheritParentEncryptionPropertiesResponse(rsp)
}

// PostPoolDatasetLockWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetLockResponse
func (c *ClientWithResponses) PostPoolDatasetLockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetLockResponse, error) {
	rsp, err := c.PostPoolDatasetLockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetLockResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetLockWithResponse(ctx context.Context, body PostPoolDatasetLockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetLockResponse, error) {
	rsp, err := c.PostPoolDatasetLock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetLockResponse(rsp)
}

// PostPoolDatasetRecommendedZvolBlocksizeWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetRecommendedZvolBlocksizeResponse
func (c *ClientWithResponses) PostPoolDatasetRecommendedZvolBlocksizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error) {
	rsp, err := c.PostPoolDatasetRecommendedZvolBlocksizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetRecommendedZvolBlocksizeResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetRecommendedZvolBlocksizeWithResponse(ctx context.Context, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error) {
	rsp, err := c.PostPoolDatasetRecommendedZvolBlocksize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetRecommendedZvolBlocksizeResponse(rsp)
}

// PostPoolDatasetUnlockWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetUnlockResponse
func (c *ClientWithResponses) PostPoolDatasetUnlockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetUnlockResponse, error) {
	rsp, err := c.PostPoolDatasetUnlockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetUnlockResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetUnlockWithResponse(ctx context.Context, body PostPoolDatasetUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetUnlockResponse, error) {
	rsp, err := c.PostPoolDatasetUnlock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetUnlockResponse(rsp)
}

// GetPoolDatasetUserpropWithResponse request returning *GetPoolDatasetUserpropResponse
func (c *ClientWithResponses) GetPoolDatasetUserpropWithResponse(ctx context.Context, params *GetPoolDatasetUserpropParams, reqEditors ...RequestEditorFn) (*GetPoolDatasetUserpropResponse, error) {
	rsp, err := c.GetPoolDatasetUserprop(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolDatasetUserpropResponse(rsp)
}

// PostPoolDatasetUserpropWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetUserpropResponse
func (c *ClientWithResponses) PostPoolDatasetUserpropWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolDatasetUserpropResponse, error) {
	rsp, err := c.PostPoolDatasetUserpropWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetUserpropResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetUserpropWithResponse(ctx context.Context, body PostPoolDatasetUserpropJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolDatasetUserpropResponse, error) {
	rsp, err := c.PostPoolDatasetUserprop(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetUserpropResponse(rsp)
}

// DeletePoolDatasetUserpropIdIdWithBodyWithResponse request with arbitrary body returning *DeletePoolDatasetUserpropIdIdResponse
func (c *ClientWithResponses) DeletePoolDatasetUserpropIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePoolDatasetUserpropIdIdResponse, error) {
	rsp, err := c.DeletePoolDatasetUserpropIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolDatasetUserpropIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeletePoolDatasetUserpropIdIdWithResponse(ctx context.Context, id string, body DeletePoolDatasetUserpropIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePoolDatasetUserpropIdIdResponse, error) {
	rsp, err := c.DeletePoolDatasetUserpropIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolDatasetUserpropIdIdResponse(rsp)
}

// GetPoolDatasetUserpropIdIdWithResponse request returning *GetPoolDatasetUserpropIdIdResponse
func (c *ClientWithResponses) GetPoolDatasetUserpropIdIdWithResponse(ctx context.Context, id string, params *GetPoolDatasetUserpropIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolDatasetUserpropIdIdResponse, error) {
	rsp, err := c.GetPoolDatasetUserpropIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolDatasetUserpropIdIdResponse(rsp)
}

// PutPoolDatasetUserpropIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolDatasetUserpropIdIdResponse
func (c *ClientWithResponses) PutPoolDatasetUserpropIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolDatasetUserpropIdIdResponse, error) {
	rsp, err := c.PutPoolDatasetUserpropIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolDatasetUserpropIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolDatasetUserpropIdIdWithResponse(ctx context.Context, id string, body PutPoolDatasetUserpropIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolDatasetUserpropIdIdResponse, error) {
	rsp, err := c.PutPoolDatasetUserpropIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolDatasetUserpropIdIdResponse(rsp)
}

// PostPoolFilesystemChoicesWithBodyWithResponse request with arbitrary body returning *PostPoolFilesystemChoicesResponse
func (c *ClientWithResponses) PostPoolFilesystemChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolFilesystemChoicesResponse, error) {
	rsp, err := c.PostPoolFilesystemChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolFilesystemChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolFilesystemChoicesWithResponse(ctx context.Context, body PostPoolFilesystemChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolFilesystemChoicesResponse, error) {
	rsp, err := c.PostPoolFilesystemChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolFilesystemChoicesResponse(rsp)
}

// GetPoolIdIdWithResponse request returning *GetPoolIdIdResponse
func (c *ClientWithResponses) GetPoolIdIdWithResponse(ctx context.Context, id int, params *GetPoolIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolIdIdResponse, error) {
	rsp, err := c.GetPoolIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolIdIdResponse(rsp)
}

// PutPoolIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolIdIdResponse
func (c *ClientWithResponses) PutPoolIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolIdIdResponse, error) {
	rsp, err := c.PutPoolIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolIdIdWithResponse(ctx context.Context, id int, body PutPoolIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolIdIdResponse, error) {
	rsp, err := c.PutPoolIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolIdIdResponse(rsp)
}

// PostPoolIdIdAttachmentsWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdAttachmentsResponse
func (c *ClientWithResponses) PostPoolIdIdAttachmentsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdAttachmentsResponse, error) {
	rsp, err := c.PostPoolIdIdAttachmentsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdAttachmentsResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdAttachmentsWithResponse(ctx context.Context, id int, body PostPoolIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdAttachmentsResponse, error) {
	rsp, err := c.PostPoolIdIdAttachments(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdAttachmentsResponse(rsp)
}

// PostPoolIdIdDetachWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdDetachResponse
func (c *ClientWithResponses) PostPoolIdIdDetachWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdDetachResponse, error) {
	rsp, err := c.PostPoolIdIdDetachWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdDetachResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdDetachWithResponse(ctx context.Context, id int, body PostPoolIdIdDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdDetachResponse, error) {
	rsp, err := c.PostPoolIdIdDetach(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdDetachResponse(rsp)
}

// PostPoolIdIdDownloadEncryptionKeyWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdDownloadEncryptionKeyResponse
func (c *ClientWithResponses) PostPoolIdIdDownloadEncryptionKeyWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdDownloadEncryptionKeyResponse, error) {
	rsp, err := c.PostPoolIdIdDownloadEncryptionKeyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdDownloadEncryptionKeyResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdDownloadEncryptionKeyWithResponse(ctx context.Context, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdDownloadEncryptionKeyResponse, error) {
	rsp, err := c.PostPoolIdIdDownloadEncryptionKey(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdDownloadEncryptionKeyResponse(rsp)
}

// PostPoolIdIdExpandWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdExpandResponse
func (c *ClientWithResponses) PostPoolIdIdExpandWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdExpandResponse, error) {
	rsp, err := c.PostPoolIdIdExpandWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdExpandResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdExpandWithResponse(ctx context.Context, id int, body PostPoolIdIdExpandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdExpandResponse, error) {
	rsp, err := c.PostPoolIdIdExpand(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdExpandResponse(rsp)
}

// PostPoolIdIdExportWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdExportResponse
func (c *ClientWithResponses) PostPoolIdIdExportWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdExportResponse, error) {
	rsp, err := c.PostPoolIdIdExportWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdExportResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdExportWithResponse(ctx context.Context, id int, body PostPoolIdIdExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdExportResponse, error) {
	rsp, err := c.PostPoolIdIdExport(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdExportResponse(rsp)
}

// PostPoolIdIdGetDisksWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdGetDisksResponse
func (c *ClientWithResponses) PostPoolIdIdGetDisksWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdGetDisksResponse, error) {
	rsp, err := c.PostPoolIdIdGetDisksWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdGetDisksResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdGetDisksWithResponse(ctx context.Context, id int, body PostPoolIdIdGetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdGetDisksResponse, error) {
	rsp, err := c.PostPoolIdIdGetDisks(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdGetDisksResponse(rsp)
}

// PostPoolIdIdIsUpgradedWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdIsUpgradedResponse
func (c *ClientWithResponses) PostPoolIdIdIsUpgradedWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdIsUpgradedResponse, error) {
	rsp, err := c.PostPoolIdIdIsUpgradedWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdIsUpgradedResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdIsUpgradedWithResponse(ctx context.Context, id int, body PostPoolIdIdIsUpgradedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdIsUpgradedResponse, error) {
	rsp, err := c.PostPoolIdIdIsUpgraded(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdIsUpgradedResponse(rsp)
}

// PostPoolIdIdLockWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdLockResponse
func (c *ClientWithResponses) PostPoolIdIdLockWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdLockResponse, error) {
	rsp, err := c.PostPoolIdIdLockWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdLockResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdLockWithResponse(ctx context.Context, id int, body PostPoolIdIdLockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdLockResponse, error) {
	rsp, err := c.PostPoolIdIdLock(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdLockResponse(rsp)
}

// PostPoolIdIdOfflineWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdOfflineResponse
func (c *ClientWithResponses) PostPoolIdIdOfflineWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdOfflineResponse, error) {
	rsp, err := c.PostPoolIdIdOfflineWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdOfflineResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdOfflineWithResponse(ctx context.Context, id int, body PostPoolIdIdOfflineJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdOfflineResponse, error) {
	rsp, err := c.PostPoolIdIdOffline(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdOfflineResponse(rsp)
}

// PostPoolIdIdOnlineWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdOnlineResponse
func (c *ClientWithResponses) PostPoolIdIdOnlineWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdOnlineResponse, error) {
	rsp, err := c.PostPoolIdIdOnlineWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdOnlineResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdOnlineWithResponse(ctx context.Context, id int, body PostPoolIdIdOnlineJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdOnlineResponse, error) {
	rsp, err := c.PostPoolIdIdOnline(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdOnlineResponse(rsp)
}

// PostPoolIdIdPassphraseWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdPassphraseResponse
func (c *ClientWithResponses) PostPoolIdIdPassphraseWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdPassphraseResponse, error) {
	rsp, err := c.PostPoolIdIdPassphraseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdPassphraseResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdPassphraseWithResponse(ctx context.Context, id int, body PostPoolIdIdPassphraseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdPassphraseResponse, error) {
	rsp, err := c.PostPoolIdIdPassphrase(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdPassphraseResponse(rsp)
}

// PostPoolIdIdProcessesWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdProcessesResponse
func (c *ClientWithResponses) PostPoolIdIdProcessesWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdProcessesResponse, error) {
	rsp, err := c.PostPoolIdIdProcessesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdProcessesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdProcessesWithResponse(ctx context.Context, id int, body PostPoolIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdProcessesResponse, error) {
	rsp, err := c.PostPoolIdIdProcesses(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdProcessesResponse(rsp)
}

// PostPoolIdIdRecoverykeyRmWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdRecoverykeyRmResponse
func (c *ClientWithResponses) PostPoolIdIdRecoverykeyRmWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdRecoverykeyRmResponse, error) {
	rsp, err := c.PostPoolIdIdRecoverykeyRmWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRecoverykeyRmResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdRecoverykeyRmWithResponse(ctx context.Context, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdRecoverykeyRmResponse, error) {
	rsp, err := c.PostPoolIdIdRecoverykeyRm(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRecoverykeyRmResponse(rsp)
}

// PostPoolIdIdRekeyWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdRekeyResponse
func (c *ClientWithResponses) PostPoolIdIdRekeyWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdRekeyResponse, error) {
	rsp, err := c.PostPoolIdIdRekeyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRekeyResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdRekeyWithResponse(ctx context.Context, id int, body PostPoolIdIdRekeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdRekeyResponse, error) {
	rsp, err := c.PostPoolIdIdRekey(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRekeyResponse(rsp)
}

// PostPoolIdIdRemoveWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdRemoveResponse
func (c *ClientWithResponses) PostPoolIdIdRemoveWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdRemoveResponse, error) {
	rsp, err := c.PostPoolIdIdRemoveWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdRemoveWithResponse(ctx context.Context, id int, body PostPoolIdIdRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdRemoveResponse, error) {
	rsp, err := c.PostPoolIdIdRemove(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRemoveResponse(rsp)
}

// PostPoolIdIdReplaceWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdReplaceResponse
func (c *ClientWithResponses) PostPoolIdIdReplaceWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdReplaceResponse, error) {
	rsp, err := c.PostPoolIdIdReplaceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdReplaceResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdReplaceWithResponse(ctx context.Context, id int, body PostPoolIdIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdReplaceResponse, error) {
	rsp, err := c.PostPoolIdIdReplace(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdReplaceResponse(rsp)
}

// PostPoolIdIdScrubWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdScrubResponse
func (c *ClientWithResponses) PostPoolIdIdScrubWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdScrubResponse, error) {
	rsp, err := c.PostPoolIdIdScrubWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdScrubResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdScrubWithResponse(ctx context.Context, id int, body PostPoolIdIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdScrubResponse, error) {
	rsp, err := c.PostPoolIdIdScrub(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdScrubResponse(rsp)
}

// PostPoolIdIdUnlockWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdUnlockResponse
func (c *ClientWithResponses) PostPoolIdIdUnlockWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdUnlockResponse, error) {
	rsp, err := c.PostPoolIdIdUnlockWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdUnlockResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdUnlockWithResponse(ctx context.Context, id int, body PostPoolIdIdUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdUnlockResponse, error) {
	rsp, err := c.PostPoolIdIdUnlock(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdUnlockResponse(rsp)
}

// PostPoolIdIdUpgradeWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdUpgradeResponse
func (c *ClientWithResponses) PostPoolIdIdUpgradeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolIdIdUpgradeResponse, error) {
	rsp, err := c.PostPoolIdIdUpgradeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdUpgradeResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdUpgradeWithResponse(ctx context.Context, id int, body PostPoolIdIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolIdIdUpgradeResponse, error) {
	rsp, err := c.PostPoolIdIdUpgrade(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdUpgradeResponse(rsp)
}

// PostPoolImportDiskWithBodyWithResponse request with arbitrary body returning *PostPoolImportDiskResponse
func (c *ClientWithResponses) PostPoolImportDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolImportDiskResponse, error) {
	rsp, err := c.PostPoolImportDiskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportDiskResponse(rsp)
}

func (c *ClientWithResponses) PostPoolImportDiskWithResponse(ctx context.Context, body PostPoolImportDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolImportDiskResponse, error) {
	rsp, err := c.PostPoolImportDisk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportDiskResponse(rsp)
}

// PostPoolImportDiskAutodetectFsTypeWithBodyWithResponse request with arbitrary body returning *PostPoolImportDiskAutodetectFsTypeResponse
func (c *ClientWithResponses) PostPoolImportDiskAutodetectFsTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolImportDiskAutodetectFsTypeResponse, error) {
	rsp, err := c.PostPoolImportDiskAutodetectFsTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportDiskAutodetectFsTypeResponse(rsp)
}

func (c *ClientWithResponses) PostPoolImportDiskAutodetectFsTypeWithResponse(ctx context.Context, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolImportDiskAutodetectFsTypeResponse, error) {
	rsp, err := c.PostPoolImportDiskAutodetectFsType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportDiskAutodetectFsTypeResponse(rsp)
}

// GetPoolImportDiskMsdosfsLocalesWithResponse request returning *GetPoolImportDiskMsdosfsLocalesResponse
func (c *ClientWithResponses) GetPoolImportDiskMsdosfsLocalesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolImportDiskMsdosfsLocalesResponse, error) {
	rsp, err := c.GetPoolImportDiskMsdosfsLocales(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolImportDiskMsdosfsLocalesResponse(rsp)
}

// GetPoolImportFindWithResponse request returning *GetPoolImportFindResponse
func (c *ClientWithResponses) GetPoolImportFindWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolImportFindResponse, error) {
	rsp, err := c.GetPoolImportFind(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolImportFindResponse(rsp)
}

// PostPoolImportPoolWithBodyWithResponse request with arbitrary body returning *PostPoolImportPoolResponse
func (c *ClientWithResponses) PostPoolImportPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolImportPoolResponse, error) {
	rsp, err := c.PostPoolImportPoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportPoolResponse(rsp)
}

func (c *ClientWithResponses) PostPoolImportPoolWithResponse(ctx context.Context, body PostPoolImportPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolImportPoolResponse, error) {
	rsp, err := c.PostPoolImportPool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportPoolResponse(rsp)
}

// GetPoolResilverWithResponse request returning *GetPoolResilverResponse
func (c *ClientWithResponses) GetPoolResilverWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPoolResilverResponse, error) {
	rsp, err := c.GetPoolResilver(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolResilverResponse(rsp)
}

// PutPoolResilverWithBodyWithResponse request with arbitrary body returning *PutPoolResilverResponse
func (c *ClientWithResponses) PutPoolResilverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolResilverResponse, error) {
	rsp, err := c.PutPoolResilverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolResilverResponse(rsp)
}

func (c *ClientWithResponses) PutPoolResilverWithResponse(ctx context.Context, body PutPoolResilverJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolResilverResponse, error) {
	rsp, err := c.PutPoolResilver(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolResilverResponse(rsp)
}

// GetPoolScrubWithResponse request returning *GetPoolScrubResponse
func (c *ClientWithResponses) GetPoolScrubWithResponse(ctx context.Context, params *GetPoolScrubParams, reqEditors ...RequestEditorFn) (*GetPoolScrubResponse, error) {
	rsp, err := c.GetPoolScrub(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolScrubResponse(rsp)
}

// PostPoolScrubWithBodyWithResponse request with arbitrary body returning *PostPoolScrubResponse
func (c *ClientWithResponses) PostPoolScrubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolScrubResponse, error) {
	rsp, err := c.PostPoolScrubWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolScrubResponse(rsp)
}

func (c *ClientWithResponses) PostPoolScrubWithResponse(ctx context.Context, body PostPoolScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolScrubResponse, error) {
	rsp, err := c.PostPoolScrub(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolScrubResponse(rsp)
}

// DeletePoolScrubIdIdWithResponse request returning *DeletePoolScrubIdIdResponse
func (c *ClientWithResponses) DeletePoolScrubIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePoolScrubIdIdResponse, error) {
	rsp, err := c.DeletePoolScrubIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolScrubIdIdResponse(rsp)
}

// GetPoolScrubIdIdWithResponse request returning *GetPoolScrubIdIdResponse
func (c *ClientWithResponses) GetPoolScrubIdIdWithResponse(ctx context.Context, id int, params *GetPoolScrubIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolScrubIdIdResponse, error) {
	rsp, err := c.GetPoolScrubIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolScrubIdIdResponse(rsp)
}

// PutPoolScrubIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolScrubIdIdResponse
func (c *ClientWithResponses) PutPoolScrubIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolScrubIdIdResponse, error) {
	rsp, err := c.PutPoolScrubIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolScrubIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolScrubIdIdWithResponse(ctx context.Context, id int, body PutPoolScrubIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolScrubIdIdResponse, error) {
	rsp, err := c.PutPoolScrubIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolScrubIdIdResponse(rsp)
}

// PostPoolScrubRunWithBodyWithResponse request with arbitrary body returning *PostPoolScrubRunResponse
func (c *ClientWithResponses) PostPoolScrubRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolScrubRunResponse, error) {
	rsp, err := c.PostPoolScrubRunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolScrubRunResponse(rsp)
}

func (c *ClientWithResponses) PostPoolScrubRunWithResponse(ctx context.Context, body PostPoolScrubRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolScrubRunResponse, error) {
	rsp, err := c.PostPoolScrubRun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolScrubRunResponse(rsp)
}

// GetPoolSnapshottaskWithResponse request returning *GetPoolSnapshottaskResponse
func (c *ClientWithResponses) GetPoolSnapshottaskWithResponse(ctx context.Context, params *GetPoolSnapshottaskParams, reqEditors ...RequestEditorFn) (*GetPoolSnapshottaskResponse, error) {
	rsp, err := c.GetPoolSnapshottask(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolSnapshottaskResponse(rsp)
}

// PostPoolSnapshottaskWithBodyWithResponse request with arbitrary body returning *PostPoolSnapshottaskResponse
func (c *ClientWithResponses) PostPoolSnapshottaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolSnapshottaskResponse, error) {
	rsp, err := c.PostPoolSnapshottaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolSnapshottaskResponse(rsp)
}

func (c *ClientWithResponses) PostPoolSnapshottaskWithResponse(ctx context.Context, body PostPoolSnapshottaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolSnapshottaskResponse, error) {
	rsp, err := c.PostPoolSnapshottask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolSnapshottaskResponse(rsp)
}

// DeletePoolSnapshottaskIdIdWithResponse request returning *DeletePoolSnapshottaskIdIdResponse
func (c *ClientWithResponses) DeletePoolSnapshottaskIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePoolSnapshottaskIdIdResponse, error) {
	rsp, err := c.DeletePoolSnapshottaskIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolSnapshottaskIdIdResponse(rsp)
}

// GetPoolSnapshottaskIdIdWithResponse request returning *GetPoolSnapshottaskIdIdResponse
func (c *ClientWithResponses) GetPoolSnapshottaskIdIdWithResponse(ctx context.Context, id int, params *GetPoolSnapshottaskIdIdParams, reqEditors ...RequestEditorFn) (*GetPoolSnapshottaskIdIdResponse, error) {
	rsp, err := c.GetPoolSnapshottaskIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolSnapshottaskIdIdResponse(rsp)
}

// PutPoolSnapshottaskIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolSnapshottaskIdIdResponse
func (c *ClientWithResponses) PutPoolSnapshottaskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPoolSnapshottaskIdIdResponse, error) {
	rsp, err := c.PutPoolSnapshottaskIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolSnapshottaskIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolSnapshottaskIdIdWithResponse(ctx context.Context, id int, body PutPoolSnapshottaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPoolSnapshottaskIdIdResponse, error) {
	rsp, err := c.PutPoolSnapshottaskIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolSnapshottaskIdIdResponse(rsp)
}

// PostPoolSnapshottaskIdIdRunWithBodyWithResponse request with arbitrary body returning *PostPoolSnapshottaskIdIdRunResponse
func (c *ClientWithResponses) PostPoolSnapshottaskIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolSnapshottaskIdIdRunResponse, error) {
	rsp, err := c.PostPoolSnapshottaskIdIdRunWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolSnapshottaskIdIdRunResponse(rsp)
}

func (c *ClientWithResponses) PostPoolSnapshottaskIdIdRunWithResponse(ctx context.Context, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolSnapshottaskIdIdRunResponse, error) {
	rsp, err := c.PostPoolSnapshottaskIdIdRun(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolSnapshottaskIdIdRunResponse(rsp)
}

// PostPoolUnlockServicesRestartChoicesWithBodyWithResponse request with arbitrary body returning *PostPoolUnlockServicesRestartChoicesResponse
func (c *ClientWithResponses) PostPoolUnlockServicesRestartChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPoolUnlockServicesRestartChoicesResponse, error) {
	rsp, err := c.PostPoolUnlockServicesRestartChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolUnlockServicesRestartChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolUnlockServicesRestartChoicesWithResponse(ctx context.Context, body PostPoolUnlockServicesRestartChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPoolUnlockServicesRestartChoicesResponse, error) {
	rsp, err := c.PostPoolUnlockServicesRestartChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolUnlockServicesRestartChoicesResponse(rsp)
}

// GetReplicationWithResponse request returning *GetReplicationResponse
func (c *ClientWithResponses) GetReplicationWithResponse(ctx context.Context, params *GetReplicationParams, reqEditors ...RequestEditorFn) (*GetReplicationResponse, error) {
	rsp, err := c.GetReplication(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReplicationResponse(rsp)
}

// PostReplicationWithBodyWithResponse request with arbitrary body returning *PostReplicationResponse
func (c *ClientWithResponses) PostReplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationResponse, error) {
	rsp, err := c.PostReplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationWithResponse(ctx context.Context, body PostReplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationResponse, error) {
	rsp, err := c.PostReplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationResponse(rsp)
}

// GetReplicationConfigWithResponse request returning *GetReplicationConfigResponse
func (c *ClientWithResponses) GetReplicationConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReplicationConfigResponse, error) {
	rsp, err := c.GetReplicationConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReplicationConfigResponse(rsp)
}

// PutReplicationConfigWithBodyWithResponse request with arbitrary body returning *PutReplicationConfigResponse
func (c *ClientWithResponses) PutReplicationConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReplicationConfigResponse, error) {
	rsp, err := c.PutReplicationConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReplicationConfigResponse(rsp)
}

func (c *ClientWithResponses) PutReplicationConfigWithResponse(ctx context.Context, body PutReplicationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReplicationConfigResponse, error) {
	rsp, err := c.PutReplicationConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReplicationConfigResponse(rsp)
}

// PostReplicationCountEligibleManualSnapshotsWithBodyWithResponse request with arbitrary body returning *PostReplicationCountEligibleManualSnapshotsResponse
func (c *ClientWithResponses) PostReplicationCountEligibleManualSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationCountEligibleManualSnapshotsResponse, error) {
	rsp, err := c.PostReplicationCountEligibleManualSnapshotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationCountEligibleManualSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationCountEligibleManualSnapshotsWithResponse(ctx context.Context, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationCountEligibleManualSnapshotsResponse, error) {
	rsp, err := c.PostReplicationCountEligibleManualSnapshots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationCountEligibleManualSnapshotsResponse(rsp)
}

// PostReplicationCreateDatasetWithBodyWithResponse request with arbitrary body returning *PostReplicationCreateDatasetResponse
func (c *ClientWithResponses) PostReplicationCreateDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationCreateDatasetResponse, error) {
	rsp, err := c.PostReplicationCreateDatasetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationCreateDatasetResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationCreateDatasetWithResponse(ctx context.Context, body PostReplicationCreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationCreateDatasetResponse, error) {
	rsp, err := c.PostReplicationCreateDataset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationCreateDatasetResponse(rsp)
}

// DeleteReplicationIdIdWithResponse request returning *DeleteReplicationIdIdResponse
func (c *ClientWithResponses) DeleteReplicationIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteReplicationIdIdResponse, error) {
	rsp, err := c.DeleteReplicationIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReplicationIdIdResponse(rsp)
}

// GetReplicationIdIdWithResponse request returning *GetReplicationIdIdResponse
func (c *ClientWithResponses) GetReplicationIdIdWithResponse(ctx context.Context, id int, params *GetReplicationIdIdParams, reqEditors ...RequestEditorFn) (*GetReplicationIdIdResponse, error) {
	rsp, err := c.GetReplicationIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReplicationIdIdResponse(rsp)
}

// PutReplicationIdIdWithBodyWithResponse request with arbitrary body returning *PutReplicationIdIdResponse
func (c *ClientWithResponses) PutReplicationIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReplicationIdIdResponse, error) {
	rsp, err := c.PutReplicationIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReplicationIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutReplicationIdIdWithResponse(ctx context.Context, id int, body PutReplicationIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReplicationIdIdResponse, error) {
	rsp, err := c.PutReplicationIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReplicationIdIdResponse(rsp)
}

// PostReplicationIdIdRestoreWithBodyWithResponse request with arbitrary body returning *PostReplicationIdIdRestoreResponse
func (c *ClientWithResponses) PostReplicationIdIdRestoreWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationIdIdRestoreResponse, error) {
	rsp, err := c.PostReplicationIdIdRestoreWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationIdIdRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationIdIdRestoreWithResponse(ctx context.Context, id int, body PostReplicationIdIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationIdIdRestoreResponse, error) {
	rsp, err := c.PostReplicationIdIdRestore(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationIdIdRestoreResponse(rsp)
}

// PostReplicationIdIdRunWithBodyWithResponse request with arbitrary body returning *PostReplicationIdIdRunResponse
func (c *ClientWithResponses) PostReplicationIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationIdIdRunResponse, error) {
	rsp, err := c.PostReplicationIdIdRunWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationIdIdRunResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationIdIdRunWithResponse(ctx context.Context, id int, body PostReplicationIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationIdIdRunResponse, error) {
	rsp, err := c.PostReplicationIdIdRun(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationIdIdRunResponse(rsp)
}

// PostReplicationListDatasetsWithBodyWithResponse request with arbitrary body returning *PostReplicationListDatasetsResponse
func (c *ClientWithResponses) PostReplicationListDatasetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationListDatasetsResponse, error) {
	rsp, err := c.PostReplicationListDatasetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationListDatasetsResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationListDatasetsWithResponse(ctx context.Context, body PostReplicationListDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationListDatasetsResponse, error) {
	rsp, err := c.PostReplicationListDatasets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationListDatasetsResponse(rsp)
}

// GetReplicationListNamingSchemasWithResponse request returning *GetReplicationListNamingSchemasResponse
func (c *ClientWithResponses) GetReplicationListNamingSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReplicationListNamingSchemasResponse, error) {
	rsp, err := c.GetReplicationListNamingSchemas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReplicationListNamingSchemasResponse(rsp)
}

// PostReplicationTargetUnmatchedSnapshotsWithBodyWithResponse request with arbitrary body returning *PostReplicationTargetUnmatchedSnapshotsResponse
func (c *ClientWithResponses) PostReplicationTargetUnmatchedSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReplicationTargetUnmatchedSnapshotsResponse, error) {
	rsp, err := c.PostReplicationTargetUnmatchedSnapshotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationTargetUnmatchedSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationTargetUnmatchedSnapshotsWithResponse(ctx context.Context, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReplicationTargetUnmatchedSnapshotsResponse, error) {
	rsp, err := c.PostReplicationTargetUnmatchedSnapshots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationTargetUnmatchedSnapshotsResponse(rsp)
}

// GetReportingWithResponse request returning *GetReportingResponse
func (c *ClientWithResponses) GetReportingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReportingResponse, error) {
	rsp, err := c.GetReporting(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportingResponse(rsp)
}

// PutReportingWithBodyWithResponse request with arbitrary body returning *PutReportingResponse
func (c *ClientWithResponses) PutReportingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReportingResponse, error) {
	rsp, err := c.PutReportingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReportingResponse(rsp)
}

func (c *ClientWithResponses) PutReportingWithResponse(ctx context.Context, body PutReportingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReportingResponse, error) {
	rsp, err := c.PutReporting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReportingResponse(rsp)
}

// PostReportingGetDataWithBodyWithResponse request with arbitrary body returning *PostReportingGetDataResponse
func (c *ClientWithResponses) PostReportingGetDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReportingGetDataResponse, error) {
	rsp, err := c.PostReportingGetDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReportingGetDataResponse(rsp)
}

func (c *ClientWithResponses) PostReportingGetDataWithResponse(ctx context.Context, body PostReportingGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReportingGetDataResponse, error) {
	rsp, err := c.PostReportingGetData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReportingGetDataResponse(rsp)
}

// GetReportingGraphsWithResponse request returning *GetReportingGraphsResponse
func (c *ClientWithResponses) GetReportingGraphsWithResponse(ctx context.Context, params *GetReportingGraphsParams, reqEditors ...RequestEditorFn) (*GetReportingGraphsResponse, error) {
	rsp, err := c.GetReportingGraphs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportingGraphsResponse(rsp)
}

// PostRouteIpv4gwReachableWithBodyWithResponse request with arbitrary body returning *PostRouteIpv4gwReachableResponse
func (c *ClientWithResponses) PostRouteIpv4gwReachableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRouteIpv4gwReachableResponse, error) {
	rsp, err := c.PostRouteIpv4gwReachableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRouteIpv4gwReachableResponse(rsp)
}

func (c *ClientWithResponses) PostRouteIpv4gwReachableWithResponse(ctx context.Context, body PostRouteIpv4gwReachableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRouteIpv4gwReachableResponse, error) {
	rsp, err := c.PostRouteIpv4gwReachable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRouteIpv4gwReachableResponse(rsp)
}

// GetRouteSystemRoutesWithResponse request returning *GetRouteSystemRoutesResponse
func (c *ClientWithResponses) GetRouteSystemRoutesWithResponse(ctx context.Context, params *GetRouteSystemRoutesParams, reqEditors ...RequestEditorFn) (*GetRouteSystemRoutesResponse, error) {
	rsp, err := c.GetRouteSystemRoutes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRouteSystemRoutesResponse(rsp)
}

// GetRsyncdWithResponse request returning *GetRsyncdResponse
func (c *ClientWithResponses) GetRsyncdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRsyncdResponse, error) {
	rsp, err := c.GetRsyncd(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRsyncdResponse(rsp)
}

// PutRsyncdWithBodyWithResponse request with arbitrary body returning *PutRsyncdResponse
func (c *ClientWithResponses) PutRsyncdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRsyncdResponse, error) {
	rsp, err := c.PutRsyncdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRsyncdResponse(rsp)
}

func (c *ClientWithResponses) PutRsyncdWithResponse(ctx context.Context, body PutRsyncdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRsyncdResponse, error) {
	rsp, err := c.PutRsyncd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRsyncdResponse(rsp)
}

// GetRsyncmodWithResponse request returning *GetRsyncmodResponse
func (c *ClientWithResponses) GetRsyncmodWithResponse(ctx context.Context, params *GetRsyncmodParams, reqEditors ...RequestEditorFn) (*GetRsyncmodResponse, error) {
	rsp, err := c.GetRsyncmod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRsyncmodResponse(rsp)
}

// PostRsyncmodWithBodyWithResponse request with arbitrary body returning *PostRsyncmodResponse
func (c *ClientWithResponses) PostRsyncmodWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRsyncmodResponse, error) {
	rsp, err := c.PostRsyncmodWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRsyncmodResponse(rsp)
}

func (c *ClientWithResponses) PostRsyncmodWithResponse(ctx context.Context, body PostRsyncmodJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRsyncmodResponse, error) {
	rsp, err := c.PostRsyncmod(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRsyncmodResponse(rsp)
}

// DeleteRsyncmodIdIdWithResponse request returning *DeleteRsyncmodIdIdResponse
func (c *ClientWithResponses) DeleteRsyncmodIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRsyncmodIdIdResponse, error) {
	rsp, err := c.DeleteRsyncmodIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRsyncmodIdIdResponse(rsp)
}

// GetRsyncmodIdIdWithResponse request returning *GetRsyncmodIdIdResponse
func (c *ClientWithResponses) GetRsyncmodIdIdWithResponse(ctx context.Context, id int, params *GetRsyncmodIdIdParams, reqEditors ...RequestEditorFn) (*GetRsyncmodIdIdResponse, error) {
	rsp, err := c.GetRsyncmodIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRsyncmodIdIdResponse(rsp)
}

// PutRsyncmodIdIdWithBodyWithResponse request with arbitrary body returning *PutRsyncmodIdIdResponse
func (c *ClientWithResponses) PutRsyncmodIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRsyncmodIdIdResponse, error) {
	rsp, err := c.PutRsyncmodIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRsyncmodIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutRsyncmodIdIdWithResponse(ctx context.Context, id int, body PutRsyncmodIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRsyncmodIdIdResponse, error) {
	rsp, err := c.PutRsyncmodIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRsyncmodIdIdResponse(rsp)
}

// GetRsynctaskWithResponse request returning *GetRsynctaskResponse
func (c *ClientWithResponses) GetRsynctaskWithResponse(ctx context.Context, params *GetRsynctaskParams, reqEditors ...RequestEditorFn) (*GetRsynctaskResponse, error) {
	rsp, err := c.GetRsynctask(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRsynctaskResponse(rsp)
}

// PostRsynctaskWithBodyWithResponse request with arbitrary body returning *PostRsynctaskResponse
func (c *ClientWithResponses) PostRsynctaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRsynctaskResponse, error) {
	rsp, err := c.PostRsynctaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRsynctaskResponse(rsp)
}

func (c *ClientWithResponses) PostRsynctaskWithResponse(ctx context.Context, body PostRsynctaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRsynctaskResponse, error) {
	rsp, err := c.PostRsynctask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRsynctaskResponse(rsp)
}

// DeleteRsynctaskIdIdWithResponse request returning *DeleteRsynctaskIdIdResponse
func (c *ClientWithResponses) DeleteRsynctaskIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRsynctaskIdIdResponse, error) {
	rsp, err := c.DeleteRsynctaskIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRsynctaskIdIdResponse(rsp)
}

// GetRsynctaskIdIdWithResponse request returning *GetRsynctaskIdIdResponse
func (c *ClientWithResponses) GetRsynctaskIdIdWithResponse(ctx context.Context, id int, params *GetRsynctaskIdIdParams, reqEditors ...RequestEditorFn) (*GetRsynctaskIdIdResponse, error) {
	rsp, err := c.GetRsynctaskIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRsynctaskIdIdResponse(rsp)
}

// PutRsynctaskIdIdWithBodyWithResponse request with arbitrary body returning *PutRsynctaskIdIdResponse
func (c *ClientWithResponses) PutRsynctaskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRsynctaskIdIdResponse, error) {
	rsp, err := c.PutRsynctaskIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRsynctaskIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutRsynctaskIdIdWithResponse(ctx context.Context, id int, body PutRsynctaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRsynctaskIdIdResponse, error) {
	rsp, err := c.PutRsynctaskIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRsynctaskIdIdResponse(rsp)
}

// PostRsynctaskIdIdRunWithBodyWithResponse request with arbitrary body returning *PostRsynctaskIdIdRunResponse
func (c *ClientWithResponses) PostRsynctaskIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRsynctaskIdIdRunResponse, error) {
	rsp, err := c.PostRsynctaskIdIdRunWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRsynctaskIdIdRunResponse(rsp)
}

func (c *ClientWithResponses) PostRsynctaskIdIdRunWithResponse(ctx context.Context, id int, body PostRsynctaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRsynctaskIdIdRunResponse, error) {
	rsp, err := c.PostRsynctaskIdIdRun(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRsynctaskIdIdRunResponse(rsp)
}

// GetS3WithResponse request returning *GetS3Response
func (c *ClientWithResponses) GetS3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetS3Response, error) {
	rsp, err := c.GetS3(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetS3Response(rsp)
}

// PutS3WithBodyWithResponse request with arbitrary body returning *PutS3Response
func (c *ClientWithResponses) PutS3WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutS3Response, error) {
	rsp, err := c.PutS3WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutS3Response(rsp)
}

func (c *ClientWithResponses) PutS3WithResponse(ctx context.Context, body PutS3JSONRequestBody, reqEditors ...RequestEditorFn) (*PutS3Response, error) {
	rsp, err := c.PutS3(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutS3Response(rsp)
}

// GetS3BindipChoicesWithResponse request returning *GetS3BindipChoicesResponse
func (c *ClientWithResponses) GetS3BindipChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetS3BindipChoicesResponse, error) {
	rsp, err := c.GetS3BindipChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetS3BindipChoicesResponse(rsp)
}

// GetSensorQueryWithResponse request returning *GetSensorQueryResponse
func (c *ClientWithResponses) GetSensorQueryWithResponse(ctx context.Context, params *GetSensorQueryParams, reqEditors ...RequestEditorFn) (*GetSensorQueryResponse, error) {
	rsp, err := c.GetSensorQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSensorQueryResponse(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, params *GetServiceParams, reqEditors ...RequestEditorFn) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// GetServiceIdIdWithResponse request returning *GetServiceIdIdResponse
func (c *ClientWithResponses) GetServiceIdIdWithResponse(ctx context.Context, id int, params *GetServiceIdIdParams, reqEditors ...RequestEditorFn) (*GetServiceIdIdResponse, error) {
	rsp, err := c.GetServiceIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceIdIdResponse(rsp)
}

// PutServiceIdIdWithBodyWithResponse request with arbitrary body returning *PutServiceIdIdResponse
func (c *ClientWithResponses) PutServiceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceIdIdResponse, error) {
	rsp, err := c.PutServiceIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutServiceIdIdWithResponse(ctx context.Context, id int, body PutServiceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceIdIdResponse, error) {
	rsp, err := c.PutServiceIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceIdIdResponse(rsp)
}

// PostServiceReloadWithBodyWithResponse request with arbitrary body returning *PostServiceReloadResponse
func (c *ClientWithResponses) PostServiceReloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceReloadResponse, error) {
	rsp, err := c.PostServiceReloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceReloadResponse(rsp)
}

func (c *ClientWithResponses) PostServiceReloadWithResponse(ctx context.Context, body PostServiceReloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceReloadResponse, error) {
	rsp, err := c.PostServiceReload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceReloadResponse(rsp)
}

// PostServiceRestartWithBodyWithResponse request with arbitrary body returning *PostServiceRestartResponse
func (c *ClientWithResponses) PostServiceRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceRestartResponse, error) {
	rsp, err := c.PostServiceRestartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceRestartResponse(rsp)
}

func (c *ClientWithResponses) PostServiceRestartWithResponse(ctx context.Context, body PostServiceRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceRestartResponse, error) {
	rsp, err := c.PostServiceRestart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceRestartResponse(rsp)
}

// PostServiceStartWithBodyWithResponse request with arbitrary body returning *PostServiceStartResponse
func (c *ClientWithResponses) PostServiceStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceStartResponse, error) {
	rsp, err := c.PostServiceStartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceStartResponse(rsp)
}

func (c *ClientWithResponses) PostServiceStartWithResponse(ctx context.Context, body PostServiceStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceStartResponse, error) {
	rsp, err := c.PostServiceStart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceStartResponse(rsp)
}

// GetServiceStartedWithResponse request returning *GetServiceStartedResponse
func (c *ClientWithResponses) GetServiceStartedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceStartedResponse, error) {
	rsp, err := c.GetServiceStarted(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceStartedResponse(rsp)
}

// PostServiceStopWithBodyWithResponse request with arbitrary body returning *PostServiceStopResponse
func (c *ClientWithResponses) PostServiceStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceStopResponse, error) {
	rsp, err := c.PostServiceStopWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceStopResponse(rsp)
}

func (c *ClientWithResponses) PostServiceStopWithResponse(ctx context.Context, body PostServiceStopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceStopResponse, error) {
	rsp, err := c.PostServiceStop(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceStopResponse(rsp)
}

// PostServiceTerminateProcessWithBodyWithResponse request with arbitrary body returning *PostServiceTerminateProcessResponse
func (c *ClientWithResponses) PostServiceTerminateProcessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceTerminateProcessResponse, error) {
	rsp, err := c.PostServiceTerminateProcessWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceTerminateProcessResponse(rsp)
}

func (c *ClientWithResponses) PostServiceTerminateProcessWithResponse(ctx context.Context, body PostServiceTerminateProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceTerminateProcessResponse, error) {
	rsp, err := c.PostServiceTerminateProcess(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceTerminateProcessResponse(rsp)
}

// GetSharingAfpWithResponse request returning *GetSharingAfpResponse
func (c *ClientWithResponses) GetSharingAfpWithResponse(ctx context.Context, params *GetSharingAfpParams, reqEditors ...RequestEditorFn) (*GetSharingAfpResponse, error) {
	rsp, err := c.GetSharingAfp(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingAfpResponse(rsp)
}

// PostSharingAfpWithBodyWithResponse request with arbitrary body returning *PostSharingAfpResponse
func (c *ClientWithResponses) PostSharingAfpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharingAfpResponse, error) {
	rsp, err := c.PostSharingAfpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingAfpResponse(rsp)
}

func (c *ClientWithResponses) PostSharingAfpWithResponse(ctx context.Context, body PostSharingAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharingAfpResponse, error) {
	rsp, err := c.PostSharingAfp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingAfpResponse(rsp)
}

// DeleteSharingAfpIdIdWithResponse request returning *DeleteSharingAfpIdIdResponse
func (c *ClientWithResponses) DeleteSharingAfpIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSharingAfpIdIdResponse, error) {
	rsp, err := c.DeleteSharingAfpIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSharingAfpIdIdResponse(rsp)
}

// GetSharingAfpIdIdWithResponse request returning *GetSharingAfpIdIdResponse
func (c *ClientWithResponses) GetSharingAfpIdIdWithResponse(ctx context.Context, id int, params *GetSharingAfpIdIdParams, reqEditors ...RequestEditorFn) (*GetSharingAfpIdIdResponse, error) {
	rsp, err := c.GetSharingAfpIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingAfpIdIdResponse(rsp)
}

// PutSharingAfpIdIdWithBodyWithResponse request with arbitrary body returning *PutSharingAfpIdIdResponse
func (c *ClientWithResponses) PutSharingAfpIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSharingAfpIdIdResponse, error) {
	rsp, err := c.PutSharingAfpIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingAfpIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSharingAfpIdIdWithResponse(ctx context.Context, id int, body PutSharingAfpIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSharingAfpIdIdResponse, error) {
	rsp, err := c.PutSharingAfpIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingAfpIdIdResponse(rsp)
}

// GetSharingNfsWithResponse request returning *GetSharingNfsResponse
func (c *ClientWithResponses) GetSharingNfsWithResponse(ctx context.Context, params *GetSharingNfsParams, reqEditors ...RequestEditorFn) (*GetSharingNfsResponse, error) {
	rsp, err := c.GetSharingNfs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingNfsResponse(rsp)
}

// PostSharingNfsWithBodyWithResponse request with arbitrary body returning *PostSharingNfsResponse
func (c *ClientWithResponses) PostSharingNfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharingNfsResponse, error) {
	rsp, err := c.PostSharingNfsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingNfsResponse(rsp)
}

func (c *ClientWithResponses) PostSharingNfsWithResponse(ctx context.Context, body PostSharingNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharingNfsResponse, error) {
	rsp, err := c.PostSharingNfs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingNfsResponse(rsp)
}

// GetSharingNfsHumanIdentifierWithResponse request returning *GetSharingNfsHumanIdentifierResponse
func (c *ClientWithResponses) GetSharingNfsHumanIdentifierWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSharingNfsHumanIdentifierResponse, error) {
	rsp, err := c.GetSharingNfsHumanIdentifier(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingNfsHumanIdentifierResponse(rsp)
}

// DeleteSharingNfsIdIdWithResponse request returning *DeleteSharingNfsIdIdResponse
func (c *ClientWithResponses) DeleteSharingNfsIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSharingNfsIdIdResponse, error) {
	rsp, err := c.DeleteSharingNfsIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSharingNfsIdIdResponse(rsp)
}

// GetSharingNfsIdIdWithResponse request returning *GetSharingNfsIdIdResponse
func (c *ClientWithResponses) GetSharingNfsIdIdWithResponse(ctx context.Context, id int, params *GetSharingNfsIdIdParams, reqEditors ...RequestEditorFn) (*GetSharingNfsIdIdResponse, error) {
	rsp, err := c.GetSharingNfsIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingNfsIdIdResponse(rsp)
}

// PutSharingNfsIdIdWithBodyWithResponse request with arbitrary body returning *PutSharingNfsIdIdResponse
func (c *ClientWithResponses) PutSharingNfsIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSharingNfsIdIdResponse, error) {
	rsp, err := c.PutSharingNfsIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingNfsIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSharingNfsIdIdWithResponse(ctx context.Context, id int, body PutSharingNfsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSharingNfsIdIdResponse, error) {
	rsp, err := c.PutSharingNfsIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingNfsIdIdResponse(rsp)
}

// GetSharingSmbWithResponse request returning *GetSharingSmbResponse
func (c *ClientWithResponses) GetSharingSmbWithResponse(ctx context.Context, params *GetSharingSmbParams, reqEditors ...RequestEditorFn) (*GetSharingSmbResponse, error) {
	rsp, err := c.GetSharingSmb(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingSmbResponse(rsp)
}

// PostSharingSmbWithBodyWithResponse request with arbitrary body returning *PostSharingSmbResponse
func (c *ClientWithResponses) PostSharingSmbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharingSmbResponse, error) {
	rsp, err := c.PostSharingSmbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingSmbResponse(rsp)
}

func (c *ClientWithResponses) PostSharingSmbWithResponse(ctx context.Context, body PostSharingSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharingSmbResponse, error) {
	rsp, err := c.PostSharingSmb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingSmbResponse(rsp)
}

// DeleteSharingSmbIdIdWithResponse request returning *DeleteSharingSmbIdIdResponse
func (c *ClientWithResponses) DeleteSharingSmbIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSharingSmbIdIdResponse, error) {
	rsp, err := c.DeleteSharingSmbIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSharingSmbIdIdResponse(rsp)
}

// GetSharingSmbIdIdWithResponse request returning *GetSharingSmbIdIdResponse
func (c *ClientWithResponses) GetSharingSmbIdIdWithResponse(ctx context.Context, id int, params *GetSharingSmbIdIdParams, reqEditors ...RequestEditorFn) (*GetSharingSmbIdIdResponse, error) {
	rsp, err := c.GetSharingSmbIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingSmbIdIdResponse(rsp)
}

// PutSharingSmbIdIdWithBodyWithResponse request with arbitrary body returning *PutSharingSmbIdIdResponse
func (c *ClientWithResponses) PutSharingSmbIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSharingSmbIdIdResponse, error) {
	rsp, err := c.PutSharingSmbIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingSmbIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSharingSmbIdIdWithResponse(ctx context.Context, id int, body PutSharingSmbIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSharingSmbIdIdResponse, error) {
	rsp, err := c.PutSharingSmbIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingSmbIdIdResponse(rsp)
}

// GetSharingSmbPresetsWithResponse request returning *GetSharingSmbPresetsResponse
func (c *ClientWithResponses) GetSharingSmbPresetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSharingSmbPresetsResponse, error) {
	rsp, err := c.GetSharingSmbPresets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingSmbPresetsResponse(rsp)
}

// GetSharingWebdavWithResponse request returning *GetSharingWebdavResponse
func (c *ClientWithResponses) GetSharingWebdavWithResponse(ctx context.Context, params *GetSharingWebdavParams, reqEditors ...RequestEditorFn) (*GetSharingWebdavResponse, error) {
	rsp, err := c.GetSharingWebdav(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingWebdavResponse(rsp)
}

// PostSharingWebdavWithBodyWithResponse request with arbitrary body returning *PostSharingWebdavResponse
func (c *ClientWithResponses) PostSharingWebdavWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharingWebdavResponse, error) {
	rsp, err := c.PostSharingWebdavWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingWebdavResponse(rsp)
}

func (c *ClientWithResponses) PostSharingWebdavWithResponse(ctx context.Context, body PostSharingWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharingWebdavResponse, error) {
	rsp, err := c.PostSharingWebdav(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingWebdavResponse(rsp)
}

// DeleteSharingWebdavIdIdWithResponse request returning *DeleteSharingWebdavIdIdResponse
func (c *ClientWithResponses) DeleteSharingWebdavIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSharingWebdavIdIdResponse, error) {
	rsp, err := c.DeleteSharingWebdavIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSharingWebdavIdIdResponse(rsp)
}

// GetSharingWebdavIdIdWithResponse request returning *GetSharingWebdavIdIdResponse
func (c *ClientWithResponses) GetSharingWebdavIdIdWithResponse(ctx context.Context, id int, params *GetSharingWebdavIdIdParams, reqEditors ...RequestEditorFn) (*GetSharingWebdavIdIdResponse, error) {
	rsp, err := c.GetSharingWebdavIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingWebdavIdIdResponse(rsp)
}

// PutSharingWebdavIdIdWithBodyWithResponse request with arbitrary body returning *PutSharingWebdavIdIdResponse
func (c *ClientWithResponses) PutSharingWebdavIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSharingWebdavIdIdResponse, error) {
	rsp, err := c.PutSharingWebdavIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingWebdavIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSharingWebdavIdIdWithResponse(ctx context.Context, id int, body PutSharingWebdavIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSharingWebdavIdIdResponse, error) {
	rsp, err := c.PutSharingWebdavIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingWebdavIdIdResponse(rsp)
}

// GetSmartWithResponse request returning *GetSmartResponse
func (c *ClientWithResponses) GetSmartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmartResponse, error) {
	rsp, err := c.GetSmart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartResponse(rsp)
}

// PutSmartWithBodyWithResponse request with arbitrary body returning *PutSmartResponse
func (c *ClientWithResponses) PutSmartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSmartResponse, error) {
	rsp, err := c.PutSmartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSmartResponse(rsp)
}

func (c *ClientWithResponses) PutSmartWithResponse(ctx context.Context, body PutSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSmartResponse, error) {
	rsp, err := c.PutSmart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSmartResponse(rsp)
}

// GetSmartTestWithResponse request returning *GetSmartTestResponse
func (c *ClientWithResponses) GetSmartTestWithResponse(ctx context.Context, params *GetSmartTestParams, reqEditors ...RequestEditorFn) (*GetSmartTestResponse, error) {
	rsp, err := c.GetSmartTest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartTestResponse(rsp)
}

// PostSmartTestWithBodyWithResponse request with arbitrary body returning *PostSmartTestResponse
func (c *ClientWithResponses) PostSmartTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmartTestResponse, error) {
	rsp, err := c.PostSmartTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmartTestResponse(rsp)
}

func (c *ClientWithResponses) PostSmartTestWithResponse(ctx context.Context, body PostSmartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmartTestResponse, error) {
	rsp, err := c.PostSmartTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmartTestResponse(rsp)
}

// PostSmartTestDiskChoicesWithBodyWithResponse request with arbitrary body returning *PostSmartTestDiskChoicesResponse
func (c *ClientWithResponses) PostSmartTestDiskChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmartTestDiskChoicesResponse, error) {
	rsp, err := c.PostSmartTestDiskChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmartTestDiskChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostSmartTestDiskChoicesWithResponse(ctx context.Context, body PostSmartTestDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmartTestDiskChoicesResponse, error) {
	rsp, err := c.PostSmartTestDiskChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmartTestDiskChoicesResponse(rsp)
}

// DeleteSmartTestIdIdWithResponse request returning *DeleteSmartTestIdIdResponse
func (c *ClientWithResponses) DeleteSmartTestIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSmartTestIdIdResponse, error) {
	rsp, err := c.DeleteSmartTestIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmartTestIdIdResponse(rsp)
}

// GetSmartTestIdIdWithResponse request returning *GetSmartTestIdIdResponse
func (c *ClientWithResponses) GetSmartTestIdIdWithResponse(ctx context.Context, id int, params *GetSmartTestIdIdParams, reqEditors ...RequestEditorFn) (*GetSmartTestIdIdResponse, error) {
	rsp, err := c.GetSmartTestIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartTestIdIdResponse(rsp)
}

// PutSmartTestIdIdWithBodyWithResponse request with arbitrary body returning *PutSmartTestIdIdResponse
func (c *ClientWithResponses) PutSmartTestIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSmartTestIdIdResponse, error) {
	rsp, err := c.PutSmartTestIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSmartTestIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSmartTestIdIdWithResponse(ctx context.Context, id int, body PutSmartTestIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSmartTestIdIdResponse, error) {
	rsp, err := c.PutSmartTestIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSmartTestIdIdResponse(rsp)
}

// PostSmartTestManualTestWithBodyWithResponse request with arbitrary body returning *PostSmartTestManualTestResponse
func (c *ClientWithResponses) PostSmartTestManualTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmartTestManualTestResponse, error) {
	rsp, err := c.PostSmartTestManualTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmartTestManualTestResponse(rsp)
}

func (c *ClientWithResponses) PostSmartTestManualTestWithResponse(ctx context.Context, body PostSmartTestManualTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmartTestManualTestResponse, error) {
	rsp, err := c.PostSmartTestManualTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmartTestManualTestResponse(rsp)
}

// GetSmartTestResultsWithResponse request returning *GetSmartTestResultsResponse
func (c *ClientWithResponses) GetSmartTestResultsWithResponse(ctx context.Context, params *GetSmartTestResultsParams, reqEditors ...RequestEditorFn) (*GetSmartTestResultsResponse, error) {
	rsp, err := c.GetSmartTestResults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartTestResultsResponse(rsp)
}

// GetSmbWithResponse request returning *GetSmbResponse
func (c *ClientWithResponses) GetSmbWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbResponse, error) {
	rsp, err := c.GetSmb(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbResponse(rsp)
}

// PutSmbWithBodyWithResponse request with arbitrary body returning *PutSmbResponse
func (c *ClientWithResponses) PutSmbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSmbResponse, error) {
	rsp, err := c.PutSmbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSmbResponse(rsp)
}

func (c *ClientWithResponses) PutSmbWithResponse(ctx context.Context, body PutSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSmbResponse, error) {
	rsp, err := c.PutSmb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSmbResponse(rsp)
}

// GetSmbBindipChoicesWithResponse request returning *GetSmbBindipChoicesResponse
func (c *ClientWithResponses) GetSmbBindipChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbBindipChoicesResponse, error) {
	rsp, err := c.GetSmbBindipChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbBindipChoicesResponse(rsp)
}

// GetSmbDomainChoicesWithResponse request returning *GetSmbDomainChoicesResponse
func (c *ClientWithResponses) GetSmbDomainChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbDomainChoicesResponse, error) {
	rsp, err := c.GetSmbDomainChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbDomainChoicesResponse(rsp)
}

// PostSmbGetRemoteAclWithBodyWithResponse request with arbitrary body returning *PostSmbGetRemoteAclResponse
func (c *ClientWithResponses) PostSmbGetRemoteAclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmbGetRemoteAclResponse, error) {
	rsp, err := c.PostSmbGetRemoteAclWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbGetRemoteAclResponse(rsp)
}

func (c *ClientWithResponses) PostSmbGetRemoteAclWithResponse(ctx context.Context, body PostSmbGetRemoteAclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmbGetRemoteAclResponse, error) {
	rsp, err := c.PostSmbGetRemoteAcl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbGetRemoteAclResponse(rsp)
}

// GetSmbSharesecWithResponse request returning *GetSmbSharesecResponse
func (c *ClientWithResponses) GetSmbSharesecWithResponse(ctx context.Context, params *GetSmbSharesecParams, reqEditors ...RequestEditorFn) (*GetSmbSharesecResponse, error) {
	rsp, err := c.GetSmbSharesec(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbSharesecResponse(rsp)
}

// PostSmbSharesecWithBodyWithResponse request with arbitrary body returning *PostSmbSharesecResponse
func (c *ClientWithResponses) PostSmbSharesecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmbSharesecResponse, error) {
	rsp, err := c.PostSmbSharesecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbSharesecResponse(rsp)
}

func (c *ClientWithResponses) PostSmbSharesecWithResponse(ctx context.Context, body PostSmbSharesecJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmbSharesecResponse, error) {
	rsp, err := c.PostSmbSharesec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbSharesecResponse(rsp)
}

// PostSmbSharesecGetaclWithBodyWithResponse request with arbitrary body returning *PostSmbSharesecGetaclResponse
func (c *ClientWithResponses) PostSmbSharesecGetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmbSharesecGetaclResponse, error) {
	rsp, err := c.PostSmbSharesecGetaclWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbSharesecGetaclResponse(rsp)
}

func (c *ClientWithResponses) PostSmbSharesecGetaclWithResponse(ctx context.Context, body PostSmbSharesecGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmbSharesecGetaclResponse, error) {
	rsp, err := c.PostSmbSharesecGetacl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbSharesecGetaclResponse(rsp)
}

// DeleteSmbSharesecIdIdWithResponse request returning *DeleteSmbSharesecIdIdResponse
func (c *ClientWithResponses) DeleteSmbSharesecIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSmbSharesecIdIdResponse, error) {
	rsp, err := c.DeleteSmbSharesecIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmbSharesecIdIdResponse(rsp)
}

// GetSmbSharesecIdIdWithResponse request returning *GetSmbSharesecIdIdResponse
func (c *ClientWithResponses) GetSmbSharesecIdIdWithResponse(ctx context.Context, id int, params *GetSmbSharesecIdIdParams, reqEditors ...RequestEditorFn) (*GetSmbSharesecIdIdResponse, error) {
	rsp, err := c.GetSmbSharesecIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbSharesecIdIdResponse(rsp)
}

// PutSmbSharesecIdIdWithBodyWithResponse request with arbitrary body returning *PutSmbSharesecIdIdResponse
func (c *ClientWithResponses) PutSmbSharesecIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSmbSharesecIdIdResponse, error) {
	rsp, err := c.PutSmbSharesecIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSmbSharesecIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSmbSharesecIdIdWithResponse(ctx context.Context, id int, body PutSmbSharesecIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSmbSharesecIdIdResponse, error) {
	rsp, err := c.PutSmbSharesecIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSmbSharesecIdIdResponse(rsp)
}

// GetSmbSharesecSynchronizeAclsWithResponse request returning *GetSmbSharesecSynchronizeAclsResponse
func (c *ClientWithResponses) GetSmbSharesecSynchronizeAclsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbSharesecSynchronizeAclsResponse, error) {
	rsp, err := c.GetSmbSharesecSynchronizeAcls(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbSharesecSynchronizeAclsResponse(rsp)
}

// PostSmbStatusWithBodyWithResponse request with arbitrary body returning *PostSmbStatusResponse
func (c *ClientWithResponses) PostSmbStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmbStatusResponse, error) {
	rsp, err := c.PostSmbStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbStatusResponse(rsp)
}

func (c *ClientWithResponses) PostSmbStatusWithResponse(ctx context.Context, body PostSmbStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSmbStatusResponse, error) {
	rsp, err := c.PostSmbStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbStatusResponse(rsp)
}

// GetSmbUnixcharsetChoicesWithResponse request returning *GetSmbUnixcharsetChoicesResponse
func (c *ClientWithResponses) GetSmbUnixcharsetChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSmbUnixcharsetChoicesResponse, error) {
	rsp, err := c.GetSmbUnixcharsetChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbUnixcharsetChoicesResponse(rsp)
}

// GetSnmpWithResponse request returning *GetSnmpResponse
func (c *ClientWithResponses) GetSnmpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSnmpResponse, error) {
	rsp, err := c.GetSnmp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpResponse(rsp)
}

// PutSnmpWithBodyWithResponse request with arbitrary body returning *PutSnmpResponse
func (c *ClientWithResponses) PutSnmpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSnmpResponse, error) {
	rsp, err := c.PutSnmpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSnmpResponse(rsp)
}

func (c *ClientWithResponses) PutSnmpWithResponse(ctx context.Context, body PutSnmpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSnmpResponse, error) {
	rsp, err := c.PutSnmp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSnmpResponse(rsp)
}

// GetSshWithResponse request returning *GetSshResponse
func (c *ClientWithResponses) GetSshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSshResponse, error) {
	rsp, err := c.GetSsh(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSshResponse(rsp)
}

// PutSshWithBodyWithResponse request with arbitrary body returning *PutSshResponse
func (c *ClientWithResponses) PutSshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSshResponse, error) {
	rsp, err := c.PutSshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSshResponse(rsp)
}

func (c *ClientWithResponses) PutSshWithResponse(ctx context.Context, body PutSshJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSshResponse, error) {
	rsp, err := c.PutSsh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSshResponse(rsp)
}

// GetSshBindifaceChoicesWithResponse request returning *GetSshBindifaceChoicesResponse
func (c *ClientWithResponses) GetSshBindifaceChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSshBindifaceChoicesResponse, error) {
	rsp, err := c.GetSshBindifaceChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSshBindifaceChoicesResponse(rsp)
}

// GetStaticrouteWithResponse request returning *GetStaticrouteResponse
func (c *ClientWithResponses) GetStaticrouteWithResponse(ctx context.Context, params *GetStaticrouteParams, reqEditors ...RequestEditorFn) (*GetStaticrouteResponse, error) {
	rsp, err := c.GetStaticroute(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaticrouteResponse(rsp)
}

// PostStaticrouteWithBodyWithResponse request with arbitrary body returning *PostStaticrouteResponse
func (c *ClientWithResponses) PostStaticrouteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStaticrouteResponse, error) {
	rsp, err := c.PostStaticrouteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStaticrouteResponse(rsp)
}

func (c *ClientWithResponses) PostStaticrouteWithResponse(ctx context.Context, body PostStaticrouteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStaticrouteResponse, error) {
	rsp, err := c.PostStaticroute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStaticrouteResponse(rsp)
}

// DeleteStaticrouteIdIdWithResponse request returning *DeleteStaticrouteIdIdResponse
func (c *ClientWithResponses) DeleteStaticrouteIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteStaticrouteIdIdResponse, error) {
	rsp, err := c.DeleteStaticrouteIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStaticrouteIdIdResponse(rsp)
}

// GetStaticrouteIdIdWithResponse request returning *GetStaticrouteIdIdResponse
func (c *ClientWithResponses) GetStaticrouteIdIdWithResponse(ctx context.Context, id int, params *GetStaticrouteIdIdParams, reqEditors ...RequestEditorFn) (*GetStaticrouteIdIdResponse, error) {
	rsp, err := c.GetStaticrouteIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaticrouteIdIdResponse(rsp)
}

// PutStaticrouteIdIdWithBodyWithResponse request with arbitrary body returning *PutStaticrouteIdIdResponse
func (c *ClientWithResponses) PutStaticrouteIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStaticrouteIdIdResponse, error) {
	rsp, err := c.PutStaticrouteIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStaticrouteIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutStaticrouteIdIdWithResponse(ctx context.Context, id int, body PutStaticrouteIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStaticrouteIdIdResponse, error) {
	rsp, err := c.PutStaticrouteIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStaticrouteIdIdResponse(rsp)
}

// PostStatsGetDataWithBodyWithResponse request with arbitrary body returning *PostStatsGetDataResponse
func (c *ClientWithResponses) PostStatsGetDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatsGetDataResponse, error) {
	rsp, err := c.PostStatsGetDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatsGetDataResponse(rsp)
}

func (c *ClientWithResponses) PostStatsGetDataWithResponse(ctx context.Context, body PostStatsGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatsGetDataResponse, error) {
	rsp, err := c.PostStatsGetData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatsGetDataResponse(rsp)
}

// PostStatsGetDatasetInfoWithBodyWithResponse request with arbitrary body returning *PostStatsGetDatasetInfoResponse
func (c *ClientWithResponses) PostStatsGetDatasetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatsGetDatasetInfoResponse, error) {
	rsp, err := c.PostStatsGetDatasetInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatsGetDatasetInfoResponse(rsp)
}

func (c *ClientWithResponses) PostStatsGetDatasetInfoWithResponse(ctx context.Context, body PostStatsGetDatasetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatsGetDatasetInfoResponse, error) {
	rsp, err := c.PostStatsGetDatasetInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatsGetDatasetInfoResponse(rsp)
}

// GetStatsGetSourcesWithResponse request returning *GetStatsGetSourcesResponse
func (c *ClientWithResponses) GetStatsGetSourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsGetSourcesResponse, error) {
	rsp, err := c.GetStatsGetSources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsGetSourcesResponse(rsp)
}

// GetSupportWithResponse request returning *GetSupportResponse
func (c *ClientWithResponses) GetSupportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportResponse, error) {
	rsp, err := c.GetSupport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportResponse(rsp)
}

// PutSupportWithBodyWithResponse request with arbitrary body returning *PutSupportResponse
func (c *ClientWithResponses) PutSupportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSupportResponse, error) {
	rsp, err := c.PutSupportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSupportResponse(rsp)
}

func (c *ClientWithResponses) PutSupportWithResponse(ctx context.Context, body PutSupportJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSupportResponse, error) {
	rsp, err := c.PutSupport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSupportResponse(rsp)
}

// PostSupportFetchCategoriesWithBodyWithResponse request with arbitrary body returning *PostSupportFetchCategoriesResponse
func (c *ClientWithResponses) PostSupportFetchCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSupportFetchCategoriesResponse, error) {
	rsp, err := c.PostSupportFetchCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSupportFetchCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostSupportFetchCategoriesWithResponse(ctx context.Context, body PostSupportFetchCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSupportFetchCategoriesResponse, error) {
	rsp, err := c.PostSupportFetchCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSupportFetchCategoriesResponse(rsp)
}

// GetSupportFieldsWithResponse request returning *GetSupportFieldsResponse
func (c *ClientWithResponses) GetSupportFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportFieldsResponse, error) {
	rsp, err := c.GetSupportFields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportFieldsResponse(rsp)
}

// GetSupportIsAvailableWithResponse request returning *GetSupportIsAvailableResponse
func (c *ClientWithResponses) GetSupportIsAvailableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportIsAvailableResponse, error) {
	rsp, err := c.GetSupportIsAvailable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportIsAvailableResponse(rsp)
}

// GetSupportIsAvailableAndEnabledWithResponse request returning *GetSupportIsAvailableAndEnabledResponse
func (c *ClientWithResponses) GetSupportIsAvailableAndEnabledWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportIsAvailableAndEnabledResponse, error) {
	rsp, err := c.GetSupportIsAvailableAndEnabled(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportIsAvailableAndEnabledResponse(rsp)
}

// PostSupportNewTicketWithBodyWithResponse request with arbitrary body returning *PostSupportNewTicketResponse
func (c *ClientWithResponses) PostSupportNewTicketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSupportNewTicketResponse, error) {
	rsp, err := c.PostSupportNewTicketWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSupportNewTicketResponse(rsp)
}

func (c *ClientWithResponses) PostSupportNewTicketWithResponse(ctx context.Context, body PostSupportNewTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSupportNewTicketResponse, error) {
	rsp, err := c.PostSupportNewTicket(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSupportNewTicketResponse(rsp)
}

// GetSystemAdvancedWithResponse request returning *GetSystemAdvancedResponse
func (c *ClientWithResponses) GetSystemAdvancedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemAdvancedResponse, error) {
	rsp, err := c.GetSystemAdvanced(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAdvancedResponse(rsp)
}

// PutSystemAdvancedWithBodyWithResponse request with arbitrary body returning *PutSystemAdvancedResponse
func (c *ClientWithResponses) PutSystemAdvancedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemAdvancedResponse, error) {
	rsp, err := c.PutSystemAdvancedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemAdvancedResponse(rsp)
}

func (c *ClientWithResponses) PutSystemAdvancedWithResponse(ctx context.Context, body PutSystemAdvancedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemAdvancedResponse, error) {
	rsp, err := c.PutSystemAdvanced(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemAdvancedResponse(rsp)
}

// GetSystemAdvancedSedGlobalPasswordWithResponse request returning *GetSystemAdvancedSedGlobalPasswordResponse
func (c *ClientWithResponses) GetSystemAdvancedSedGlobalPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemAdvancedSedGlobalPasswordResponse, error) {
	rsp, err := c.GetSystemAdvancedSedGlobalPassword(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAdvancedSedGlobalPasswordResponse(rsp)
}

// GetSystemAdvancedSerialPortChoicesWithResponse request returning *GetSystemAdvancedSerialPortChoicesResponse
func (c *ClientWithResponses) GetSystemAdvancedSerialPortChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemAdvancedSerialPortChoicesResponse, error) {
	rsp, err := c.GetSystemAdvancedSerialPortChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAdvancedSerialPortChoicesResponse(rsp)
}

// GetSystemBootIdWithResponse request returning *GetSystemBootIdResponse
func (c *ClientWithResponses) GetSystemBootIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemBootIdResponse, error) {
	rsp, err := c.GetSystemBootId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemBootIdResponse(rsp)
}

// GetSystemEnvironmentWithResponse request returning *GetSystemEnvironmentResponse
func (c *ClientWithResponses) GetSystemEnvironmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemEnvironmentResponse, error) {
	rsp, err := c.GetSystemEnvironment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemEnvironmentResponse(rsp)
}

// PostSystemFeatureEnabledWithBodyWithResponse request with arbitrary body returning *PostSystemFeatureEnabledResponse
func (c *ClientWithResponses) PostSystemFeatureEnabledWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemFeatureEnabledResponse, error) {
	rsp, err := c.PostSystemFeatureEnabledWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemFeatureEnabledResponse(rsp)
}

func (c *ClientWithResponses) PostSystemFeatureEnabledWithResponse(ctx context.Context, body PostSystemFeatureEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemFeatureEnabledResponse, error) {
	rsp, err := c.PostSystemFeatureEnabled(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemFeatureEnabledResponse(rsp)
}

// GetSystemGeneralWithResponse request returning *GetSystemGeneralResponse
func (c *ClientWithResponses) GetSystemGeneralWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralResponse, error) {
	rsp, err := c.GetSystemGeneral(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralResponse(rsp)
}

// PutSystemGeneralWithBodyWithResponse request with arbitrary body returning *PutSystemGeneralResponse
func (c *ClientWithResponses) PutSystemGeneralWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemGeneralResponse, error) {
	rsp, err := c.PutSystemGeneralWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemGeneralResponse(rsp)
}

func (c *ClientWithResponses) PutSystemGeneralWithResponse(ctx context.Context, body PutSystemGeneralJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemGeneralResponse, error) {
	rsp, err := c.PutSystemGeneral(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemGeneralResponse(rsp)
}

// GetSystemGeneralCountryChoicesWithResponse request returning *GetSystemGeneralCountryChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralCountryChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralCountryChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralCountryChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralCountryChoicesResponse(rsp)
}

// GetSystemGeneralKbdmapChoicesWithResponse request returning *GetSystemGeneralKbdmapChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralKbdmapChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralKbdmapChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralKbdmapChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralKbdmapChoicesResponse(rsp)
}

// GetSystemGeneralLanguageChoicesWithResponse request returning *GetSystemGeneralLanguageChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralLanguageChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralLanguageChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralLanguageChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralLanguageChoicesResponse(rsp)
}

// GetSystemGeneralLocalUrlWithResponse request returning *GetSystemGeneralLocalUrlResponse
func (c *ClientWithResponses) GetSystemGeneralLocalUrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralLocalUrlResponse, error) {
	rsp, err := c.GetSystemGeneralLocalUrl(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralLocalUrlResponse(rsp)
}

// GetSystemGeneralTimezoneChoicesWithResponse request returning *GetSystemGeneralTimezoneChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralTimezoneChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralTimezoneChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralTimezoneChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralTimezoneChoicesResponse(rsp)
}

// GetSystemGeneralUiAddressChoicesWithResponse request returning *GetSystemGeneralUiAddressChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralUiAddressChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiAddressChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralUiAddressChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiAddressChoicesResponse(rsp)
}

// GetSystemGeneralUiCertificateChoicesWithResponse request returning *GetSystemGeneralUiCertificateChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralUiCertificateChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiCertificateChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralUiCertificateChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiCertificateChoicesResponse(rsp)
}

// GetSystemGeneralUiHttpsprotocolsChoicesWithResponse request returning *GetSystemGeneralUiHttpsprotocolsChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralUiHttpsprotocolsChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiHttpsprotocolsChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralUiHttpsprotocolsChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiHttpsprotocolsChoicesResponse(rsp)
}

// GetSystemGeneralUiRestartWithBodyWithResponse request with arbitrary body returning *GetSystemGeneralUiRestartResponse
func (c *ClientWithResponses) GetSystemGeneralUiRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiRestartResponse, error) {
	rsp, err := c.GetSystemGeneralUiRestartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiRestartResponse(rsp)
}

func (c *ClientWithResponses) GetSystemGeneralUiRestartWithResponse(ctx context.Context, body GetSystemGeneralUiRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiRestartResponse, error) {
	rsp, err := c.GetSystemGeneralUiRestart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiRestartResponse(rsp)
}

// PostSystemGeneralUiRestartWithBodyWithResponse request with arbitrary body returning *PostSystemGeneralUiRestartResponse
func (c *ClientWithResponses) PostSystemGeneralUiRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemGeneralUiRestartResponse, error) {
	rsp, err := c.PostSystemGeneralUiRestartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemGeneralUiRestartResponse(rsp)
}

func (c *ClientWithResponses) PostSystemGeneralUiRestartWithResponse(ctx context.Context, body PostSystemGeneralUiRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemGeneralUiRestartResponse, error) {
	rsp, err := c.PostSystemGeneralUiRestart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemGeneralUiRestartResponse(rsp)
}

// GetSystemGeneralUiV6addressChoicesWithResponse request returning *GetSystemGeneralUiV6addressChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralUiV6addressChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemGeneralUiV6addressChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralUiV6addressChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiV6addressChoicesResponse(rsp)
}

// GetSystemHostIdWithResponse request returning *GetSystemHostIdResponse
func (c *ClientWithResponses) GetSystemHostIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemHostIdResponse, error) {
	rsp, err := c.GetSystemHostId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemHostIdResponse(rsp)
}

// GetSystemInfoWithResponse request returning *GetSystemInfoResponse
func (c *ClientWithResponses) GetSystemInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemInfoResponse, error) {
	rsp, err := c.GetSystemInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemInfoResponse(rsp)
}

// GetSystemIsFreenasWithResponse request returning *GetSystemIsFreenasResponse
func (c *ClientWithResponses) GetSystemIsFreenasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemIsFreenasResponse, error) {
	rsp, err := c.GetSystemIsFreenas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemIsFreenasResponse(rsp)
}

// PostSystemLicenseUpdateWithBodyWithResponse request with arbitrary body returning *PostSystemLicenseUpdateResponse
func (c *ClientWithResponses) PostSystemLicenseUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemLicenseUpdateResponse, error) {
	rsp, err := c.PostSystemLicenseUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemLicenseUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostSystemLicenseUpdateWithResponse(ctx context.Context, body PostSystemLicenseUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemLicenseUpdateResponse, error) {
	rsp, err := c.PostSystemLicenseUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemLicenseUpdateResponse(rsp)
}

// GetSystemNtpserverWithResponse request returning *GetSystemNtpserverResponse
func (c *ClientWithResponses) GetSystemNtpserverWithResponse(ctx context.Context, params *GetSystemNtpserverParams, reqEditors ...RequestEditorFn) (*GetSystemNtpserverResponse, error) {
	rsp, err := c.GetSystemNtpserver(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemNtpserverResponse(rsp)
}

// PostSystemNtpserverWithBodyWithResponse request with arbitrary body returning *PostSystemNtpserverResponse
func (c *ClientWithResponses) PostSystemNtpserverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemNtpserverResponse, error) {
	rsp, err := c.PostSystemNtpserverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemNtpserverResponse(rsp)
}

func (c *ClientWithResponses) PostSystemNtpserverWithResponse(ctx context.Context, body PostSystemNtpserverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemNtpserverResponse, error) {
	rsp, err := c.PostSystemNtpserver(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemNtpserverResponse(rsp)
}

// DeleteSystemNtpserverIdIdWithResponse request returning *DeleteSystemNtpserverIdIdResponse
func (c *ClientWithResponses) DeleteSystemNtpserverIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSystemNtpserverIdIdResponse, error) {
	rsp, err := c.DeleteSystemNtpserverIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSystemNtpserverIdIdResponse(rsp)
}

// GetSystemNtpserverIdIdWithResponse request returning *GetSystemNtpserverIdIdResponse
func (c *ClientWithResponses) GetSystemNtpserverIdIdWithResponse(ctx context.Context, id int, params *GetSystemNtpserverIdIdParams, reqEditors ...RequestEditorFn) (*GetSystemNtpserverIdIdResponse, error) {
	rsp, err := c.GetSystemNtpserverIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemNtpserverIdIdResponse(rsp)
}

// PutSystemNtpserverIdIdWithBodyWithResponse request with arbitrary body returning *PutSystemNtpserverIdIdResponse
func (c *ClientWithResponses) PutSystemNtpserverIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemNtpserverIdIdResponse, error) {
	rsp, err := c.PutSystemNtpserverIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemNtpserverIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSystemNtpserverIdIdWithResponse(ctx context.Context, id int, body PutSystemNtpserverIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemNtpserverIdIdResponse, error) {
	rsp, err := c.PutSystemNtpserverIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemNtpserverIdIdResponse(rsp)
}

// GetSystemNtpserverTestNtpServerWithResponse request returning *GetSystemNtpserverTestNtpServerResponse
func (c *ClientWithResponses) GetSystemNtpserverTestNtpServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemNtpserverTestNtpServerResponse, error) {
	rsp, err := c.GetSystemNtpserverTestNtpServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemNtpserverTestNtpServerResponse(rsp)
}

// GetSystemProductNameWithResponse request returning *GetSystemProductNameResponse
func (c *ClientWithResponses) GetSystemProductNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemProductNameResponse, error) {
	rsp, err := c.GetSystemProductName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemProductNameResponse(rsp)
}

// GetSystemProductTypeWithResponse request returning *GetSystemProductTypeResponse
func (c *ClientWithResponses) GetSystemProductTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemProductTypeResponse, error) {
	rsp, err := c.GetSystemProductType(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemProductTypeResponse(rsp)
}

// GetSystemReadyWithResponse request returning *GetSystemReadyResponse
func (c *ClientWithResponses) GetSystemReadyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemReadyResponse, error) {
	rsp, err := c.GetSystemReady(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemReadyResponse(rsp)
}

// PostSystemRebootWithBodyWithResponse request with arbitrary body returning *PostSystemRebootResponse
func (c *ClientWithResponses) PostSystemRebootWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemRebootResponse, error) {
	rsp, err := c.PostSystemRebootWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemRebootResponse(rsp)
}

func (c *ClientWithResponses) PostSystemRebootWithResponse(ctx context.Context, body PostSystemRebootJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemRebootResponse, error) {
	rsp, err := c.PostSystemReboot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemRebootResponse(rsp)
}

// PostSystemShutdownWithBodyWithResponse request with arbitrary body returning *PostSystemShutdownResponse
func (c *ClientWithResponses) PostSystemShutdownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemShutdownResponse, error) {
	rsp, err := c.PostSystemShutdownWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemShutdownResponse(rsp)
}

func (c *ClientWithResponses) PostSystemShutdownWithResponse(ctx context.Context, body PostSystemShutdownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemShutdownResponse, error) {
	rsp, err := c.PostSystemShutdown(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemShutdownResponse(rsp)
}

// GetSystemStateWithResponse request returning *GetSystemStateResponse
func (c *ClientWithResponses) GetSystemStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemStateResponse, error) {
	rsp, err := c.GetSystemState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemStateResponse(rsp)
}

// GetSystemVersionWithResponse request returning *GetSystemVersionResponse
func (c *ClientWithResponses) GetSystemVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemVersionResponse, error) {
	rsp, err := c.GetSystemVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemVersionResponse(rsp)
}

// GetSystemdatasetWithResponse request returning *GetSystemdatasetResponse
func (c *ClientWithResponses) GetSystemdatasetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemdatasetResponse, error) {
	rsp, err := c.GetSystemdataset(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemdatasetResponse(rsp)
}

// PutSystemdatasetWithBodyWithResponse request with arbitrary body returning *PutSystemdatasetResponse
func (c *ClientWithResponses) PutSystemdatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSystemdatasetResponse, error) {
	rsp, err := c.PutSystemdatasetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemdatasetResponse(rsp)
}

func (c *ClientWithResponses) PutSystemdatasetWithResponse(ctx context.Context, body PutSystemdatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSystemdatasetResponse, error) {
	rsp, err := c.PutSystemdataset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemdatasetResponse(rsp)
}

// GetTftpWithResponse request returning *GetTftpResponse
func (c *ClientWithResponses) GetTftpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTftpResponse, error) {
	rsp, err := c.GetTftp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTftpResponse(rsp)
}

// PutTftpWithBodyWithResponse request with arbitrary body returning *PutTftpResponse
func (c *ClientWithResponses) PutTftpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTftpResponse, error) {
	rsp, err := c.PutTftpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTftpResponse(rsp)
}

func (c *ClientWithResponses) PutTftpWithResponse(ctx context.Context, body PutTftpJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTftpResponse, error) {
	rsp, err := c.PutTftp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTftpResponse(rsp)
}

// GetTruecommandWithResponse request returning *GetTruecommandResponse
func (c *ClientWithResponses) GetTruecommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruecommandResponse, error) {
	rsp, err := c.GetTruecommand(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTruecommandResponse(rsp)
}

// PutTruecommandWithBodyWithResponse request with arbitrary body returning *PutTruecommandResponse
func (c *ClientWithResponses) PutTruecommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTruecommandResponse, error) {
	rsp, err := c.PutTruecommandWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTruecommandResponse(rsp)
}

func (c *ClientWithResponses) PutTruecommandWithResponse(ctx context.Context, body PutTruecommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTruecommandResponse, error) {
	rsp, err := c.PutTruecommand(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTruecommandResponse(rsp)
}

// GetTruenasAcceptEulaWithResponse request returning *GetTruenasAcceptEulaResponse
func (c *ClientWithResponses) GetTruenasAcceptEulaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasAcceptEulaResponse, error) {
	rsp, err := c.GetTruenasAcceptEula(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTruenasAcceptEulaResponse(rsp)
}

// GetTruenasGetChassisHardwareWithResponse request returning *GetTruenasGetChassisHardwareResponse
func (c *ClientWithResponses) GetTruenasGetChassisHardwareWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasGetChassisHardwareResponse, error) {
	rsp, err := c.GetTruenasGetChassisHardware(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTruenasGetChassisHardwareResponse(rsp)
}

// GetTruenasGetCustomerInformationWithResponse request returning *GetTruenasGetCustomerInformationResponse
func (c *ClientWithResponses) GetTruenasGetCustomerInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasGetCustomerInformationResponse, error) {
	rsp, err := c.GetTruenasGetCustomerInformation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTruenasGetCustomerInformationResponse(rsp)
}

// GetTruenasGetEulaWithResponse request returning *GetTruenasGetEulaResponse
func (c *ClientWithResponses) GetTruenasGetEulaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasGetEulaResponse, error) {
	rsp, err := c.GetTruenasGetEula(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTruenasGetEulaResponse(rsp)
}

// GetTruenasIsEulaAcceptedWithResponse request returning *GetTruenasIsEulaAcceptedResponse
func (c *ClientWithResponses) GetTruenasIsEulaAcceptedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasIsEulaAcceptedResponse, error) {
	rsp, err := c.GetTruenasIsEulaAccepted(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTruenasIsEulaAcceptedResponse(rsp)
}

// GetTruenasIsProductionWithResponse request returning *GetTruenasIsProductionResponse
func (c *ClientWithResponses) GetTruenasIsProductionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTruenasIsProductionResponse, error) {
	rsp, err := c.GetTruenasIsProduction(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTruenasIsProductionResponse(rsp)
}

// PostTruenasSetProductionWithBodyWithResponse request with arbitrary body returning *PostTruenasSetProductionResponse
func (c *ClientWithResponses) PostTruenasSetProductionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTruenasSetProductionResponse, error) {
	rsp, err := c.PostTruenasSetProductionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTruenasSetProductionResponse(rsp)
}

func (c *ClientWithResponses) PostTruenasSetProductionWithResponse(ctx context.Context, body PostTruenasSetProductionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTruenasSetProductionResponse, error) {
	rsp, err := c.PostTruenasSetProduction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTruenasSetProductionResponse(rsp)
}

// PostTruenasUpdateCustomerInformationWithBodyWithResponse request with arbitrary body returning *PostTruenasUpdateCustomerInformationResponse
func (c *ClientWithResponses) PostTruenasUpdateCustomerInformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTruenasUpdateCustomerInformationResponse, error) {
	rsp, err := c.PostTruenasUpdateCustomerInformationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTruenasUpdateCustomerInformationResponse(rsp)
}

func (c *ClientWithResponses) PostTruenasUpdateCustomerInformationWithResponse(ctx context.Context, body PostTruenasUpdateCustomerInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTruenasUpdateCustomerInformationResponse, error) {
	rsp, err := c.PostTruenasUpdateCustomerInformation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTruenasUpdateCustomerInformationResponse(rsp)
}

// GetTunableWithResponse request returning *GetTunableResponse
func (c *ClientWithResponses) GetTunableWithResponse(ctx context.Context, params *GetTunableParams, reqEditors ...RequestEditorFn) (*GetTunableResponse, error) {
	rsp, err := c.GetTunable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTunableResponse(rsp)
}

// PostTunableWithBodyWithResponse request with arbitrary body returning *PostTunableResponse
func (c *ClientWithResponses) PostTunableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTunableResponse, error) {
	rsp, err := c.PostTunableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTunableResponse(rsp)
}

func (c *ClientWithResponses) PostTunableWithResponse(ctx context.Context, body PostTunableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTunableResponse, error) {
	rsp, err := c.PostTunable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTunableResponse(rsp)
}

// DeleteTunableIdIdWithResponse request returning *DeleteTunableIdIdResponse
func (c *ClientWithResponses) DeleteTunableIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTunableIdIdResponse, error) {
	rsp, err := c.DeleteTunableIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTunableIdIdResponse(rsp)
}

// GetTunableIdIdWithResponse request returning *GetTunableIdIdResponse
func (c *ClientWithResponses) GetTunableIdIdWithResponse(ctx context.Context, id int, params *GetTunableIdIdParams, reqEditors ...RequestEditorFn) (*GetTunableIdIdResponse, error) {
	rsp, err := c.GetTunableIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTunableIdIdResponse(rsp)
}

// PutTunableIdIdWithBodyWithResponse request with arbitrary body returning *PutTunableIdIdResponse
func (c *ClientWithResponses) PutTunableIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTunableIdIdResponse, error) {
	rsp, err := c.PutTunableIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTunableIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutTunableIdIdWithResponse(ctx context.Context, id int, body PutTunableIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTunableIdIdResponse, error) {
	rsp, err := c.PutTunableIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTunableIdIdResponse(rsp)
}

// GetTunableTunableTypeChoicesWithResponse request returning *GetTunableTunableTypeChoicesResponse
func (c *ClientWithResponses) GetTunableTunableTypeChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTunableTunableTypeChoicesResponse, error) {
	rsp, err := c.GetTunableTunableTypeChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTunableTunableTypeChoicesResponse(rsp)
}

// PostUpdateCheckAvailableWithBodyWithResponse request with arbitrary body returning *PostUpdateCheckAvailableResponse
func (c *ClientWithResponses) PostUpdateCheckAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateCheckAvailableResponse, error) {
	rsp, err := c.PostUpdateCheckAvailableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateCheckAvailableResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateCheckAvailableWithResponse(ctx context.Context, body PostUpdateCheckAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateCheckAvailableResponse, error) {
	rsp, err := c.PostUpdateCheckAvailable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateCheckAvailableResponse(rsp)
}

// GetUpdateDownloadWithResponse request returning *GetUpdateDownloadResponse
func (c *ClientWithResponses) GetUpdateDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpdateDownloadResponse, error) {
	rsp, err := c.GetUpdateDownload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateDownloadResponse(rsp)
}

// GetUpdateGetAutoDownloadWithResponse request returning *GetUpdateGetAutoDownloadResponse
func (c *ClientWithResponses) GetUpdateGetAutoDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpdateGetAutoDownloadResponse, error) {
	rsp, err := c.GetUpdateGetAutoDownload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateGetAutoDownloadResponse(rsp)
}

// PostUpdateGetPendingWithBodyWithResponse request with arbitrary body returning *PostUpdateGetPendingResponse
func (c *ClientWithResponses) PostUpdateGetPendingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateGetPendingResponse, error) {
	rsp, err := c.PostUpdateGetPendingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateGetPendingResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateGetPendingWithResponse(ctx context.Context, body PostUpdateGetPendingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateGetPendingResponse, error) {
	rsp, err := c.PostUpdateGetPending(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateGetPendingResponse(rsp)
}

// GetUpdateGetTrainsWithResponse request returning *GetUpdateGetTrainsResponse
func (c *ClientWithResponses) GetUpdateGetTrainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpdateGetTrainsResponse, error) {
	rsp, err := c.GetUpdateGetTrains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateGetTrainsResponse(rsp)
}

// PostUpdateManualWithBodyWithResponse request with arbitrary body returning *PostUpdateManualResponse
func (c *ClientWithResponses) PostUpdateManualWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateManualResponse, error) {
	rsp, err := c.PostUpdateManualWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateManualResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateManualWithResponse(ctx context.Context, body PostUpdateManualJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateManualResponse, error) {
	rsp, err := c.PostUpdateManual(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateManualResponse(rsp)
}

// PostUpdateSetAutoDownloadWithBodyWithResponse request with arbitrary body returning *PostUpdateSetAutoDownloadResponse
func (c *ClientWithResponses) PostUpdateSetAutoDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateSetAutoDownloadResponse, error) {
	rsp, err := c.PostUpdateSetAutoDownloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateSetAutoDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateSetAutoDownloadWithResponse(ctx context.Context, body PostUpdateSetAutoDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateSetAutoDownloadResponse, error) {
	rsp, err := c.PostUpdateSetAutoDownload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateSetAutoDownloadResponse(rsp)
}

// PostUpdateSetTrainWithBodyWithResponse request with arbitrary body returning *PostUpdateSetTrainResponse
func (c *ClientWithResponses) PostUpdateSetTrainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateSetTrainResponse, error) {
	rsp, err := c.PostUpdateSetTrainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateSetTrainResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateSetTrainWithResponse(ctx context.Context, body PostUpdateSetTrainJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateSetTrainResponse, error) {
	rsp, err := c.PostUpdateSetTrain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateSetTrainResponse(rsp)
}

// PostUpdateUpdateWithBodyWithResponse request with arbitrary body returning *PostUpdateUpdateResponse
func (c *ClientWithResponses) PostUpdateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateUpdateResponse, error) {
	rsp, err := c.PostUpdateUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateUpdateWithResponse(ctx context.Context, body PostUpdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateUpdateResponse, error) {
	rsp, err := c.PostUpdateUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateUpdateResponse(rsp)
}

// GetUpsWithResponse request returning *GetUpsResponse
func (c *ClientWithResponses) GetUpsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpsResponse, error) {
	rsp, err := c.GetUps(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpsResponse(rsp)
}

// PutUpsWithBodyWithResponse request with arbitrary body returning *PutUpsResponse
func (c *ClientWithResponses) PutUpsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUpsResponse, error) {
	rsp, err := c.PutUpsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUpsResponse(rsp)
}

func (c *ClientWithResponses) PutUpsWithResponse(ctx context.Context, body PutUpsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUpsResponse, error) {
	rsp, err := c.PutUps(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUpsResponse(rsp)
}

// GetUpsDriverChoicesWithResponse request returning *GetUpsDriverChoicesResponse
func (c *ClientWithResponses) GetUpsDriverChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpsDriverChoicesResponse, error) {
	rsp, err := c.GetUpsDriverChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpsDriverChoicesResponse(rsp)
}

// GetUpsPortChoicesWithResponse request returning *GetUpsPortChoicesResponse
func (c *ClientWithResponses) GetUpsPortChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUpsPortChoicesResponse, error) {
	rsp, err := c.GetUpsPortChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpsPortChoicesResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// PostUserWithBodyWithResponse request with arbitrary body returning *PostUserResponse
func (c *ClientWithResponses) PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

func (c *ClientWithResponses) PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

// GetUserGetNextUidWithResponse request returning *GetUserGetNextUidResponse
func (c *ClientWithResponses) GetUserGetNextUidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserGetNextUidResponse, error) {
	rsp, err := c.GetUserGetNextUid(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGetNextUidResponse(rsp)
}

// PostUserGetUserObjWithBodyWithResponse request with arbitrary body returning *PostUserGetUserObjResponse
func (c *ClientWithResponses) PostUserGetUserObjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserGetUserObjResponse, error) {
	rsp, err := c.PostUserGetUserObjWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserGetUserObjResponse(rsp)
}

func (c *ClientWithResponses) PostUserGetUserObjWithResponse(ctx context.Context, body PostUserGetUserObjJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserGetUserObjResponse, error) {
	rsp, err := c.PostUserGetUserObj(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserGetUserObjResponse(rsp)
}

// GetUserHasRootPasswordWithResponse request returning *GetUserHasRootPasswordResponse
func (c *ClientWithResponses) GetUserHasRootPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserHasRootPasswordResponse, error) {
	rsp, err := c.GetUserHasRootPassword(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserHasRootPasswordResponse(rsp)
}

// DeleteUserIdIdWithBodyWithResponse request with arbitrary body returning *DeleteUserIdIdResponse
func (c *ClientWithResponses) DeleteUserIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserIdIdResponse, error) {
	rsp, err := c.DeleteUserIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserIdIdWithResponse(ctx context.Context, id int, body DeleteUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserIdIdResponse, error) {
	rsp, err := c.DeleteUserIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserIdIdResponse(rsp)
}

// GetUserIdIdWithResponse request returning *GetUserIdIdResponse
func (c *ClientWithResponses) GetUserIdIdWithResponse(ctx context.Context, id int, params *GetUserIdIdParams, reqEditors ...RequestEditorFn) (*GetUserIdIdResponse, error) {
	rsp, err := c.GetUserIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserIdIdResponse(rsp)
}

// PutUserIdIdWithBodyWithResponse request with arbitrary body returning *PutUserIdIdResponse
func (c *ClientWithResponses) PutUserIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserIdIdResponse, error) {
	rsp, err := c.PutUserIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutUserIdIdWithResponse(ctx context.Context, id int, body PutUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserIdIdResponse, error) {
	rsp, err := c.PutUserIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdIdResponse(rsp)
}

// PostUserIdIdPopAttributeWithBodyWithResponse request with arbitrary body returning *PostUserIdIdPopAttributeResponse
func (c *ClientWithResponses) PostUserIdIdPopAttributeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserIdIdPopAttributeResponse, error) {
	rsp, err := c.PostUserIdIdPopAttributeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdIdPopAttributeResponse(rsp)
}

func (c *ClientWithResponses) PostUserIdIdPopAttributeWithResponse(ctx context.Context, id int, body PostUserIdIdPopAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserIdIdPopAttributeResponse, error) {
	rsp, err := c.PostUserIdIdPopAttribute(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdIdPopAttributeResponse(rsp)
}

// PostUserIdIdSetAttributeWithBodyWithResponse request with arbitrary body returning *PostUserIdIdSetAttributeResponse
func (c *ClientWithResponses) PostUserIdIdSetAttributeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserIdIdSetAttributeResponse, error) {
	rsp, err := c.PostUserIdIdSetAttributeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdIdSetAttributeResponse(rsp)
}

func (c *ClientWithResponses) PostUserIdIdSetAttributeWithResponse(ctx context.Context, id int, body PostUserIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserIdIdSetAttributeResponse, error) {
	rsp, err := c.PostUserIdIdSetAttribute(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdIdSetAttributeResponse(rsp)
}

// PostUserShellChoicesWithBodyWithResponse request with arbitrary body returning *PostUserShellChoicesResponse
func (c *ClientWithResponses) PostUserShellChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserShellChoicesResponse, error) {
	rsp, err := c.PostUserShellChoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserShellChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostUserShellChoicesWithResponse(ctx context.Context, body PostUserShellChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserShellChoicesResponse, error) {
	rsp, err := c.PostUserShellChoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserShellChoicesResponse(rsp)
}

// GetVmWithResponse request returning *GetVmResponse
func (c *ClientWithResponses) GetVmWithResponse(ctx context.Context, params *GetVmParams, reqEditors ...RequestEditorFn) (*GetVmResponse, error) {
	rsp, err := c.GetVm(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmResponse(rsp)
}

// PostVmWithBodyWithResponse request with arbitrary body returning *PostVmResponse
func (c *ClientWithResponses) PostVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmResponse, error) {
	rsp, err := c.PostVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmResponse(rsp)
}

func (c *ClientWithResponses) PostVmWithResponse(ctx context.Context, body PostVmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmResponse, error) {
	rsp, err := c.PostVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmResponse(rsp)
}

// GetVmDeviceWithResponse request returning *GetVmDeviceResponse
func (c *ClientWithResponses) GetVmDeviceWithResponse(ctx context.Context, params *GetVmDeviceParams, reqEditors ...RequestEditorFn) (*GetVmDeviceResponse, error) {
	rsp, err := c.GetVmDevice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDeviceResponse(rsp)
}

// PostVmDeviceWithBodyWithResponse request with arbitrary body returning *PostVmDeviceResponse
func (c *ClientWithResponses) PostVmDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmDeviceResponse, error) {
	rsp, err := c.PostVmDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmDeviceResponse(rsp)
}

func (c *ClientWithResponses) PostVmDeviceWithResponse(ctx context.Context, body PostVmDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmDeviceResponse, error) {
	rsp, err := c.PostVmDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmDeviceResponse(rsp)
}

// DeleteVmDeviceIdIdWithBodyWithResponse request with arbitrary body returning *DeleteVmDeviceIdIdResponse
func (c *ClientWithResponses) DeleteVmDeviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmDeviceIdIdResponse, error) {
	rsp, err := c.DeleteVmDeviceIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmDeviceIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmDeviceIdIdWithResponse(ctx context.Context, id int, body DeleteVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmDeviceIdIdResponse, error) {
	rsp, err := c.DeleteVmDeviceIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmDeviceIdIdResponse(rsp)
}

// GetVmDeviceIdIdWithResponse request returning *GetVmDeviceIdIdResponse
func (c *ClientWithResponses) GetVmDeviceIdIdWithResponse(ctx context.Context, id int, params *GetVmDeviceIdIdParams, reqEditors ...RequestEditorFn) (*GetVmDeviceIdIdResponse, error) {
	rsp, err := c.GetVmDeviceIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDeviceIdIdResponse(rsp)
}

// PutVmDeviceIdIdWithBodyWithResponse request with arbitrary body returning *PutVmDeviceIdIdResponse
func (c *ClientWithResponses) PutVmDeviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmDeviceIdIdResponse, error) {
	rsp, err := c.PutVmDeviceIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmDeviceIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutVmDeviceIdIdWithResponse(ctx context.Context, id int, body PutVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmDeviceIdIdResponse, error) {
	rsp, err := c.PutVmDeviceIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmDeviceIdIdResponse(rsp)
}

// GetVmDeviceNicAttachChoicesWithResponse request returning *GetVmDeviceNicAttachChoicesResponse
func (c *ClientWithResponses) GetVmDeviceNicAttachChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmDeviceNicAttachChoicesResponse, error) {
	rsp, err := c.GetVmDeviceNicAttachChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDeviceNicAttachChoicesResponse(rsp)
}

// GetVmDevicePptdevChoicesWithResponse request returning *GetVmDevicePptdevChoicesResponse
func (c *ClientWithResponses) GetVmDevicePptdevChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmDevicePptdevChoicesResponse, error) {
	rsp, err := c.GetVmDevicePptdevChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDevicePptdevChoicesResponse(rsp)
}

// GetVmDeviceVncBindChoicesWithResponse request returning *GetVmDeviceVncBindChoicesResponse
func (c *ClientWithResponses) GetVmDeviceVncBindChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmDeviceVncBindChoicesResponse, error) {
	rsp, err := c.GetVmDeviceVncBindChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDeviceVncBindChoicesResponse(rsp)
}

// GetVmFlagsWithResponse request returning *GetVmFlagsResponse
func (c *ClientWithResponses) GetVmFlagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmFlagsResponse, error) {
	rsp, err := c.GetVmFlags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmFlagsResponse(rsp)
}

// PostVmGetAttachedIfaceWithBodyWithResponse request with arbitrary body returning *PostVmGetAttachedIfaceResponse
func (c *ClientWithResponses) PostVmGetAttachedIfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmGetAttachedIfaceResponse, error) {
	rsp, err := c.PostVmGetAttachedIfaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetAttachedIfaceResponse(rsp)
}

func (c *ClientWithResponses) PostVmGetAttachedIfaceWithResponse(ctx context.Context, body PostVmGetAttachedIfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmGetAttachedIfaceResponse, error) {
	rsp, err := c.PostVmGetAttachedIface(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetAttachedIfaceResponse(rsp)
}

// PostVmGetAvailableMemoryWithBodyWithResponse request with arbitrary body returning *PostVmGetAvailableMemoryResponse
func (c *ClientWithResponses) PostVmGetAvailableMemoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmGetAvailableMemoryResponse, error) {
	rsp, err := c.PostVmGetAvailableMemoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetAvailableMemoryResponse(rsp)
}

func (c *ClientWithResponses) PostVmGetAvailableMemoryWithResponse(ctx context.Context, body PostVmGetAvailableMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmGetAvailableMemoryResponse, error) {
	rsp, err := c.PostVmGetAvailableMemory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetAvailableMemoryResponse(rsp)
}

// PostVmGetConsoleWithBodyWithResponse request with arbitrary body returning *PostVmGetConsoleResponse
func (c *ClientWithResponses) PostVmGetConsoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmGetConsoleResponse, error) {
	rsp, err := c.PostVmGetConsoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetConsoleResponse(rsp)
}

func (c *ClientWithResponses) PostVmGetConsoleWithResponse(ctx context.Context, body PostVmGetConsoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmGetConsoleResponse, error) {
	rsp, err := c.PostVmGetConsole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetConsoleResponse(rsp)
}

// GetVmGetVmemoryInUseWithResponse request returning *GetVmGetVmemoryInUseResponse
func (c *ClientWithResponses) GetVmGetVmemoryInUseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmGetVmemoryInUseResponse, error) {
	rsp, err := c.GetVmGetVmemoryInUse(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmGetVmemoryInUseResponse(rsp)
}

// PostVmGetVncWithBodyWithResponse request with arbitrary body returning *PostVmGetVncResponse
func (c *ClientWithResponses) PostVmGetVncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmGetVncResponse, error) {
	rsp, err := c.PostVmGetVncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetVncResponse(rsp)
}

func (c *ClientWithResponses) PostVmGetVncWithResponse(ctx context.Context, body PostVmGetVncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmGetVncResponse, error) {
	rsp, err := c.PostVmGetVnc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetVncResponse(rsp)
}

// GetVmGetVncIpv4WithResponse request returning *GetVmGetVncIpv4Response
func (c *ClientWithResponses) GetVmGetVncIpv4WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmGetVncIpv4Response, error) {
	rsp, err := c.GetVmGetVncIpv4(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmGetVncIpv4Response(rsp)
}

// DeleteVmIdIdWithBodyWithResponse request with arbitrary body returning *DeleteVmIdIdResponse
func (c *ClientWithResponses) DeleteVmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteVmIdIdResponse, error) {
	rsp, err := c.DeleteVmIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmIdIdWithResponse(ctx context.Context, id int, body DeleteVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteVmIdIdResponse, error) {
	rsp, err := c.DeleteVmIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmIdIdResponse(rsp)
}

// GetVmIdIdWithResponse request returning *GetVmIdIdResponse
func (c *ClientWithResponses) GetVmIdIdWithResponse(ctx context.Context, id int, params *GetVmIdIdParams, reqEditors ...RequestEditorFn) (*GetVmIdIdResponse, error) {
	rsp, err := c.GetVmIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmIdIdResponse(rsp)
}

// PutVmIdIdWithBodyWithResponse request with arbitrary body returning *PutVmIdIdResponse
func (c *ClientWithResponses) PutVmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmIdIdResponse, error) {
	rsp, err := c.PutVmIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutVmIdIdWithResponse(ctx context.Context, id int, body PutVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmIdIdResponse, error) {
	rsp, err := c.PutVmIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmIdIdResponse(rsp)
}

// PostVmIdIdCloneWithBodyWithResponse request with arbitrary body returning *PostVmIdIdCloneResponse
func (c *ClientWithResponses) PostVmIdIdCloneWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdCloneResponse, error) {
	rsp, err := c.PostVmIdIdCloneWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdCloneResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdCloneWithResponse(ctx context.Context, id int, body PostVmIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdCloneResponse, error) {
	rsp, err := c.PostVmIdIdClone(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdCloneResponse(rsp)
}

// PostVmIdIdPoweroffWithBodyWithResponse request with arbitrary body returning *PostVmIdIdPoweroffResponse
func (c *ClientWithResponses) PostVmIdIdPoweroffWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdPoweroffResponse, error) {
	rsp, err := c.PostVmIdIdPoweroffWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdPoweroffResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdPoweroffWithResponse(ctx context.Context, id int, body PostVmIdIdPoweroffJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdPoweroffResponse, error) {
	rsp, err := c.PostVmIdIdPoweroff(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdPoweroffResponse(rsp)
}

// PostVmIdIdRestartWithBodyWithResponse request with arbitrary body returning *PostVmIdIdRestartResponse
func (c *ClientWithResponses) PostVmIdIdRestartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdRestartResponse, error) {
	rsp, err := c.PostVmIdIdRestartWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdRestartResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdRestartWithResponse(ctx context.Context, id int, body PostVmIdIdRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdRestartResponse, error) {
	rsp, err := c.PostVmIdIdRestart(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdRestartResponse(rsp)
}

// PostVmIdIdStartWithBodyWithResponse request with arbitrary body returning *PostVmIdIdStartResponse
func (c *ClientWithResponses) PostVmIdIdStartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdStartResponse, error) {
	rsp, err := c.PostVmIdIdStartWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStartResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdStartWithResponse(ctx context.Context, id int, body PostVmIdIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdStartResponse, error) {
	rsp, err := c.PostVmIdIdStart(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStartResponse(rsp)
}

// PostVmIdIdStatusWithBodyWithResponse request with arbitrary body returning *PostVmIdIdStatusResponse
func (c *ClientWithResponses) PostVmIdIdStatusWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdStatusResponse, error) {
	rsp, err := c.PostVmIdIdStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStatusResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdStatusWithResponse(ctx context.Context, id int, body PostVmIdIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdStatusResponse, error) {
	rsp, err := c.PostVmIdIdStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStatusResponse(rsp)
}

// PostVmIdIdStopWithBodyWithResponse request with arbitrary body returning *PostVmIdIdStopResponse
func (c *ClientWithResponses) PostVmIdIdStopWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmIdIdStopResponse, error) {
	rsp, err := c.PostVmIdIdStopWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStopResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdStopWithResponse(ctx context.Context, id int, body PostVmIdIdStopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmIdIdStopResponse, error) {
	rsp, err := c.PostVmIdIdStop(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStopResponse(rsp)
}

// GetVmIdentifyHypervisorWithResponse request returning *GetVmIdentifyHypervisorResponse
func (c *ClientWithResponses) GetVmIdentifyHypervisorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmIdentifyHypervisorResponse, error) {
	rsp, err := c.GetVmIdentifyHypervisor(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmIdentifyHypervisorResponse(rsp)
}

// GetVmRandomMacWithResponse request returning *GetVmRandomMacResponse
func (c *ClientWithResponses) GetVmRandomMacWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmRandomMacResponse, error) {
	rsp, err := c.GetVmRandomMac(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmRandomMacResponse(rsp)
}

// GetVmVncPortWizardWithResponse request returning *GetVmVncPortWizardResponse
func (c *ClientWithResponses) GetVmVncPortWizardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVmVncPortWizardResponse, error) {
	rsp, err := c.GetVmVncPortWizard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmVncPortWizardResponse(rsp)
}

// GetVmwareWithResponse request returning *GetVmwareResponse
func (c *ClientWithResponses) GetVmwareWithResponse(ctx context.Context, params *GetVmwareParams, reqEditors ...RequestEditorFn) (*GetVmwareResponse, error) {
	rsp, err := c.GetVmware(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmwareResponse(rsp)
}

// PostVmwareWithBodyWithResponse request with arbitrary body returning *PostVmwareResponse
func (c *ClientWithResponses) PostVmwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareResponse, error) {
	rsp, err := c.PostVmwareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareWithResponse(ctx context.Context, body PostVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareResponse, error) {
	rsp, err := c.PostVmware(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareResponse(rsp)
}

// PostVmwareDatasetHasVmsWithBodyWithResponse request with arbitrary body returning *PostVmwareDatasetHasVmsResponse
func (c *ClientWithResponses) PostVmwareDatasetHasVmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareDatasetHasVmsResponse, error) {
	rsp, err := c.PostVmwareDatasetHasVmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareDatasetHasVmsResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareDatasetHasVmsWithResponse(ctx context.Context, body PostVmwareDatasetHasVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareDatasetHasVmsResponse, error) {
	rsp, err := c.PostVmwareDatasetHasVms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareDatasetHasVmsResponse(rsp)
}

// PostVmwareGetDatastoresWithBodyWithResponse request with arbitrary body returning *PostVmwareGetDatastoresResponse
func (c *ClientWithResponses) PostVmwareGetDatastoresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareGetDatastoresResponse, error) {
	rsp, err := c.PostVmwareGetDatastoresWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareGetDatastoresResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareGetDatastoresWithResponse(ctx context.Context, body PostVmwareGetDatastoresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareGetDatastoresResponse, error) {
	rsp, err := c.PostVmwareGetDatastores(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareGetDatastoresResponse(rsp)
}

// PostVmwareGetVirtualMachinesWithBodyWithResponse request with arbitrary body returning *PostVmwareGetVirtualMachinesResponse
func (c *ClientWithResponses) PostVmwareGetVirtualMachinesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareGetVirtualMachinesResponse, error) {
	rsp, err := c.PostVmwareGetVirtualMachinesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareGetVirtualMachinesResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareGetVirtualMachinesWithResponse(ctx context.Context, body PostVmwareGetVirtualMachinesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareGetVirtualMachinesResponse, error) {
	rsp, err := c.PostVmwareGetVirtualMachines(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareGetVirtualMachinesResponse(rsp)
}

// DeleteVmwareIdIdWithResponse request returning *DeleteVmwareIdIdResponse
func (c *ClientWithResponses) DeleteVmwareIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteVmwareIdIdResponse, error) {
	rsp, err := c.DeleteVmwareIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmwareIdIdResponse(rsp)
}

// GetVmwareIdIdWithResponse request returning *GetVmwareIdIdResponse
func (c *ClientWithResponses) GetVmwareIdIdWithResponse(ctx context.Context, id int, params *GetVmwareIdIdParams, reqEditors ...RequestEditorFn) (*GetVmwareIdIdResponse, error) {
	rsp, err := c.GetVmwareIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmwareIdIdResponse(rsp)
}

// PutVmwareIdIdWithBodyWithResponse request with arbitrary body returning *PutVmwareIdIdResponse
func (c *ClientWithResponses) PutVmwareIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVmwareIdIdResponse, error) {
	rsp, err := c.PutVmwareIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmwareIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutVmwareIdIdWithResponse(ctx context.Context, id int, body PutVmwareIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVmwareIdIdResponse, error) {
	rsp, err := c.PutVmwareIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVmwareIdIdResponse(rsp)
}

// PostVmwareMatchDatastoresWithDatasetsWithBodyWithResponse request with arbitrary body returning *PostVmwareMatchDatastoresWithDatasetsResponse
func (c *ClientWithResponses) PostVmwareMatchDatastoresWithDatasetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVmwareMatchDatastoresWithDatasetsResponse, error) {
	rsp, err := c.PostVmwareMatchDatastoresWithDatasetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareMatchDatastoresWithDatasetsResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareMatchDatastoresWithDatasetsWithResponse(ctx context.Context, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVmwareMatchDatastoresWithDatasetsResponse, error) {
	rsp, err := c.PostVmwareMatchDatastoresWithDatasets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareMatchDatastoresWithDatasetsResponse(rsp)
}

// GetWebdavWithResponse request returning *GetWebdavResponse
func (c *ClientWithResponses) GetWebdavWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWebdavResponse, error) {
	rsp, err := c.GetWebdav(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebdavResponse(rsp)
}

// PutWebdavWithBodyWithResponse request with arbitrary body returning *PutWebdavResponse
func (c *ClientWithResponses) PutWebdavWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWebdavResponse, error) {
	rsp, err := c.PutWebdavWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWebdavResponse(rsp)
}

func (c *ClientWithResponses) PutWebdavWithResponse(ctx context.Context, body PutWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWebdavResponse, error) {
	rsp, err := c.PutWebdav(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWebdavResponse(rsp)
}

// GetWebuiImageWithResponse request returning *GetWebuiImageResponse
func (c *ClientWithResponses) GetWebuiImageWithResponse(ctx context.Context, params *GetWebuiImageParams, reqEditors ...RequestEditorFn) (*GetWebuiImageResponse, error) {
	rsp, err := c.GetWebuiImage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebuiImageResponse(rsp)
}

// DeleteWebuiImageIdIdWithResponse request returning *DeleteWebuiImageIdIdResponse
func (c *ClientWithResponses) DeleteWebuiImageIdIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteWebuiImageIdIdResponse, error) {
	rsp, err := c.DeleteWebuiImageIdId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebuiImageIdIdResponse(rsp)
}

// GetWebuiImageIdIdWithResponse request returning *GetWebuiImageIdIdResponse
func (c *ClientWithResponses) GetWebuiImageIdIdWithResponse(ctx context.Context, id int, params *GetWebuiImageIdIdParams, reqEditors ...RequestEditorFn) (*GetWebuiImageIdIdResponse, error) {
	rsp, err := c.GetWebuiImageIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebuiImageIdIdResponse(rsp)
}

// GetZfsSnapshotWithResponse request returning *GetZfsSnapshotResponse
func (c *ClientWithResponses) GetZfsSnapshotWithResponse(ctx context.Context, params *GetZfsSnapshotParams, reqEditors ...RequestEditorFn) (*GetZfsSnapshotResponse, error) {
	rsp, err := c.GetZfsSnapshot(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZfsSnapshotResponse(rsp)
}

// PostZfsSnapshotWithBodyWithResponse request with arbitrary body returning *PostZfsSnapshotResponse
func (c *ClientWithResponses) PostZfsSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZfsSnapshotResponse, error) {
	rsp, err := c.PostZfsSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotResponse(rsp)
}

func (c *ClientWithResponses) PostZfsSnapshotWithResponse(ctx context.Context, body PostZfsSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZfsSnapshotResponse, error) {
	rsp, err := c.PostZfsSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotResponse(rsp)
}

// PostZfsSnapshotCloneWithBodyWithResponse request with arbitrary body returning *PostZfsSnapshotCloneResponse
func (c *ClientWithResponses) PostZfsSnapshotCloneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZfsSnapshotCloneResponse, error) {
	rsp, err := c.PostZfsSnapshotCloneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotCloneResponse(rsp)
}

func (c *ClientWithResponses) PostZfsSnapshotCloneWithResponse(ctx context.Context, body PostZfsSnapshotCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZfsSnapshotCloneResponse, error) {
	rsp, err := c.PostZfsSnapshotClone(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotCloneResponse(rsp)
}

// DeleteZfsSnapshotIdIdWithBodyWithResponse request with arbitrary body returning *DeleteZfsSnapshotIdIdResponse
func (c *ClientWithResponses) DeleteZfsSnapshotIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteZfsSnapshotIdIdResponse, error) {
	rsp, err := c.DeleteZfsSnapshotIdIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteZfsSnapshotIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteZfsSnapshotIdIdWithResponse(ctx context.Context, id string, body DeleteZfsSnapshotIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteZfsSnapshotIdIdResponse, error) {
	rsp, err := c.DeleteZfsSnapshotIdId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteZfsSnapshotIdIdResponse(rsp)
}

// GetZfsSnapshotIdIdWithResponse request returning *GetZfsSnapshotIdIdResponse
func (c *ClientWithResponses) GetZfsSnapshotIdIdWithResponse(ctx context.Context, id string, params *GetZfsSnapshotIdIdParams, reqEditors ...RequestEditorFn) (*GetZfsSnapshotIdIdResponse, error) {
	rsp, err := c.GetZfsSnapshotIdId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZfsSnapshotIdIdResponse(rsp)
}

// PostZfsSnapshotRemoveWithBodyWithResponse request with arbitrary body returning *PostZfsSnapshotRemoveResponse
func (c *ClientWithResponses) PostZfsSnapshotRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZfsSnapshotRemoveResponse, error) {
	rsp, err := c.PostZfsSnapshotRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostZfsSnapshotRemoveWithResponse(ctx context.Context, body PostZfsSnapshotRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZfsSnapshotRemoveResponse, error) {
	rsp, err := c.PostZfsSnapshotRemove(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotRemoveResponse(rsp)
}

// PostZfsSnapshotRollbackWithBodyWithResponse request with arbitrary body returning *PostZfsSnapshotRollbackResponse
func (c *ClientWithResponses) PostZfsSnapshotRollbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZfsSnapshotRollbackResponse, error) {
	rsp, err := c.PostZfsSnapshotRollbackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotRollbackResponse(rsp)
}

func (c *ClientWithResponses) PostZfsSnapshotRollbackWithResponse(ctx context.Context, body PostZfsSnapshotRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZfsSnapshotRollbackResponse, error) {
	rsp, err := c.PostZfsSnapshotRollback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotRollbackResponse(rsp)
}

// ParseGetAcmeDnsAuthenticatorResponse parses an HTTP response from a GetAcmeDnsAuthenticatorWithResponse call
func ParseGetAcmeDnsAuthenticatorResponse(rsp *http.Response) (*GetAcmeDnsAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAcmeDnsAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAcmeDnsAuthenticatorResponse parses an HTTP response from a PostAcmeDnsAuthenticatorWithResponse call
func ParsePostAcmeDnsAuthenticatorResponse(rsp *http.Response) (*PostAcmeDnsAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAcmeDnsAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAcmeDnsAuthenticatorAuthenticatorSchemasResponse parses an HTTP response from a GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse call
func ParseGetAcmeDnsAuthenticatorAuthenticatorSchemasResponse(rsp *http.Response) (*GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAcmeDnsAuthenticatorIdIdResponse parses an HTTP response from a DeleteAcmeDnsAuthenticatorIdIdWithResponse call
func ParseDeleteAcmeDnsAuthenticatorIdIdResponse(rsp *http.Response) (*DeleteAcmeDnsAuthenticatorIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAcmeDnsAuthenticatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAcmeDnsAuthenticatorIdIdResponse parses an HTTP response from a GetAcmeDnsAuthenticatorIdIdWithResponse call
func ParseGetAcmeDnsAuthenticatorIdIdResponse(rsp *http.Response) (*GetAcmeDnsAuthenticatorIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAcmeDnsAuthenticatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAcmeDnsAuthenticatorIdIdResponse parses an HTTP response from a PutAcmeDnsAuthenticatorIdIdWithResponse call
func ParsePutAcmeDnsAuthenticatorIdIdResponse(rsp *http.Response) (*PutAcmeDnsAuthenticatorIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAcmeDnsAuthenticatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActivedirectoryResponse parses an HTTP response from a GetActivedirectoryWithResponse call
func ParseGetActivedirectoryResponse(rsp *http.Response) (*GetActivedirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutActivedirectoryResponse parses an HTTP response from a PutActivedirectoryWithResponse call
func ParsePutActivedirectoryResponse(rsp *http.Response) (*PutActivedirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutActivedirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActivedirectoryChangeTrustAccountPwResponse parses an HTTP response from a GetActivedirectoryChangeTrustAccountPwWithResponse call
func ParseGetActivedirectoryChangeTrustAccountPwResponse(rsp *http.Response) (*GetActivedirectoryChangeTrustAccountPwResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryChangeTrustAccountPwResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActivedirectoryDomainInfoResponse parses an HTTP response from a GetActivedirectoryDomainInfoWithResponse call
func ParseGetActivedirectoryDomainInfoResponse(rsp *http.Response) (*GetActivedirectoryDomainInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryDomainInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActivedirectoryGetSpnListResponse parses an HTTP response from a GetActivedirectoryGetSpnListWithResponse call
func ParseGetActivedirectoryGetSpnListResponse(rsp *http.Response) (*GetActivedirectoryGetSpnListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryGetSpnListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActivedirectoryGetStateResponse parses an HTTP response from a GetActivedirectoryGetStateWithResponse call
func ParseGetActivedirectoryGetStateResponse(rsp *http.Response) (*GetActivedirectoryGetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostActivedirectoryLeaveResponse parses an HTTP response from a PostActivedirectoryLeaveWithResponse call
func ParsePostActivedirectoryLeaveResponse(rsp *http.Response) (*PostActivedirectoryLeaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActivedirectoryLeaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActivedirectoryNssInfoChoicesResponse parses an HTTP response from a GetActivedirectoryNssInfoChoicesWithResponse call
func ParseGetActivedirectoryNssInfoChoicesResponse(rsp *http.Response) (*GetActivedirectoryNssInfoChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryNssInfoChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActivedirectoryStartedResponse parses an HTTP response from a GetActivedirectoryStartedWithResponse call
func ParseGetActivedirectoryStartedResponse(rsp *http.Response) (*GetActivedirectoryStartedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryStartedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAfpResponse parses an HTTP response from a GetAfpWithResponse call
func ParseGetAfpResponse(rsp *http.Response) (*GetAfpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAfpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAfpResponse parses an HTTP response from a PutAfpWithResponse call
func ParsePutAfpResponse(rsp *http.Response) (*PutAfpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAfpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAfpBindipChoicesResponse parses an HTTP response from a GetAfpBindipChoicesWithResponse call
func ParseGetAfpBindipChoicesResponse(rsp *http.Response) (*GetAfpBindipChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAfpBindipChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAlertDismissResponse parses an HTTP response from a PostAlertDismissWithResponse call
func ParsePostAlertDismissResponse(rsp *http.Response) (*PostAlertDismissResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertDismissResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertListResponse parses an HTTP response from a GetAlertListWithResponse call
func ParseGetAlertListResponse(rsp *http.Response) (*GetAlertListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertListCategoriesResponse parses an HTTP response from a GetAlertListCategoriesWithResponse call
func ParseGetAlertListCategoriesResponse(rsp *http.Response) (*GetAlertListCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertListCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertListPoliciesResponse parses an HTTP response from a GetAlertListPoliciesWithResponse call
func ParseGetAlertListPoliciesResponse(rsp *http.Response) (*GetAlertListPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertListPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAlertRestoreResponse parses an HTTP response from a PostAlertRestoreWithResponse call
func ParsePostAlertRestoreResponse(rsp *http.Response) (*PostAlertRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertclassesResponse parses an HTTP response from a GetAlertclassesWithResponse call
func ParseGetAlertclassesResponse(rsp *http.Response) (*GetAlertclassesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertclassesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAlertclassesResponse parses an HTTP response from a PutAlertclassesWithResponse call
func ParsePutAlertclassesResponse(rsp *http.Response) (*PutAlertclassesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAlertclassesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertserviceResponse parses an HTTP response from a GetAlertserviceWithResponse call
func ParseGetAlertserviceResponse(rsp *http.Response) (*GetAlertserviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertserviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAlertserviceResponse parses an HTTP response from a PostAlertserviceWithResponse call
func ParsePostAlertserviceResponse(rsp *http.Response) (*PostAlertserviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertserviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAlertserviceIdIdResponse parses an HTTP response from a DeleteAlertserviceIdIdWithResponse call
func ParseDeleteAlertserviceIdIdResponse(rsp *http.Response) (*DeleteAlertserviceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertserviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertserviceIdIdResponse parses an HTTP response from a GetAlertserviceIdIdWithResponse call
func ParseGetAlertserviceIdIdResponse(rsp *http.Response) (*GetAlertserviceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertserviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAlertserviceIdIdResponse parses an HTTP response from a PutAlertserviceIdIdWithResponse call
func ParsePutAlertserviceIdIdResponse(rsp *http.Response) (*PutAlertserviceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAlertserviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertserviceListTypesResponse parses an HTTP response from a GetAlertserviceListTypesWithResponse call
func ParseGetAlertserviceListTypesResponse(rsp *http.Response) (*GetAlertserviceListTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertserviceListTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAlertserviceTestResponse parses an HTTP response from a PostAlertserviceTestWithResponse call
func ParsePostAlertserviceTestResponse(rsp *http.Response) (*PostAlertserviceTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertserviceTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiKeyResponse parses an HTTP response from a GetApiKeyWithResponse call
func ParseGetApiKeyResponse(rsp *http.Response) (*GetApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiKeyResponse parses an HTTP response from a PostApiKeyWithResponse call
func ParsePostApiKeyResponse(rsp *http.Response) (*PostApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiKeyIdIdResponse parses an HTTP response from a DeleteApiKeyIdIdWithResponse call
func ParseDeleteApiKeyIdIdResponse(rsp *http.Response) (*DeleteApiKeyIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeyIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiKeyIdIdResponse parses an HTTP response from a GetApiKeyIdIdWithResponse call
func ParseGetApiKeyIdIdResponse(rsp *http.Response) (*GetApiKeyIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiKeyIdIdResponse parses an HTTP response from a PutApiKeyIdIdWithResponse call
func ParsePutApiKeyIdIdResponse(rsp *http.Response) (*PutApiKeyIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiKeyIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAuthCheckUserResponse parses an HTTP response from a PostAuthCheckUserWithResponse call
func ParsePostAuthCheckUserResponse(rsp *http.Response) (*PostAuthCheckUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthCheckUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAuthGenerateTokenResponse parses an HTTP response from a PostAuthGenerateTokenWithResponse call
func ParsePostAuthGenerateTokenResponse(rsp *http.Response) (*PostAuthGenerateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthGenerateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthSessionsResponse parses an HTTP response from a GetAuthSessionsWithResponse call
func ParseGetAuthSessionsResponse(rsp *http.Response) (*GetAuthSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthTwoFactorAuthResponse parses an HTTP response from a GetAuthTwoFactorAuthWithResponse call
func ParseGetAuthTwoFactorAuthResponse(rsp *http.Response) (*GetAuthTwoFactorAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthTwoFactorAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthTwofactorResponse parses an HTTP response from a GetAuthTwofactorWithResponse call
func ParseGetAuthTwofactorResponse(rsp *http.Response) (*GetAuthTwofactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthTwofactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAuthTwofactorResponse parses an HTTP response from a PutAuthTwofactorWithResponse call
func ParsePutAuthTwofactorResponse(rsp *http.Response) (*PutAuthTwofactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAuthTwofactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthTwofactorProvisioningUriResponse parses an HTTP response from a GetAuthTwofactorProvisioningUriWithResponse call
func ParseGetAuthTwofactorProvisioningUriResponse(rsp *http.Response) (*GetAuthTwofactorProvisioningUriResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthTwofactorProvisioningUriResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthTwofactorRenewSecretResponse parses an HTTP response from a GetAuthTwofactorRenewSecretWithResponse call
func ParseGetAuthTwofactorRenewSecretResponse(rsp *http.Response) (*GetAuthTwofactorRenewSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthTwofactorRenewSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAuthTwofactorVerifyResponse parses an HTTP response from a PostAuthTwofactorVerifyWithResponse call
func ParsePostAuthTwofactorVerifyResponse(rsp *http.Response) (*PostAuthTwofactorVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthTwofactorVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBootAttachResponse parses an HTTP response from a PostBootAttachWithResponse call
func ParsePostBootAttachResponse(rsp *http.Response) (*PostBootAttachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBootAttachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBootDetachResponse parses an HTTP response from a PostBootDetachWithResponse call
func ParsePostBootDetachResponse(rsp *http.Response) (*PostBootDetachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBootDetachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBootGetDisksResponse parses an HTTP response from a GetBootGetDisksWithResponse call
func ParseGetBootGetDisksResponse(rsp *http.Response) (*GetBootGetDisksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBootGetDisksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBootGetScrubIntervalResponse parses an HTTP response from a GetBootGetScrubIntervalWithResponse call
func ParseGetBootGetScrubIntervalResponse(rsp *http.Response) (*GetBootGetScrubIntervalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBootGetScrubIntervalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBootGetStateResponse parses an HTTP response from a GetBootGetStateWithResponse call
func ParseGetBootGetStateResponse(rsp *http.Response) (*GetBootGetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBootGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBootReplaceResponse parses an HTTP response from a PostBootReplaceWithResponse call
func ParsePostBootReplaceResponse(rsp *http.Response) (*PostBootReplaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBootReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBootScrubResponse parses an HTTP response from a GetBootScrubWithResponse call
func ParseGetBootScrubResponse(rsp *http.Response) (*GetBootScrubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBootScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBootSetScrubIntervalResponse parses an HTTP response from a PostBootSetScrubIntervalWithResponse call
func ParsePostBootSetScrubIntervalResponse(rsp *http.Response) (*PostBootSetScrubIntervalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBootSetScrubIntervalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBootenvResponse parses an HTTP response from a GetBootenvWithResponse call
func ParseGetBootenvResponse(rsp *http.Response) (*GetBootenvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBootenvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBootenvResponse parses an HTTP response from a PostBootenvWithResponse call
func ParsePostBootenvResponse(rsp *http.Response) (*PostBootenvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBootenvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteBootenvIdIdResponse parses an HTTP response from a DeleteBootenvIdIdWithResponse call
func ParseDeleteBootenvIdIdResponse(rsp *http.Response) (*DeleteBootenvIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBootenvIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBootenvIdIdResponse parses an HTTP response from a GetBootenvIdIdWithResponse call
func ParseGetBootenvIdIdResponse(rsp *http.Response) (*GetBootenvIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBootenvIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutBootenvIdIdResponse parses an HTTP response from a PutBootenvIdIdWithResponse call
func ParsePutBootenvIdIdResponse(rsp *http.Response) (*PutBootenvIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBootenvIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBootenvIdIdActivateResponse parses an HTTP response from a PostBootenvIdIdActivateWithResponse call
func ParsePostBootenvIdIdActivateResponse(rsp *http.Response) (*PostBootenvIdIdActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBootenvIdIdActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBootenvIdIdSetAttributeResponse parses an HTTP response from a PostBootenvIdIdSetAttributeWithResponse call
func ParsePostBootenvIdIdSetAttributeResponse(rsp *http.Response) (*PostBootenvIdIdSetAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBootenvIdIdSetAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateResponse parses an HTTP response from a GetCertificateWithResponse call
func ParseGetCertificateResponse(rsp *http.Response) (*GetCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCertificateResponse parses an HTTP response from a PostCertificateWithResponse call
func ParsePostCertificateResponse(rsp *http.Response) (*PostCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateAcmeServerChoicesResponse parses an HTTP response from a GetCertificateAcmeServerChoicesWithResponse call
func ParseGetCertificateAcmeServerChoicesResponse(rsp *http.Response) (*GetCertificateAcmeServerChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateAcmeServerChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateCountryChoicesResponse parses an HTTP response from a GetCertificateCountryChoicesWithResponse call
func ParseGetCertificateCountryChoicesResponse(rsp *http.Response) (*GetCertificateCountryChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateCountryChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateEcCurveChoicesResponse parses an HTTP response from a GetCertificateEcCurveChoicesWithResponse call
func ParseGetCertificateEcCurveChoicesResponse(rsp *http.Response) (*GetCertificateEcCurveChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateEcCurveChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateExtendedKeyUsageChoicesResponse parses an HTTP response from a GetCertificateExtendedKeyUsageChoicesWithResponse call
func ParseGetCertificateExtendedKeyUsageChoicesResponse(rsp *http.Response) (*GetCertificateExtendedKeyUsageChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateExtendedKeyUsageChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCertificateIdIdResponse parses an HTTP response from a DeleteCertificateIdIdWithResponse call
func ParseDeleteCertificateIdIdResponse(rsp *http.Response) (*DeleteCertificateIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCertificateIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateIdIdResponse parses an HTTP response from a GetCertificateIdIdWithResponse call
func ParseGetCertificateIdIdResponse(rsp *http.Response) (*GetCertificateIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCertificateIdIdResponse parses an HTTP response from a PutCertificateIdIdWithResponse call
func ParsePutCertificateIdIdResponse(rsp *http.Response) (*PutCertificateIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCertificateIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateKeyTypeChoicesResponse parses an HTTP response from a GetCertificateKeyTypeChoicesWithResponse call
func ParseGetCertificateKeyTypeChoicesResponse(rsp *http.Response) (*GetCertificateKeyTypeChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateKeyTypeChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateProfilesResponse parses an HTTP response from a GetCertificateProfilesWithResponse call
func ParseGetCertificateProfilesResponse(rsp *http.Response) (*GetCertificateProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateauthorityResponse parses an HTTP response from a GetCertificateauthorityWithResponse call
func ParseGetCertificateauthorityResponse(rsp *http.Response) (*GetCertificateauthorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateauthorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCertificateauthorityResponse parses an HTTP response from a PostCertificateauthorityWithResponse call
func ParsePostCertificateauthorityResponse(rsp *http.Response) (*PostCertificateauthorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCertificateauthorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCertificateauthorityCaSignCsrResponse parses an HTTP response from a PostCertificateauthorityCaSignCsrWithResponse call
func ParsePostCertificateauthorityCaSignCsrResponse(rsp *http.Response) (*PostCertificateauthorityCaSignCsrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCertificateauthorityCaSignCsrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCertificateauthorityIdIdResponse parses an HTTP response from a DeleteCertificateauthorityIdIdWithResponse call
func ParseDeleteCertificateauthorityIdIdResponse(rsp *http.Response) (*DeleteCertificateauthorityIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCertificateauthorityIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateauthorityIdIdResponse parses an HTTP response from a GetCertificateauthorityIdIdWithResponse call
func ParseGetCertificateauthorityIdIdResponse(rsp *http.Response) (*GetCertificateauthorityIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateauthorityIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCertificateauthorityIdIdResponse parses an HTTP response from a PutCertificateauthorityIdIdWithResponse call
func ParsePutCertificateauthorityIdIdResponse(rsp *http.Response) (*PutCertificateauthorityIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCertificateauthorityIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificateauthorityProfilesResponse parses an HTTP response from a GetCertificateauthorityProfilesWithResponse call
func ParseGetCertificateauthorityProfilesResponse(rsp *http.Response) (*GetCertificateauthorityProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateauthorityProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCloudsyncResponse parses an HTTP response from a GetCloudsyncWithResponse call
func ParseGetCloudsyncResponse(rsp *http.Response) (*GetCloudsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncResponse parses an HTTP response from a PostCloudsyncWithResponse call
func ParsePostCloudsyncResponse(rsp *http.Response) (*PostCloudsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCloudsyncCommonTaskSchemaResponse parses an HTTP response from a GetCloudsyncCommonTaskSchemaWithResponse call
func ParseGetCloudsyncCommonTaskSchemaResponse(rsp *http.Response) (*GetCloudsyncCommonTaskSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncCommonTaskSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCloudsyncCredentialsResponse parses an HTTP response from a GetCloudsyncCredentialsWithResponse call
func ParseGetCloudsyncCredentialsResponse(rsp *http.Response) (*GetCloudsyncCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncCredentialsResponse parses an HTTP response from a PostCloudsyncCredentialsWithResponse call
func ParsePostCloudsyncCredentialsResponse(rsp *http.Response) (*PostCloudsyncCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCloudsyncCredentialsIdIdResponse parses an HTTP response from a DeleteCloudsyncCredentialsIdIdWithResponse call
func ParseDeleteCloudsyncCredentialsIdIdResponse(rsp *http.Response) (*DeleteCloudsyncCredentialsIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCloudsyncCredentialsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCloudsyncCredentialsIdIdResponse parses an HTTP response from a GetCloudsyncCredentialsIdIdWithResponse call
func ParseGetCloudsyncCredentialsIdIdResponse(rsp *http.Response) (*GetCloudsyncCredentialsIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncCredentialsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCloudsyncCredentialsIdIdResponse parses an HTTP response from a PutCloudsyncCredentialsIdIdWithResponse call
func ParsePutCloudsyncCredentialsIdIdResponse(rsp *http.Response) (*PutCloudsyncCredentialsIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCloudsyncCredentialsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncCredentialsVerifyResponse parses an HTTP response from a PostCloudsyncCredentialsVerifyWithResponse call
func ParsePostCloudsyncCredentialsVerifyResponse(rsp *http.Response) (*PostCloudsyncCredentialsVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncCredentialsVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCloudsyncIdIdResponse parses an HTTP response from a DeleteCloudsyncIdIdWithResponse call
func ParseDeleteCloudsyncIdIdResponse(rsp *http.Response) (*DeleteCloudsyncIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCloudsyncIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCloudsyncIdIdResponse parses an HTTP response from a GetCloudsyncIdIdWithResponse call
func ParseGetCloudsyncIdIdResponse(rsp *http.Response) (*GetCloudsyncIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCloudsyncIdIdResponse parses an HTTP response from a PutCloudsyncIdIdWithResponse call
func ParsePutCloudsyncIdIdResponse(rsp *http.Response) (*PutCloudsyncIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCloudsyncIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncIdIdAbortResponse parses an HTTP response from a PostCloudsyncIdIdAbortWithResponse call
func ParsePostCloudsyncIdIdAbortResponse(rsp *http.Response) (*PostCloudsyncIdIdAbortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncIdIdAbortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncIdIdRestoreResponse parses an HTTP response from a PostCloudsyncIdIdRestoreWithResponse call
func ParsePostCloudsyncIdIdRestoreResponse(rsp *http.Response) (*PostCloudsyncIdIdRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncIdIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncIdIdSyncResponse parses an HTTP response from a PostCloudsyncIdIdSyncWithResponse call
func ParsePostCloudsyncIdIdSyncResponse(rsp *http.Response) (*PostCloudsyncIdIdSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncIdIdSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncListBucketsResponse parses an HTTP response from a PostCloudsyncListBucketsWithResponse call
func ParsePostCloudsyncListBucketsResponse(rsp *http.Response) (*PostCloudsyncListBucketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncListBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncListDirectoryResponse parses an HTTP response from a PostCloudsyncListDirectoryWithResponse call
func ParsePostCloudsyncListDirectoryResponse(rsp *http.Response) (*PostCloudsyncListDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncListDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncOnedriveListDrivesResponse parses an HTTP response from a PostCloudsyncOnedriveListDrivesWithResponse call
func ParsePostCloudsyncOnedriveListDrivesResponse(rsp *http.Response) (*PostCloudsyncOnedriveListDrivesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncOnedriveListDrivesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCloudsyncProvidersResponse parses an HTTP response from a GetCloudsyncProvidersWithResponse call
func ParseGetCloudsyncProvidersResponse(rsp *http.Response) (*GetCloudsyncProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCloudsyncSyncOnetimeResponse parses an HTTP response from a PostCloudsyncSyncOnetimeWithResponse call
func ParsePostCloudsyncSyncOnetimeResponse(rsp *http.Response) (*PostCloudsyncSyncOnetimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncSyncOnetimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConfigResetResponse parses an HTTP response from a PostConfigResetWithResponse call
func ParsePostConfigResetResponse(rsp *http.Response) (*PostConfigResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConfigResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCoreBulkResponse parses an HTTP response from a PostCoreBulkWithResponse call
func ParsePostCoreBulkResponse(rsp *http.Response) (*PostCoreBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCoreDebugResponse parses an HTTP response from a PostCoreDebugWithResponse call
func ParsePostCoreDebugResponse(rsp *http.Response) (*PostCoreDebugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreDebugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCoreDownloadResponse parses an HTTP response from a PostCoreDownloadWithResponse call
func ParsePostCoreDownloadResponse(rsp *http.Response) (*PostCoreDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCoreGetEventsResponse parses an HTTP response from a GetCoreGetEventsWithResponse call
func ParseGetCoreGetEventsResponse(rsp *http.Response) (*GetCoreGetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCoreGetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCoreGetJobsResponse parses an HTTP response from a GetCoreGetJobsWithResponse call
func ParseGetCoreGetJobsResponse(rsp *http.Response) (*GetCoreGetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCoreGetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCoreGetMethodsResponse parses an HTTP response from a PostCoreGetMethodsWithResponse call
func ParsePostCoreGetMethodsResponse(rsp *http.Response) (*PostCoreGetMethodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreGetMethodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCoreGetServicesResponse parses an HTTP response from a GetCoreGetServicesWithResponse call
func ParseGetCoreGetServicesResponse(rsp *http.Response) (*GetCoreGetServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCoreGetServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCoreJobAbortResponse parses an HTTP response from a PostCoreJobAbortWithResponse call
func ParsePostCoreJobAbortResponse(rsp *http.Response) (*PostCoreJobAbortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreJobAbortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCoreJobUpdateResponse parses an HTTP response from a PostCoreJobUpdateWithResponse call
func ParsePostCoreJobUpdateResponse(rsp *http.Response) (*PostCoreJobUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreJobUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCoreJobWaitResponse parses an HTTP response from a PostCoreJobWaitWithResponse call
func ParsePostCoreJobWaitResponse(rsp *http.Response) (*PostCoreJobWaitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreJobWaitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCorePingResponse parses an HTTP response from a GetCorePingWithResponse call
func ParseGetCorePingResponse(rsp *http.Response) (*GetCorePingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorePingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCorePingRemoteResponse parses an HTTP response from a PostCorePingRemoteWithResponse call
func ParsePostCorePingRemoteResponse(rsp *http.Response) (*PostCorePingRemoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCorePingRemoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCoreResizeShellResponse parses an HTTP response from a PostCoreResizeShellWithResponse call
func ParsePostCoreResizeShellResponse(rsp *http.Response) (*PostCoreResizeShellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreResizeShellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCoreSessionsResponse parses an HTTP response from a GetCoreSessionsWithResponse call
func ParseGetCoreSessionsResponse(rsp *http.Response) (*GetCoreSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCoreSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCronjobResponse parses an HTTP response from a GetCronjobWithResponse call
func ParseGetCronjobResponse(rsp *http.Response) (*GetCronjobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCronjobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCronjobResponse parses an HTTP response from a PostCronjobWithResponse call
func ParsePostCronjobResponse(rsp *http.Response) (*PostCronjobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCronjobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCronjobIdIdResponse parses an HTTP response from a DeleteCronjobIdIdWithResponse call
func ParseDeleteCronjobIdIdResponse(rsp *http.Response) (*DeleteCronjobIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCronjobIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCronjobIdIdResponse parses an HTTP response from a GetCronjobIdIdWithResponse call
func ParseGetCronjobIdIdResponse(rsp *http.Response) (*GetCronjobIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCronjobIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCronjobIdIdResponse parses an HTTP response from a PutCronjobIdIdWithResponse call
func ParsePutCronjobIdIdResponse(rsp *http.Response) (*PutCronjobIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCronjobIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCronjobRunResponse parses an HTTP response from a PostCronjobRunWithResponse call
func ParsePostCronjobRunResponse(rsp *http.Response) (*PostCronjobRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCronjobRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDeviceGetInfoResponse parses an HTTP response from a PostDeviceGetInfoWithResponse call
func ParsePostDeviceGetInfoResponse(rsp *http.Response) (*PostDeviceGetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeviceGetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDirectoryservicesCacheRefreshResponse parses an HTTP response from a GetDirectoryservicesCacheRefreshWithResponse call
func ParseGetDirectoryservicesCacheRefreshResponse(rsp *http.Response) (*GetDirectoryservicesCacheRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDirectoryservicesCacheRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDirectoryservicesGetStateResponse parses an HTTP response from a GetDirectoryservicesGetStateWithResponse call
func ParseGetDirectoryservicesGetStateResponse(rsp *http.Response) (*GetDirectoryservicesGetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDirectoryservicesGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDiskResponse parses an HTTP response from a GetDiskWithResponse call
func ParseGetDiskResponse(rsp *http.Response) (*GetDiskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskGetEncryptedResponse parses an HTTP response from a PostDiskGetEncryptedWithResponse call
func ParsePostDiskGetEncryptedResponse(rsp *http.Response) (*PostDiskGetEncryptedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskGetEncryptedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskGetUnusedResponse parses an HTTP response from a PostDiskGetUnusedWithResponse call
func ParsePostDiskGetUnusedResponse(rsp *http.Response) (*PostDiskGetUnusedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskGetUnusedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDiskIdIdResponse parses an HTTP response from a GetDiskIdIdWithResponse call
func ParseGetDiskIdIdResponse(rsp *http.Response) (*GetDiskIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutDiskIdIdResponse parses an HTTP response from a PutDiskIdIdWithResponse call
func ParsePutDiskIdIdResponse(rsp *http.Response) (*PutDiskIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDiskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDiskLabelToDevResponse parses an HTTP response from a GetDiskLabelToDevWithResponse call
func ParseGetDiskLabelToDevResponse(rsp *http.Response) (*GetDiskLabelToDevResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiskLabelToDevResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskOverprovisionResponse parses an HTTP response from a PostDiskOverprovisionWithResponse call
func ParsePostDiskOverprovisionResponse(rsp *http.Response) (*PostDiskOverprovisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskOverprovisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDiskSedDevNameResponse parses an HTTP response from a GetDiskSedDevNameWithResponse call
func ParseGetDiskSedDevNameResponse(rsp *http.Response) (*GetDiskSedDevNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiskSedDevNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskSmartAttributesResponse parses an HTTP response from a PostDiskSmartAttributesWithResponse call
func ParsePostDiskSmartAttributesResponse(rsp *http.Response) (*PostDiskSmartAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskSmartAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskSpindownResponse parses an HTTP response from a PostDiskSpindownWithResponse call
func ParsePostDiskSpindownResponse(rsp *http.Response) (*PostDiskSpindownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskSpindownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskTemperatureResponse parses an HTTP response from a PostDiskTemperatureWithResponse call
func ParsePostDiskTemperatureResponse(rsp *http.Response) (*PostDiskTemperatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskTemperatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskTemperaturesResponse parses an HTTP response from a PostDiskTemperaturesWithResponse call
func ParsePostDiskTemperaturesResponse(rsp *http.Response) (*PostDiskTemperaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskTemperaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskUnoverprovisionResponse parses an HTTP response from a PostDiskUnoverprovisionWithResponse call
func ParsePostDiskUnoverprovisionResponse(rsp *http.Response) (*PostDiskUnoverprovisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskUnoverprovisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDiskWipeResponse parses an HTTP response from a PostDiskWipeWithResponse call
func ParsePostDiskWipeResponse(rsp *http.Response) (*PostDiskWipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDiskWipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDnsQueryResponse parses an HTTP response from a GetDnsQueryWithResponse call
func ParseGetDnsQueryResponse(rsp *http.Response) (*GetDnsQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDnsQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDyndnsResponse parses an HTTP response from a GetDyndnsWithResponse call
func ParseGetDyndnsResponse(rsp *http.Response) (*GetDyndnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDyndnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutDyndnsResponse parses an HTTP response from a PutDyndnsWithResponse call
func ParsePutDyndnsResponse(rsp *http.Response) (*PutDyndnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDyndnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDyndnsProviderChoicesResponse parses an HTTP response from a GetDyndnsProviderChoicesWithResponse call
func ParseGetDyndnsProviderChoicesResponse(rsp *http.Response) (*GetDyndnsProviderChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDyndnsProviderChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEc2MetaResponse parses an HTTP response from a GetEc2MetaWithResponse call
func ParseGetEc2MetaResponse(rsp *http.Response) (*GetEc2MetaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEc2MetaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEc2InstanceIdResponse parses an HTTP response from a GetEc2InstanceIdWithResponse call
func ParseGetEc2InstanceIdResponse(rsp *http.Response) (*GetEc2InstanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEc2InstanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEc2SetNtpServersResponse parses an HTTP response from a GetEc2SetNtpServersWithResponse call
func ParseGetEc2SetNtpServersResponse(rsp *http.Response) (*GetEc2SetNtpServersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEc2SetNtpServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEc2SetRootSshPublicKeyResponse parses an HTTP response from a GetEc2SetRootSshPublicKeyWithResponse call
func ParseGetEc2SetRootSshPublicKeyResponse(rsp *http.Response) (*GetEc2SetRootSshPublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEc2SetRootSshPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEc2SetupResponse parses an HTTP response from a GetEc2SetupWithResponse call
func ParseGetEc2SetupResponse(rsp *http.Response) (*GetEc2SetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEc2SetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnclosureResponse parses an HTTP response from a GetEnclosureWithResponse call
func ParseGetEnclosureResponse(rsp *http.Response) (*GetEnclosureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnclosureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnclosureIdIdResponse parses an HTTP response from a GetEnclosureIdIdWithResponse call
func ParseGetEnclosureIdIdResponse(rsp *http.Response) (*GetEnclosureIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnclosureIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutEnclosureIdIdResponse parses an HTTP response from a PutEnclosureIdIdWithResponse call
func ParsePutEnclosureIdIdResponse(rsp *http.Response) (*PutEnclosureIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutEnclosureIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostEnclosureSetSlotStatusResponse parses an HTTP response from a PostEnclosureSetSlotStatusWithResponse call
func ParsePostEnclosureSetSlotStatusResponse(rsp *http.Response) (*PostEnclosureSetSlotStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnclosureSetSlotStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverResponse parses an HTTP response from a GetFailoverWithResponse call
func ParseGetFailoverResponse(rsp *http.Response) (*GetFailoverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutFailoverResponse parses an HTTP response from a PutFailoverWithResponse call
func ParsePutFailoverResponse(rsp *http.Response) (*PutFailoverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFailoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFailoverCallRemoteResponse parses an HTTP response from a PostFailoverCallRemoteWithResponse call
func ParsePostFailoverCallRemoteResponse(rsp *http.Response) (*PostFailoverCallRemoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFailoverCallRemoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFailoverControlResponse parses an HTTP response from a PostFailoverControlWithResponse call
func ParsePostFailoverControlResponse(rsp *http.Response) (*PostFailoverControlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFailoverControlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverForceMasterResponse parses an HTTP response from a GetFailoverForceMasterWithResponse call
func ParseGetFailoverForceMasterResponse(rsp *http.Response) (*GetFailoverForceMasterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverForceMasterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverHardwareResponse parses an HTTP response from a GetFailoverHardwareWithResponse call
func ParseGetFailoverHardwareResponse(rsp *http.Response) (*GetFailoverHardwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverHardwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverInProgressResponse parses an HTTP response from a GetFailoverInProgressWithResponse call
func ParseGetFailoverInProgressResponse(rsp *http.Response) (*GetFailoverInProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverInProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverLicensedResponse parses an HTTP response from a GetFailoverLicensedWithResponse call
func ParseGetFailoverLicensedResponse(rsp *http.Response) (*GetFailoverLicensedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverLicensedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverNodeResponse parses an HTTP response from a GetFailoverNodeWithResponse call
func ParseGetFailoverNodeResponse(rsp *http.Response) (*GetFailoverNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverStatusResponse parses an HTTP response from a GetFailoverStatusWithResponse call
func ParseGetFailoverStatusResponse(rsp *http.Response) (*GetFailoverStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverSyncFromPeerResponse parses an HTTP response from a GetFailoverSyncFromPeerWithResponse call
func ParseGetFailoverSyncFromPeerResponse(rsp *http.Response) (*GetFailoverSyncFromPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverSyncFromPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFailoverSyncToPeerResponse parses an HTTP response from a PostFailoverSyncToPeerWithResponse call
func ParsePostFailoverSyncToPeerResponse(rsp *http.Response) (*PostFailoverSyncToPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFailoverSyncToPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFailoverUnlockResponse parses an HTTP response from a PostFailoverUnlockWithResponse call
func ParsePostFailoverUnlockResponse(rsp *http.Response) (*PostFailoverUnlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFailoverUnlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFailoverUpgradeResponse parses an HTTP response from a PostFailoverUpgradeWithResponse call
func ParsePostFailoverUpgradeResponse(rsp *http.Response) (*PostFailoverUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFailoverUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverUpgradeFinishResponse parses an HTTP response from a GetFailoverUpgradeFinishWithResponse call
func ParseGetFailoverUpgradeFinishResponse(rsp *http.Response) (*GetFailoverUpgradeFinishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverUpgradeFinishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFailoverUpgradePendingResponse parses an HTTP response from a GetFailoverUpgradePendingWithResponse call
func ParseGetFailoverUpgradePendingResponse(rsp *http.Response) (*GetFailoverUpgradePendingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFailoverUpgradePendingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFcportResponse parses an HTTP response from a GetFcportWithResponse call
func ParseGetFcportResponse(rsp *http.Response) (*GetFcportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFcportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFcportIdIdResponse parses an HTTP response from a GetFcportIdIdWithResponse call
func ParseGetFcportIdIdResponse(rsp *http.Response) (*GetFcportIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFcportIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutFcportIdIdResponse parses an HTTP response from a PutFcportIdIdWithResponse call
func ParsePutFcportIdIdResponse(rsp *http.Response) (*PutFcportIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFcportIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemAclIsTrivialResponse parses an HTTP response from a PostFilesystemAclIsTrivialWithResponse call
func ParsePostFilesystemAclIsTrivialResponse(rsp *http.Response) (*PostFilesystemAclIsTrivialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemAclIsTrivialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemChownResponse parses an HTTP response from a PostFilesystemChownWithResponse call
func ParsePostFilesystemChownResponse(rsp *http.Response) (*PostFilesystemChownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemChownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFilesystemDefaultAclChoicesResponse parses an HTTP response from a GetFilesystemDefaultAclChoicesWithResponse call
func ParseGetFilesystemDefaultAclChoicesResponse(rsp *http.Response) (*GetFilesystemDefaultAclChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilesystemDefaultAclChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemGetDefaultAclResponse parses an HTTP response from a PostFilesystemGetDefaultAclWithResponse call
func ParsePostFilesystemGetDefaultAclResponse(rsp *http.Response) (*PostFilesystemGetDefaultAclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemGetDefaultAclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemGetaclResponse parses an HTTP response from a PostFilesystemGetaclWithResponse call
func ParsePostFilesystemGetaclResponse(rsp *http.Response) (*PostFilesystemGetaclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemGetaclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemListdirResponse parses an HTTP response from a PostFilesystemListdirWithResponse call
func ParsePostFilesystemListdirResponse(rsp *http.Response) (*PostFilesystemListdirResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemListdirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemSetaclResponse parses an HTTP response from a PostFilesystemSetaclWithResponse call
func ParsePostFilesystemSetaclResponse(rsp *http.Response) (*PostFilesystemSetaclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemSetaclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemSetpermResponse parses an HTTP response from a PostFilesystemSetpermWithResponse call
func ParsePostFilesystemSetpermResponse(rsp *http.Response) (*PostFilesystemSetpermResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemSetpermResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemStatResponse parses an HTTP response from a PostFilesystemStatWithResponse call
func ParsePostFilesystemStatResponse(rsp *http.Response) (*PostFilesystemStatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemStatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilesystemStatfsResponse parses an HTTP response from a PostFilesystemStatfsWithResponse call
func ParsePostFilesystemStatfsResponse(rsp *http.Response) (*PostFilesystemStatfsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemStatfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFtpResponse parses an HTTP response from a GetFtpWithResponse call
func ParseGetFtpResponse(rsp *http.Response) (*GetFtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutFtpResponse parses an HTTP response from a PutFtpWithResponse call
func ParsePutFtpResponse(rsp *http.Response) (*PutFtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupResponse parses an HTTP response from a GetGroupWithResponse call
func ParseGetGroupResponse(rsp *http.Response) (*GetGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostGroupResponse parses an HTTP response from a PostGroupWithResponse call
func ParsePostGroupResponse(rsp *http.Response) (*PostGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostGroupGetGroupObjResponse parses an HTTP response from a PostGroupGetGroupObjWithResponse call
func ParsePostGroupGetGroupObjResponse(rsp *http.Response) (*PostGroupGetGroupObjResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupGetGroupObjResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupGetNextGidResponse parses an HTTP response from a GetGroupGetNextGidWithResponse call
func ParseGetGroupGetNextGidResponse(rsp *http.Response) (*GetGroupGetNextGidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupGetNextGidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteGroupIdIdResponse parses an HTTP response from a DeleteGroupIdIdWithResponse call
func ParseDeleteGroupIdIdResponse(rsp *http.Response) (*DeleteGroupIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupIdIdResponse parses an HTTP response from a GetGroupIdIdWithResponse call
func ParseGetGroupIdIdResponse(rsp *http.Response) (*GetGroupIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutGroupIdIdResponse parses an HTTP response from a PutGroupIdIdWithResponse call
func ParsePutGroupIdIdResponse(rsp *http.Response) (*PutGroupIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGroupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdmapResponse parses an HTTP response from a GetIdmapWithResponse call
func ParseGetIdmapResponse(rsp *http.Response) (*GetIdmapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIdmapResponse parses an HTTP response from a PostIdmapWithResponse call
func ParsePostIdmapResponse(rsp *http.Response) (*PostIdmapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdmapBackendChoicesResponse parses an HTTP response from a GetIdmapBackendChoicesWithResponse call
func ParseGetIdmapBackendChoicesResponse(rsp *http.Response) (*GetIdmapBackendChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapBackendChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdmapBackendOptionsResponse parses an HTTP response from a GetIdmapBackendOptionsWithResponse call
func ParseGetIdmapBackendOptionsResponse(rsp *http.Response) (*GetIdmapBackendOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapBackendOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdmapClearIdmapCacheResponse parses an HTTP response from a GetIdmapClearIdmapCacheWithResponse call
func ParseGetIdmapClearIdmapCacheResponse(rsp *http.Response) (*GetIdmapClearIdmapCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapClearIdmapCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIdmapIdIdResponse parses an HTTP response from a DeleteIdmapIdIdWithResponse call
func ParseDeleteIdmapIdIdResponse(rsp *http.Response) (*DeleteIdmapIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdmapIdIdResponse parses an HTTP response from a GetIdmapIdIdWithResponse call
func ParseGetIdmapIdIdResponse(rsp *http.Response) (*GetIdmapIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIdmapIdIdResponse parses an HTTP response from a PutIdmapIdIdWithResponse call
func ParsePutIdmapIdIdResponse(rsp *http.Response) (*PutIdmapIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIdmapOptionsChoicesResponse parses an HTTP response from a PostIdmapOptionsChoicesWithResponse call
func ParsePostIdmapOptionsChoicesResponse(rsp *http.Response) (*PostIdmapOptionsChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapOptionsChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInitshutdownscriptResponse parses an HTTP response from a GetInitshutdownscriptWithResponse call
func ParseGetInitshutdownscriptResponse(rsp *http.Response) (*GetInitshutdownscriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInitshutdownscriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInitshutdownscriptResponse parses an HTTP response from a PostInitshutdownscriptWithResponse call
func ParsePostInitshutdownscriptResponse(rsp *http.Response) (*PostInitshutdownscriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInitshutdownscriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteInitshutdownscriptIdIdResponse parses an HTTP response from a DeleteInitshutdownscriptIdIdWithResponse call
func ParseDeleteInitshutdownscriptIdIdResponse(rsp *http.Response) (*DeleteInitshutdownscriptIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInitshutdownscriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInitshutdownscriptIdIdResponse parses an HTTP response from a GetInitshutdownscriptIdIdWithResponse call
func ParseGetInitshutdownscriptIdIdResponse(rsp *http.Response) (*GetInitshutdownscriptIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInitshutdownscriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutInitshutdownscriptIdIdResponse parses an HTTP response from a PutInitshutdownscriptIdIdWithResponse call
func ParsePutInitshutdownscriptIdIdResponse(rsp *http.Response) (*PutInitshutdownscriptIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInitshutdownscriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceResponse parses an HTTP response from a GetInterfaceWithResponse call
func ParseGetInterfaceResponse(rsp *http.Response) (*GetInterfaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInterfaceResponse parses an HTTP response from a PostInterfaceWithResponse call
func ParsePostInterfaceResponse(rsp *http.Response) (*PostInterfaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInterfaceBridgeMembersChoicesResponse parses an HTTP response from a PostInterfaceBridgeMembersChoicesWithResponse call
func ParsePostInterfaceBridgeMembersChoicesResponse(rsp *http.Response) (*PostInterfaceBridgeMembersChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceBridgeMembersChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceCheckinResponse parses an HTTP response from a GetInterfaceCheckinWithResponse call
func ParseGetInterfaceCheckinResponse(rsp *http.Response) (*GetInterfaceCheckinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceCheckinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceCheckinWaitingResponse parses an HTTP response from a GetInterfaceCheckinWaitingWithResponse call
func ParseGetInterfaceCheckinWaitingResponse(rsp *http.Response) (*GetInterfaceCheckinWaitingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceCheckinWaitingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInterfaceChoicesResponse parses an HTTP response from a PostInterfaceChoicesWithResponse call
func ParsePostInterfaceChoicesResponse(rsp *http.Response) (*PostInterfaceChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInterfaceCommitResponse parses an HTTP response from a PostInterfaceCommitWithResponse call
func ParsePostInterfaceCommitResponse(rsp *http.Response) (*PostInterfaceCommitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceCommitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceEnableCapabilitiesIndividuallyResponse parses an HTTP response from a GetInterfaceEnableCapabilitiesIndividuallyWithResponse call
func ParseGetInterfaceEnableCapabilitiesIndividuallyResponse(rsp *http.Response) (*GetInterfaceEnableCapabilitiesIndividuallyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceEnableCapabilitiesIndividuallyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceHasPendingChangesResponse parses an HTTP response from a GetInterfaceHasPendingChangesWithResponse call
func ParseGetInterfaceHasPendingChangesResponse(rsp *http.Response) (*GetInterfaceHasPendingChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceHasPendingChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteInterfaceIdIdResponse parses an HTTP response from a DeleteInterfaceIdIdWithResponse call
func ParseDeleteInterfaceIdIdResponse(rsp *http.Response) (*DeleteInterfaceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInterfaceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceIdIdResponse parses an HTTP response from a GetInterfaceIdIdWithResponse call
func ParseGetInterfaceIdIdResponse(rsp *http.Response) (*GetInterfaceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutInterfaceIdIdResponse parses an HTTP response from a PutInterfaceIdIdWithResponse call
func ParsePutInterfaceIdIdResponse(rsp *http.Response) (*PutInterfaceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInterfaceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInterfaceIpInUseResponse parses an HTTP response from a PostInterfaceIpInUseWithResponse call
func ParsePostInterfaceIpInUseResponse(rsp *http.Response) (*PostInterfaceIpInUseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceIpInUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInterfaceLagPortsChoicesResponse parses an HTTP response from a PostInterfaceLagPortsChoicesWithResponse call
func ParsePostInterfaceLagPortsChoicesResponse(rsp *http.Response) (*PostInterfaceLagPortsChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceLagPortsChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceLagSetupResponse parses an HTTP response from a GetInterfaceLagSetupWithResponse call
func ParseGetInterfaceLagSetupResponse(rsp *http.Response) (*GetInterfaceLagSetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceLagSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceRollbackResponse parses an HTTP response from a GetInterfaceRollbackWithResponse call
func ParseGetInterfaceRollbackResponse(rsp *http.Response) (*GetInterfaceRollbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceRollbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceVlanParentInterfaceChoicesResponse parses an HTTP response from a GetInterfaceVlanParentInterfaceChoicesWithResponse call
func ParseGetInterfaceVlanParentInterfaceChoicesResponse(rsp *http.Response) (*GetInterfaceVlanParentInterfaceChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceVlanParentInterfaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInterfaceVlanSetupResponse parses an HTTP response from a GetInterfaceVlanSetupWithResponse call
func ParseGetInterfaceVlanSetupResponse(rsp *http.Response) (*GetInterfaceVlanSetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceVlanSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIpmiResponse parses an HTTP response from a GetIpmiWithResponse call
func ParseGetIpmiResponse(rsp *http.Response) (*GetIpmiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpmiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIpmiChannelsResponse parses an HTTP response from a GetIpmiChannelsWithResponse call
func ParseGetIpmiChannelsResponse(rsp *http.Response) (*GetIpmiChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpmiChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIpmiIdIdResponse parses an HTTP response from a GetIpmiIdIdWithResponse call
func ParseGetIpmiIdIdResponse(rsp *http.Response) (*GetIpmiIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpmiIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIpmiIdIdResponse parses an HTTP response from a PutIpmiIdIdWithResponse call
func ParsePutIpmiIdIdResponse(rsp *http.Response) (*PutIpmiIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIpmiIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIpmiIdentifyResponse parses an HTTP response from a PostIpmiIdentifyWithResponse call
func ParsePostIpmiIdentifyResponse(rsp *http.Response) (*PostIpmiIdentifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIpmiIdentifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIpmiIsLoadedResponse parses an HTTP response from a GetIpmiIsLoadedWithResponse call
func ParseGetIpmiIsLoadedResponse(rsp *http.Response) (*GetIpmiIsLoadedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpmiIsLoadedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiAuthResponse parses an HTTP response from a GetIscsiAuthWithResponse call
func ParseGetIscsiAuthResponse(rsp *http.Response) (*GetIscsiAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIscsiAuthResponse parses an HTTP response from a PostIscsiAuthWithResponse call
func ParsePostIscsiAuthResponse(rsp *http.Response) (*PostIscsiAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIscsiAuthIdIdResponse parses an HTTP response from a DeleteIscsiAuthIdIdWithResponse call
func ParseDeleteIscsiAuthIdIdResponse(rsp *http.Response) (*DeleteIscsiAuthIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiAuthIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiAuthIdIdResponse parses an HTTP response from a GetIscsiAuthIdIdWithResponse call
func ParseGetIscsiAuthIdIdResponse(rsp *http.Response) (*GetIscsiAuthIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiAuthIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIscsiAuthIdIdResponse parses an HTTP response from a PutIscsiAuthIdIdWithResponse call
func ParsePutIscsiAuthIdIdResponse(rsp *http.Response) (*PutIscsiAuthIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiAuthIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiExtentResponse parses an HTTP response from a GetIscsiExtentWithResponse call
func ParseGetIscsiExtentResponse(rsp *http.Response) (*GetIscsiExtentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiExtentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIscsiExtentResponse parses an HTTP response from a PostIscsiExtentWithResponse call
func ParsePostIscsiExtentResponse(rsp *http.Response) (*PostIscsiExtentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiExtentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIscsiExtentDiskChoicesResponse parses an HTTP response from a PostIscsiExtentDiskChoicesWithResponse call
func ParsePostIscsiExtentDiskChoicesResponse(rsp *http.Response) (*PostIscsiExtentDiskChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiExtentDiskChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIscsiExtentIdIdResponse parses an HTTP response from a DeleteIscsiExtentIdIdWithResponse call
func ParseDeleteIscsiExtentIdIdResponse(rsp *http.Response) (*DeleteIscsiExtentIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiExtentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiExtentIdIdResponse parses an HTTP response from a GetIscsiExtentIdIdWithResponse call
func ParseGetIscsiExtentIdIdResponse(rsp *http.Response) (*GetIscsiExtentIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiExtentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIscsiExtentIdIdResponse parses an HTTP response from a PutIscsiExtentIdIdWithResponse call
func ParsePutIscsiExtentIdIdResponse(rsp *http.Response) (*PutIscsiExtentIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiExtentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiGlobalResponse parses an HTTP response from a GetIscsiGlobalWithResponse call
func ParseGetIscsiGlobalResponse(rsp *http.Response) (*GetIscsiGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIscsiGlobalResponse parses an HTTP response from a PutIscsiGlobalWithResponse call
func ParsePutIscsiGlobalResponse(rsp *http.Response) (*PutIscsiGlobalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiGlobalAluaEnabledResponse parses an HTTP response from a GetIscsiGlobalAluaEnabledWithResponse call
func ParseGetIscsiGlobalAluaEnabledResponse(rsp *http.Response) (*GetIscsiGlobalAluaEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiGlobalAluaEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiGlobalSessionsResponse parses an HTTP response from a GetIscsiGlobalSessionsWithResponse call
func ParseGetIscsiGlobalSessionsResponse(rsp *http.Response) (*GetIscsiGlobalSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiGlobalSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiInitiatorResponse parses an HTTP response from a GetIscsiInitiatorWithResponse call
func ParseGetIscsiInitiatorResponse(rsp *http.Response) (*GetIscsiInitiatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiInitiatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIscsiInitiatorResponse parses an HTTP response from a PostIscsiInitiatorWithResponse call
func ParsePostIscsiInitiatorResponse(rsp *http.Response) (*PostIscsiInitiatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiInitiatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIscsiInitiatorIdIdResponse parses an HTTP response from a DeleteIscsiInitiatorIdIdWithResponse call
func ParseDeleteIscsiInitiatorIdIdResponse(rsp *http.Response) (*DeleteIscsiInitiatorIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiInitiatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiInitiatorIdIdResponse parses an HTTP response from a GetIscsiInitiatorIdIdWithResponse call
func ParseGetIscsiInitiatorIdIdResponse(rsp *http.Response) (*GetIscsiInitiatorIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiInitiatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIscsiInitiatorIdIdResponse parses an HTTP response from a PutIscsiInitiatorIdIdWithResponse call
func ParsePutIscsiInitiatorIdIdResponse(rsp *http.Response) (*PutIscsiInitiatorIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiInitiatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiPortalResponse parses an HTTP response from a GetIscsiPortalWithResponse call
func ParseGetIscsiPortalResponse(rsp *http.Response) (*GetIscsiPortalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiPortalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIscsiPortalResponse parses an HTTP response from a PostIscsiPortalWithResponse call
func ParsePostIscsiPortalResponse(rsp *http.Response) (*PostIscsiPortalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiPortalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIscsiPortalIdIdResponse parses an HTTP response from a DeleteIscsiPortalIdIdWithResponse call
func ParseDeleteIscsiPortalIdIdResponse(rsp *http.Response) (*DeleteIscsiPortalIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiPortalIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiPortalIdIdResponse parses an HTTP response from a GetIscsiPortalIdIdWithResponse call
func ParseGetIscsiPortalIdIdResponse(rsp *http.Response) (*GetIscsiPortalIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiPortalIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIscsiPortalIdIdResponse parses an HTTP response from a PutIscsiPortalIdIdWithResponse call
func ParsePutIscsiPortalIdIdResponse(rsp *http.Response) (*PutIscsiPortalIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiPortalIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiPortalListenIpChoicesResponse parses an HTTP response from a GetIscsiPortalListenIpChoicesWithResponse call
func ParseGetIscsiPortalListenIpChoicesResponse(rsp *http.Response) (*GetIscsiPortalListenIpChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiPortalListenIpChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiTargetResponse parses an HTTP response from a GetIscsiTargetWithResponse call
func ParseGetIscsiTargetResponse(rsp *http.Response) (*GetIscsiTargetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIscsiTargetResponse parses an HTTP response from a PostIscsiTargetWithResponse call
func ParsePostIscsiTargetResponse(rsp *http.Response) (*PostIscsiTargetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIscsiTargetIdIdResponse parses an HTTP response from a DeleteIscsiTargetIdIdWithResponse call
func ParseDeleteIscsiTargetIdIdResponse(rsp *http.Response) (*DeleteIscsiTargetIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiTargetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiTargetIdIdResponse parses an HTTP response from a GetIscsiTargetIdIdWithResponse call
func ParseGetIscsiTargetIdIdResponse(rsp *http.Response) (*GetIscsiTargetIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIscsiTargetIdIdResponse parses an HTTP response from a PutIscsiTargetIdIdWithResponse call
func ParsePutIscsiTargetIdIdResponse(rsp *http.Response) (*PutIscsiTargetIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiTargetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiTargetextentResponse parses an HTTP response from a GetIscsiTargetextentWithResponse call
func ParseGetIscsiTargetextentResponse(rsp *http.Response) (*GetIscsiTargetextentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetextentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIscsiTargetextentResponse parses an HTTP response from a PostIscsiTargetextentWithResponse call
func ParsePostIscsiTargetextentResponse(rsp *http.Response) (*PostIscsiTargetextentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiTargetextentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteIscsiTargetextentIdIdResponse parses an HTTP response from a DeleteIscsiTargetextentIdIdWithResponse call
func ParseDeleteIscsiTargetextentIdIdResponse(rsp *http.Response) (*DeleteIscsiTargetextentIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiTargetextentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIscsiTargetextentIdIdResponse parses an HTTP response from a GetIscsiTargetextentIdIdWithResponse call
func ParseGetIscsiTargetextentIdIdResponse(rsp *http.Response) (*GetIscsiTargetextentIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetextentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIscsiTargetextentIdIdResponse parses an HTTP response from a PutIscsiTargetextentIdIdWithResponse call
func ParsePutIscsiTargetextentIdIdResponse(rsp *http.Response) (*PutIscsiTargetextentIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiTargetextentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJailResponse parses an HTTP response from a GetJailWithResponse call
func ParseGetJailResponse(rsp *http.Response) (*GetJailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailResponse parses an HTTP response from a PostJailWithResponse call
func ParsePostJailResponse(rsp *http.Response) (*PostJailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailActivateResponse parses an HTTP response from a PostJailActivateWithResponse call
func ParsePostJailActivateResponse(rsp *http.Response) (*PostJailActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailCleanResponse parses an HTTP response from a PostJailCleanWithResponse call
func ParsePostJailCleanResponse(rsp *http.Response) (*PostJailCleanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailCleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJailDefaultConfigurationResponse parses an HTTP response from a GetJailDefaultConfigurationWithResponse call
func ParseGetJailDefaultConfigurationResponse(rsp *http.Response) (*GetJailDefaultConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJailDefaultConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailExecResponse parses an HTTP response from a PostJailExecWithResponse call
func ParsePostJailExecResponse(rsp *http.Response) (*PostJailExecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailExecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailExportResponse parses an HTTP response from a PostJailExportWithResponse call
func ParsePostJailExportResponse(rsp *http.Response) (*PostJailExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailFetchResponse parses an HTTP response from a PostJailFetchWithResponse call
func ParsePostJailFetchResponse(rsp *http.Response) (*PostJailFetchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailFetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailFstabResponse parses an HTTP response from a PostJailFstabWithResponse call
func ParsePostJailFstabResponse(rsp *http.Response) (*PostJailFstabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailFstabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJailGetActivatedPoolResponse parses an HTTP response from a GetJailGetActivatedPoolWithResponse call
func ParseGetJailGetActivatedPoolResponse(rsp *http.Response) (*GetJailGetActivatedPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJailGetActivatedPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteJailIdIdResponse parses an HTTP response from a DeleteJailIdIdWithResponse call
func ParseDeleteJailIdIdResponse(rsp *http.Response) (*DeleteJailIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJailIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJailIdIdResponse parses an HTTP response from a GetJailIdIdWithResponse call
func ParseGetJailIdIdResponse(rsp *http.Response) (*GetJailIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJailIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutJailIdIdResponse parses an HTTP response from a PutJailIdIdWithResponse call
func ParsePutJailIdIdResponse(rsp *http.Response) (*PutJailIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutJailIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailIdIdCloneResponse parses an HTTP response from a PostJailIdIdCloneWithResponse call
func ParsePostJailIdIdCloneResponse(rsp *http.Response) (*PostJailIdIdCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailIdIdCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailImportImageResponse parses an HTTP response from a PostJailImportImageWithResponse call
func ParsePostJailImportImageResponse(rsp *http.Response) (*PostJailImportImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailImportImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJailInterfaceChoicesResponse parses an HTTP response from a GetJailInterfaceChoicesWithResponse call
func ParseGetJailInterfaceChoicesResponse(rsp *http.Response) (*GetJailInterfaceChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJailInterfaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailRcActionResponse parses an HTTP response from a PostJailRcActionWithResponse call
func ParsePostJailRcActionResponse(rsp *http.Response) (*PostJailRcActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailRcActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailReleasesChoicesResponse parses an HTTP response from a PostJailReleasesChoicesWithResponse call
func ParsePostJailReleasesChoicesResponse(rsp *http.Response) (*PostJailReleasesChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailReleasesChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailRestartResponse parses an HTTP response from a PostJailRestartWithResponse call
func ParsePostJailRestartResponse(rsp *http.Response) (*PostJailRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailStartResponse parses an HTTP response from a PostJailStartWithResponse call
func ParsePostJailStartResponse(rsp *http.Response) (*PostJailStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailStopResponse parses an HTTP response from a PostJailStopWithResponse call
func ParsePostJailStopResponse(rsp *http.Response) (*PostJailStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailUpdateDefaultsResponse parses an HTTP response from a PostJailUpdateDefaultsWithResponse call
func ParsePostJailUpdateDefaultsResponse(rsp *http.Response) (*PostJailUpdateDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailUpdateDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostJailUpdateToLatestPatchResponse parses an HTTP response from a PostJailUpdateToLatestPatchWithResponse call
func ParsePostJailUpdateToLatestPatchResponse(rsp *http.Response) (*PostJailUpdateToLatestPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJailUpdateToLatestPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJailVnetDefaultInterfaceChoicesResponse parses an HTTP response from a GetJailVnetDefaultInterfaceChoicesWithResponse call
func ParseGetJailVnetDefaultInterfaceChoicesResponse(rsp *http.Response) (*GetJailVnetDefaultInterfaceChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJailVnetDefaultInterfaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKerberosResponse parses an HTTP response from a GetKerberosWithResponse call
func ParseGetKerberosResponse(rsp *http.Response) (*GetKerberosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutKerberosResponse parses an HTTP response from a PutKerberosWithResponse call
func ParsePutKerberosResponse(rsp *http.Response) (*PutKerberosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutKerberosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKerberosKeytabResponse parses an HTTP response from a GetKerberosKeytabWithResponse call
func ParseGetKerberosKeytabResponse(rsp *http.Response) (*GetKerberosKeytabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosKeytabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKerberosKeytabResponse parses an HTTP response from a PostKerberosKeytabWithResponse call
func ParsePostKerberosKeytabResponse(rsp *http.Response) (*PostKerberosKeytabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKerberosKeytabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteKerberosKeytabIdIdResponse parses an HTTP response from a DeleteKerberosKeytabIdIdWithResponse call
func ParseDeleteKerberosKeytabIdIdResponse(rsp *http.Response) (*DeleteKerberosKeytabIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKerberosKeytabIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKerberosKeytabIdIdResponse parses an HTTP response from a GetKerberosKeytabIdIdWithResponse call
func ParseGetKerberosKeytabIdIdResponse(rsp *http.Response) (*GetKerberosKeytabIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosKeytabIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutKerberosKeytabIdIdResponse parses an HTTP response from a PutKerberosKeytabIdIdWithResponse call
func ParsePutKerberosKeytabIdIdResponse(rsp *http.Response) (*PutKerberosKeytabIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutKerberosKeytabIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKerberosKeytabSystemKeytabListResponse parses an HTTP response from a GetKerberosKeytabSystemKeytabListWithResponse call
func ParseGetKerberosKeytabSystemKeytabListResponse(rsp *http.Response) (*GetKerberosKeytabSystemKeytabListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosKeytabSystemKeytabListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKerberosRealmResponse parses an HTTP response from a GetKerberosRealmWithResponse call
func ParseGetKerberosRealmResponse(rsp *http.Response) (*GetKerberosRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKerberosRealmResponse parses an HTTP response from a PostKerberosRealmWithResponse call
func ParsePostKerberosRealmResponse(rsp *http.Response) (*PostKerberosRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKerberosRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteKerberosRealmIdIdResponse parses an HTTP response from a DeleteKerberosRealmIdIdWithResponse call
func ParseDeleteKerberosRealmIdIdResponse(rsp *http.Response) (*DeleteKerberosRealmIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKerberosRealmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKerberosRealmIdIdResponse parses an HTTP response from a GetKerberosRealmIdIdWithResponse call
func ParseGetKerberosRealmIdIdResponse(rsp *http.Response) (*GetKerberosRealmIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosRealmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutKerberosRealmIdIdResponse parses an HTTP response from a PutKerberosRealmIdIdWithResponse call
func ParsePutKerberosRealmIdIdResponse(rsp *http.Response) (*PutKerberosRealmIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutKerberosRealmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeychaincredentialResponse parses an HTTP response from a GetKeychaincredentialWithResponse call
func ParseGetKeychaincredentialResponse(rsp *http.Response) (*GetKeychaincredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeychaincredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKeychaincredentialResponse parses an HTTP response from a PostKeychaincredentialWithResponse call
func ParsePostKeychaincredentialResponse(rsp *http.Response) (*PostKeychaincredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeychaincredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeychaincredentialGenerateSshKeyPairResponse parses an HTTP response from a GetKeychaincredentialGenerateSshKeyPairWithResponse call
func ParseGetKeychaincredentialGenerateSshKeyPairResponse(rsp *http.Response) (*GetKeychaincredentialGenerateSshKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeychaincredentialGenerateSshKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteKeychaincredentialIdIdResponse parses an HTTP response from a DeleteKeychaincredentialIdIdWithResponse call
func ParseDeleteKeychaincredentialIdIdResponse(rsp *http.Response) (*DeleteKeychaincredentialIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeychaincredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeychaincredentialIdIdResponse parses an HTTP response from a GetKeychaincredentialIdIdWithResponse call
func ParseGetKeychaincredentialIdIdResponse(rsp *http.Response) (*GetKeychaincredentialIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeychaincredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutKeychaincredentialIdIdResponse parses an HTTP response from a PutKeychaincredentialIdIdWithResponse call
func ParsePutKeychaincredentialIdIdResponse(rsp *http.Response) (*PutKeychaincredentialIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutKeychaincredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKeychaincredentialRemoteSshHostKeyScanResponse parses an HTTP response from a PostKeychaincredentialRemoteSshHostKeyScanWithResponse call
func ParsePostKeychaincredentialRemoteSshHostKeyScanResponse(rsp *http.Response) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeychaincredentialRemoteSshHostKeyScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKeychaincredentialRemoteSshSemiautomaticSetupResponse parses an HTTP response from a PostKeychaincredentialRemoteSshSemiautomaticSetupWithResponse call
func ParsePostKeychaincredentialRemoteSshSemiautomaticSetupResponse(rsp *http.Response) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeychaincredentialRemoteSshSemiautomaticSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostKeychaincredentialUsedByResponse parses an HTTP response from a PostKeychaincredentialUsedByWithResponse call
func ParsePostKeychaincredentialUsedByResponse(rsp *http.Response) (*PostKeychaincredentialUsedByResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKeychaincredentialUsedByResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKmipResponse parses an HTTP response from a GetKmipWithResponse call
func ParseGetKmipResponse(rsp *http.Response) (*GetKmipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKmipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutKmipResponse parses an HTTP response from a PutKmipWithResponse call
func ParsePutKmipResponse(rsp *http.Response) (*PutKmipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutKmipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKmipClearSyncPendingKeysResponse parses an HTTP response from a GetKmipClearSyncPendingKeysWithResponse call
func ParseGetKmipClearSyncPendingKeysResponse(rsp *http.Response) (*GetKmipClearSyncPendingKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKmipClearSyncPendingKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKmipKmipSyncPendingResponse parses an HTTP response from a GetKmipKmipSyncPendingWithResponse call
func ParseGetKmipKmipSyncPendingResponse(rsp *http.Response) (*GetKmipKmipSyncPendingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKmipKmipSyncPendingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKmipSyncKeysResponse parses an HTTP response from a GetKmipSyncKeysWithResponse call
func ParseGetKmipSyncKeysResponse(rsp *http.Response) (*GetKmipSyncKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKmipSyncKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLdapResponse parses an HTTP response from a GetLdapWithResponse call
func ParseGetLdapResponse(rsp *http.Response) (*GetLdapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLdapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutLdapResponse parses an HTTP response from a PutLdapWithResponse call
func ParsePutLdapResponse(rsp *http.Response) (*PutLdapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLdapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLdapGetStateResponse parses an HTTP response from a GetLdapGetStateWithResponse call
func ParseGetLdapGetStateResponse(rsp *http.Response) (*GetLdapGetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLdapGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLdapSchemaChoicesResponse parses an HTTP response from a GetLdapSchemaChoicesWithResponse call
func ParseGetLdapSchemaChoicesResponse(rsp *http.Response) (*GetLdapSchemaChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLdapSchemaChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLdapSslChoicesResponse parses an HTTP response from a GetLdapSslChoicesWithResponse call
func ParseGetLdapSslChoicesResponse(rsp *http.Response) (*GetLdapSslChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLdapSslChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLldpResponse parses an HTTP response from a GetLldpWithResponse call
func ParseGetLldpResponse(rsp *http.Response) (*GetLldpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLldpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutLldpResponse parses an HTTP response from a PutLldpWithResponse call
func ParsePutLldpResponse(rsp *http.Response) (*PutLldpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLldpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLldpCountryChoicesResponse parses an HTTP response from a GetLldpCountryChoicesWithResponse call
func ParseGetLldpCountryChoicesResponse(rsp *http.Response) (*GetLldpCountryChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLldpCountryChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMailResponse parses an HTTP response from a GetMailWithResponse call
func ParseGetMailResponse(rsp *http.Response) (*GetMailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutMailResponse parses an HTTP response from a PutMailWithResponse call
func ParsePutMailResponse(rsp *http.Response) (*PutMailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostMailSendResponse parses an HTTP response from a PostMailSendWithResponse call
func ParsePostMailSendResponse(rsp *http.Response) (*PostMailSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMailSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMultipathResponse parses an HTTP response from a GetMultipathWithResponse call
func ParseGetMultipathResponse(rsp *http.Response) (*GetMultipathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMultipathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMultipathIdIdResponse parses an HTTP response from a GetMultipathIdIdWithResponse call
func ParseGetMultipathIdIdResponse(rsp *http.Response) (*GetMultipathIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMultipathIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNetworkConfigurationResponse parses an HTTP response from a GetNetworkConfigurationWithResponse call
func ParseGetNetworkConfigurationResponse(rsp *http.Response) (*GetNetworkConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutNetworkConfigurationResponse parses an HTTP response from a PutNetworkConfigurationWithResponse call
func ParsePutNetworkConfigurationResponse(rsp *http.Response) (*PutNetworkConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNetworkConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNetworkGeneralSummaryResponse parses an HTTP response from a GetNetworkGeneralSummaryWithResponse call
func ParseGetNetworkGeneralSummaryResponse(rsp *http.Response) (*GetNetworkGeneralSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkGeneralSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNfsResponse parses an HTTP response from a GetNfsWithResponse call
func ParseGetNfsResponse(rsp *http.Response) (*GetNfsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutNfsResponse parses an HTTP response from a PutNfsWithResponse call
func ParsePutNfsResponse(rsp *http.Response) (*PutNfsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostNfsAddPrincipalResponse parses an HTTP response from a PostNfsAddPrincipalWithResponse call
func ParsePostNfsAddPrincipalResponse(rsp *http.Response) (*PostNfsAddPrincipalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNfsAddPrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNfsBindipChoicesResponse parses an HTTP response from a GetNfsBindipChoicesWithResponse call
func ParseGetNfsBindipChoicesResponse(rsp *http.Response) (*GetNfsBindipChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNfsBindipChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNisResponse parses an HTTP response from a GetNisWithResponse call
func ParseGetNisResponse(rsp *http.Response) (*GetNisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutNisResponse parses an HTTP response from a PutNisWithResponse call
func ParsePutNisResponse(rsp *http.Response) (*PutNisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNisGetStateResponse parses an HTTP response from a GetNisGetStateWithResponse call
func ParseGetNisGetStateResponse(rsp *http.Response) (*GetNisGetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNisGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenvpnClientResponse parses an HTTP response from a GetOpenvpnClientWithResponse call
func ParseGetOpenvpnClientResponse(rsp *http.Response) (*GetOpenvpnClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenvpnClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutOpenvpnClientResponse parses an HTTP response from a PutOpenvpnClientWithResponse call
func ParsePutOpenvpnClientResponse(rsp *http.Response) (*PutOpenvpnClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOpenvpnClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenvpnClientAuthenticationAlgorithmChoicesResponse parses an HTTP response from a GetOpenvpnClientAuthenticationAlgorithmChoicesWithResponse call
func ParseGetOpenvpnClientAuthenticationAlgorithmChoicesResponse(rsp *http.Response) (*GetOpenvpnClientAuthenticationAlgorithmChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenvpnClientAuthenticationAlgorithmChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenvpnClientCipherChoicesResponse parses an HTTP response from a GetOpenvpnClientCipherChoicesWithResponse call
func ParseGetOpenvpnClientCipherChoicesResponse(rsp *http.Response) (*GetOpenvpnClientCipherChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenvpnClientCipherChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenvpnServerResponse parses an HTTP response from a GetOpenvpnServerWithResponse call
func ParseGetOpenvpnServerResponse(rsp *http.Response) (*GetOpenvpnServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenvpnServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutOpenvpnServerResponse parses an HTTP response from a PutOpenvpnServerWithResponse call
func ParsePutOpenvpnServerResponse(rsp *http.Response) (*PutOpenvpnServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOpenvpnServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenvpnServerAuthenticationAlgorithmChoicesResponse parses an HTTP response from a GetOpenvpnServerAuthenticationAlgorithmChoicesWithResponse call
func ParseGetOpenvpnServerAuthenticationAlgorithmChoicesResponse(rsp *http.Response) (*GetOpenvpnServerAuthenticationAlgorithmChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenvpnServerAuthenticationAlgorithmChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenvpnServerCipherChoicesResponse parses an HTTP response from a GetOpenvpnServerCipherChoicesWithResponse call
func ParseGetOpenvpnServerCipherChoicesResponse(rsp *http.Response) (*GetOpenvpnServerCipherChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenvpnServerCipherChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOpenvpnServerClientConfigurationGenerationResponse parses an HTTP response from a PostOpenvpnServerClientConfigurationGenerationWithResponse call
func ParsePostOpenvpnServerClientConfigurationGenerationResponse(rsp *http.Response) (*PostOpenvpnServerClientConfigurationGenerationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOpenvpnServerClientConfigurationGenerationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenvpnServerRenewStaticKeyResponse parses an HTTP response from a GetOpenvpnServerRenewStaticKeyWithResponse call
func ParseGetOpenvpnServerRenewStaticKeyResponse(rsp *http.Response) (*GetOpenvpnServerRenewStaticKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenvpnServerRenewStaticKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPluginResponse parses an HTTP response from a GetPluginWithResponse call
func ParseGetPluginResponse(rsp *http.Response) (*GetPluginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPluginResponse parses an HTTP response from a PostPluginWithResponse call
func ParsePostPluginResponse(rsp *http.Response) (*PostPluginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPluginAvailableResponse parses an HTTP response from a PostPluginAvailableWithResponse call
func ParsePostPluginAvailableResponse(rsp *http.Response) (*PostPluginAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPluginAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPluginBranchesChoicesResponse parses an HTTP response from a PostPluginBranchesChoicesWithResponse call
func ParsePostPluginBranchesChoicesResponse(rsp *http.Response) (*PostPluginBranchesChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPluginBranchesChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPluginDefaultsResponse parses an HTTP response from a PostPluginDefaultsWithResponse call
func ParsePostPluginDefaultsResponse(rsp *http.Response) (*PostPluginDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPluginDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePluginIdIdResponse parses an HTTP response from a DeletePluginIdIdWithResponse call
func ParseDeletePluginIdIdResponse(rsp *http.Response) (*DeletePluginIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePluginIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPluginIdIdResponse parses an HTTP response from a GetPluginIdIdWithResponse call
func ParseGetPluginIdIdResponse(rsp *http.Response) (*GetPluginIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPluginIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPluginIdIdResponse parses an HTTP response from a PutPluginIdIdWithResponse call
func ParsePutPluginIdIdResponse(rsp *http.Response) (*PutPluginIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPluginIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPluginOfficialRepositoriesResponse parses an HTTP response from a GetPluginOfficialRepositoriesWithResponse call
func ParseGetPluginOfficialRepositoriesResponse(rsp *http.Response) (*GetPluginOfficialRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPluginOfficialRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPluginRetrieveVersionsForReposResponse parses an HTTP response from a GetPluginRetrieveVersionsForReposWithResponse call
func ParseGetPluginRetrieveVersionsForReposResponse(rsp *http.Response) (*GetPluginRetrieveVersionsForReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPluginRetrieveVersionsForReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPluginUpdatePluginResponse parses an HTTP response from a PostPluginUpdatePluginWithResponse call
func ParsePostPluginUpdatePluginResponse(rsp *http.Response) (*PostPluginUpdatePluginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPluginUpdatePluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolResponse parses an HTTP response from a GetPoolWithResponse call
func ParseGetPoolResponse(rsp *http.Response) (*GetPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolResponse parses an HTTP response from a PostPoolWithResponse call
func ParsePostPoolResponse(rsp *http.Response) (*PostPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolAttachResponse parses an HTTP response from a PostPoolAttachWithResponse call
func ParsePostPoolAttachResponse(rsp *http.Response) (*PostPoolAttachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolAttachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolDatasetResponse parses an HTTP response from a GetPoolDatasetWithResponse call
func ParseGetPoolDatasetResponse(rsp *http.Response) (*GetPoolDatasetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetResponse parses an HTTP response from a PostPoolDatasetWithResponse call
func ParsePostPoolDatasetResponse(rsp *http.Response) (*PostPoolDatasetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetChangeKeyResponse parses an HTTP response from a PostPoolDatasetChangeKeyWithResponse call
func ParsePostPoolDatasetChangeKeyResponse(rsp *http.Response) (*PostPoolDatasetChangeKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetChangeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolDatasetCompressionChoicesResponse parses an HTTP response from a GetPoolDatasetCompressionChoicesWithResponse call
func ParseGetPoolDatasetCompressionChoicesResponse(rsp *http.Response) (*GetPoolDatasetCompressionChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolDatasetCompressionChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolDatasetEncryptionAlgorithmChoicesResponse parses an HTTP response from a GetPoolDatasetEncryptionAlgorithmChoicesWithResponse call
func ParseGetPoolDatasetEncryptionAlgorithmChoicesResponse(rsp *http.Response) (*GetPoolDatasetEncryptionAlgorithmChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolDatasetEncryptionAlgorithmChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetEncryptionSummaryResponse parses an HTTP response from a PostPoolDatasetEncryptionSummaryWithResponse call
func ParsePostPoolDatasetEncryptionSummaryResponse(rsp *http.Response) (*PostPoolDatasetEncryptionSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetEncryptionSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetExportKeyResponse parses an HTTP response from a PostPoolDatasetExportKeyWithResponse call
func ParsePostPoolDatasetExportKeyResponse(rsp *http.Response) (*PostPoolDatasetExportKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetExportKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePoolDatasetIdIdResponse parses an HTTP response from a DeletePoolDatasetIdIdWithResponse call
func ParseDeletePoolDatasetIdIdResponse(rsp *http.Response) (*DeletePoolDatasetIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePoolDatasetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolDatasetIdIdResponse parses an HTTP response from a GetPoolDatasetIdIdWithResponse call
func ParseGetPoolDatasetIdIdResponse(rsp *http.Response) (*GetPoolDatasetIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolDatasetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPoolDatasetIdIdResponse parses an HTTP response from a PutPoolDatasetIdIdWithResponse call
func ParsePutPoolDatasetIdIdResponse(rsp *http.Response) (*PutPoolDatasetIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPoolDatasetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdAttachmentsResponse parses an HTTP response from a PostPoolDatasetIdIdAttachmentsWithResponse call
func ParsePostPoolDatasetIdIdAttachmentsResponse(rsp *http.Response) (*PostPoolDatasetIdIdAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdGetQuotaResponse parses an HTTP response from a PostPoolDatasetIdIdGetQuotaWithResponse call
func ParsePostPoolDatasetIdIdGetQuotaResponse(rsp *http.Response) (*PostPoolDatasetIdIdGetQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdGetQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdPermissionResponse parses an HTTP response from a PostPoolDatasetIdIdPermissionWithResponse call
func ParsePostPoolDatasetIdIdPermissionResponse(rsp *http.Response) (*PostPoolDatasetIdIdPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdProcessesResponse parses an HTTP response from a PostPoolDatasetIdIdProcessesWithResponse call
func ParsePostPoolDatasetIdIdProcessesResponse(rsp *http.Response) (*PostPoolDatasetIdIdProcessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdProcessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdPromoteResponse parses an HTTP response from a PostPoolDatasetIdIdPromoteWithResponse call
func ParsePostPoolDatasetIdIdPromoteResponse(rsp *http.Response) (*PostPoolDatasetIdIdPromoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdPromoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdSetQuotaResponse parses an HTTP response from a PostPoolDatasetIdIdSetQuotaWithResponse call
func ParsePostPoolDatasetIdIdSetQuotaResponse(rsp *http.Response) (*PostPoolDatasetIdIdSetQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdSetQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetInheritParentEncryptionPropertiesResponse parses an HTTP response from a PostPoolDatasetInheritParentEncryptionPropertiesWithResponse call
func ParsePostPoolDatasetInheritParentEncryptionPropertiesResponse(rsp *http.Response) (*PostPoolDatasetInheritParentEncryptionPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetInheritParentEncryptionPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetLockResponse parses an HTTP response from a PostPoolDatasetLockWithResponse call
func ParsePostPoolDatasetLockResponse(rsp *http.Response) (*PostPoolDatasetLockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetLockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetRecommendedZvolBlocksizeResponse parses an HTTP response from a PostPoolDatasetRecommendedZvolBlocksizeWithResponse call
func ParsePostPoolDatasetRecommendedZvolBlocksizeResponse(rsp *http.Response) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetRecommendedZvolBlocksizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetUnlockResponse parses an HTTP response from a PostPoolDatasetUnlockWithResponse call
func ParsePostPoolDatasetUnlockResponse(rsp *http.Response) (*PostPoolDatasetUnlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetUnlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolDatasetUserpropResponse parses an HTTP response from a GetPoolDatasetUserpropWithResponse call
func ParseGetPoolDatasetUserpropResponse(rsp *http.Response) (*GetPoolDatasetUserpropResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolDatasetUserpropResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolDatasetUserpropResponse parses an HTTP response from a PostPoolDatasetUserpropWithResponse call
func ParsePostPoolDatasetUserpropResponse(rsp *http.Response) (*PostPoolDatasetUserpropResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetUserpropResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePoolDatasetUserpropIdIdResponse parses an HTTP response from a DeletePoolDatasetUserpropIdIdWithResponse call
func ParseDeletePoolDatasetUserpropIdIdResponse(rsp *http.Response) (*DeletePoolDatasetUserpropIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePoolDatasetUserpropIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolDatasetUserpropIdIdResponse parses an HTTP response from a GetPoolDatasetUserpropIdIdWithResponse call
func ParseGetPoolDatasetUserpropIdIdResponse(rsp *http.Response) (*GetPoolDatasetUserpropIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolDatasetUserpropIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPoolDatasetUserpropIdIdResponse parses an HTTP response from a PutPoolDatasetUserpropIdIdWithResponse call
func ParsePutPoolDatasetUserpropIdIdResponse(rsp *http.Response) (*PutPoolDatasetUserpropIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPoolDatasetUserpropIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolFilesystemChoicesResponse parses an HTTP response from a PostPoolFilesystemChoicesWithResponse call
func ParsePostPoolFilesystemChoicesResponse(rsp *http.Response) (*PostPoolFilesystemChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolFilesystemChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolIdIdResponse parses an HTTP response from a GetPoolIdIdWithResponse call
func ParseGetPoolIdIdResponse(rsp *http.Response) (*GetPoolIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPoolIdIdResponse parses an HTTP response from a PutPoolIdIdWithResponse call
func ParsePutPoolIdIdResponse(rsp *http.Response) (*PutPoolIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPoolIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdAttachmentsResponse parses an HTTP response from a PostPoolIdIdAttachmentsWithResponse call
func ParsePostPoolIdIdAttachmentsResponse(rsp *http.Response) (*PostPoolIdIdAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdDetachResponse parses an HTTP response from a PostPoolIdIdDetachWithResponse call
func ParsePostPoolIdIdDetachResponse(rsp *http.Response) (*PostPoolIdIdDetachResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdDetachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdDownloadEncryptionKeyResponse parses an HTTP response from a PostPoolIdIdDownloadEncryptionKeyWithResponse call
func ParsePostPoolIdIdDownloadEncryptionKeyResponse(rsp *http.Response) (*PostPoolIdIdDownloadEncryptionKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdDownloadEncryptionKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdExpandResponse parses an HTTP response from a PostPoolIdIdExpandWithResponse call
func ParsePostPoolIdIdExpandResponse(rsp *http.Response) (*PostPoolIdIdExpandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdExpandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdExportResponse parses an HTTP response from a PostPoolIdIdExportWithResponse call
func ParsePostPoolIdIdExportResponse(rsp *http.Response) (*PostPoolIdIdExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdGetDisksResponse parses an HTTP response from a PostPoolIdIdGetDisksWithResponse call
func ParsePostPoolIdIdGetDisksResponse(rsp *http.Response) (*PostPoolIdIdGetDisksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdGetDisksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdIsUpgradedResponse parses an HTTP response from a PostPoolIdIdIsUpgradedWithResponse call
func ParsePostPoolIdIdIsUpgradedResponse(rsp *http.Response) (*PostPoolIdIdIsUpgradedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdIsUpgradedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdLockResponse parses an HTTP response from a PostPoolIdIdLockWithResponse call
func ParsePostPoolIdIdLockResponse(rsp *http.Response) (*PostPoolIdIdLockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdLockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdOfflineResponse parses an HTTP response from a PostPoolIdIdOfflineWithResponse call
func ParsePostPoolIdIdOfflineResponse(rsp *http.Response) (*PostPoolIdIdOfflineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdOfflineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdOnlineResponse parses an HTTP response from a PostPoolIdIdOnlineWithResponse call
func ParsePostPoolIdIdOnlineResponse(rsp *http.Response) (*PostPoolIdIdOnlineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdOnlineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdPassphraseResponse parses an HTTP response from a PostPoolIdIdPassphraseWithResponse call
func ParsePostPoolIdIdPassphraseResponse(rsp *http.Response) (*PostPoolIdIdPassphraseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdPassphraseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdProcessesResponse parses an HTTP response from a PostPoolIdIdProcessesWithResponse call
func ParsePostPoolIdIdProcessesResponse(rsp *http.Response) (*PostPoolIdIdProcessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdProcessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdRecoverykeyRmResponse parses an HTTP response from a PostPoolIdIdRecoverykeyRmWithResponse call
func ParsePostPoolIdIdRecoverykeyRmResponse(rsp *http.Response) (*PostPoolIdIdRecoverykeyRmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdRecoverykeyRmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdRekeyResponse parses an HTTP response from a PostPoolIdIdRekeyWithResponse call
func ParsePostPoolIdIdRekeyResponse(rsp *http.Response) (*PostPoolIdIdRekeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdRekeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdRemoveResponse parses an HTTP response from a PostPoolIdIdRemoveWithResponse call
func ParsePostPoolIdIdRemoveResponse(rsp *http.Response) (*PostPoolIdIdRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdReplaceResponse parses an HTTP response from a PostPoolIdIdReplaceWithResponse call
func ParsePostPoolIdIdReplaceResponse(rsp *http.Response) (*PostPoolIdIdReplaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdScrubResponse parses an HTTP response from a PostPoolIdIdScrubWithResponse call
func ParsePostPoolIdIdScrubResponse(rsp *http.Response) (*PostPoolIdIdScrubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdUnlockResponse parses an HTTP response from a PostPoolIdIdUnlockWithResponse call
func ParsePostPoolIdIdUnlockResponse(rsp *http.Response) (*PostPoolIdIdUnlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdUnlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolIdIdUpgradeResponse parses an HTTP response from a PostPoolIdIdUpgradeWithResponse call
func ParsePostPoolIdIdUpgradeResponse(rsp *http.Response) (*PostPoolIdIdUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolImportDiskResponse parses an HTTP response from a PostPoolImportDiskWithResponse call
func ParsePostPoolImportDiskResponse(rsp *http.Response) (*PostPoolImportDiskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolImportDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolImportDiskAutodetectFsTypeResponse parses an HTTP response from a PostPoolImportDiskAutodetectFsTypeWithResponse call
func ParsePostPoolImportDiskAutodetectFsTypeResponse(rsp *http.Response) (*PostPoolImportDiskAutodetectFsTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolImportDiskAutodetectFsTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolImportDiskMsdosfsLocalesResponse parses an HTTP response from a GetPoolImportDiskMsdosfsLocalesWithResponse call
func ParseGetPoolImportDiskMsdosfsLocalesResponse(rsp *http.Response) (*GetPoolImportDiskMsdosfsLocalesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolImportDiskMsdosfsLocalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolImportFindResponse parses an HTTP response from a GetPoolImportFindWithResponse call
func ParseGetPoolImportFindResponse(rsp *http.Response) (*GetPoolImportFindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolImportFindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolImportPoolResponse parses an HTTP response from a PostPoolImportPoolWithResponse call
func ParsePostPoolImportPoolResponse(rsp *http.Response) (*PostPoolImportPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolImportPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolResilverResponse parses an HTTP response from a GetPoolResilverWithResponse call
func ParseGetPoolResilverResponse(rsp *http.Response) (*GetPoolResilverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolResilverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPoolResilverResponse parses an HTTP response from a PutPoolResilverWithResponse call
func ParsePutPoolResilverResponse(rsp *http.Response) (*PutPoolResilverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPoolResilverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolScrubResponse parses an HTTP response from a GetPoolScrubWithResponse call
func ParseGetPoolScrubResponse(rsp *http.Response) (*GetPoolScrubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolScrubResponse parses an HTTP response from a PostPoolScrubWithResponse call
func ParsePostPoolScrubResponse(rsp *http.Response) (*PostPoolScrubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePoolScrubIdIdResponse parses an HTTP response from a DeletePoolScrubIdIdWithResponse call
func ParseDeletePoolScrubIdIdResponse(rsp *http.Response) (*DeletePoolScrubIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePoolScrubIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolScrubIdIdResponse parses an HTTP response from a GetPoolScrubIdIdWithResponse call
func ParseGetPoolScrubIdIdResponse(rsp *http.Response) (*GetPoolScrubIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolScrubIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPoolScrubIdIdResponse parses an HTTP response from a PutPoolScrubIdIdWithResponse call
func ParsePutPoolScrubIdIdResponse(rsp *http.Response) (*PutPoolScrubIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPoolScrubIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolScrubRunResponse parses an HTTP response from a PostPoolScrubRunWithResponse call
func ParsePostPoolScrubRunResponse(rsp *http.Response) (*PostPoolScrubRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolScrubRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolSnapshottaskResponse parses an HTTP response from a GetPoolSnapshottaskWithResponse call
func ParseGetPoolSnapshottaskResponse(rsp *http.Response) (*GetPoolSnapshottaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolSnapshottaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolSnapshottaskResponse parses an HTTP response from a PostPoolSnapshottaskWithResponse call
func ParsePostPoolSnapshottaskResponse(rsp *http.Response) (*PostPoolSnapshottaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolSnapshottaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePoolSnapshottaskIdIdResponse parses an HTTP response from a DeletePoolSnapshottaskIdIdWithResponse call
func ParseDeletePoolSnapshottaskIdIdResponse(rsp *http.Response) (*DeletePoolSnapshottaskIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePoolSnapshottaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPoolSnapshottaskIdIdResponse parses an HTTP response from a GetPoolSnapshottaskIdIdWithResponse call
func ParseGetPoolSnapshottaskIdIdResponse(rsp *http.Response) (*GetPoolSnapshottaskIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoolSnapshottaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPoolSnapshottaskIdIdResponse parses an HTTP response from a PutPoolSnapshottaskIdIdWithResponse call
func ParsePutPoolSnapshottaskIdIdResponse(rsp *http.Response) (*PutPoolSnapshottaskIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPoolSnapshottaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolSnapshottaskIdIdRunResponse parses an HTTP response from a PostPoolSnapshottaskIdIdRunWithResponse call
func ParsePostPoolSnapshottaskIdIdRunResponse(rsp *http.Response) (*PostPoolSnapshottaskIdIdRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolSnapshottaskIdIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPoolUnlockServicesRestartChoicesResponse parses an HTTP response from a PostPoolUnlockServicesRestartChoicesWithResponse call
func ParsePostPoolUnlockServicesRestartChoicesResponse(rsp *http.Response) (*PostPoolUnlockServicesRestartChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPoolUnlockServicesRestartChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReplicationResponse parses an HTTP response from a GetReplicationWithResponse call
func ParseGetReplicationResponse(rsp *http.Response) (*GetReplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReplicationResponse parses an HTTP response from a PostReplicationWithResponse call
func ParsePostReplicationResponse(rsp *http.Response) (*PostReplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReplicationConfigResponse parses an HTTP response from a GetReplicationConfigWithResponse call
func ParseGetReplicationConfigResponse(rsp *http.Response) (*GetReplicationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReplicationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutReplicationConfigResponse parses an HTTP response from a PutReplicationConfigWithResponse call
func ParsePutReplicationConfigResponse(rsp *http.Response) (*PutReplicationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutReplicationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReplicationCountEligibleManualSnapshotsResponse parses an HTTP response from a PostReplicationCountEligibleManualSnapshotsWithResponse call
func ParsePostReplicationCountEligibleManualSnapshotsResponse(rsp *http.Response) (*PostReplicationCountEligibleManualSnapshotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationCountEligibleManualSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReplicationCreateDatasetResponse parses an HTTP response from a PostReplicationCreateDatasetWithResponse call
func ParsePostReplicationCreateDatasetResponse(rsp *http.Response) (*PostReplicationCreateDatasetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationCreateDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteReplicationIdIdResponse parses an HTTP response from a DeleteReplicationIdIdWithResponse call
func ParseDeleteReplicationIdIdResponse(rsp *http.Response) (*DeleteReplicationIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReplicationIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReplicationIdIdResponse parses an HTTP response from a GetReplicationIdIdWithResponse call
func ParseGetReplicationIdIdResponse(rsp *http.Response) (*GetReplicationIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReplicationIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutReplicationIdIdResponse parses an HTTP response from a PutReplicationIdIdWithResponse call
func ParsePutReplicationIdIdResponse(rsp *http.Response) (*PutReplicationIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutReplicationIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReplicationIdIdRestoreResponse parses an HTTP response from a PostReplicationIdIdRestoreWithResponse call
func ParsePostReplicationIdIdRestoreResponse(rsp *http.Response) (*PostReplicationIdIdRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationIdIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReplicationIdIdRunResponse parses an HTTP response from a PostReplicationIdIdRunWithResponse call
func ParsePostReplicationIdIdRunResponse(rsp *http.Response) (*PostReplicationIdIdRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationIdIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReplicationListDatasetsResponse parses an HTTP response from a PostReplicationListDatasetsWithResponse call
func ParsePostReplicationListDatasetsResponse(rsp *http.Response) (*PostReplicationListDatasetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationListDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReplicationListNamingSchemasResponse parses an HTTP response from a GetReplicationListNamingSchemasWithResponse call
func ParseGetReplicationListNamingSchemasResponse(rsp *http.Response) (*GetReplicationListNamingSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReplicationListNamingSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReplicationTargetUnmatchedSnapshotsResponse parses an HTTP response from a PostReplicationTargetUnmatchedSnapshotsWithResponse call
func ParsePostReplicationTargetUnmatchedSnapshotsResponse(rsp *http.Response) (*PostReplicationTargetUnmatchedSnapshotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationTargetUnmatchedSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReportingResponse parses an HTTP response from a GetReportingWithResponse call
func ParseGetReportingResponse(rsp *http.Response) (*GetReportingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReportingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutReportingResponse parses an HTTP response from a PutReportingWithResponse call
func ParsePutReportingResponse(rsp *http.Response) (*PutReportingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutReportingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostReportingGetDataResponse parses an HTTP response from a PostReportingGetDataWithResponse call
func ParsePostReportingGetDataResponse(rsp *http.Response) (*PostReportingGetDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReportingGetDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReportingGraphsResponse parses an HTTP response from a GetReportingGraphsWithResponse call
func ParseGetReportingGraphsResponse(rsp *http.Response) (*GetReportingGraphsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReportingGraphsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRouteIpv4gwReachableResponse parses an HTTP response from a PostRouteIpv4gwReachableWithResponse call
func ParsePostRouteIpv4gwReachableResponse(rsp *http.Response) (*PostRouteIpv4gwReachableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRouteIpv4gwReachableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRouteSystemRoutesResponse parses an HTTP response from a GetRouteSystemRoutesWithResponse call
func ParseGetRouteSystemRoutesResponse(rsp *http.Response) (*GetRouteSystemRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRouteSystemRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRsyncdResponse parses an HTTP response from a GetRsyncdWithResponse call
func ParseGetRsyncdResponse(rsp *http.Response) (*GetRsyncdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRsyncdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRsyncdResponse parses an HTTP response from a PutRsyncdWithResponse call
func ParsePutRsyncdResponse(rsp *http.Response) (*PutRsyncdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRsyncdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRsyncmodResponse parses an HTTP response from a GetRsyncmodWithResponse call
func ParseGetRsyncmodResponse(rsp *http.Response) (*GetRsyncmodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRsyncmodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRsyncmodResponse parses an HTTP response from a PostRsyncmodWithResponse call
func ParsePostRsyncmodResponse(rsp *http.Response) (*PostRsyncmodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRsyncmodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRsyncmodIdIdResponse parses an HTTP response from a DeleteRsyncmodIdIdWithResponse call
func ParseDeleteRsyncmodIdIdResponse(rsp *http.Response) (*DeleteRsyncmodIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRsyncmodIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRsyncmodIdIdResponse parses an HTTP response from a GetRsyncmodIdIdWithResponse call
func ParseGetRsyncmodIdIdResponse(rsp *http.Response) (*GetRsyncmodIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRsyncmodIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRsyncmodIdIdResponse parses an HTTP response from a PutRsyncmodIdIdWithResponse call
func ParsePutRsyncmodIdIdResponse(rsp *http.Response) (*PutRsyncmodIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRsyncmodIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRsynctaskResponse parses an HTTP response from a GetRsynctaskWithResponse call
func ParseGetRsynctaskResponse(rsp *http.Response) (*GetRsynctaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRsynctaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRsynctaskResponse parses an HTTP response from a PostRsynctaskWithResponse call
func ParsePostRsynctaskResponse(rsp *http.Response) (*PostRsynctaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRsynctaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRsynctaskIdIdResponse parses an HTTP response from a DeleteRsynctaskIdIdWithResponse call
func ParseDeleteRsynctaskIdIdResponse(rsp *http.Response) (*DeleteRsynctaskIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRsynctaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRsynctaskIdIdResponse parses an HTTP response from a GetRsynctaskIdIdWithResponse call
func ParseGetRsynctaskIdIdResponse(rsp *http.Response) (*GetRsynctaskIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRsynctaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRsynctaskIdIdResponse parses an HTTP response from a PutRsynctaskIdIdWithResponse call
func ParsePutRsynctaskIdIdResponse(rsp *http.Response) (*PutRsynctaskIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRsynctaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRsynctaskIdIdRunResponse parses an HTTP response from a PostRsynctaskIdIdRunWithResponse call
func ParsePostRsynctaskIdIdRunResponse(rsp *http.Response) (*PostRsynctaskIdIdRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRsynctaskIdIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetS3Response parses an HTTP response from a GetS3WithResponse call
func ParseGetS3Response(rsp *http.Response) (*GetS3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetS3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutS3Response parses an HTTP response from a PutS3WithResponse call
func ParsePutS3Response(rsp *http.Response) (*PutS3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutS3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetS3BindipChoicesResponse parses an HTTP response from a GetS3BindipChoicesWithResponse call
func ParseGetS3BindipChoicesResponse(rsp *http.Response) (*GetS3BindipChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetS3BindipChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSensorQueryResponse parses an HTTP response from a GetSensorQueryWithResponse call
func ParseGetSensorQueryResponse(rsp *http.Response) (*GetSensorQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSensorQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceIdIdResponse parses an HTTP response from a GetServiceIdIdWithResponse call
func ParseGetServiceIdIdResponse(rsp *http.Response) (*GetServiceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutServiceIdIdResponse parses an HTTP response from a PutServiceIdIdWithResponse call
func ParsePutServiceIdIdResponse(rsp *http.Response) (*PutServiceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostServiceReloadResponse parses an HTTP response from a PostServiceReloadWithResponse call
func ParsePostServiceReloadResponse(rsp *http.Response) (*PostServiceReloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceReloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostServiceRestartResponse parses an HTTP response from a PostServiceRestartWithResponse call
func ParsePostServiceRestartResponse(rsp *http.Response) (*PostServiceRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostServiceStartResponse parses an HTTP response from a PostServiceStartWithResponse call
func ParsePostServiceStartResponse(rsp *http.Response) (*PostServiceStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceStartedResponse parses an HTTP response from a GetServiceStartedWithResponse call
func ParseGetServiceStartedResponse(rsp *http.Response) (*GetServiceStartedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceStartedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostServiceStopResponse parses an HTTP response from a PostServiceStopWithResponse call
func ParsePostServiceStopResponse(rsp *http.Response) (*PostServiceStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostServiceTerminateProcessResponse parses an HTTP response from a PostServiceTerminateProcessWithResponse call
func ParsePostServiceTerminateProcessResponse(rsp *http.Response) (*PostServiceTerminateProcessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceTerminateProcessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingAfpResponse parses an HTTP response from a GetSharingAfpWithResponse call
func ParseGetSharingAfpResponse(rsp *http.Response) (*GetSharingAfpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingAfpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSharingAfpResponse parses an HTTP response from a PostSharingAfpWithResponse call
func ParsePostSharingAfpResponse(rsp *http.Response) (*PostSharingAfpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharingAfpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSharingAfpIdIdResponse parses an HTTP response from a DeleteSharingAfpIdIdWithResponse call
func ParseDeleteSharingAfpIdIdResponse(rsp *http.Response) (*DeleteSharingAfpIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSharingAfpIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingAfpIdIdResponse parses an HTTP response from a GetSharingAfpIdIdWithResponse call
func ParseGetSharingAfpIdIdResponse(rsp *http.Response) (*GetSharingAfpIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingAfpIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSharingAfpIdIdResponse parses an HTTP response from a PutSharingAfpIdIdWithResponse call
func ParsePutSharingAfpIdIdResponse(rsp *http.Response) (*PutSharingAfpIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSharingAfpIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingNfsResponse parses an HTTP response from a GetSharingNfsWithResponse call
func ParseGetSharingNfsResponse(rsp *http.Response) (*GetSharingNfsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingNfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSharingNfsResponse parses an HTTP response from a PostSharingNfsWithResponse call
func ParsePostSharingNfsResponse(rsp *http.Response) (*PostSharingNfsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharingNfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingNfsHumanIdentifierResponse parses an HTTP response from a GetSharingNfsHumanIdentifierWithResponse call
func ParseGetSharingNfsHumanIdentifierResponse(rsp *http.Response) (*GetSharingNfsHumanIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingNfsHumanIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSharingNfsIdIdResponse parses an HTTP response from a DeleteSharingNfsIdIdWithResponse call
func ParseDeleteSharingNfsIdIdResponse(rsp *http.Response) (*DeleteSharingNfsIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSharingNfsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingNfsIdIdResponse parses an HTTP response from a GetSharingNfsIdIdWithResponse call
func ParseGetSharingNfsIdIdResponse(rsp *http.Response) (*GetSharingNfsIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingNfsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSharingNfsIdIdResponse parses an HTTP response from a PutSharingNfsIdIdWithResponse call
func ParsePutSharingNfsIdIdResponse(rsp *http.Response) (*PutSharingNfsIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSharingNfsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingSmbResponse parses an HTTP response from a GetSharingSmbWithResponse call
func ParseGetSharingSmbResponse(rsp *http.Response) (*GetSharingSmbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingSmbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSharingSmbResponse parses an HTTP response from a PostSharingSmbWithResponse call
func ParsePostSharingSmbResponse(rsp *http.Response) (*PostSharingSmbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharingSmbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSharingSmbIdIdResponse parses an HTTP response from a DeleteSharingSmbIdIdWithResponse call
func ParseDeleteSharingSmbIdIdResponse(rsp *http.Response) (*DeleteSharingSmbIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSharingSmbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingSmbIdIdResponse parses an HTTP response from a GetSharingSmbIdIdWithResponse call
func ParseGetSharingSmbIdIdResponse(rsp *http.Response) (*GetSharingSmbIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingSmbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSharingSmbIdIdResponse parses an HTTP response from a PutSharingSmbIdIdWithResponse call
func ParsePutSharingSmbIdIdResponse(rsp *http.Response) (*PutSharingSmbIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSharingSmbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingSmbPresetsResponse parses an HTTP response from a GetSharingSmbPresetsWithResponse call
func ParseGetSharingSmbPresetsResponse(rsp *http.Response) (*GetSharingSmbPresetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingSmbPresetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingWebdavResponse parses an HTTP response from a GetSharingWebdavWithResponse call
func ParseGetSharingWebdavResponse(rsp *http.Response) (*GetSharingWebdavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingWebdavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSharingWebdavResponse parses an HTTP response from a PostSharingWebdavWithResponse call
func ParsePostSharingWebdavResponse(rsp *http.Response) (*PostSharingWebdavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharingWebdavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSharingWebdavIdIdResponse parses an HTTP response from a DeleteSharingWebdavIdIdWithResponse call
func ParseDeleteSharingWebdavIdIdResponse(rsp *http.Response) (*DeleteSharingWebdavIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSharingWebdavIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharingWebdavIdIdResponse parses an HTTP response from a GetSharingWebdavIdIdWithResponse call
func ParseGetSharingWebdavIdIdResponse(rsp *http.Response) (*GetSharingWebdavIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharingWebdavIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSharingWebdavIdIdResponse parses an HTTP response from a PutSharingWebdavIdIdWithResponse call
func ParsePutSharingWebdavIdIdResponse(rsp *http.Response) (*PutSharingWebdavIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSharingWebdavIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmartResponse parses an HTTP response from a GetSmartWithResponse call
func ParseGetSmartResponse(rsp *http.Response) (*GetSmartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSmartResponse parses an HTTP response from a PutSmartWithResponse call
func ParsePutSmartResponse(rsp *http.Response) (*PutSmartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSmartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmartTestResponse parses an HTTP response from a GetSmartTestWithResponse call
func ParseGetSmartTestResponse(rsp *http.Response) (*GetSmartTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmartTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSmartTestResponse parses an HTTP response from a PostSmartTestWithResponse call
func ParsePostSmartTestResponse(rsp *http.Response) (*PostSmartTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmartTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSmartTestDiskChoicesResponse parses an HTTP response from a PostSmartTestDiskChoicesWithResponse call
func ParsePostSmartTestDiskChoicesResponse(rsp *http.Response) (*PostSmartTestDiskChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmartTestDiskChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSmartTestIdIdResponse parses an HTTP response from a DeleteSmartTestIdIdWithResponse call
func ParseDeleteSmartTestIdIdResponse(rsp *http.Response) (*DeleteSmartTestIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmartTestIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmartTestIdIdResponse parses an HTTP response from a GetSmartTestIdIdWithResponse call
func ParseGetSmartTestIdIdResponse(rsp *http.Response) (*GetSmartTestIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmartTestIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSmartTestIdIdResponse parses an HTTP response from a PutSmartTestIdIdWithResponse call
func ParsePutSmartTestIdIdResponse(rsp *http.Response) (*PutSmartTestIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSmartTestIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSmartTestManualTestResponse parses an HTTP response from a PostSmartTestManualTestWithResponse call
func ParsePostSmartTestManualTestResponse(rsp *http.Response) (*PostSmartTestManualTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmartTestManualTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmartTestResultsResponse parses an HTTP response from a GetSmartTestResultsWithResponse call
func ParseGetSmartTestResultsResponse(rsp *http.Response) (*GetSmartTestResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmartTestResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmbResponse parses an HTTP response from a GetSmbWithResponse call
func ParseGetSmbResponse(rsp *http.Response) (*GetSmbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSmbResponse parses an HTTP response from a PutSmbWithResponse call
func ParsePutSmbResponse(rsp *http.Response) (*PutSmbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSmbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmbBindipChoicesResponse parses an HTTP response from a GetSmbBindipChoicesWithResponse call
func ParseGetSmbBindipChoicesResponse(rsp *http.Response) (*GetSmbBindipChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmbBindipChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmbDomainChoicesResponse parses an HTTP response from a GetSmbDomainChoicesWithResponse call
func ParseGetSmbDomainChoicesResponse(rsp *http.Response) (*GetSmbDomainChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmbDomainChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSmbGetRemoteAclResponse parses an HTTP response from a PostSmbGetRemoteAclWithResponse call
func ParsePostSmbGetRemoteAclResponse(rsp *http.Response) (*PostSmbGetRemoteAclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmbGetRemoteAclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmbSharesecResponse parses an HTTP response from a GetSmbSharesecWithResponse call
func ParseGetSmbSharesecResponse(rsp *http.Response) (*GetSmbSharesecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmbSharesecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSmbSharesecResponse parses an HTTP response from a PostSmbSharesecWithResponse call
func ParsePostSmbSharesecResponse(rsp *http.Response) (*PostSmbSharesecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmbSharesecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSmbSharesecGetaclResponse parses an HTTP response from a PostSmbSharesecGetaclWithResponse call
func ParsePostSmbSharesecGetaclResponse(rsp *http.Response) (*PostSmbSharesecGetaclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmbSharesecGetaclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSmbSharesecIdIdResponse parses an HTTP response from a DeleteSmbSharesecIdIdWithResponse call
func ParseDeleteSmbSharesecIdIdResponse(rsp *http.Response) (*DeleteSmbSharesecIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmbSharesecIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmbSharesecIdIdResponse parses an HTTP response from a GetSmbSharesecIdIdWithResponse call
func ParseGetSmbSharesecIdIdResponse(rsp *http.Response) (*GetSmbSharesecIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmbSharesecIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSmbSharesecIdIdResponse parses an HTTP response from a PutSmbSharesecIdIdWithResponse call
func ParsePutSmbSharesecIdIdResponse(rsp *http.Response) (*PutSmbSharesecIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSmbSharesecIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmbSharesecSynchronizeAclsResponse parses an HTTP response from a GetSmbSharesecSynchronizeAclsWithResponse call
func ParseGetSmbSharesecSynchronizeAclsResponse(rsp *http.Response) (*GetSmbSharesecSynchronizeAclsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmbSharesecSynchronizeAclsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSmbStatusResponse parses an HTTP response from a PostSmbStatusWithResponse call
func ParsePostSmbStatusResponse(rsp *http.Response) (*PostSmbStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmbStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSmbUnixcharsetChoicesResponse parses an HTTP response from a GetSmbUnixcharsetChoicesWithResponse call
func ParseGetSmbUnixcharsetChoicesResponse(rsp *http.Response) (*GetSmbUnixcharsetChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmbUnixcharsetChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSnmpResponse parses an HTTP response from a GetSnmpWithResponse call
func ParseGetSnmpResponse(rsp *http.Response) (*GetSnmpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnmpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSnmpResponse parses an HTTP response from a PutSnmpWithResponse call
func ParsePutSnmpResponse(rsp *http.Response) (*PutSnmpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSnmpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSshResponse parses an HTTP response from a GetSshWithResponse call
func ParseGetSshResponse(rsp *http.Response) (*GetSshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSshResponse parses an HTTP response from a PutSshWithResponse call
func ParsePutSshResponse(rsp *http.Response) (*PutSshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSshBindifaceChoicesResponse parses an HTTP response from a GetSshBindifaceChoicesWithResponse call
func ParseGetSshBindifaceChoicesResponse(rsp *http.Response) (*GetSshBindifaceChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSshBindifaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStaticrouteResponse parses an HTTP response from a GetStaticrouteWithResponse call
func ParseGetStaticrouteResponse(rsp *http.Response) (*GetStaticrouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaticrouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostStaticrouteResponse parses an HTTP response from a PostStaticrouteWithResponse call
func ParsePostStaticrouteResponse(rsp *http.Response) (*PostStaticrouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStaticrouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteStaticrouteIdIdResponse parses an HTTP response from a DeleteStaticrouteIdIdWithResponse call
func ParseDeleteStaticrouteIdIdResponse(rsp *http.Response) (*DeleteStaticrouteIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStaticrouteIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStaticrouteIdIdResponse parses an HTTP response from a GetStaticrouteIdIdWithResponse call
func ParseGetStaticrouteIdIdResponse(rsp *http.Response) (*GetStaticrouteIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaticrouteIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutStaticrouteIdIdResponse parses an HTTP response from a PutStaticrouteIdIdWithResponse call
func ParsePutStaticrouteIdIdResponse(rsp *http.Response) (*PutStaticrouteIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStaticrouteIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostStatsGetDataResponse parses an HTTP response from a PostStatsGetDataWithResponse call
func ParsePostStatsGetDataResponse(rsp *http.Response) (*PostStatsGetDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStatsGetDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostStatsGetDatasetInfoResponse parses an HTTP response from a PostStatsGetDatasetInfoWithResponse call
func ParsePostStatsGetDatasetInfoResponse(rsp *http.Response) (*PostStatsGetDatasetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStatsGetDatasetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatsGetSourcesResponse parses an HTTP response from a GetStatsGetSourcesWithResponse call
func ParseGetStatsGetSourcesResponse(rsp *http.Response) (*GetStatsGetSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatsGetSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSupportResponse parses an HTTP response from a GetSupportWithResponse call
func ParseGetSupportResponse(rsp *http.Response) (*GetSupportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSupportResponse parses an HTTP response from a PutSupportWithResponse call
func ParsePutSupportResponse(rsp *http.Response) (*PutSupportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSupportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSupportFetchCategoriesResponse parses an HTTP response from a PostSupportFetchCategoriesWithResponse call
func ParsePostSupportFetchCategoriesResponse(rsp *http.Response) (*PostSupportFetchCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSupportFetchCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSupportFieldsResponse parses an HTTP response from a GetSupportFieldsWithResponse call
func ParseGetSupportFieldsResponse(rsp *http.Response) (*GetSupportFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSupportIsAvailableResponse parses an HTTP response from a GetSupportIsAvailableWithResponse call
func ParseGetSupportIsAvailableResponse(rsp *http.Response) (*GetSupportIsAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportIsAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSupportIsAvailableAndEnabledResponse parses an HTTP response from a GetSupportIsAvailableAndEnabledWithResponse call
func ParseGetSupportIsAvailableAndEnabledResponse(rsp *http.Response) (*GetSupportIsAvailableAndEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportIsAvailableAndEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSupportNewTicketResponse parses an HTTP response from a PostSupportNewTicketWithResponse call
func ParsePostSupportNewTicketResponse(rsp *http.Response) (*PostSupportNewTicketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSupportNewTicketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemAdvancedResponse parses an HTTP response from a GetSystemAdvancedWithResponse call
func ParseGetSystemAdvancedResponse(rsp *http.Response) (*GetSystemAdvancedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemAdvancedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSystemAdvancedResponse parses an HTTP response from a PutSystemAdvancedWithResponse call
func ParsePutSystemAdvancedResponse(rsp *http.Response) (*PutSystemAdvancedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSystemAdvancedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemAdvancedSedGlobalPasswordResponse parses an HTTP response from a GetSystemAdvancedSedGlobalPasswordWithResponse call
func ParseGetSystemAdvancedSedGlobalPasswordResponse(rsp *http.Response) (*GetSystemAdvancedSedGlobalPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemAdvancedSedGlobalPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemAdvancedSerialPortChoicesResponse parses an HTTP response from a GetSystemAdvancedSerialPortChoicesWithResponse call
func ParseGetSystemAdvancedSerialPortChoicesResponse(rsp *http.Response) (*GetSystemAdvancedSerialPortChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemAdvancedSerialPortChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemBootIdResponse parses an HTTP response from a GetSystemBootIdWithResponse call
func ParseGetSystemBootIdResponse(rsp *http.Response) (*GetSystemBootIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemBootIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemEnvironmentResponse parses an HTTP response from a GetSystemEnvironmentWithResponse call
func ParseGetSystemEnvironmentResponse(rsp *http.Response) (*GetSystemEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSystemFeatureEnabledResponse parses an HTTP response from a PostSystemFeatureEnabledWithResponse call
func ParsePostSystemFeatureEnabledResponse(rsp *http.Response) (*PostSystemFeatureEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemFeatureEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralResponse parses an HTTP response from a GetSystemGeneralWithResponse call
func ParseGetSystemGeneralResponse(rsp *http.Response) (*GetSystemGeneralResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSystemGeneralResponse parses an HTTP response from a PutSystemGeneralWithResponse call
func ParsePutSystemGeneralResponse(rsp *http.Response) (*PutSystemGeneralResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSystemGeneralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralCountryChoicesResponse parses an HTTP response from a GetSystemGeneralCountryChoicesWithResponse call
func ParseGetSystemGeneralCountryChoicesResponse(rsp *http.Response) (*GetSystemGeneralCountryChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralCountryChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralKbdmapChoicesResponse parses an HTTP response from a GetSystemGeneralKbdmapChoicesWithResponse call
func ParseGetSystemGeneralKbdmapChoicesResponse(rsp *http.Response) (*GetSystemGeneralKbdmapChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralKbdmapChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralLanguageChoicesResponse parses an HTTP response from a GetSystemGeneralLanguageChoicesWithResponse call
func ParseGetSystemGeneralLanguageChoicesResponse(rsp *http.Response) (*GetSystemGeneralLanguageChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralLanguageChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralLocalUrlResponse parses an HTTP response from a GetSystemGeneralLocalUrlWithResponse call
func ParseGetSystemGeneralLocalUrlResponse(rsp *http.Response) (*GetSystemGeneralLocalUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralLocalUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralTimezoneChoicesResponse parses an HTTP response from a GetSystemGeneralTimezoneChoicesWithResponse call
func ParseGetSystemGeneralTimezoneChoicesResponse(rsp *http.Response) (*GetSystemGeneralTimezoneChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralTimezoneChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralUiAddressChoicesResponse parses an HTTP response from a GetSystemGeneralUiAddressChoicesWithResponse call
func ParseGetSystemGeneralUiAddressChoicesResponse(rsp *http.Response) (*GetSystemGeneralUiAddressChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiAddressChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralUiCertificateChoicesResponse parses an HTTP response from a GetSystemGeneralUiCertificateChoicesWithResponse call
func ParseGetSystemGeneralUiCertificateChoicesResponse(rsp *http.Response) (*GetSystemGeneralUiCertificateChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiCertificateChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralUiHttpsprotocolsChoicesResponse parses an HTTP response from a GetSystemGeneralUiHttpsprotocolsChoicesWithResponse call
func ParseGetSystemGeneralUiHttpsprotocolsChoicesResponse(rsp *http.Response) (*GetSystemGeneralUiHttpsprotocolsChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiHttpsprotocolsChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralUiRestartResponse parses an HTTP response from a GetSystemGeneralUiRestartWithResponse call
func ParseGetSystemGeneralUiRestartResponse(rsp *http.Response) (*GetSystemGeneralUiRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSystemGeneralUiRestartResponse parses an HTTP response from a PostSystemGeneralUiRestartWithResponse call
func ParsePostSystemGeneralUiRestartResponse(rsp *http.Response) (*PostSystemGeneralUiRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemGeneralUiRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemGeneralUiV6addressChoicesResponse parses an HTTP response from a GetSystemGeneralUiV6addressChoicesWithResponse call
func ParseGetSystemGeneralUiV6addressChoicesResponse(rsp *http.Response) (*GetSystemGeneralUiV6addressChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiV6addressChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemHostIdResponse parses an HTTP response from a GetSystemHostIdWithResponse call
func ParseGetSystemHostIdResponse(rsp *http.Response) (*GetSystemHostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemHostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemInfoResponse parses an HTTP response from a GetSystemInfoWithResponse call
func ParseGetSystemInfoResponse(rsp *http.Response) (*GetSystemInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemIsFreenasResponse parses an HTTP response from a GetSystemIsFreenasWithResponse call
func ParseGetSystemIsFreenasResponse(rsp *http.Response) (*GetSystemIsFreenasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemIsFreenasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSystemLicenseUpdateResponse parses an HTTP response from a PostSystemLicenseUpdateWithResponse call
func ParsePostSystemLicenseUpdateResponse(rsp *http.Response) (*PostSystemLicenseUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemLicenseUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemNtpserverResponse parses an HTTP response from a GetSystemNtpserverWithResponse call
func ParseGetSystemNtpserverResponse(rsp *http.Response) (*GetSystemNtpserverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemNtpserverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSystemNtpserverResponse parses an HTTP response from a PostSystemNtpserverWithResponse call
func ParsePostSystemNtpserverResponse(rsp *http.Response) (*PostSystemNtpserverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemNtpserverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSystemNtpserverIdIdResponse parses an HTTP response from a DeleteSystemNtpserverIdIdWithResponse call
func ParseDeleteSystemNtpserverIdIdResponse(rsp *http.Response) (*DeleteSystemNtpserverIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSystemNtpserverIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemNtpserverIdIdResponse parses an HTTP response from a GetSystemNtpserverIdIdWithResponse call
func ParseGetSystemNtpserverIdIdResponse(rsp *http.Response) (*GetSystemNtpserverIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemNtpserverIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSystemNtpserverIdIdResponse parses an HTTP response from a PutSystemNtpserverIdIdWithResponse call
func ParsePutSystemNtpserverIdIdResponse(rsp *http.Response) (*PutSystemNtpserverIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSystemNtpserverIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemNtpserverTestNtpServerResponse parses an HTTP response from a GetSystemNtpserverTestNtpServerWithResponse call
func ParseGetSystemNtpserverTestNtpServerResponse(rsp *http.Response) (*GetSystemNtpserverTestNtpServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemNtpserverTestNtpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemProductNameResponse parses an HTTP response from a GetSystemProductNameWithResponse call
func ParseGetSystemProductNameResponse(rsp *http.Response) (*GetSystemProductNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemProductNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemProductTypeResponse parses an HTTP response from a GetSystemProductTypeWithResponse call
func ParseGetSystemProductTypeResponse(rsp *http.Response) (*GetSystemProductTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemProductTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemReadyResponse parses an HTTP response from a GetSystemReadyWithResponse call
func ParseGetSystemReadyResponse(rsp *http.Response) (*GetSystemReadyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemReadyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSystemRebootResponse parses an HTTP response from a PostSystemRebootWithResponse call
func ParsePostSystemRebootResponse(rsp *http.Response) (*PostSystemRebootResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemRebootResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSystemShutdownResponse parses an HTTP response from a PostSystemShutdownWithResponse call
func ParsePostSystemShutdownResponse(rsp *http.Response) (*PostSystemShutdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemStateResponse parses an HTTP response from a GetSystemStateWithResponse call
func ParseGetSystemStateResponse(rsp *http.Response) (*GetSystemStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemVersionResponse parses an HTTP response from a GetSystemVersionWithResponse call
func ParseGetSystemVersionResponse(rsp *http.Response) (*GetSystemVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemdatasetResponse parses an HTTP response from a GetSystemdatasetWithResponse call
func ParseGetSystemdatasetResponse(rsp *http.Response) (*GetSystemdatasetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemdatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSystemdatasetResponse parses an HTTP response from a PutSystemdatasetWithResponse call
func ParsePutSystemdatasetResponse(rsp *http.Response) (*PutSystemdatasetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSystemdatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTftpResponse parses an HTTP response from a GetTftpWithResponse call
func ParseGetTftpResponse(rsp *http.Response) (*GetTftpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTftpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutTftpResponse parses an HTTP response from a PutTftpWithResponse call
func ParsePutTftpResponse(rsp *http.Response) (*PutTftpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTftpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTruecommandResponse parses an HTTP response from a GetTruecommandWithResponse call
func ParseGetTruecommandResponse(rsp *http.Response) (*GetTruecommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTruecommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutTruecommandResponse parses an HTTP response from a PutTruecommandWithResponse call
func ParsePutTruecommandResponse(rsp *http.Response) (*PutTruecommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTruecommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTruenasAcceptEulaResponse parses an HTTP response from a GetTruenasAcceptEulaWithResponse call
func ParseGetTruenasAcceptEulaResponse(rsp *http.Response) (*GetTruenasAcceptEulaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTruenasAcceptEulaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTruenasGetChassisHardwareResponse parses an HTTP response from a GetTruenasGetChassisHardwareWithResponse call
func ParseGetTruenasGetChassisHardwareResponse(rsp *http.Response) (*GetTruenasGetChassisHardwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTruenasGetChassisHardwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTruenasGetCustomerInformationResponse parses an HTTP response from a GetTruenasGetCustomerInformationWithResponse call
func ParseGetTruenasGetCustomerInformationResponse(rsp *http.Response) (*GetTruenasGetCustomerInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTruenasGetCustomerInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTruenasGetEulaResponse parses an HTTP response from a GetTruenasGetEulaWithResponse call
func ParseGetTruenasGetEulaResponse(rsp *http.Response) (*GetTruenasGetEulaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTruenasGetEulaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTruenasIsEulaAcceptedResponse parses an HTTP response from a GetTruenasIsEulaAcceptedWithResponse call
func ParseGetTruenasIsEulaAcceptedResponse(rsp *http.Response) (*GetTruenasIsEulaAcceptedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTruenasIsEulaAcceptedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTruenasIsProductionResponse parses an HTTP response from a GetTruenasIsProductionWithResponse call
func ParseGetTruenasIsProductionResponse(rsp *http.Response) (*GetTruenasIsProductionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTruenasIsProductionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTruenasSetProductionResponse parses an HTTP response from a PostTruenasSetProductionWithResponse call
func ParsePostTruenasSetProductionResponse(rsp *http.Response) (*PostTruenasSetProductionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTruenasSetProductionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTruenasUpdateCustomerInformationResponse parses an HTTP response from a PostTruenasUpdateCustomerInformationWithResponse call
func ParsePostTruenasUpdateCustomerInformationResponse(rsp *http.Response) (*PostTruenasUpdateCustomerInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTruenasUpdateCustomerInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTunableResponse parses an HTTP response from a GetTunableWithResponse call
func ParseGetTunableResponse(rsp *http.Response) (*GetTunableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTunableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostTunableResponse parses an HTTP response from a PostTunableWithResponse call
func ParsePostTunableResponse(rsp *http.Response) (*PostTunableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTunableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTunableIdIdResponse parses an HTTP response from a DeleteTunableIdIdWithResponse call
func ParseDeleteTunableIdIdResponse(rsp *http.Response) (*DeleteTunableIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTunableIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTunableIdIdResponse parses an HTTP response from a GetTunableIdIdWithResponse call
func ParseGetTunableIdIdResponse(rsp *http.Response) (*GetTunableIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTunableIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutTunableIdIdResponse parses an HTTP response from a PutTunableIdIdWithResponse call
func ParsePutTunableIdIdResponse(rsp *http.Response) (*PutTunableIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTunableIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTunableTunableTypeChoicesResponse parses an HTTP response from a GetTunableTunableTypeChoicesWithResponse call
func ParseGetTunableTunableTypeChoicesResponse(rsp *http.Response) (*GetTunableTunableTypeChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTunableTunableTypeChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUpdateCheckAvailableResponse parses an HTTP response from a PostUpdateCheckAvailableWithResponse call
func ParsePostUpdateCheckAvailableResponse(rsp *http.Response) (*PostUpdateCheckAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateCheckAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUpdateDownloadResponse parses an HTTP response from a GetUpdateDownloadWithResponse call
func ParseGetUpdateDownloadResponse(rsp *http.Response) (*GetUpdateDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUpdateGetAutoDownloadResponse parses an HTTP response from a GetUpdateGetAutoDownloadWithResponse call
func ParseGetUpdateGetAutoDownloadResponse(rsp *http.Response) (*GetUpdateGetAutoDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateGetAutoDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUpdateGetPendingResponse parses an HTTP response from a PostUpdateGetPendingWithResponse call
func ParsePostUpdateGetPendingResponse(rsp *http.Response) (*PostUpdateGetPendingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateGetPendingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUpdateGetTrainsResponse parses an HTTP response from a GetUpdateGetTrainsWithResponse call
func ParseGetUpdateGetTrainsResponse(rsp *http.Response) (*GetUpdateGetTrainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateGetTrainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUpdateManualResponse parses an HTTP response from a PostUpdateManualWithResponse call
func ParsePostUpdateManualResponse(rsp *http.Response) (*PostUpdateManualResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateManualResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUpdateSetAutoDownloadResponse parses an HTTP response from a PostUpdateSetAutoDownloadWithResponse call
func ParsePostUpdateSetAutoDownloadResponse(rsp *http.Response) (*PostUpdateSetAutoDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateSetAutoDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUpdateSetTrainResponse parses an HTTP response from a PostUpdateSetTrainWithResponse call
func ParsePostUpdateSetTrainResponse(rsp *http.Response) (*PostUpdateSetTrainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateSetTrainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUpdateUpdateResponse parses an HTTP response from a PostUpdateUpdateWithResponse call
func ParsePostUpdateUpdateResponse(rsp *http.Response) (*PostUpdateUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUpsResponse parses an HTTP response from a GetUpsWithResponse call
func ParseGetUpsResponse(rsp *http.Response) (*GetUpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutUpsResponse parses an HTTP response from a PutUpsWithResponse call
func ParsePutUpsResponse(rsp *http.Response) (*PutUpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUpsDriverChoicesResponse parses an HTTP response from a GetUpsDriverChoicesWithResponse call
func ParseGetUpsDriverChoicesResponse(rsp *http.Response) (*GetUpsDriverChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpsDriverChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUpsPortChoicesResponse parses an HTTP response from a GetUpsPortChoicesWithResponse call
func ParseGetUpsPortChoicesResponse(rsp *http.Response) (*GetUpsPortChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpsPortChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUserResponse parses an HTTP response from a PostUserWithResponse call
func ParsePostUserResponse(rsp *http.Response) (*PostUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserGetNextUidResponse parses an HTTP response from a GetUserGetNextUidWithResponse call
func ParseGetUserGetNextUidResponse(rsp *http.Response) (*GetUserGetNextUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGetNextUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUserGetUserObjResponse parses an HTTP response from a PostUserGetUserObjWithResponse call
func ParsePostUserGetUserObjResponse(rsp *http.Response) (*PostUserGetUserObjResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserGetUserObjResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserHasRootPasswordResponse parses an HTTP response from a GetUserHasRootPasswordWithResponse call
func ParseGetUserHasRootPasswordResponse(rsp *http.Response) (*GetUserHasRootPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserHasRootPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserIdIdResponse parses an HTTP response from a DeleteUserIdIdWithResponse call
func ParseDeleteUserIdIdResponse(rsp *http.Response) (*DeleteUserIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserIdIdResponse parses an HTTP response from a GetUserIdIdWithResponse call
func ParseGetUserIdIdResponse(rsp *http.Response) (*GetUserIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutUserIdIdResponse parses an HTTP response from a PutUserIdIdWithResponse call
func ParsePutUserIdIdResponse(rsp *http.Response) (*PutUserIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUserIdIdPopAttributeResponse parses an HTTP response from a PostUserIdIdPopAttributeWithResponse call
func ParsePostUserIdIdPopAttributeResponse(rsp *http.Response) (*PostUserIdIdPopAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserIdIdPopAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUserIdIdSetAttributeResponse parses an HTTP response from a PostUserIdIdSetAttributeWithResponse call
func ParsePostUserIdIdSetAttributeResponse(rsp *http.Response) (*PostUserIdIdSetAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserIdIdSetAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUserShellChoicesResponse parses an HTTP response from a PostUserShellChoicesWithResponse call
func ParsePostUserShellChoicesResponse(rsp *http.Response) (*PostUserShellChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserShellChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmResponse parses an HTTP response from a GetVmWithResponse call
func ParseGetVmResponse(rsp *http.Response) (*GetVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmResponse parses an HTTP response from a PostVmWithResponse call
func ParsePostVmResponse(rsp *http.Response) (*PostVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmDeviceResponse parses an HTTP response from a GetVmDeviceWithResponse call
func ParseGetVmDeviceResponse(rsp *http.Response) (*GetVmDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmDeviceResponse parses an HTTP response from a PostVmDeviceWithResponse call
func ParsePostVmDeviceResponse(rsp *http.Response) (*PostVmDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteVmDeviceIdIdResponse parses an HTTP response from a DeleteVmDeviceIdIdWithResponse call
func ParseDeleteVmDeviceIdIdResponse(rsp *http.Response) (*DeleteVmDeviceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmDeviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmDeviceIdIdResponse parses an HTTP response from a GetVmDeviceIdIdWithResponse call
func ParseGetVmDeviceIdIdResponse(rsp *http.Response) (*GetVmDeviceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmDeviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmDeviceIdIdResponse parses an HTTP response from a PutVmDeviceIdIdWithResponse call
func ParsePutVmDeviceIdIdResponse(rsp *http.Response) (*PutVmDeviceIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmDeviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmDeviceNicAttachChoicesResponse parses an HTTP response from a GetVmDeviceNicAttachChoicesWithResponse call
func ParseGetVmDeviceNicAttachChoicesResponse(rsp *http.Response) (*GetVmDeviceNicAttachChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmDeviceNicAttachChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmDevicePptdevChoicesResponse parses an HTTP response from a GetVmDevicePptdevChoicesWithResponse call
func ParseGetVmDevicePptdevChoicesResponse(rsp *http.Response) (*GetVmDevicePptdevChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmDevicePptdevChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmDeviceVncBindChoicesResponse parses an HTTP response from a GetVmDeviceVncBindChoicesWithResponse call
func ParseGetVmDeviceVncBindChoicesResponse(rsp *http.Response) (*GetVmDeviceVncBindChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmDeviceVncBindChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmFlagsResponse parses an HTTP response from a GetVmFlagsWithResponse call
func ParseGetVmFlagsResponse(rsp *http.Response) (*GetVmFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmGetAttachedIfaceResponse parses an HTTP response from a PostVmGetAttachedIfaceWithResponse call
func ParsePostVmGetAttachedIfaceResponse(rsp *http.Response) (*PostVmGetAttachedIfaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmGetAttachedIfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmGetAvailableMemoryResponse parses an HTTP response from a PostVmGetAvailableMemoryWithResponse call
func ParsePostVmGetAvailableMemoryResponse(rsp *http.Response) (*PostVmGetAvailableMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmGetAvailableMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmGetConsoleResponse parses an HTTP response from a PostVmGetConsoleWithResponse call
func ParsePostVmGetConsoleResponse(rsp *http.Response) (*PostVmGetConsoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmGetConsoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmGetVmemoryInUseResponse parses an HTTP response from a GetVmGetVmemoryInUseWithResponse call
func ParseGetVmGetVmemoryInUseResponse(rsp *http.Response) (*GetVmGetVmemoryInUseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmGetVmemoryInUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmGetVncResponse parses an HTTP response from a PostVmGetVncWithResponse call
func ParsePostVmGetVncResponse(rsp *http.Response) (*PostVmGetVncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmGetVncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmGetVncIpv4Response parses an HTTP response from a GetVmGetVncIpv4WithResponse call
func ParseGetVmGetVncIpv4Response(rsp *http.Response) (*GetVmGetVncIpv4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmGetVncIpv4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteVmIdIdResponse parses an HTTP response from a DeleteVmIdIdWithResponse call
func ParseDeleteVmIdIdResponse(rsp *http.Response) (*DeleteVmIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmIdIdResponse parses an HTTP response from a GetVmIdIdWithResponse call
func ParseGetVmIdIdResponse(rsp *http.Response) (*GetVmIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmIdIdResponse parses an HTTP response from a PutVmIdIdWithResponse call
func ParsePutVmIdIdResponse(rsp *http.Response) (*PutVmIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmIdIdCloneResponse parses an HTTP response from a PostVmIdIdCloneWithResponse call
func ParsePostVmIdIdCloneResponse(rsp *http.Response) (*PostVmIdIdCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmIdIdPoweroffResponse parses an HTTP response from a PostVmIdIdPoweroffWithResponse call
func ParsePostVmIdIdPoweroffResponse(rsp *http.Response) (*PostVmIdIdPoweroffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdPoweroffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmIdIdRestartResponse parses an HTTP response from a PostVmIdIdRestartWithResponse call
func ParsePostVmIdIdRestartResponse(rsp *http.Response) (*PostVmIdIdRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmIdIdStartResponse parses an HTTP response from a PostVmIdIdStartWithResponse call
func ParsePostVmIdIdStartResponse(rsp *http.Response) (*PostVmIdIdStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmIdIdStatusResponse parses an HTTP response from a PostVmIdIdStatusWithResponse call
func ParsePostVmIdIdStatusResponse(rsp *http.Response) (*PostVmIdIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmIdIdStopResponse parses an HTTP response from a PostVmIdIdStopWithResponse call
func ParsePostVmIdIdStopResponse(rsp *http.Response) (*PostVmIdIdStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmIdentifyHypervisorResponse parses an HTTP response from a GetVmIdentifyHypervisorWithResponse call
func ParseGetVmIdentifyHypervisorResponse(rsp *http.Response) (*GetVmIdentifyHypervisorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmIdentifyHypervisorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmRandomMacResponse parses an HTTP response from a GetVmRandomMacWithResponse call
func ParseGetVmRandomMacResponse(rsp *http.Response) (*GetVmRandomMacResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmRandomMacResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmVncPortWizardResponse parses an HTTP response from a GetVmVncPortWizardWithResponse call
func ParseGetVmVncPortWizardResponse(rsp *http.Response) (*GetVmVncPortWizardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmVncPortWizardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmwareResponse parses an HTTP response from a GetVmwareWithResponse call
func ParseGetVmwareResponse(rsp *http.Response) (*GetVmwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmwareResponse parses an HTTP response from a PostVmwareWithResponse call
func ParsePostVmwareResponse(rsp *http.Response) (*PostVmwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmwareDatasetHasVmsResponse parses an HTTP response from a PostVmwareDatasetHasVmsWithResponse call
func ParsePostVmwareDatasetHasVmsResponse(rsp *http.Response) (*PostVmwareDatasetHasVmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareDatasetHasVmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmwareGetDatastoresResponse parses an HTTP response from a PostVmwareGetDatastoresWithResponse call
func ParsePostVmwareGetDatastoresResponse(rsp *http.Response) (*PostVmwareGetDatastoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareGetDatastoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmwareGetVirtualMachinesResponse parses an HTTP response from a PostVmwareGetVirtualMachinesWithResponse call
func ParsePostVmwareGetVirtualMachinesResponse(rsp *http.Response) (*PostVmwareGetVirtualMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareGetVirtualMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteVmwareIdIdResponse parses an HTTP response from a DeleteVmwareIdIdWithResponse call
func ParseDeleteVmwareIdIdResponse(rsp *http.Response) (*DeleteVmwareIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmwareIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVmwareIdIdResponse parses an HTTP response from a GetVmwareIdIdWithResponse call
func ParseGetVmwareIdIdResponse(rsp *http.Response) (*GetVmwareIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmwareIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutVmwareIdIdResponse parses an HTTP response from a PutVmwareIdIdWithResponse call
func ParsePutVmwareIdIdResponse(rsp *http.Response) (*PutVmwareIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVmwareIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVmwareMatchDatastoresWithDatasetsResponse parses an HTTP response from a PostVmwareMatchDatastoresWithDatasetsWithResponse call
func ParsePostVmwareMatchDatastoresWithDatasetsResponse(rsp *http.Response) (*PostVmwareMatchDatastoresWithDatasetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareMatchDatastoresWithDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebdavResponse parses an HTTP response from a GetWebdavWithResponse call
func ParseGetWebdavResponse(rsp *http.Response) (*GetWebdavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebdavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutWebdavResponse parses an HTTP response from a PutWebdavWithResponse call
func ParsePutWebdavResponse(rsp *http.Response) (*PutWebdavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWebdavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebuiImageResponse parses an HTTP response from a GetWebuiImageWithResponse call
func ParseGetWebuiImageResponse(rsp *http.Response) (*GetWebuiImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebuiImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteWebuiImageIdIdResponse parses an HTTP response from a DeleteWebuiImageIdIdWithResponse call
func ParseDeleteWebuiImageIdIdResponse(rsp *http.Response) (*DeleteWebuiImageIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebuiImageIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebuiImageIdIdResponse parses an HTTP response from a GetWebuiImageIdIdWithResponse call
func ParseGetWebuiImageIdIdResponse(rsp *http.Response) (*GetWebuiImageIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebuiImageIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetZfsSnapshotResponse parses an HTTP response from a GetZfsSnapshotWithResponse call
func ParseGetZfsSnapshotResponse(rsp *http.Response) (*GetZfsSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZfsSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostZfsSnapshotResponse parses an HTTP response from a PostZfsSnapshotWithResponse call
func ParsePostZfsSnapshotResponse(rsp *http.Response) (*PostZfsSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostZfsSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostZfsSnapshotCloneResponse parses an HTTP response from a PostZfsSnapshotCloneWithResponse call
func ParsePostZfsSnapshotCloneResponse(rsp *http.Response) (*PostZfsSnapshotCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostZfsSnapshotCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteZfsSnapshotIdIdResponse parses an HTTP response from a DeleteZfsSnapshotIdIdWithResponse call
func ParseDeleteZfsSnapshotIdIdResponse(rsp *http.Response) (*DeleteZfsSnapshotIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteZfsSnapshotIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetZfsSnapshotIdIdResponse parses an HTTP response from a GetZfsSnapshotIdIdWithResponse call
func ParseGetZfsSnapshotIdIdResponse(rsp *http.Response) (*GetZfsSnapshotIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZfsSnapshotIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostZfsSnapshotRemoveResponse parses an HTTP response from a PostZfsSnapshotRemoveWithResponse call
func ParsePostZfsSnapshotRemoveResponse(rsp *http.Response) (*PostZfsSnapshotRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostZfsSnapshotRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostZfsSnapshotRollbackResponse parses an HTTP response from a PostZfsSnapshotRollbackWithResponse call
func ParsePostZfsSnapshotRollbackResponse(rsp *http.Response) (*PostZfsSnapshotRollbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostZfsSnapshotRollbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
