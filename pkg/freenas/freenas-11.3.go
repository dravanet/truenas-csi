// Package Freenas11 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Freenas11

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
)

const (
	BasicScopes = "basic.Scopes"
)

// AcmeDnsAuthenticatorCreate0 defines model for acme_dns_authenticator_create_0.
type AcmeDnsAuthenticatorCreate0 struct {
	Attributes    *AcmeDnsAuthenticatorCreate0_Attributes `json:"attributes,omitempty"`
	Authenticator *string                                 `json:"authenticator,omitempty"`
	Name          *string                                 `json:"name,omitempty"`
}

// AcmeDnsAuthenticatorCreate0_Attributes defines model for AcmeDnsAuthenticatorCreate0.Attributes.
type AcmeDnsAuthenticatorCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AcmeDnsAuthenticatorUpdate1 defines model for acme_dns_authenticator_update_1.
type AcmeDnsAuthenticatorUpdate1 struct {
	Attributes *AcmeDnsAuthenticatorUpdate1_Attributes `json:"attributes,omitempty"`
	Name       *string                                 `json:"name,omitempty"`
}

// AcmeDnsAuthenticatorUpdate1_Attributes defines model for AcmeDnsAuthenticatorUpdate1.Attributes.
type AcmeDnsAuthenticatorUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ActivedirectoryLeave0 defines model for activedirectory_leave_0.
type ActivedirectoryLeave0 struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ActivedirectoryUpdate0 defines model for activedirectory_update_0.
type ActivedirectoryUpdate0 struct {
	AllowDnsUpdates      *bool          `json:"allow_dns_updates,omitempty"`
	AllowTrustedDoms     *bool          `json:"allow_trusted_doms,omitempty"`
	Bindname             *string        `json:"bindname,omitempty"`
	Bindpw               *string        `json:"bindpw,omitempty"`
	Certificate          *int           `json:"certificate"`
	Createcomputer       *string        `json:"createcomputer,omitempty"`
	DisableFreenasCache  *bool          `json:"disable_freenas_cache,omitempty"`
	DnsTimeout           *int           `json:"dns_timeout,omitempty"`
	Domainname           *string        `json:"domainname,omitempty"`
	Enable               *bool          `json:"enable,omitempty"`
	IdmapBackend         *string        `json:"idmap_backend,omitempty"`
	KerberosPrincipal    *string        `json:"kerberos_principal"`
	KerberosRealm        *int           `json:"kerberos_realm"`
	LdapSaslWrapping     *string        `json:"ldap_sasl_wrapping,omitempty"`
	Netbiosalias         *[]interface{} `json:"netbiosalias,omitempty"`
	Netbiosname          *string        `json:"netbiosname,omitempty"`
	NetbiosnameB         *string        `json:"netbiosname_b,omitempty"`
	NssInfo              *string        `json:"nss_info"`
	Site                 *string        `json:"site"`
	Ssl                  *string        `json:"ssl,omitempty"`
	Timeout              *int           `json:"timeout,omitempty"`
	UseDefaultDomain     *bool          `json:"use_default_domain,omitempty"`
	ValidateCertificates *bool          `json:"validate_certificates,omitempty"`
	VerboseLogging       *bool          `json:"verbose_logging,omitempty"`
}

// AfpUpdate0 defines model for afp_update_0.
type AfpUpdate0 struct {
	Bindip           *[]string `json:"bindip,omitempty"`
	ChmodRequest     *string   `json:"chmod_request,omitempty"`
	ConnectionsLimit *int      `json:"connections_limit,omitempty"`
	Dbpath           *string   `json:"dbpath,omitempty"`
	GlobalAux        *string   `json:"global_aux,omitempty"`
	Guest            *bool     `json:"guest,omitempty"`
	GuestUser        *string   `json:"guest_user,omitempty"`
	MapAcls          *string   `json:"map_acls,omitempty"`
}

// AlertDismiss0 defines model for alert_dismiss_0.
type AlertDismiss0 string

// AlertRestore0 defines model for alert_restore_0.
type AlertRestore0 string

// AlertclassesUpdate0 defines model for alertclasses_update_0.
type AlertclassesUpdate0 struct {
	Classes *AlertclassesUpdate0_Classes `json:"classes,omitempty"`
}

// AlertclassesUpdate0_Classes defines model for AlertclassesUpdate0.Classes.
type AlertclassesUpdate0_Classes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AlertserviceCreate0 defines model for alertservice_create_0.
type AlertserviceCreate0 struct {
	Attributes *AlertserviceCreate0_Attributes `json:"attributes,omitempty"`
	Enabled    *bool                           `json:"enabled,omitempty"`
	Level      *string                         `json:"level,omitempty"`
	Name       *string                         `json:"name,omitempty"`
	Type       *string                         `json:"type,omitempty"`
}

// AlertserviceCreate0_Attributes defines model for AlertserviceCreate0.Attributes.
type AlertserviceCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AlertserviceTest0 defines model for alertservice_test_0.
type AlertserviceTest0 struct {
	Attributes *AlertserviceTest0_Attributes `json:"attributes,omitempty"`
	Enabled    *bool                         `json:"enabled,omitempty"`
	Level      *string                       `json:"level,omitempty"`
	Name       *string                       `json:"name,omitempty"`
	Type       *string                       `json:"type,omitempty"`
}

// AlertserviceTest0_Attributes defines model for AlertserviceTest0.Attributes.
type AlertserviceTest0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AlertserviceUpdate1 defines model for alertservice_update_1.
type AlertserviceUpdate1 struct {
	Attributes *AlertserviceUpdate1_Attributes `json:"attributes,omitempty"`
	Enabled    *bool                           `json:"enabled,omitempty"`
	Level      *string                         `json:"level,omitempty"`
	Name       *string                         `json:"name,omitempty"`
	Type       *string                         `json:"type,omitempty"`
}

// AlertserviceUpdate1_Attributes defines model for AlertserviceUpdate1.Attributes.
type AlertserviceUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthCheckUser defines model for auth_check_user.
type AuthCheckUser struct {
	Password *AuthCheckUser1 `json:"password,omitempty"`
	Username *AuthCheckUser0 `json:"username,omitempty"`
}

// AuthCheckUser0 defines model for auth_check_user_0.
type AuthCheckUser0 string

// AuthCheckUser1 defines model for auth_check_user_1.
type AuthCheckUser1 string

// AuthGenerateToken defines model for auth_generate_token.
type AuthGenerateToken struct {
	Attrs *AuthGenerateToken1 `json:"attrs,omitempty"`
	Ttl   *AuthGenerateToken0 `json:"ttl"`
}

// AuthGenerateToken0 defines model for auth_generate_token_0.
type AuthGenerateToken0 int

// AuthGenerateToken1 defines model for auth_generate_token_1.
type AuthGenerateToken1 struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BackupAzureGetBuckets0 defines model for backup_azure_get_buckets_0.
type BackupAzureGetBuckets0 int

// BackupB2GetBuckets0 defines model for backup_b2_get_buckets_0.
type BackupB2GetBuckets0 int

// BackupCreate0 defines model for backup_create_0.
type BackupCreate0 struct {
	Args               *string                   `json:"args,omitempty"`
	Attributes         *BackupCreate0_Attributes `json:"attributes,omitempty"`
	Credential         *int                      `json:"credential,omitempty"`
	Daymonth           *string                   `json:"daymonth,omitempty"`
	Dayweek            *string                   `json:"dayweek,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	Direction          *string                   `json:"direction,omitempty"`
	Enabled            *bool                     `json:"enabled,omitempty"`
	Encryption         *bool                     `json:"encryption,omitempty"`
	EncryptionPassword *string                   `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                   `json:"encryption_salt,omitempty"`
	FilenameEncryption *bool                     `json:"filename_encryption,omitempty"`
	Hour               *string                   `json:"hour,omitempty"`
	Minute             *string                   `json:"minute,omitempty"`
	Month              *string                   `json:"month,omitempty"`
	Path               *string                   `json:"path,omitempty"`
	TransferMode       *string                   `json:"transfer_mode,omitempty"`
}

// BackupCreate0_Attributes defines model for BackupCreate0.Attributes.
type BackupCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BackupCredentialCreate0 defines model for backup_credential_create_0.
type BackupCredentialCreate0 struct {
	Attributes *BackupCredentialCreate0_Attributes `json:"attributes,omitempty"`
	Name       *string                             `json:"name,omitempty"`
	Provider   *string                             `json:"provider,omitempty"`
}

// BackupCredentialCreate0_Attributes defines model for BackupCredentialCreate0.Attributes.
type BackupCredentialCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BackupCredentialUpdate1 defines model for backup_credential_update_1.
type BackupCredentialUpdate1 struct {
	Attributes *BackupCredentialUpdate1_Attributes `json:"attributes,omitempty"`
	Name       *string                             `json:"name,omitempty"`
	Provider   *string                             `json:"provider,omitempty"`
}

// BackupCredentialUpdate1_Attributes defines model for BackupCredentialUpdate1.Attributes.
type BackupCredentialUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BackupGcsGetBuckets0 defines model for backup_gcs_get_buckets_0.
type BackupGcsGetBuckets0 int

// BackupS3GetBuckets0 defines model for backup_s3_get_buckets_0.
type BackupS3GetBuckets0 int

// BackupUpdate1 defines model for backup_update_1.
type BackupUpdate1 struct {
	Args               *string                   `json:"args,omitempty"`
	Attributes         *BackupUpdate1_Attributes `json:"attributes,omitempty"`
	Credential         *int                      `json:"credential,omitempty"`
	Daymonth           *string                   `json:"daymonth,omitempty"`
	Dayweek            *string                   `json:"dayweek,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	Direction          *string                   `json:"direction,omitempty"`
	Enabled            *bool                     `json:"enabled,omitempty"`
	Encryption         *bool                     `json:"encryption,omitempty"`
	EncryptionPassword *string                   `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                   `json:"encryption_salt,omitempty"`
	FilenameEncryption *bool                     `json:"filename_encryption,omitempty"`
	Hour               *string                   `json:"hour,omitempty"`
	Minute             *string                   `json:"minute,omitempty"`
	Month              *string                   `json:"month,omitempty"`
	Path               *string                   `json:"path,omitempty"`
	TransferMode       *string                   `json:"transfer_mode,omitempty"`
}

// BackupUpdate1_Attributes defines model for BackupUpdate1.Attributes.
type BackupUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BootAttach defines model for boot_attach.
type BootAttach struct {
	Dev     *BootAttach0 `json:"dev,omitempty"`
	Options *BootAttach1 `json:"options,omitempty"`
}

// BootAttach0 defines model for boot_attach_0.
type BootAttach0 string

// BootAttach1 defines model for boot_attach_1.
type BootAttach1 struct {
	Expand *bool `json:"expand,omitempty"`
}

// BootDetach0 defines model for boot_detach_0.
type BootDetach0 string

// BootReplace defines model for boot_replace.
type BootReplace struct {
	Dev   *BootReplace1 `json:"dev,omitempty"`
	Label *BootReplace0 `json:"label,omitempty"`
}

// BootReplace0 defines model for boot_replace_0.
type BootReplace0 string

// BootReplace1 defines model for boot_replace_1.
type BootReplace1 string

// BootSetScrubInterval0 defines model for boot_set_scrub_interval_0.
type BootSetScrubInterval0 int

// BootenvActivate defines model for bootenv_activate.
type BootenvActivate map[string]interface{}

// BootenvCreate0 defines model for bootenv_create_0.
type BootenvCreate0 struct {
	Name   *string `json:"name,omitempty"`
	Source *string `json:"source,omitempty"`
}

// BootenvSetAttribute1 defines model for bootenv_set_attribute_1.
type BootenvSetAttribute1 struct {
	Keep *bool `json:"keep,omitempty"`
}

// BootenvUpdate1 defines model for bootenv_update_1.
type BootenvUpdate1 struct {
	Name *string `json:"name,omitempty"`
}

// CertificateCreate0 defines model for certificate_create_0.
type CertificateCreate0 struct {
	CSR                *string                        `json:"CSR,omitempty"`
	AcmeDirectoryUri   *string                        `json:"acme_directory_uri,omitempty"`
	Certificate        *string                        `json:"certificate,omitempty"`
	City               *string                        `json:"city,omitempty"`
	Common             *string                        `json:"common,omitempty"`
	Country            *string                        `json:"country,omitempty"`
	CreateType         *string                        `json:"create_type,omitempty"`
	CsrId              *int                           `json:"csr_id,omitempty"`
	DigestAlgorithm    *string                        `json:"digest_algorithm,omitempty"`
	DnsMapping         *CertificateCreate0_DnsMapping `json:"dns_mapping,omitempty"`
	EcCurve            *string                        `json:"ec_curve,omitempty"`
	Email              *string                        `json:"email,omitempty"`
	KeyLength          *int                           `json:"key_length,omitempty"`
	KeyType            *string                        `json:"key_type,omitempty"`
	Lifetime           *int                           `json:"lifetime,omitempty"`
	Name               *string                        `json:"name,omitempty"`
	Organization       *string                        `json:"organization,omitempty"`
	OrganizationalUnit *string                        `json:"organizational_unit,omitempty"`
	Passphrase         *string                        `json:"passphrase,omitempty"`
	Privatekey         *string                        `json:"privatekey,omitempty"`
	RenewDays          *int                           `json:"renew_days,omitempty"`
	San                *[]string                      `json:"san,omitempty"`
	Serial             *int                           `json:"serial,omitempty"`
	ServerAuthEku      *bool                          `json:"server_auth_eku,omitempty"`
	Signedby           *int                           `json:"signedby,omitempty"`
	State              *string                        `json:"state,omitempty"`
	Tos                *bool                          `json:"tos,omitempty"`
	Type               *int                           `json:"type,omitempty"`
}

// CertificateCreate0_DnsMapping defines model for CertificateCreate0.DnsMapping.
type CertificateCreate0_DnsMapping struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CertificateDelete1 defines model for certificate_delete_1.
type CertificateDelete1 bool

// CertificateUpdate1 defines model for certificate_update_1.
type CertificateUpdate1 struct {
	Name *string `json:"name,omitempty"`
}

// CertificateauthorityCaSignCsr0 defines model for certificateauthority_ca_sign_csr_0.
type CertificateauthorityCaSignCsr0 struct {
	CaId      *int    `json:"ca_id,omitempty"`
	CsrCertId *int    `json:"csr_cert_id,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// CertificateauthorityCreate0 defines model for certificateauthority_create_0.
type CertificateauthorityCreate0 struct {
	CSR                *string   `json:"CSR,omitempty"`
	AcmeDirectoryUri   *string   `json:"acme_directory_uri,omitempty"`
	Certificate        *string   `json:"certificate,omitempty"`
	City               *string   `json:"city,omitempty"`
	Common             *string   `json:"common,omitempty"`
	Country            *string   `json:"country,omitempty"`
	CreateType         *string   `json:"create_type,omitempty"`
	CsrId              *int      `json:"csr_id,omitempty"`
	DigestAlgorithm    *string   `json:"digest_algorithm,omitempty"`
	EcCurve            *string   `json:"ec_curve,omitempty"`
	Email              *string   `json:"email,omitempty"`
	KeyLength          *int      `json:"key_length,omitempty"`
	KeyType            *string   `json:"key_type,omitempty"`
	Lifetime           *int      `json:"lifetime,omitempty"`
	Name               *string   `json:"name,omitempty"`
	Organization       *string   `json:"organization,omitempty"`
	OrganizationalUnit *string   `json:"organizational_unit,omitempty"`
	Passphrase         *string   `json:"passphrase,omitempty"`
	Privatekey         *string   `json:"privatekey,omitempty"`
	RenewDays          *int      `json:"renew_days,omitempty"`
	San                *[]string `json:"san,omitempty"`
	Serial             *int      `json:"serial,omitempty"`
	Signedby           *int      `json:"signedby,omitempty"`
	State              *string   `json:"state,omitempty"`
	Tos                *bool     `json:"tos,omitempty"`
	Type               *int      `json:"type,omitempty"`
}

// CertificateauthorityUpdate1 defines model for certificateauthority_update_1.
type CertificateauthorityUpdate1 struct {
	CaId       *int    `json:"ca_id,omitempty"`
	CreateType *string `json:"create_type,omitempty"`
	CsrCertId  *int    `json:"csr_cert_id,omitempty"`
	Name       *string `json:"name,omitempty"`
}

// CloudsyncAbort defines model for cloudsync_abort.
type CloudsyncAbort map[string]interface{}

// CloudsyncCreate0 defines model for cloudsync_create_0.
type CloudsyncCreate0 struct {
	Args               *string                      `json:"args,omitempty"`
	Attributes         *CloudsyncCreate0_Attributes `json:"attributes,omitempty"`
	Bwlimit            *[]map[string]interface{}    `json:"bwlimit,omitempty"`
	Credentials        *int                         `json:"credentials,omitempty"`
	Description        *string                      `json:"description,omitempty"`
	Direction          *string                      `json:"direction,omitempty"`
	Enabled            *bool                        `json:"enabled,omitempty"`
	Encryption         *bool                        `json:"encryption,omitempty"`
	EncryptionPassword *string                      `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                      `json:"encryption_salt,omitempty"`
	Exclude            *[]string                    `json:"exclude,omitempty"`
	FilenameEncryption *bool                        `json:"filename_encryption,omitempty"`
	FollowSymlinks     *bool                        `json:"follow_symlinks,omitempty"`
	Path               *string                      `json:"path,omitempty"`
	PostScript         *string                      `json:"post_script,omitempty"`
	PreScript          *string                      `json:"pre_script,omitempty"`
	Schedule           *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Snapshot     *bool   `json:"snapshot,omitempty"`
	TransferMode *string `json:"transfer_mode,omitempty"`
	Transfers    *int    `json:"transfers"`
}

// CloudsyncCreate0_Attributes defines model for CloudsyncCreate0.Attributes.
type CloudsyncCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CloudsyncCredentialsCreate0 defines model for cloudsync_credentials_create_0.
type CloudsyncCredentialsCreate0 struct {
	Attributes *CloudsyncCredentialsCreate0_Attributes `json:"attributes,omitempty"`
	Name       *string                                 `json:"name,omitempty"`
	Provider   *string                                 `json:"provider,omitempty"`
}

// CloudsyncCredentialsCreate0_Attributes defines model for CloudsyncCredentialsCreate0.Attributes.
type CloudsyncCredentialsCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CloudsyncCredentialsUpdate1 defines model for cloudsync_credentials_update_1.
type CloudsyncCredentialsUpdate1 struct {
	Attributes *CloudsyncCredentialsUpdate1_Attributes `json:"attributes,omitempty"`
	Name       *string                                 `json:"name,omitempty"`
	Provider   *string                                 `json:"provider,omitempty"`
}

// CloudsyncCredentialsUpdate1_Attributes defines model for CloudsyncCredentialsUpdate1.Attributes.
type CloudsyncCredentialsUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CloudsyncCredentialsVerify0 defines model for cloudsync_credentials_verify_0.
type CloudsyncCredentialsVerify0 struct {
	Attributes *CloudsyncCredentialsVerify0_Attributes `json:"attributes,omitempty"`
	Provider   *string                                 `json:"provider,omitempty"`
}

// CloudsyncCredentialsVerify0_Attributes defines model for CloudsyncCredentialsVerify0.Attributes.
type CloudsyncCredentialsVerify0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CloudsyncListBuckets0 defines model for cloudsync_list_buckets_0.
type CloudsyncListBuckets0 int

// CloudsyncListDirectory0 defines model for cloudsync_list_directory_0.
type CloudsyncListDirectory0 struct {
	Args               *string                             `json:"args,omitempty"`
	Attributes         *CloudsyncListDirectory0_Attributes `json:"attributes,omitempty"`
	Credentials        *int                                `json:"credentials,omitempty"`
	Encryption         *bool                               `json:"encryption,omitempty"`
	EncryptionPassword *string                             `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                             `json:"encryption_salt,omitempty"`
	FilenameEncryption *bool                               `json:"filename_encryption,omitempty"`
}

// CloudsyncListDirectory0_Attributes defines model for CloudsyncListDirectory0.Attributes.
type CloudsyncListDirectory0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CloudsyncOnedriveListDrives0 defines model for cloudsync_onedrive_list_drives_0.
type CloudsyncOnedriveListDrives0 struct {
	ClientId     *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`
	Token        *string `json:"token,omitempty"`
}

// CloudsyncSync defines model for cloudsync_sync.
type CloudsyncSync map[string]interface{}

// CloudsyncUpdate1 defines model for cloudsync_update_1.
type CloudsyncUpdate1 struct {
	Args               *string                      `json:"args,omitempty"`
	Attributes         *CloudsyncUpdate1_Attributes `json:"attributes,omitempty"`
	Bwlimit            *[]map[string]interface{}    `json:"bwlimit,omitempty"`
	Credentials        *int                         `json:"credentials,omitempty"`
	Description        *string                      `json:"description,omitempty"`
	Direction          *string                      `json:"direction,omitempty"`
	Enabled            *bool                        `json:"enabled,omitempty"`
	Encryption         *bool                        `json:"encryption,omitempty"`
	EncryptionPassword *string                      `json:"encryption_password,omitempty"`
	EncryptionSalt     *string                      `json:"encryption_salt,omitempty"`
	Exclude            *[]string                    `json:"exclude,omitempty"`
	FilenameEncryption *bool                        `json:"filename_encryption,omitempty"`
	FollowSymlinks     *bool                        `json:"follow_symlinks,omitempty"`
	Path               *string                      `json:"path,omitempty"`
	PostScript         *string                      `json:"post_script,omitempty"`
	PreScript          *string                      `json:"pre_script,omitempty"`
	Schedule           *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Snapshot     *bool   `json:"snapshot,omitempty"`
	TransferMode *string `json:"transfer_mode,omitempty"`
	Transfers    *int    `json:"transfers"`
}

// CloudsyncUpdate1_Attributes defines model for CloudsyncUpdate1.Attributes.
type CloudsyncUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConfigReset0 defines model for config_reset_0.
type ConfigReset0 struct {
	Reboot *bool `json:"reboot,omitempty"`
}

// CoreBulk defines model for core_bulk.
type CoreBulk struct {
	Method *CoreBulk0 `json:"method,omitempty"`
	Params *CoreBulk1 `json:"params,omitempty"`
}

// CoreBulk0 defines model for core_bulk_0.
type CoreBulk0 string

// CoreBulk1 defines model for core_bulk_1.
type CoreBulk1 []interface{}

// CoreDebug defines model for core_debug.
type CoreDebug struct {
	Engine  *CoreDebug0 `json:"engine,omitempty"`
	Options *CoreDebug1 `json:"options,omitempty"`
}

// CoreDebug0 defines model for core_debug_0.
type CoreDebug0 string

// List of CoreDebug0
const (
	CoreDebug0_PTVS       CoreDebug0 = "PTVS"
	CoreDebug0_PYDEV      CoreDebug0 = "PYDEV"
	CoreDebug0_REMOTE_PDB CoreDebug0 = "REMOTE_PDB"
)

// CoreDebug1 defines model for core_debug_1.
type CoreDebug1 struct {
	BindAddress *string `json:"bind_address,omitempty"`
	BindPort    *int    `json:"bind_port,omitempty"`
	Host        *string `json:"host,omitempty"`
	LocalPath   *string `json:"local_path,omitempty"`
	Secret      *string `json:"secret,omitempty"`
	Threaded    *bool   `json:"threaded,omitempty"`
	WaitAttach  *bool   `json:"wait_attach,omitempty"`
}

// CoreDownload defines model for core_download.
type CoreDownload struct {
	Args     *CoreDownload1 `json:"args,omitempty"`
	Filename *CoreDownload2 `json:"filename,omitempty"`
	Method   *CoreDownload0 `json:"method,omitempty"`
}

// CoreDownload0 defines model for core_download_0.
type CoreDownload0 string

// CoreDownload1 defines model for core_download_1.
type CoreDownload1 []interface{}

// CoreDownload2 defines model for core_download_2.
type CoreDownload2 string

// CoreGetMethods0 defines model for core_get_methods_0.
type CoreGetMethods0 string

// CoreJobAbort0 defines model for core_job_abort_0.
type CoreJobAbort0 int

// CoreJobUpdate defines model for core_job_update.
type CoreJobUpdate struct {
	Id        *CoreJobUpdate0 `json:"id,omitempty"`
	JobUpdate *CoreJobUpdate1 `json:"job-update,omitempty"`
}

// CoreJobUpdate0 defines model for core_job_update_0.
type CoreJobUpdate0 int

// CoreJobUpdate1 defines model for core_job_update_1.
type CoreJobUpdate1 struct {
	Progress *CoreJobUpdate1_Progress `json:"progress,omitempty"`
}

// CoreJobUpdate1_Progress defines model for CoreJobUpdate1.Progress.
type CoreJobUpdate1_Progress struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CoreJobWait0 defines model for core_job_wait_0.
type CoreJobWait0 int

// CronjobCreate0 defines model for cronjob_create_0.
type CronjobCreate0 struct {
	Command     *string `json:"command,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Schedule    *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Stderr *bool   `json:"stderr,omitempty"`
	Stdout *bool   `json:"stdout,omitempty"`
	User   *string `json:"user,omitempty"`
}

// CronjobRun defines model for cronjob_run.
type CronjobRun struct {
	Id           *CronjobRun0 `json:"id,omitempty"`
	SkipDisabled *CronjobRun1 `json:"skip_disabled,omitempty"`
}

// CronjobRun0 defines model for cronjob_run_0.
type CronjobRun0 int

// CronjobRun1 defines model for cronjob_run_1.
type CronjobRun1 bool

// CronjobUpdate1 defines model for cronjob_update_1.
type CronjobUpdate1 struct {
	Command     *string `json:"command,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Schedule    *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Stderr *bool   `json:"stderr,omitempty"`
	Stdout *bool   `json:"stdout,omitempty"`
	User   *string `json:"user,omitempty"`
}

// DeviceGetInfo0 defines model for device_get_info_0.
type DeviceGetInfo0 string

// List of DeviceGetInfo0
const (
	DeviceGetInfo0_DISK   DeviceGetInfo0 = "DISK"
	DeviceGetInfo0_SERIAL DeviceGetInfo0 = "SERIAL"
)

// DiskGetEncrypted0 defines model for disk_get_encrypted_0.
type DiskGetEncrypted0 struct {
	Unused *bool `json:"unused,omitempty"`
}

// DiskGetUnused0 defines model for disk_get_unused_0.
type DiskGetUnused0 bool

// DiskTemperatures defines model for disk_temperatures.
type DiskTemperatures struct {
	Names     *DiskTemperatures0 `json:"names,omitempty"`
	Powermode *DiskTemperatures1 `json:"powermode,omitempty"`
}

// DiskTemperatures0 defines model for disk_temperatures_0.
type DiskTemperatures0 []string

// DiskTemperatures1 defines model for disk_temperatures_1.
type DiskTemperatures1 string

// List of DiskTemperatures1
const (
	DiskTemperatures1_IDLE    DiskTemperatures1 = "IDLE"
	DiskTemperatures1_NEVER   DiskTemperatures1 = "NEVER"
	DiskTemperatures1_SLEEP   DiskTemperatures1 = "SLEEP"
	DiskTemperatures1_STANDBY DiskTemperatures1 = "STANDBY"
)

// DiskUpdate1 defines model for disk_update_1.
type DiskUpdate1 struct {
	Acousticlevel *string `json:"acousticlevel,omitempty"`
	Advpowermgmt  *string `json:"advpowermgmt,omitempty"`
	Critical      *int    `json:"critical"`
	Description   *string `json:"description,omitempty"`
	Difference    *int    `json:"difference"`
	Enclosure     *struct {
		Number *int `json:"number,omitempty"`
		Slot   *int `json:"slot,omitempty"`
	} `json:"enclosure,omitempty"`
	Hddstandby    *string `json:"hddstandby,omitempty"`
	Informational *int    `json:"informational"`
	Passwd        *string `json:"passwd,omitempty"`
	Smartoptions  *string `json:"smartoptions,omitempty"`
	Togglesmart   *bool   `json:"togglesmart,omitempty"`
}

// DiskWipe defines model for disk_wipe.
type DiskWipe struct {
	Dev       *DiskWipe0 `json:"dev,omitempty"`
	Mode      *DiskWipe1 `json:"mode,omitempty"`
	Synccache *DiskWipe2 `json:"synccache,omitempty"`
}

// DiskWipe0 defines model for disk_wipe_0.
type DiskWipe0 string

// DiskWipe1 defines model for disk_wipe_1.
type DiskWipe1 string

// List of DiskWipe1
const (
	DiskWipe1_FULL        DiskWipe1 = "FULL"
	DiskWipe1_FULL_RANDOM DiskWipe1 = "FULL_RANDOM"
	DiskWipe1_QUICK       DiskWipe1 = "QUICK"
)

// DiskWipe2 defines model for disk_wipe_2.
type DiskWipe2 bool

// DyndnsUpdate0 defines model for dyndns_update_0.
type DyndnsUpdate0 struct {
	CheckipPath      *string   `json:"checkip_path,omitempty"`
	CheckipServer    *string   `json:"checkip_server,omitempty"`
	CheckipSsl       *bool     `json:"checkip_ssl,omitempty"`
	CustomDdnsPath   *string   `json:"custom_ddns_path,omitempty"`
	CustomDdnsServer *string   `json:"custom_ddns_server,omitempty"`
	Domain           *[]string `json:"domain,omitempty"`
	Password         *string   `json:"password,omitempty"`
	Period           *int      `json:"period,omitempty"`
	Provider         *string   `json:"provider,omitempty"`
	Ssl              *bool     `json:"ssl,omitempty"`
	Username         *string   `json:"username,omitempty"`
}

// FilesystemAclIsTrivial0 defines model for filesystem_acl_is_trivial_0.
type FilesystemAclIsTrivial0 string

// FilesystemChown0 defines model for filesystem_chown_0.
type FilesystemChown0 struct {
	Gid     *int `json:"gid"`
	Options *struct {
		Recursive *bool `json:"recursive,omitempty"`
		Traverse  *bool `json:"traverse,omitempty"`
	} `json:"options,omitempty"`
	Path *string `json:"path,omitempty"`
	Uid  *int    `json:"uid"`
}

// FilesystemGetDefaultAcl0 defines model for filesystem_get_default_acl_0.
type FilesystemGetDefaultAcl0 string

// List of FilesystemGetDefaultAcl0
const (
	FilesystemGetDefaultAcl0_DOMAIN_HOME FilesystemGetDefaultAcl0 = "DOMAIN_HOME"
	FilesystemGetDefaultAcl0_HOME        FilesystemGetDefaultAcl0 = "HOME"
	FilesystemGetDefaultAcl0_OPEN        FilesystemGetDefaultAcl0 = "OPEN"
	FilesystemGetDefaultAcl0_RESTRICTED  FilesystemGetDefaultAcl0 = "RESTRICTED"
)

// FilesystemGetacl defines model for filesystem_getacl.
type FilesystemGetacl struct {
	Path       *FilesystemGetacl0 `json:"path,omitempty"`
	Simplified *FilesystemGetacl1 `json:"simplified,omitempty"`
}

// FilesystemGetacl0 defines model for filesystem_getacl_0.
type FilesystemGetacl0 string

// FilesystemGetacl1 defines model for filesystem_getacl_1.
type FilesystemGetacl1 bool

// FilesystemListdir defines model for filesystem_listdir.
type FilesystemListdir struct {
	Path         *FilesystemListdir0 `json:"path,omitempty"`
	QueryFilters *FilesystemListdir1 `json:"query-filters"`
	QueryOptions *FilesystemListdir2 `json:"query-options,omitempty"`
}

// FilesystemListdir0 defines model for filesystem_listdir_0.
type FilesystemListdir0 string

// FilesystemListdir1 defines model for filesystem_listdir_1.
type FilesystemListdir1 []interface{}

// FilesystemListdir2 defines model for filesystem_listdir_2.
type FilesystemListdir2 struct {
	Count         *bool                     `json:"count,omitempty"`
	Extend        *string                   `json:"extend"`
	ExtendContext *string                   `json:"extend_context"`
	Extra         *FilesystemListdir2_Extra `json:"extra,omitempty"`
	Get           *bool                     `json:"get,omitempty"`
	Limit         *int                      `json:"limit,omitempty"`
	Offset        *int                      `json:"offset,omitempty"`
	OrderBy       *[]interface{}            `json:"order_by,omitempty"`
	Prefix        *string                   `json:"prefix"`
	Select        *[]interface{}            `json:"select,omitempty"`
}

// FilesystemListdir2_Extra defines model for FilesystemListdir2.Extra.
type FilesystemListdir2_Extra struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// FilesystemSetacl0 defines model for filesystem_setacl_0.
type FilesystemSetacl0 struct {
	Dacl    *[]map[string]interface{} `json:"dacl,omitempty"`
	Gid     *int                      `json:"gid"`
	Options *struct {
		Canonicalize *bool `json:"canonicalize,omitempty"`
		Recursive    *bool `json:"recursive,omitempty"`
		Stripacl     *bool `json:"stripacl,omitempty"`
		Traverse     *bool `json:"traverse,omitempty"`
	} `json:"options,omitempty"`
	Path *string `json:"path,omitempty"`
	Uid  *int    `json:"uid"`
}

// FilesystemSetperm0 defines model for filesystem_setperm_0.
type FilesystemSetperm0 struct {
	Gid     *int    `json:"gid"`
	Mode    *string `json:"mode"`
	Options *struct {
		Recursive *bool `json:"recursive,omitempty"`
		Stripacl  *bool `json:"stripacl,omitempty"`
		Traverse  *bool `json:"traverse,omitempty"`
	} `json:"options,omitempty"`
	Path *string `json:"path,omitempty"`
	Uid  *int    `json:"uid"`
}

// FilesystemStat0 defines model for filesystem_stat_0.
type FilesystemStat0 string

// FilesystemStatfs0 defines model for filesystem_statfs_0.
type FilesystemStatfs0 string

// FtpUpdate0 defines model for ftp_update_0.
type FtpUpdate0 struct {
	Anonpath                        *string `json:"anonpath"`
	Anonuserbw                      *int    `json:"anonuserbw,omitempty"`
	Anonuserdlbw                    *int    `json:"anonuserdlbw,omitempty"`
	Banner                          *string `json:"banner,omitempty"`
	Clients                         *int    `json:"clients,omitempty"`
	Defaultroot                     *bool   `json:"defaultroot,omitempty"`
	Dirmask                         *string `json:"dirmask,omitempty"`
	Filemask                        *string `json:"filemask,omitempty"`
	Fxp                             *bool   `json:"fxp,omitempty"`
	Ident                           *bool   `json:"ident,omitempty"`
	Ipconnections                   *int    `json:"ipconnections,omitempty"`
	Localuserbw                     *int    `json:"localuserbw,omitempty"`
	Localuserdlbw                   *int    `json:"localuserdlbw,omitempty"`
	Loginattempt                    *int    `json:"loginattempt,omitempty"`
	Masqaddress                     *string `json:"masqaddress,omitempty"`
	Onlyanonymous                   *bool   `json:"onlyanonymous,omitempty"`
	Onlylocal                       *bool   `json:"onlylocal,omitempty"`
	Options                         *string `json:"options,omitempty"`
	Passiveportsmax                 *int    `json:"passiveportsmax,omitempty"`
	Passiveportsmin                 *int    `json:"passiveportsmin,omitempty"`
	Port                            *int    `json:"port,omitempty"`
	Resume                          *bool   `json:"resume,omitempty"`
	Reversedns                      *bool   `json:"reversedns,omitempty"`
	Rootlogin                       *bool   `json:"rootlogin,omitempty"`
	SsltlsCertificate               *int    `json:"ssltls_certificate"`
	Timeout                         *int    `json:"timeout,omitempty"`
	Tls                             *bool   `json:"tls,omitempty"`
	TlsOptAllowClientRenegotiations *bool   `json:"tls_opt_allow_client_renegotiations,omitempty"`
	TlsOptAllowDotLogin             *bool   `json:"tls_opt_allow_dot_login,omitempty"`
	TlsOptAllowPerUser              *bool   `json:"tls_opt_allow_per_user,omitempty"`
	TlsOptCommonNameRequired        *bool   `json:"tls_opt_common_name_required,omitempty"`
	TlsOptDnsNameRequired           *bool   `json:"tls_opt_dns_name_required,omitempty"`
	TlsOptEnableDiags               *bool   `json:"tls_opt_enable_diags,omitempty"`
	TlsOptExportCertData            *bool   `json:"tls_opt_export_cert_data,omitempty"`
	TlsOptIpAddressRequired         *bool   `json:"tls_opt_ip_address_required,omitempty"`
	TlsOptNoCertRequest             *bool   `json:"tls_opt_no_cert_request,omitempty"`
	TlsOptNoEmptyFragments          *bool   `json:"tls_opt_no_empty_fragments,omitempty"`
	TlsOptNoSessionReuseRequired    *bool   `json:"tls_opt_no_session_reuse_required,omitempty"`
	TlsOptStdenvvars                *bool   `json:"tls_opt_stdenvvars,omitempty"`
	TlsPolicy                       *string `json:"tls_policy,omitempty"`
}

// GroupCreate0 defines model for group_create_0.
type GroupCreate0 struct {
	AllowDuplicateGid *bool   `json:"allow_duplicate_gid,omitempty"`
	Gid               *int    `json:"gid,omitempty"`
	Name              *string `json:"name,omitempty"`
	Sudo              *bool   `json:"sudo,omitempty"`
	Users             *[]int  `json:"users,omitempty"`
}

// GroupDelete1 defines model for group_delete_1.
type GroupDelete1 struct {
	DeleteUsers *bool `json:"delete_users,omitempty"`
}

// GroupGetGroupObj0 defines model for group_get_group_obj_0.
type GroupGetGroupObj0 struct {
	Gid       *int    `json:"gid,omitempty"`
	Groupname *string `json:"groupname,omitempty"`
}

// GroupUpdate1 defines model for group_update_1.
type GroupUpdate1 struct {
	AllowDuplicateGid *bool   `json:"allow_duplicate_gid,omitempty"`
	Gid               *int    `json:"gid,omitempty"`
	Name              *string `json:"name,omitempty"`
	Sudo              *bool   `json:"sudo,omitempty"`
	Users             *[]int  `json:"users,omitempty"`
}

// IdmapAdCreate0 defines model for idmap_ad_create_0.
type IdmapAdCreate0 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh        *int    `json:"range_high,omitempty"`
	RangeLow         *int    `json:"range_low,omitempty"`
	SchemaMode       *string `json:"schema_mode,omitempty"`
	UnixNssInfo      *bool   `json:"unix_nss_info,omitempty"`
	UnixPrimaryGroup *bool   `json:"unix_primary_group,omitempty"`
}

// IdmapAdUpdate1 defines model for idmap_ad_update_1.
type IdmapAdUpdate1 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh        *int    `json:"range_high,omitempty"`
	RangeLow         *int    `json:"range_low,omitempty"`
	SchemaMode       *string `json:"schema_mode,omitempty"`
	UnixNssInfo      *bool   `json:"unix_nss_info,omitempty"`
	UnixPrimaryGroup *bool   `json:"unix_primary_group,omitempty"`
}

// IdmapAutoridCreate0 defines model for idmap_autorid_create_0.
type IdmapAutoridCreate0 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	IgnoreBuiltin *bool `json:"ignore_builtin,omitempty"`
	RangeHigh     *int  `json:"range_high,omitempty"`
	RangeLow      *int  `json:"range_low,omitempty"`
	Rangesize     *int  `json:"rangesize,omitempty"`
	Readonly      *bool `json:"readonly,omitempty"`
}

// IdmapAutoridUpdate1 defines model for idmap_autorid_update_1.
type IdmapAutoridUpdate1 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	IgnoreBuiltin *bool `json:"ignore_builtin,omitempty"`
	RangeHigh     *int  `json:"range_high,omitempty"`
	RangeLow      *int  `json:"range_low,omitempty"`
	Rangesize     *int  `json:"rangesize,omitempty"`
	Readonly      *bool `json:"readonly,omitempty"`
}

// IdmapDomainCreate0 defines model for idmap_domain_create_0.
type IdmapDomainCreate0 struct {
	DNSDomainName *string `json:"DNS_domain_name,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// IdmapDomainUpdate1 defines model for idmap_domain_update_1.
type IdmapDomainUpdate1 struct {
	DNSDomainName *string `json:"DNS_domain_name,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// IdmapDomaintobackendCreate0 defines model for idmap_domaintobackend_create_0.
type IdmapDomaintobackendCreate0 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	IdmapBackend *string `json:"idmap_backend,omitempty"`
}

// IdmapDomaintobackendUpdate1 defines model for idmap_domaintobackend_update_1.
type IdmapDomaintobackendUpdate1 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	IdmapBackend *string `json:"idmap_backend,omitempty"`
}

// IdmapGetOrCreateIdmapByDomain0 defines model for idmap_get_or_create_idmap_by_domain_0.
type IdmapGetOrCreateIdmapByDomain0 string

// IdmapLdapCreate0 defines model for idmap_ldap_create_0.
type IdmapLdapCreate0 struct {
	Certificate *int `json:"certificate,omitempty"`
	Domain      *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	LdapBaseDn *string `json:"ldap_base_dn,omitempty"`
	LdapUrl    *string `json:"ldap_url,omitempty"`
	LdapUserDn *string `json:"ldap_user_dn,omitempty"`
	RangeHigh  *int    `json:"range_high,omitempty"`
	RangeLow   *int    `json:"range_low,omitempty"`
	Ssl        *string `json:"ssl,omitempty"`
}

// IdmapLdapUpdate1 defines model for idmap_ldap_update_1.
type IdmapLdapUpdate1 struct {
	Certificate *int `json:"certificate,omitempty"`
	Domain      *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	LdapBaseDn *string `json:"ldap_base_dn,omitempty"`
	LdapUrl    *string `json:"ldap_url,omitempty"`
	LdapUserDn *string `json:"ldap_user_dn,omitempty"`
	RangeHigh  *int    `json:"range_high,omitempty"`
	RangeLow   *int    `json:"range_low,omitempty"`
	Ssl        *string `json:"ssl,omitempty"`
}

// IdmapNssCreate0 defines model for idmap_nss_create_0.
type IdmapNssCreate0 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// IdmapNssUpdate1 defines model for idmap_nss_update_1.
type IdmapNssUpdate1 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// IdmapRfc2307Create0 defines model for idmap_rfc2307_create_0.
type IdmapRfc2307Create0 struct {
	BindPathGroup *string `json:"bind_path_group,omitempty"`
	BindPathUser  *string `json:"bind_path_user,omitempty"`
	Certificate   *int    `json:"certificate,omitempty"`
	CnRealm       *bool   `json:"cn_realm,omitempty"`
	Domain        *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	LdapDomain         *string `json:"ldap_domain,omitempty"`
	LdapRealm          *string `json:"ldap_realm,omitempty"`
	LdapServer         *string `json:"ldap_server,omitempty"`
	LdapUrl            *string `json:"ldap_url,omitempty"`
	LdapUserDn         *string `json:"ldap_user_dn,omitempty"`
	LdapUserDnPassword *string `json:"ldap_user_dn_password,omitempty"`
	RangeHigh          *int    `json:"range_high,omitempty"`
	RangeLow           *int    `json:"range_low,omitempty"`
	Ssl                *string `json:"ssl,omitempty"`
	UserCn             *bool   `json:"user_cn,omitempty"`
}

// IdmapRfc2307Update1 defines model for idmap_rfc2307_update_1.
type IdmapRfc2307Update1 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// IdmapRidCreate0 defines model for idmap_rid_create_0.
type IdmapRidCreate0 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// IdmapRidUpdate1 defines model for idmap_rid_update_1.
type IdmapRidUpdate1 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// IdmapScriptCreate0 defines model for idmap_script_create_0.
type IdmapScriptCreate0 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int    `json:"range_high,omitempty"`
	RangeLow  *int    `json:"range_low,omitempty"`
	Script    *string `json:"script,omitempty"`
}

// IdmapScriptUpdate1 defines model for idmap_script_update_1.
type IdmapScriptUpdate1 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int    `json:"range_high,omitempty"`
	RangeLow  *int    `json:"range_low,omitempty"`
	Script    *string `json:"script,omitempty"`
}

// IdmapTdbCreate0 defines model for idmap_tdb_create_0.
type IdmapTdbCreate0 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// IdmapTdbUpdate1 defines model for idmap_tdb_update_1.
type IdmapTdbUpdate1 struct {
	Domain *struct {
		Id                       *int    `json:"id,omitempty"`
		IdmapDomainDnsDomainName *string `json:"idmap_domain_dns_domain_name,omitempty"`
		IdmapDomainName          *string `json:"idmap_domain_name,omitempty"`
	} `json:"domain,omitempty"`
	RangeHigh *int `json:"range_high,omitempty"`
	RangeLow  *int `json:"range_low,omitempty"`
}

// InitshutdownscriptCreate0 defines model for initshutdownscript_create_0.
type InitshutdownscriptCreate0 struct {
	Command *string `json:"command"`
	Enabled *bool   `json:"enabled,omitempty"`
	Script  *string `json:"script"`
	Timeout *int    `json:"timeout,omitempty"`
	Type    *string `json:"type,omitempty"`
	When    *string `json:"when,omitempty"`
}

// InitshutdownscriptUpdate1 defines model for initshutdownscript_update_1.
type InitshutdownscriptUpdate1 struct {
	Command *string `json:"command"`
	Enabled *bool   `json:"enabled,omitempty"`
	Script  *string `json:"script"`
	Timeout *int    `json:"timeout,omitempty"`
	Type    *string `json:"type,omitempty"`
	When    *string `json:"when,omitempty"`
}

// InterfaceBridgeMembersChoices0 defines model for interface_bridge_members_choices_0.
type InterfaceBridgeMembersChoices0 string

// InterfaceChoices0 defines model for interface_choices_0.
type InterfaceChoices0 struct {
	BridgeMembers *bool          `json:"bridge_members,omitempty"`
	Exclude       *[]interface{} `json:"exclude,omitempty"`
	Include       *[]interface{} `json:"include,omitempty"`
	LagPorts      *bool          `json:"lag_ports,omitempty"`
	VlanParent    *bool          `json:"vlan_parent,omitempty"`
}

// InterfaceCommit0 defines model for interface_commit_0.
type InterfaceCommit0 struct {
	CheckinTimeout *int  `json:"checkin_timeout,omitempty"`
	Rollback       *bool `json:"rollback,omitempty"`
}

// InterfaceCreate0 defines model for interface_create_0.
type InterfaceCreate0 struct {
	Aliases                    *[]map[string]interface{} `json:"aliases,omitempty"`
	BridgeMembers              *[]interface{}            `json:"bridge_members,omitempty"`
	Description                *string                   `json:"description"`
	DisableOffloadCapabilities *bool                     `json:"disable_offload_capabilities,omitempty"`
	FailoverAliases            *[]map[string]interface{} `json:"failover_aliases,omitempty"`
	FailoverCritical           *bool                     `json:"failover_critical,omitempty"`
	FailoverGroup              *int                      `json:"failover_group"`
	FailoverVhid               *int                      `json:"failover_vhid"`
	FailoverVirtualAliases     *[]map[string]interface{} `json:"failover_virtual_aliases,omitempty"`
	Ipv4Dhcp                   *bool                     `json:"ipv4_dhcp,omitempty"`
	Ipv6Auto                   *bool                     `json:"ipv6_auto,omitempty"`
	LagPorts                   *[]string                 `json:"lag_ports,omitempty"`
	LagProtocol                *string                   `json:"lag_protocol,omitempty"`
	Mtu                        *int                      `json:"mtu"`
	Name                       *string                   `json:"name,omitempty"`
	Options                    *string                   `json:"options,omitempty"`
	Type                       *string                   `json:"type,omitempty"`
	VlanParentInterface        *string                   `json:"vlan_parent_interface,omitempty"`
	VlanPcp                    *int                      `json:"vlan_pcp"`
	VlanTag                    *int                      `json:"vlan_tag,omitempty"`
}

// InterfaceIpInUse0 defines model for interface_ip_in_use_0.
type InterfaceIpInUse0 struct {
	Any           *bool `json:"any,omitempty"`
	Ipv4          *bool `json:"ipv4,omitempty"`
	Ipv6          *bool `json:"ipv6,omitempty"`
	Ipv6LinkLocal *bool `json:"ipv6_link_local,omitempty"`
	Loopback      *bool `json:"loopback,omitempty"`
	Static        *bool `json:"static,omitempty"`
}

// InterfaceLagPortsChoices0 defines model for interface_lag_ports_choices_0.
type InterfaceLagPortsChoices0 string

// InterfaceUpdate1 defines model for interface_update_1.
type InterfaceUpdate1 struct {
	Aliases                    *[]map[string]interface{} `json:"aliases,omitempty"`
	BridgeMembers              *[]interface{}            `json:"bridge_members,omitempty"`
	Description                *string                   `json:"description"`
	DisableOffloadCapabilities *bool                     `json:"disable_offload_capabilities,omitempty"`
	FailoverAliases            *[]map[string]interface{} `json:"failover_aliases,omitempty"`
	FailoverCritical           *bool                     `json:"failover_critical,omitempty"`
	FailoverGroup              *int                      `json:"failover_group"`
	FailoverVhid               *int                      `json:"failover_vhid"`
	FailoverVirtualAliases     *[]map[string]interface{} `json:"failover_virtual_aliases,omitempty"`
	Ipv4Dhcp                   *bool                     `json:"ipv4_dhcp,omitempty"`
	Ipv6Auto                   *bool                     `json:"ipv6_auto,omitempty"`
	LagPorts                   *[]string                 `json:"lag_ports,omitempty"`
	LagProtocol                *string                   `json:"lag_protocol,omitempty"`
	Mtu                        *int                      `json:"mtu"`
	Name                       *string                   `json:"name,omitempty"`
	Options                    *string                   `json:"options,omitempty"`
	VlanParentInterface        *string                   `json:"vlan_parent_interface,omitempty"`
	VlanPcp                    *int                      `json:"vlan_pcp"`
	VlanTag                    *int                      `json:"vlan_tag,omitempty"`
}

// IpmiIdentify0 defines model for ipmi_identify_0.
type IpmiIdentify0 struct {
	Force   *bool `json:"force,omitempty"`
	Seconds *int  `json:"seconds,omitempty"`
}

// IpmiUpdate1 defines model for ipmi_update_1.
type IpmiUpdate1 struct {
	Dhcp      *bool   `json:"dhcp,omitempty"`
	Gateway   *string `json:"gateway,omitempty"`
	Ipaddress *string `json:"ipaddress,omitempty"`
	Netmask   *string `json:"netmask,omitempty"`
	Password  *string `json:"password,omitempty"`
	Vlan      *int    `json:"vlan"`
}

// IscsiAuthCreate0 defines model for iscsi_auth_create_0.
type IscsiAuthCreate0 struct {
	Peersecret *string `json:"peersecret,omitempty"`
	Peeruser   *string `json:"peeruser,omitempty"`
	Secret     *string `json:"secret,omitempty"`
	Tag        *int    `json:"tag,omitempty"`
	User       *string `json:"user,omitempty"`
}

// IscsiAuthUpdate1 defines model for iscsi_auth_update_1.
type IscsiAuthUpdate1 struct {
	Peersecret *string `json:"peersecret,omitempty"`
	Peeruser   *string `json:"peeruser,omitempty"`
	Secret     *string `json:"secret,omitempty"`
	Tag        *int    `json:"tag,omitempty"`
	User       *string `json:"user,omitempty"`
}

// IscsiExtentCreate0 defines model for iscsi_extent_create_0.
type IscsiExtentCreate0 struct {
	AvailThreshold *int    `json:"avail_threshold"`
	Blocksize      *int    `json:"blocksize,omitempty"`
	Comment        *string `json:"comment,omitempty"`
	Disk           *string `json:"disk"`
	Enabled        *bool   `json:"enabled,omitempty"`
	Filesize       *int    `json:"filesize,omitempty"`
	InsecureTpc    *bool   `json:"insecure_tpc,omitempty"`
	Name           *string `json:"name,omitempty"`
	Path           *string `json:"path"`
	Pblocksize     *bool   `json:"pblocksize,omitempty"`
	Ro             *bool   `json:"ro,omitempty"`
	Rpm            *string `json:"rpm,omitempty"`
	Serial         *string `json:"serial"`
	Type           *string `json:"type,omitempty"`
	Xen            *bool   `json:"xen,omitempty"`
}

// IscsiExtentDelete defines model for iscsi_extent_delete.
type IscsiExtentDelete struct {
	Force  *IscsiExtentDelete2 `json:"force,omitempty"`
	Remove *IscsiExtentDelete1 `json:"remove,omitempty"`
}

// IscsiExtentDelete1 defines model for iscsi_extent_delete_1.
type IscsiExtentDelete1 bool

// IscsiExtentDelete2 defines model for iscsi_extent_delete_2.
type IscsiExtentDelete2 bool

// IscsiExtentDiskChoices0 defines model for iscsi_extent_disk_choices_0.
type IscsiExtentDiskChoices0 []interface{}

// IscsiExtentUpdate1 defines model for iscsi_extent_update_1.
type IscsiExtentUpdate1 struct {
	AvailThreshold *int    `json:"avail_threshold"`
	Blocksize      *int    `json:"blocksize,omitempty"`
	Comment        *string `json:"comment,omitempty"`
	Disk           *string `json:"disk"`
	Enabled        *bool   `json:"enabled,omitempty"`
	Filesize       *int    `json:"filesize,omitempty"`
	InsecureTpc    *bool   `json:"insecure_tpc,omitempty"`
	Name           *string `json:"name,omitempty"`
	Path           *string `json:"path"`
	Pblocksize     *bool   `json:"pblocksize,omitempty"`
	Ro             *bool   `json:"ro,omitempty"`
	Rpm            *string `json:"rpm,omitempty"`
	Serial         *string `json:"serial"`
	Type           *string `json:"type,omitempty"`
	Xen            *bool   `json:"xen,omitempty"`
}

// IscsiGlobalUpdate0 defines model for iscsi_global_update_0.
type IscsiGlobalUpdate0 struct {
	Alua               *bool     `json:"alua,omitempty"`
	Basename           *string   `json:"basename,omitempty"`
	IsnsServers        *[]string `json:"isns_servers,omitempty"`
	PoolAvailThreshold *int      `json:"pool_avail_threshold"`
}

// IscsiInitiatorCreate0 defines model for iscsi_initiator_create_0.
type IscsiInitiatorCreate0 struct {
	AuthNetwork *[]string      `json:"auth_network,omitempty"`
	Comment     *string        `json:"comment,omitempty"`
	Initiators  *[]interface{} `json:"initiators,omitempty"`
	Tag         *int           `json:"tag,omitempty"`
}

// IscsiInitiatorUpdate1 defines model for iscsi_initiator_update_1.
type IscsiInitiatorUpdate1 struct {
	AuthNetwork *[]string      `json:"auth_network,omitempty"`
	Comment     *string        `json:"comment,omitempty"`
	Initiators  *[]interface{} `json:"initiators,omitempty"`
	Tag         *int           `json:"tag,omitempty"`
}

// IscsiPortalCreate0 defines model for iscsi_portal_create_0.
type IscsiPortalCreate0 struct {
	Comment             *string                   `json:"comment,omitempty"`
	DiscoveryAuthgroup  *int                      `json:"discovery_authgroup"`
	DiscoveryAuthmethod *string                   `json:"discovery_authmethod,omitempty"`
	Listen              *[]map[string]interface{} `json:"listen,omitempty"`
}

// IscsiPortalUpdate1 defines model for iscsi_portal_update_1.
type IscsiPortalUpdate1 struct {
	Comment             *string                   `json:"comment,omitempty"`
	DiscoveryAuthgroup  *int                      `json:"discovery_authgroup"`
	DiscoveryAuthmethod *string                   `json:"discovery_authmethod,omitempty"`
	Listen              *[]map[string]interface{} `json:"listen,omitempty"`
}

// IscsiTargetCreate0 defines model for iscsi_target_create_0.
type IscsiTargetCreate0 struct {
	Alias  *string                   `json:"alias"`
	Groups *[]map[string]interface{} `json:"groups,omitempty"`
	Mode   *string                   `json:"mode,omitempty"`
	Name   *string                   `json:"name,omitempty"`
}

// IscsiTargetDelete1 defines model for iscsi_target_delete_1.
type IscsiTargetDelete1 bool

// IscsiTargetUpdate1 defines model for iscsi_target_update_1.
type IscsiTargetUpdate1 struct {
	Alias  *string                   `json:"alias"`
	Groups *[]map[string]interface{} `json:"groups,omitempty"`
	Mode   *string                   `json:"mode,omitempty"`
	Name   *string                   `json:"name,omitempty"`
}

// IscsiTargetextentCreate0 defines model for iscsi_targetextent_create_0.
type IscsiTargetextentCreate0 struct {
	Extent *int `json:"extent,omitempty"`
	Lunid  *int `json:"lunid"`
	Target *int `json:"target,omitempty"`
}

// IscsiTargetextentDelete1 defines model for iscsi_targetextent_delete_1.
type IscsiTargetextentDelete1 bool

// IscsiTargetextentUpdate1 defines model for iscsi_targetextent_update_1.
type IscsiTargetextentUpdate1 struct {
	Extent *int `json:"extent,omitempty"`
	Lunid  *int `json:"lunid,omitempty"`
	Target *int `json:"target,omitempty"`
}

// JailActivate0 defines model for jail_activate_0.
type JailActivate0 string

// JailClean0 defines model for jail_clean_0.
type JailClean0 string

// List of JailClean0
const (
	JailClean0_ALL      JailClean0 = "ALL"
	JailClean0_JAIL     JailClean0 = "JAIL"
	JailClean0_RELEASE  JailClean0 = "RELEASE"
	JailClean0_TEMPLATE JailClean0 = "TEMPLATE"
)

// JailClone1 defines model for jail_clone_1.
type JailClone1 struct {
	Pkglist   *[]string      `json:"pkglist,omitempty"`
	Props     *[]interface{} `json:"props,omitempty"`
	Thickjail *bool          `json:"thickjail,omitempty"`
	Uuid      *string        `json:"uuid,omitempty"`
}

// JailCreate0 defines model for jail_create_0.
type JailCreate0 struct {
	Basejail *bool          `json:"basejail,omitempty"`
	Empty    *bool          `json:"empty,omitempty"`
	Https    *bool          `json:"https,omitempty"`
	Pkglist  *[]string      `json:"pkglist,omitempty"`
	Props    *[]interface{} `json:"props,omitempty"`
	Release  *string        `json:"release,omitempty"`
	Short    *bool          `json:"short,omitempty"`
	Template *string        `json:"template,omitempty"`
	Uuid     *string        `json:"uuid,omitempty"`
}

// JailDelete1 defines model for jail_delete_1.
type JailDelete1 struct {
	Force *bool `json:"force,omitempty"`
}

// JailExec defines model for jail_exec.
type JailExec struct {
	Command *JailExec1 `json:"command,omitempty"`
	Jail    *JailExec0 `json:"jail,omitempty"`
	Options *JailExec2 `json:"options,omitempty"`
}

// JailExec0 defines model for jail_exec_0.
type JailExec0 string

// JailExec1 defines model for jail_exec_1.
type JailExec1 []interface{}

// JailExec2 defines model for jail_exec_2.
type JailExec2 struct {
	HostUser *string `json:"host_user,omitempty"`
	JailUser *string `json:"jail_user,omitempty"`
}

// JailExport0 defines model for jail_export_0.
type JailExport0 struct {
	CompressionAlgorithm *string `json:"compression_algorithm,omitempty"`
	Jail                 *string `json:"jail,omitempty"`
}

// JailFetch0 defines model for jail_fetch_0.
type JailFetch0 struct {
	Accept   *bool          `json:"accept,omitempty"`
	Branch   *string        `json:"branch"`
	Files    *[]interface{} `json:"files,omitempty"`
	Https    *bool          `json:"https,omitempty"`
	JailName *string        `json:"jail_name,omitempty"`
	Name     *string        `json:"name"`
	Password *string        `json:"password,omitempty"`
	Props    *[]interface{} `json:"props,omitempty"`
	Release  *string        `json:"release,omitempty"`
	Server   *string        `json:"server,omitempty"`
	User     *string        `json:"user,omitempty"`
}

// JailFstab defines model for jail_fstab.
type JailFstab struct {
	Jail    *JailFstab0 `json:"jail,omitempty"`
	Options *JailFstab1 `json:"options,omitempty"`
}

// JailFstab0 defines model for jail_fstab_0.
type JailFstab0 string

// JailFstab1 defines model for jail_fstab_1.
type JailFstab1 struct {
	Action      *string `json:"action,omitempty"`
	Destination *string `json:"destination,omitempty"`
	Dump        *string `json:"dump,omitempty"`
	Fsoptions   *string `json:"fsoptions,omitempty"`
	Fstype      *string `json:"fstype,omitempty"`
	Index       *int    `json:"index,omitempty"`
	Pass        *string `json:"pass,omitempty"`
	Source      *string `json:"source,omitempty"`
}

// JailImportImage0 defines model for jail_import_image_0.
type JailImportImage0 struct {
	CompressionAlgorithm *string `json:"compression_algorithm"`
	Jail                 *string `json:"jail,omitempty"`
	Path                 *string `json:"path"`
}

// JailRcAction0 defines model for jail_rc_action_0.
type JailRcAction0 string

// List of JailRcAction0
const (
	JailRcAction0_RESTART JailRcAction0 = "RESTART"
	JailRcAction0_START   JailRcAction0 = "START"
	JailRcAction0_STOP    JailRcAction0 = "STOP"
)

// JailReleasesChoices0 defines model for jail_releases_choices_0.
type JailReleasesChoices0 bool

// JailRestart0 defines model for jail_restart_0.
type JailRestart0 string

// JailStart0 defines model for jail_start_0.
type JailStart0 string

// JailStop defines model for jail_stop.
type JailStop struct {
	Force *JailStop1 `json:"force,omitempty"`
	Jail  *JailStop0 `json:"jail,omitempty"`
}

// JailStop0 defines model for jail_stop_0.
type JailStop0 string

// JailStop1 defines model for jail_stop_1.
type JailStop1 bool

// JailUpdate1 defines model for jail_update_1.
type JailUpdate1 struct {
	Plugin               *bool                  `json:"plugin,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// JailUpdateDefaults0 defines model for jail_update_defaults_0.
type JailUpdateDefaults0 struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// JailUpdateToLatestPatch defines model for jail_update_to_latest_patch.
type JailUpdateToLatestPatch struct {
	Jail       *JailUpdateToLatestPatch0 `json:"jail,omitempty"`
	UpdatePkgs *JailUpdateToLatestPatch1 `json:"update_pkgs,omitempty"`
}

// JailUpdateToLatestPatch0 defines model for jail_update_to_latest_patch_0.
type JailUpdateToLatestPatch0 string

// JailUpdateToLatestPatch1 defines model for jail_update_to_latest_patch_1.
type JailUpdateToLatestPatch1 bool

// KerberosKeytabCreate0 defines model for kerberos_keytab_create_0.
type KerberosKeytabCreate0 struct {
	File *string `json:"file,omitempty"`
	Name *string `json:"name,omitempty"`
}

// KerberosKeytabUpdate1 defines model for kerberos_keytab_update_1.
type KerberosKeytabUpdate1 struct {
	File *string `json:"file,omitempty"`
	Name *string `json:"name,omitempty"`
}

// KerberosRealmCreate0 defines model for kerberos_realm_create_0.
type KerberosRealmCreate0 struct {
	AdminServer   *[]interface{} `json:"admin_server,omitempty"`
	Kdc           *[]interface{} `json:"kdc,omitempty"`
	KpasswdServer *[]interface{} `json:"kpasswd_server,omitempty"`
	Realm         *string        `json:"realm,omitempty"`
}

// KerberosRealmUpdate1 defines model for kerberos_realm_update_1.
type KerberosRealmUpdate1 struct {
	AdminServer   *[]interface{} `json:"admin_server,omitempty"`
	Kdc           *[]interface{} `json:"kdc,omitempty"`
	KpasswdServer *[]interface{} `json:"kpasswd_server,omitempty"`
	Realm         *string        `json:"realm,omitempty"`
}

// KerberosUpdate0 defines model for kerberos_update_0.
type KerberosUpdate0 struct {
	AppdefaultsAux *string `json:"appdefaults_aux,omitempty"`
	LibdefaultsAux *string `json:"libdefaults_aux,omitempty"`
}

// KeychaincredentialCreate0 defines model for keychaincredential_create_0.
type KeychaincredentialCreate0 struct {
	Attributes *KeychaincredentialCreate0_Attributes `json:"attributes,omitempty"`
	Name       *string                               `json:"name,omitempty"`
	Type       *string                               `json:"type,omitempty"`
}

// KeychaincredentialCreate0_Attributes defines model for KeychaincredentialCreate0.Attributes.
type KeychaincredentialCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// KeychaincredentialDelete1 defines model for keychaincredential_delete_1.
type KeychaincredentialDelete1 struct {
	Cascade *bool `json:"cascade,omitempty"`
}

// KeychaincredentialRemoteSshHostKeyScan0 defines model for keychaincredential_remote_ssh_host_key_scan_0.
type KeychaincredentialRemoteSshHostKeyScan0 struct {
	ConnectTimeout *int    `json:"connect_timeout,omitempty"`
	Host           *string `json:"host,omitempty"`
	Port           *string `json:"port,omitempty"`
}

// KeychaincredentialRemoteSshSemiautomaticSetup0 defines model for keychaincredential_remote_ssh_semiautomatic_setup_0.
type KeychaincredentialRemoteSshSemiautomaticSetup0 struct {
	Cipher         *string `json:"cipher,omitempty"`
	ConnectTimeout *int    `json:"connect_timeout,omitempty"`
	Name           *string `json:"name,omitempty"`
	Password       *string `json:"password,omitempty"`
	PrivateKey     *int    `json:"private_key,omitempty"`
	Token          *string `json:"token,omitempty"`
	Url            *string `json:"url,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// KeychaincredentialUpdate1 defines model for keychaincredential_update_1.
type KeychaincredentialUpdate1 struct {
	Attributes *KeychaincredentialUpdate1_Attributes `json:"attributes,omitempty"`
	Name       *string                               `json:"name,omitempty"`
}

// KeychaincredentialUpdate1_Attributes defines model for KeychaincredentialUpdate1.Attributes.
type KeychaincredentialUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// KeychaincredentialUsedBy0 defines model for keychaincredential_used_by_0.
type KeychaincredentialUsedBy0 int

// LdapUpdate0 defines model for ldap_update_0.
type LdapUpdate0 struct {
	Anonbind             *bool          `json:"anonbind,omitempty"`
	AuxiliaryParameters  *string        `json:"auxiliary_parameters,omitempty"`
	Basedn               *string        `json:"basedn,omitempty"`
	Binddn               *string        `json:"binddn,omitempty"`
	Bindpw               *string        `json:"bindpw,omitempty"`
	Certificate          *int           `json:"certificate"`
	DisableFreenasCache  *bool          `json:"disable_freenas_cache,omitempty"`
	DnsTimeout           *int           `json:"dns_timeout,omitempty"`
	Enable               *bool          `json:"enable,omitempty"`
	HasSambaSchema       *bool          `json:"has_samba_schema,omitempty"`
	Hostname             *[]interface{} `json:"hostname,omitempty"`
	IdmapBackend         *string        `json:"idmap_backend,omitempty"`
	KerberosPrincipal    *string        `json:"kerberos_principal,omitempty"`
	KerberosRealm        *int           `json:"kerberos_realm"`
	Schema               *string        `json:"schema,omitempty"`
	Ssl                  *string        `json:"ssl,omitempty"`
	Timeout              *int           `json:"timeout,omitempty"`
	ValidateCertificates *bool          `json:"validate_certificates,omitempty"`
}

// LldpUpdate0 defines model for lldp_update_0.
type LldpUpdate0 struct {
	Country  *string `json:"country,omitempty"`
	Intdesc  *bool   `json:"intdesc,omitempty"`
	Location *string `json:"location,omitempty"`
}

// MailSend defines model for mail_send.
type MailSend struct {
	MailMessage *MailSend0 `json:"mail_message,omitempty"`
	MailUpdate  *MailSend1 `json:"mail_update,omitempty"`
}

// MailSend0 defines model for mail_send_0.
type MailSend0 struct {
	Attachments  *bool                   `json:"attachments,omitempty"`
	Cc           *[]string               `json:"cc,omitempty"`
	Channel      *string                 `json:"channel"`
	ExtraHeaders *MailSend0_ExtraHeaders `json:"extra_headers,omitempty"`
	Html         *string                 `json:"html"`
	Interval     *int                    `json:"interval"`
	Queue        *bool                   `json:"queue,omitempty"`
	Subject      *string                 `json:"subject,omitempty"`
	Text         *string                 `json:"text,omitempty"`
	Timeout      *int                    `json:"timeout,omitempty"`
	To           *[]string               `json:"to,omitempty"`
}

// MailSend0_ExtraHeaders defines model for MailSend0.ExtraHeaders.
type MailSend0_ExtraHeaders struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MailSend1 defines model for mail_send_1.
type MailSend1 struct {
	Fromemail      *string `json:"fromemail,omitempty"`
	Fromname       *string `json:"fromname,omitempty"`
	Outgoingserver *string `json:"outgoingserver,omitempty"`
	Pass           *string `json:"pass,omitempty"`
	Port           *int    `json:"port,omitempty"`
	Security       *string `json:"security,omitempty"`
	Smtp           *bool   `json:"smtp,omitempty"`
	User           *string `json:"user,omitempty"`
}

// MailUpdate0 defines model for mail_update_0.
type MailUpdate0 struct {
	Fromemail      *string `json:"fromemail,omitempty"`
	Fromname       *string `json:"fromname,omitempty"`
	Outgoingserver *string `json:"outgoingserver,omitempty"`
	Pass           *string `json:"pass,omitempty"`
	Port           *int    `json:"port,omitempty"`
	Security       *string `json:"security,omitempty"`
	Smtp           *bool   `json:"smtp,omitempty"`
	User           *string `json:"user,omitempty"`
}

// NetworkConfigurationUpdate0 defines model for network_configuration_update_0.
type NetworkConfigurationUpdate0 struct {
	Domain          *string   `json:"domain,omitempty"`
	Domains         *[]string `json:"domains,omitempty"`
	Hostname        *string   `json:"hostname,omitempty"`
	HostnameB       *string   `json:"hostname_b,omitempty"`
	HostnameVirtual *string   `json:"hostname_virtual,omitempty"`
	Hosts           *string   `json:"hosts,omitempty"`
	Httpproxy       *string   `json:"httpproxy,omitempty"`
	Ipv4gateway     *string   `json:"ipv4gateway,omitempty"`
	Ipv6gateway     *string   `json:"ipv6gateway,omitempty"`
	Nameserver1     *string   `json:"nameserver1,omitempty"`
	Nameserver2     *string   `json:"nameserver2,omitempty"`
	Nameserver3     *string   `json:"nameserver3,omitempty"`
	NetwaitEnabled  *bool     `json:"netwait_enabled,omitempty"`
	NetwaitIp       *[]string `json:"netwait_ip,omitempty"`
}

// NfsUpdate0 defines model for nfs_update_0.
type NfsUpdate0 struct {
	AllowNonroot    *bool     `json:"allow_nonroot,omitempty"`
	Bindip          *[]string `json:"bindip,omitempty"`
	MountdLog       *bool     `json:"mountd_log,omitempty"`
	MountdPort      *int      `json:"mountd_port"`
	RpclockdPort    *int      `json:"rpclockd_port"`
	RpcstatdPort    *int      `json:"rpcstatd_port"`
	Servers         *int      `json:"servers,omitempty"`
	StatdLockdLog   *bool     `json:"statd_lockd_log,omitempty"`
	Udp             *bool     `json:"udp,omitempty"`
	UserdManageGids *bool     `json:"userd_manage_gids,omitempty"`
	V4              *bool     `json:"v4,omitempty"`
	V4Krb           *bool     `json:"v4_krb,omitempty"`
	V4V3owner       *bool     `json:"v4_v3owner,omitempty"`
}

// NisUpdate0 defines model for nis_update_0.
type NisUpdate0 struct {
	Domain     *string        `json:"domain,omitempty"`
	Enable     *bool          `json:"enable,omitempty"`
	Manycast   *bool          `json:"manycast,omitempty"`
	SecureMode *bool          `json:"secure_mode,omitempty"`
	Servers    *[]interface{} `json:"servers,omitempty"`
}

// PluginAvailable0 defines model for plugin_available_0.
type PluginAvailable0 struct {
	Branch           *string `json:"branch,omitempty"`
	Cache            *bool   `json:"cache,omitempty"`
	PluginRepository *string `json:"plugin_repository,omitempty"`
}

// PluginBranchesChoices0 defines model for plugin_branches_choices_0.
type PluginBranchesChoices0 string

// PluginCreate0 defines model for plugin_create_0.
type PluginCreate0 struct {
	Branch           *string        `json:"branch"`
	JailName         *string        `json:"jail_name,omitempty"`
	PluginName       *string        `json:"plugin_name,omitempty"`
	PluginRepository *string        `json:"plugin_repository,omitempty"`
	Props            *[]interface{} `json:"props,omitempty"`
}

// PluginDefaults0 defines model for plugin_defaults_0.
type PluginDefaults0 struct {
	Branch           *string `json:"branch"`
	Plugin           *string `json:"plugin,omitempty"`
	PluginRepository *string `json:"plugin_repository,omitempty"`
	Refresh          *bool   `json:"refresh,omitempty"`
}

// PluginUpdate1 defines model for plugin_update_1.
type PluginUpdate1 struct {
	Plugin               *bool                  `json:"plugin,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PoolAttachments defines model for pool_attachments.
type PoolAttachments map[string]interface{}

// PoolCreate0 defines model for pool_create_0.
type PoolCreate0 struct {
	Deduplication *string `json:"deduplication"`
	Encryption    *bool   `json:"encryption,omitempty"`
	Name          *string `json:"name,omitempty"`
	Topology      *struct {
		Cache  *[]map[string]interface{} `json:"cache,omitempty"`
		Data   *[]map[string]interface{} `json:"data,omitempty"`
		Log    *[]map[string]interface{} `json:"log,omitempty"`
		Spares *[]string                 `json:"spares,omitempty"`
	} `json:"topology,omitempty"`
}

// PoolDatasetAttachments defines model for pool_dataset_attachments.
type PoolDatasetAttachments map[string]interface{}

// PoolDatasetCreate0 defines model for pool_dataset_create_0.
type PoolDatasetCreate0 struct {
	Aclmode          *string `json:"aclmode,omitempty"`
	Atime            *string `json:"atime,omitempty"`
	Casesensitivity  *string `json:"casesensitivity,omitempty"`
	Comments         *string `json:"comments,omitempty"`
	Compression      *string `json:"compression,omitempty"`
	Copies           *int    `json:"copies,omitempty"`
	Deduplication    *string `json:"deduplication,omitempty"`
	Exec             *string `json:"exec,omitempty"`
	ForceSize        *bool   `json:"force_size,omitempty"`
	Name             *string `json:"name,omitempty"`
	Quota            *int    `json:"quota,omitempty"`
	QuotaCritical    *int    `json:"quota_critical,omitempty"`
	QuotaWarning     *int    `json:"quota_warning,omitempty"`
	Readonly         *string `json:"readonly,omitempty"`
	Recordsize       *string `json:"recordsize,omitempty"`
	Refquota         *int    `json:"refquota,omitempty"`
	RefquotaCritical *int    `json:"refquota_critical,omitempty"`
	RefquotaWarning  *int    `json:"refquota_warning,omitempty"`
	Refreservation   *int    `json:"refreservation,omitempty"`
	Reservation      *int    `json:"reservation,omitempty"`
	ShareType        *string `json:"share_type,omitempty"`
	Snapdir          *string `json:"snapdir,omitempty"`
	Sparse           *bool   `json:"sparse,omitempty"`
	Sync             *string `json:"sync,omitempty"`
	Type             *string `json:"type,omitempty"`
	Volblocksize     *string `json:"volblocksize,omitempty"`
	Volsize          *int    `json:"volsize,omitempty"`
}

// PoolDatasetDelete1 defines model for pool_dataset_delete_1.
type PoolDatasetDelete1 struct {
	Force     *bool `json:"force,omitempty"`
	Recursive *bool `json:"recursive,omitempty"`
}

// PoolDatasetPermission1 defines model for pool_dataset_permission_1.
type PoolDatasetPermission1 struct {
	Acl     *[]map[string]interface{} `json:"acl,omitempty"`
	Group   *string                   `json:"group,omitempty"`
	Mode    *string                   `json:"mode"`
	Options *struct {
		Recursive *bool `json:"recursive,omitempty"`
		Stripacl  *bool `json:"stripacl,omitempty"`
		Traverse  *bool `json:"traverse,omitempty"`
	} `json:"options,omitempty"`
	User *string `json:"user,omitempty"`
}

// PoolDatasetProcesses defines model for pool_dataset_processes.
type PoolDatasetProcesses map[string]interface{}

// PoolDatasetPromote defines model for pool_dataset_promote.
type PoolDatasetPromote map[string]interface{}

// PoolDatasetRecommendedZvolBlocksize0 defines model for pool_dataset_recommended_zvol_blocksize_0.
type PoolDatasetRecommendedZvolBlocksize0 string

// PoolDatasetUpdate1 defines model for pool_dataset_update_1.
type PoolDatasetUpdate1 struct {
	Aclmode          *string      `json:"aclmode,omitempty"`
	Atime            *string      `json:"atime,omitempty"`
	Comments         *string      `json:"comments,omitempty"`
	Compression      *string      `json:"compression,omitempty"`
	Copies           *int         `json:"copies,omitempty"`
	Deduplication    *string      `json:"deduplication,omitempty"`
	Exec             *string      `json:"exec,omitempty"`
	ForceSize        *bool        `json:"force_size,omitempty"`
	Quota            *int         `json:"quota,omitempty"`
	QuotaCritical    *interface{} `json:"quota_critical,omitempty"`
	QuotaWarning     *interface{} `json:"quota_warning,omitempty"`
	Readonly         *string      `json:"readonly,omitempty"`
	Recordsize       *string      `json:"recordsize,omitempty"`
	Refquota         *int         `json:"refquota,omitempty"`
	RefquotaCritical *interface{} `json:"refquota_critical,omitempty"`
	RefquotaWarning  *interface{} `json:"refquota_warning,omitempty"`
	Refreservation   *int         `json:"refreservation,omitempty"`
	Reservation      *int         `json:"reservation,omitempty"`
	Snapdir          *string      `json:"snapdir,omitempty"`
	Sync             *string      `json:"sync,omitempty"`
	Volsize          *int         `json:"volsize,omitempty"`
}

// PoolDetach1 defines model for pool_detach_1.
type PoolDetach1 struct {
	Label *string `json:"label,omitempty"`
}

// PoolDownloadEncryptionKey1 defines model for pool_download_encryption_key_1.
type PoolDownloadEncryptionKey1 string

// PoolExport1 defines model for pool_export_1.
type PoolExport1 struct {
	Cascade         *bool `json:"cascade,omitempty"`
	Destroy         *bool `json:"destroy,omitempty"`
	RestartServices *bool `json:"restart_services,omitempty"`
}

// PoolFilesystemChoices0 defines model for pool_filesystem_choices_0.
type PoolFilesystemChoices0 []string

// PoolGetDisks defines model for pool_get_disks.
type PoolGetDisks map[string]interface{}

// PoolImportDisk defines model for pool_import_disk.
type PoolImportDisk struct {
	Device    *PoolImportDisk0 `json:"device,omitempty"`
	DstPath   *PoolImportDisk3 `json:"dst_path,omitempty"`
	FsOptions *PoolImportDisk2 `json:"fs_options,omitempty"`
	FsType    *PoolImportDisk1 `json:"fs_type,omitempty"`
}

// PoolImportDisk0 defines model for pool_import_disk_0.
type PoolImportDisk0 string

// PoolImportDisk1 defines model for pool_import_disk_1.
type PoolImportDisk1 string

// PoolImportDisk2 defines model for pool_import_disk_2.
type PoolImportDisk2 struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PoolImportDisk3 defines model for pool_import_disk_3.
type PoolImportDisk3 string

// PoolImportDiskAutodetectFsType0 defines model for pool_import_disk_autodetect_fs_type_0.
type PoolImportDiskAutodetectFsType0 string

// PoolImportPool0 defines model for pool_import_pool_0.
type PoolImportPool0 struct {
	EnableAttachments *bool   `json:"enable_attachments,omitempty"`
	Guid              *string `json:"guid,omitempty"`
	Name              *string `json:"name,omitempty"`
	Passphrase        *string `json:"passphrase,omitempty"`
}

// PoolIsUpgraded defines model for pool_is_upgraded.
type PoolIsUpgraded map[string]interface{}

// PoolLock1 defines model for pool_lock_1.
type PoolLock1 string

// PoolOffline1 defines model for pool_offline_1.
type PoolOffline1 struct {
	Label *string `json:"label,omitempty"`
}

// PoolOnline1 defines model for pool_online_1.
type PoolOnline1 struct {
	Label *string `json:"label,omitempty"`
}

// PoolPassphrase1 defines model for pool_passphrase_1.
type PoolPassphrase1 struct {
	AdminPassword *string `json:"admin_password,omitempty"`
	Passphrase    *string `json:"passphrase"`
}

// PoolProcesses defines model for pool_processes.
type PoolProcesses map[string]interface{}

// PoolRecoverykeyRm1 defines model for pool_recoverykey_rm_1.
type PoolRecoverykeyRm1 struct {
	AdminPassword *string `json:"admin_password,omitempty"`
}

// PoolRekey1 defines model for pool_rekey_1.
type PoolRekey1 struct {
	AdminPassword *string `json:"admin_password,omitempty"`
}

// PoolRemove1 defines model for pool_remove_1.
type PoolRemove1 struct {
	Label *string `json:"label,omitempty"`
}

// PoolReplace1 defines model for pool_replace_1.
type PoolReplace1 struct {
	Disk       *string `json:"disk,omitempty"`
	Force      *bool   `json:"force,omitempty"`
	Label      *string `json:"label,omitempty"`
	Passphrase *string `json:"passphrase,omitempty"`
}

// PoolResilverUpdate0 defines model for pool_resilver_update_0.
type PoolResilverUpdate0 struct {
	Begin   *string `json:"begin,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
	End     *string `json:"end,omitempty"`
	Weekday *[]int  `json:"weekday,omitempty"`
}

// PoolScrub1 defines model for pool_scrub_1.
type PoolScrub1 string

// List of PoolScrub1
const (
	PoolScrub1_PAUSE PoolScrub1 = "PAUSE"
	PoolScrub1_START PoolScrub1 = "START"
	PoolScrub1_STOP  PoolScrub1 = "STOP"
)

// PoolScrubCreate0 defines model for pool_scrub_create_0.
type PoolScrubCreate0 struct {
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Pool        *int    `json:"pool,omitempty"`
	Schedule    *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Threshold *int `json:"threshold,omitempty"`
}

// PoolScrubRun defines model for pool_scrub_run.
type PoolScrubRun struct {
	Name      *PoolScrubRun0 `json:"name,omitempty"`
	Threshold *PoolScrubRun1 `json:"threshold,omitempty"`
}

// PoolScrubRun0 defines model for pool_scrub_run_0.
type PoolScrubRun0 string

// PoolScrubRun1 defines model for pool_scrub_run_1.
type PoolScrubRun1 int

// PoolScrubUpdate1 defines model for pool_scrub_update_1.
type PoolScrubUpdate1 struct {
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Pool        *int    `json:"pool,omitempty"`
	Schedule    *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Threshold *int `json:"threshold,omitempty"`
}

// PoolSnapshottaskCreate0 defines model for pool_snapshottask_create_0.
type PoolSnapshottaskCreate0 struct {
	AllowEmpty    *bool     `json:"allow_empty,omitempty"`
	Dataset       *string   `json:"dataset,omitempty"`
	Enabled       *bool     `json:"enabled,omitempty"`
	Exclude       *[]string `json:"exclude,omitempty"`
	LifetimeUnit  *string   `json:"lifetime_unit,omitempty"`
	LifetimeValue *int      `json:"lifetime_value,omitempty"`
	NamingSchema  *string   `json:"naming_schema,omitempty"`
	Recursive     *bool     `json:"recursive,omitempty"`
	Schedule      *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
}

// PoolSnapshottaskRun defines model for pool_snapshottask_run.
type PoolSnapshottaskRun map[string]interface{}

// PoolSnapshottaskUpdate1 defines model for pool_snapshottask_update_1.
type PoolSnapshottaskUpdate1 struct {
	AllowEmpty    *bool     `json:"allow_empty,omitempty"`
	Dataset       *string   `json:"dataset,omitempty"`
	Enabled       *bool     `json:"enabled,omitempty"`
	Exclude       *[]string `json:"exclude,omitempty"`
	LifetimeUnit  *string   `json:"lifetime_unit,omitempty"`
	LifetimeValue *int      `json:"lifetime_value,omitempty"`
	NamingSchema  *string   `json:"naming_schema,omitempty"`
	Recursive     *bool     `json:"recursive,omitempty"`
	Schedule      *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
}

// PoolUnlock1 defines model for pool_unlock_1.
type PoolUnlock1 struct {
	Passphrase      *string        `json:"passphrase,omitempty"`
	Recoverykey     *bool          `json:"recoverykey,omitempty"`
	ServicesRestart *[]interface{} `json:"services_restart,omitempty"`
}

// PoolUnlockServicesRestartChoices0 defines model for pool_unlock_services_restart_choices_0.
type PoolUnlockServicesRestartChoices0 int

// PoolUpdate1 defines model for pool_update_1.
type PoolUpdate1 struct {
	Deduplication *string `json:"deduplication"`
	Topology      *struct {
		Cache  *[]map[string]interface{} `json:"cache,omitempty"`
		Data   *[]map[string]interface{} `json:"data,omitempty"`
		Log    *[]map[string]interface{} `json:"log,omitempty"`
		Spares *[]string                 `json:"spares,omitempty"`
	} `json:"topology,omitempty"`
}

// PoolUpgrade defines model for pool_upgrade.
type PoolUpgrade map[string]interface{}

// ReplicationCountEligibleManualSnapshots defines model for replication_count_eligible_manual_snapshots.
type ReplicationCountEligibleManualSnapshots struct {
	Datasets       *ReplicationCountEligibleManualSnapshots0 `json:"datasets,omitempty"`
	NamingSchema   *ReplicationCountEligibleManualSnapshots1 `json:"naming_schema,omitempty"`
	SshCredentials *ReplicationCountEligibleManualSnapshots3 `json:"ssh_credentials"`
	Transport      *ReplicationCountEligibleManualSnapshots2 `json:"transport,omitempty"`
}

// ReplicationCountEligibleManualSnapshots0 defines model for replication_count_eligible_manual_snapshots_0.
type ReplicationCountEligibleManualSnapshots0 []string

// ReplicationCountEligibleManualSnapshots1 defines model for replication_count_eligible_manual_snapshots_1.
type ReplicationCountEligibleManualSnapshots1 []string

// ReplicationCountEligibleManualSnapshots2 defines model for replication_count_eligible_manual_snapshots_2.
type ReplicationCountEligibleManualSnapshots2 string

// List of ReplicationCountEligibleManualSnapshots2
const (
	ReplicationCountEligibleManualSnapshots2_LEGACY     ReplicationCountEligibleManualSnapshots2 = "LEGACY"
	ReplicationCountEligibleManualSnapshots2_LOCAL      ReplicationCountEligibleManualSnapshots2 = "LOCAL"
	ReplicationCountEligibleManualSnapshots2_SSH        ReplicationCountEligibleManualSnapshots2 = "SSH"
	ReplicationCountEligibleManualSnapshots2_SSH_NETCAT ReplicationCountEligibleManualSnapshots2 = "SSH+NETCAT"
)

// ReplicationCountEligibleManualSnapshots3 defines model for replication_count_eligible_manual_snapshots_3.
type ReplicationCountEligibleManualSnapshots3 int

// ReplicationCreate0 defines model for replication_create_0.
type ReplicationCreate0 struct {
	AllowFromScratch                *bool     `json:"allow_from_scratch,omitempty"`
	AlsoIncludeNamingSchema         *[]string `json:"also_include_naming_schema,omitempty"`
	Auto                            *bool     `json:"auto,omitempty"`
	Compressed                      *bool     `json:"compressed,omitempty"`
	Compression                     *string   `json:"compression"`
	Direction                       *string   `json:"direction,omitempty"`
	Embed                           *bool     `json:"embed,omitempty"`
	Enabled                         *bool     `json:"enabled,omitempty"`
	Exclude                         *[]string `json:"exclude,omitempty"`
	HoldPendingSnapshots            *bool     `json:"hold_pending_snapshots,omitempty"`
	LargeBlock                      *bool     `json:"large_block,omitempty"`
	LifetimeUnit                    *string   `json:"lifetime_unit"`
	LifetimeValue                   *int      `json:"lifetime_value"`
	LoggingLevel                    *string   `json:"logging_level"`
	Name                            *string   `json:"name,omitempty"`
	NamingSchema                    *[]string `json:"naming_schema,omitempty"`
	NetcatActiveSide                *string   `json:"netcat_active_side"`
	NetcatActiveSideListenAddress   *string   `json:"netcat_active_side_listen_address"`
	NetcatActiveSidePortMax         *int      `json:"netcat_active_side_port_max"`
	NetcatActiveSidePortMin         *int      `json:"netcat_active_side_port_min"`
	NetcatPassiveSideConnectAddress *string   `json:"netcat_passive_side_connect_address"`
	OnlyMatchingSchedule            *bool     `json:"only_matching_schedule,omitempty"`
	PeriodicSnapshotTasks           *[]int    `json:"periodic_snapshot_tasks,omitempty"`
	Properties                      *bool     `json:"properties,omitempty"`
	Readonly                        *string   `json:"readonly,omitempty"`
	Recursive                       *bool     `json:"recursive,omitempty"`
	RestrictSchedule                *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"restrict_schedule,omitempty"`
	RetentionPolicy *string `json:"retention_policy,omitempty"`
	Retries         *int    `json:"retries,omitempty"`
	Schedule        *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	SourceDatasets *[]string `json:"source_datasets,omitempty"`
	SpeedLimit     *int      `json:"speed_limit"`
	SshCredentials *int      `json:"ssh_credentials"`
	TargetDataset  *string   `json:"target_dataset,omitempty"`
	Transport      *string   `json:"transport,omitempty"`
}

// ReplicationCreateDataset defines model for replication_create_dataset.
type ReplicationCreateDataset struct {
	Dataset        *ReplicationCreateDataset0 `json:"dataset,omitempty"`
	SshCredentials *ReplicationCreateDataset2 `json:"ssh_credentials"`
	Transport      *ReplicationCreateDataset1 `json:"transport,omitempty"`
}

// ReplicationCreateDataset0 defines model for replication_create_dataset_0.
type ReplicationCreateDataset0 string

// ReplicationCreateDataset1 defines model for replication_create_dataset_1.
type ReplicationCreateDataset1 string

// List of ReplicationCreateDataset1
const (
	ReplicationCreateDataset1_LEGACY     ReplicationCreateDataset1 = "LEGACY"
	ReplicationCreateDataset1_LOCAL      ReplicationCreateDataset1 = "LOCAL"
	ReplicationCreateDataset1_SSH        ReplicationCreateDataset1 = "SSH"
	ReplicationCreateDataset1_SSH_NETCAT ReplicationCreateDataset1 = "SSH+NETCAT"
)

// ReplicationCreateDataset2 defines model for replication_create_dataset_2.
type ReplicationCreateDataset2 int

// ReplicationListDatasets defines model for replication_list_datasets.
type ReplicationListDatasets struct {
	SshCredentials *ReplicationListDatasets1 `json:"ssh_credentials"`
	Transport      *ReplicationListDatasets0 `json:"transport,omitempty"`
}

// ReplicationListDatasets0 defines model for replication_list_datasets_0.
type ReplicationListDatasets0 string

// List of ReplicationListDatasets0
const (
	ReplicationListDatasets0_LEGACY     ReplicationListDatasets0 = "LEGACY"
	ReplicationListDatasets0_LOCAL      ReplicationListDatasets0 = "LOCAL"
	ReplicationListDatasets0_SSH        ReplicationListDatasets0 = "SSH"
	ReplicationListDatasets0_SSH_NETCAT ReplicationListDatasets0 = "SSH+NETCAT"
)

// ReplicationListDatasets1 defines model for replication_list_datasets_1.
type ReplicationListDatasets1 int

// ReplicationRun defines model for replication_run.
type ReplicationRun map[string]interface{}

// ReplicationTargetUnmatchedSnapshots defines model for replication_target_unmatched_snapshots.
type ReplicationTargetUnmatchedSnapshots struct {
	Direction      *ReplicationTargetUnmatchedSnapshots0 `json:"direction,omitempty"`
	SourceDatasets *ReplicationTargetUnmatchedSnapshots1 `json:"source_datasets,omitempty"`
	SshCredentials *ReplicationTargetUnmatchedSnapshots4 `json:"ssh_credentials"`
	TargetDataset  *ReplicationTargetUnmatchedSnapshots2 `json:"target_dataset,omitempty"`
	Transport      *ReplicationTargetUnmatchedSnapshots3 `json:"transport,omitempty"`
}

// ReplicationTargetUnmatchedSnapshots0 defines model for replication_target_unmatched_snapshots_0.
type ReplicationTargetUnmatchedSnapshots0 string

// List of ReplicationTargetUnmatchedSnapshots0
const (
	ReplicationTargetUnmatchedSnapshots0_PULL ReplicationTargetUnmatchedSnapshots0 = "PULL"
	ReplicationTargetUnmatchedSnapshots0_PUSH ReplicationTargetUnmatchedSnapshots0 = "PUSH"
)

// ReplicationTargetUnmatchedSnapshots1 defines model for replication_target_unmatched_snapshots_1.
type ReplicationTargetUnmatchedSnapshots1 []string

// ReplicationTargetUnmatchedSnapshots2 defines model for replication_target_unmatched_snapshots_2.
type ReplicationTargetUnmatchedSnapshots2 string

// ReplicationTargetUnmatchedSnapshots3 defines model for replication_target_unmatched_snapshots_3.
type ReplicationTargetUnmatchedSnapshots3 string

// List of ReplicationTargetUnmatchedSnapshots3
const (
	ReplicationTargetUnmatchedSnapshots3_LEGACY     ReplicationTargetUnmatchedSnapshots3 = "LEGACY"
	ReplicationTargetUnmatchedSnapshots3_LOCAL      ReplicationTargetUnmatchedSnapshots3 = "LOCAL"
	ReplicationTargetUnmatchedSnapshots3_SSH        ReplicationTargetUnmatchedSnapshots3 = "SSH"
	ReplicationTargetUnmatchedSnapshots3_SSH_NETCAT ReplicationTargetUnmatchedSnapshots3 = "SSH+NETCAT"
)

// ReplicationTargetUnmatchedSnapshots4 defines model for replication_target_unmatched_snapshots_4.
type ReplicationTargetUnmatchedSnapshots4 int

// ReplicationUpdate1 defines model for replication_update_1.
type ReplicationUpdate1 struct {
	AllowFromScratch                *bool     `json:"allow_from_scratch,omitempty"`
	AlsoIncludeNamingSchema         *[]string `json:"also_include_naming_schema,omitempty"`
	Auto                            *bool     `json:"auto,omitempty"`
	Compressed                      *bool     `json:"compressed,omitempty"`
	Compression                     *string   `json:"compression"`
	Direction                       *string   `json:"direction,omitempty"`
	Embed                           *bool     `json:"embed,omitempty"`
	Enabled                         *bool     `json:"enabled,omitempty"`
	Exclude                         *[]string `json:"exclude,omitempty"`
	HoldPendingSnapshots            *bool     `json:"hold_pending_snapshots,omitempty"`
	LargeBlock                      *bool     `json:"large_block,omitempty"`
	LifetimeUnit                    *string   `json:"lifetime_unit"`
	LifetimeValue                   *int      `json:"lifetime_value"`
	LoggingLevel                    *string   `json:"logging_level"`
	Name                            *string   `json:"name,omitempty"`
	NamingSchema                    *[]string `json:"naming_schema,omitempty"`
	NetcatActiveSide                *string   `json:"netcat_active_side"`
	NetcatActiveSideListenAddress   *string   `json:"netcat_active_side_listen_address"`
	NetcatActiveSidePortMax         *int      `json:"netcat_active_side_port_max"`
	NetcatActiveSidePortMin         *int      `json:"netcat_active_side_port_min"`
	NetcatPassiveSideConnectAddress *string   `json:"netcat_passive_side_connect_address"`
	OnlyMatchingSchedule            *bool     `json:"only_matching_schedule,omitempty"`
	PeriodicSnapshotTasks           *[]int    `json:"periodic_snapshot_tasks,omitempty"`
	Properties                      *bool     `json:"properties,omitempty"`
	Readonly                        *string   `json:"readonly,omitempty"`
	Recursive                       *bool     `json:"recursive,omitempty"`
	RestrictSchedule                *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"restrict_schedule,omitempty"`
	RetentionPolicy *string `json:"retention_policy,omitempty"`
	Retries         *int    `json:"retries,omitempty"`
	Schedule        *struct {
		Begin  *string `json:"begin,omitempty"`
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		End    *string `json:"end,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	SourceDatasets *[]string `json:"source_datasets,omitempty"`
	SpeedLimit     *int      `json:"speed_limit"`
	SshCredentials *int      `json:"ssh_credentials"`
	TargetDataset  *string   `json:"target_dataset,omitempty"`
	Transport      *string   `json:"transport,omitempty"`
}

// ReportingGetData defines model for reporting_get_data.
type ReportingGetData struct {
	Graphs         *ReportingGetData0 `json:"graphs,omitempty"`
	ReportingQuery *ReportingGetData1 `json:"reporting_query,omitempty"`
}

// ReportingGetData0 defines model for reporting_get_data_0.
type ReportingGetData0 []map[string]interface{}

// ReportingGetData1 defines model for reporting_get_data_1.
type ReportingGetData1 struct {
	Aggregate *bool   `json:"aggregate,omitempty"`
	End       *string `json:"end,omitempty"`
	Page      *int    `json:"page,omitempty"`
	Start     *string `json:"start,omitempty"`
	Unit      *string `json:"unit,omitempty"`
}

// ReportingUpdate0 defines model for reporting_update_0.
type ReportingUpdate0 struct {
	ConfirmRrdDestroy *bool   `json:"confirm_rrd_destroy,omitempty"`
	CpuInPercentage   *bool   `json:"cpu_in_percentage,omitempty"`
	GraphAge          *int    `json:"graph_age,omitempty"`
	GraphPoints       *int    `json:"graph_points,omitempty"`
	Graphite          *string `json:"graphite,omitempty"`
}

// RouteIpv4gwReachable0 defines model for route_ipv4gw_reachable_0.
type RouteIpv4gwReachable0 string

// RsyncdUpdate0 defines model for rsyncd_update_0.
type RsyncdUpdate0 struct {
	Auxiliary *string `json:"auxiliary,omitempty"`
	Port      *int    `json:"port,omitempty"`
}

// RsyncmodCreate0 defines model for rsyncmod_create_0.
type RsyncmodCreate0 struct {
	Auxiliary  *string   `json:"auxiliary,omitempty"`
	Comment    *string   `json:"comment,omitempty"`
	Group      *string   `json:"group,omitempty"`
	Hostsallow *[]string `json:"hostsallow,omitempty"`
	Hostsdeny  *[]string `json:"hostsdeny,omitempty"`
	Maxconn    *int      `json:"maxconn,omitempty"`
	Mode       *string   `json:"mode,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Path       *string   `json:"path,omitempty"`
	User       *string   `json:"user,omitempty"`
}

// RsyncmodUpdate1 defines model for rsyncmod_update_1.
type RsyncmodUpdate1 struct {
	Auxiliary  *string   `json:"auxiliary,omitempty"`
	Comment    *string   `json:"comment,omitempty"`
	Group      *string   `json:"group,omitempty"`
	Hostsallow *[]string `json:"hostsallow,omitempty"`
	Hostsdeny  *[]string `json:"hostsdeny,omitempty"`
	Maxconn    *int      `json:"maxconn,omitempty"`
	Mode       *string   `json:"mode,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Path       *string   `json:"path,omitempty"`
	User       *string   `json:"user,omitempty"`
}

// RsynctaskCreate0 defines model for rsynctask_create_0.
type RsynctaskCreate0 struct {
	Archive      *bool     `json:"archive,omitempty"`
	Compress     *bool     `json:"compress,omitempty"`
	Delayupdates *bool     `json:"delayupdates,omitempty"`
	Delete       *bool     `json:"delete,omitempty"`
	Desc         *string   `json:"desc,omitempty"`
	Direction    *string   `json:"direction,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Extra        *[]string `json:"extra,omitempty"`
	Mode         *string   `json:"mode,omitempty"`
	Path         *string   `json:"path,omitempty"`
	Preserveattr *bool     `json:"preserveattr,omitempty"`
	Preserveperm *bool     `json:"preserveperm,omitempty"`
	Quiet        *bool     `json:"quiet,omitempty"`
	Recursive    *bool     `json:"recursive,omitempty"`
	Remotehost   *string   `json:"remotehost,omitempty"`
	Remotemodule *string   `json:"remotemodule,omitempty"`
	Remotepath   *string   `json:"remotepath,omitempty"`
	Remoteport   *int      `json:"remoteport,omitempty"`
	Schedule     *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Times         *bool   `json:"times,omitempty"`
	User          *string `json:"user,omitempty"`
	ValidateRpath *bool   `json:"validate_rpath,omitempty"`
}

// RsynctaskRun defines model for rsynctask_run.
type RsynctaskRun map[string]interface{}

// RsynctaskUpdate1 defines model for rsynctask_update_1.
type RsynctaskUpdate1 struct {
	Archive      *bool     `json:"archive,omitempty"`
	Compress     *bool     `json:"compress,omitempty"`
	Delayupdates *bool     `json:"delayupdates,omitempty"`
	Delete       *bool     `json:"delete,omitempty"`
	Desc         *string   `json:"desc,omitempty"`
	Direction    *string   `json:"direction,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Extra        *[]string `json:"extra,omitempty"`
	Mode         *string   `json:"mode,omitempty"`
	Path         *string   `json:"path,omitempty"`
	Preserveattr *bool     `json:"preserveattr,omitempty"`
	Preserveperm *bool     `json:"preserveperm,omitempty"`
	Quiet        *bool     `json:"quiet,omitempty"`
	Recursive    *bool     `json:"recursive,omitempty"`
	Remotehost   *string   `json:"remotehost,omitempty"`
	Remotemodule *string   `json:"remotemodule,omitempty"`
	Remotepath   *string   `json:"remotepath,omitempty"`
	Remoteport   *int      `json:"remoteport,omitempty"`
	Schedule     *struct {
		Dom    *string `json:"dom,omitempty"`
		Dow    *string `json:"dow,omitempty"`
		Hour   *string `json:"hour,omitempty"`
		Minute *string `json:"minute,omitempty"`
		Month  *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Times         *bool   `json:"times,omitempty"`
	User          *string `json:"user,omitempty"`
	ValidateRpath *bool   `json:"validate_rpath,omitempty"`
}

// S3Update0 defines model for s3_update_0.
type S3Update0 struct {
	AccessKey   *string `json:"access_key,omitempty"`
	Bindip      *string `json:"bindip,omitempty"`
	Bindport    *int    `json:"bindport,omitempty"`
	Browser     *bool   `json:"browser,omitempty"`
	Certificate *int    `json:"certificate"`
	SecretKey   *string `json:"secret_key,omitempty"`
	StoragePath *string `json:"storage_path,omitempty"`
}

// ServiceReload defines model for service_reload.
type ServiceReload struct {
	Service        *ServiceReload0 `json:"service,omitempty"`
	ServiceControl *ServiceReload1 `json:"service-control,omitempty"`
}

// ServiceReload0 defines model for service_reload_0.
type ServiceReload0 string

// ServiceReload1 defines model for service_reload_1.
type ServiceReload1 struct {
	Onetime *bool `json:"onetime,omitempty"`
	Sync    *bool `json:"sync"`
	Wait    *bool `json:"wait"`
}

// ServiceRestart defines model for service_restart.
type ServiceRestart struct {
	Service        *ServiceRestart0 `json:"service,omitempty"`
	ServiceControl *ServiceRestart1 `json:"service-control,omitempty"`
}

// ServiceRestart0 defines model for service_restart_0.
type ServiceRestart0 string

// ServiceRestart1 defines model for service_restart_1.
type ServiceRestart1 struct {
	Onetime *bool `json:"onetime,omitempty"`
	Sync    *bool `json:"sync"`
	Wait    *bool `json:"wait"`
}

// ServiceStart defines model for service_start.
type ServiceStart struct {
	Service        *ServiceStart0 `json:"service,omitempty"`
	ServiceControl *ServiceStart1 `json:"service-control,omitempty"`
}

// ServiceStart0 defines model for service_start_0.
type ServiceStart0 string

// ServiceStart1 defines model for service_start_1.
type ServiceStart1 struct {
	Onetime *bool `json:"onetime,omitempty"`
	Sync    *bool `json:"sync"`
	Wait    *bool `json:"wait"`
}

// ServiceStop defines model for service_stop.
type ServiceStop struct {
	Service        *ServiceStop0 `json:"service,omitempty"`
	ServiceControl *ServiceStop1 `json:"service-control,omitempty"`
}

// ServiceStop0 defines model for service_stop_0.
type ServiceStop0 string

// ServiceStop1 defines model for service_stop_1.
type ServiceStop1 struct {
	Onetime *bool `json:"onetime,omitempty"`
	Sync    *bool `json:"sync"`
	Wait    *bool `json:"wait"`
}

// ServiceTerminateProcess defines model for service_terminate_process.
type ServiceTerminateProcess struct {
	Pid     *ServiceTerminateProcess0 `json:"pid,omitempty"`
	Timeout *ServiceTerminateProcess1 `json:"timeout,omitempty"`
}

// ServiceTerminateProcess0 defines model for service_terminate_process_0.
type ServiceTerminateProcess0 int

// ServiceTerminateProcess1 defines model for service_terminate_process_1.
type ServiceTerminateProcess1 int

// ServiceUpdate1 defines model for service_update_1.
type ServiceUpdate1 struct {
	Enable *bool `json:"enable,omitempty"`
}

// SharingAfpCreate0 defines model for sharing_afp_create_0.
type SharingAfpCreate0 struct {
	Allow            *[]interface{} `json:"allow,omitempty"`
	Auxparams        *string        `json:"auxparams,omitempty"`
	Comment          *string        `json:"comment,omitempty"`
	Deny             *[]interface{} `json:"deny,omitempty"`
	Dperm            *string        `json:"dperm,omitempty"`
	Enabled          *bool          `json:"enabled,omitempty"`
	Fperm            *string        `json:"fperm,omitempty"`
	Home             *bool          `json:"home,omitempty"`
	Hostsallow       *[]interface{} `json:"hostsallow,omitempty"`
	Hostsdeny        *[]interface{} `json:"hostsdeny,omitempty"`
	Name             *string        `json:"name,omitempty"`
	Nodev            *bool          `json:"nodev,omitempty"`
	Nostat           *bool          `json:"nostat,omitempty"`
	Path             *string        `json:"path,omitempty"`
	Ro               *[]interface{} `json:"ro,omitempty"`
	Rw               *[]interface{} `json:"rw,omitempty"`
	Timemachine      *bool          `json:"timemachine,omitempty"`
	TimemachineQuota *int           `json:"timemachine_quota,omitempty"`
	Umask            *string        `json:"umask,omitempty"`
	Upriv            *bool          `json:"upriv,omitempty"`
	Vuid             *string        `json:"vuid"`
}

// SharingAfpUpdate1 defines model for sharing_afp_update_1.
type SharingAfpUpdate1 struct {
	Allow            *[]interface{} `json:"allow,omitempty"`
	Auxparams        *string        `json:"auxparams,omitempty"`
	Comment          *string        `json:"comment,omitempty"`
	Deny             *[]interface{} `json:"deny,omitempty"`
	Dperm            *string        `json:"dperm,omitempty"`
	Enabled          *bool          `json:"enabled,omitempty"`
	Fperm            *string        `json:"fperm,omitempty"`
	Home             *bool          `json:"home,omitempty"`
	Hostsallow       *[]interface{} `json:"hostsallow,omitempty"`
	Hostsdeny        *[]interface{} `json:"hostsdeny,omitempty"`
	Name             *string        `json:"name,omitempty"`
	Nodev            *bool          `json:"nodev,omitempty"`
	Nostat           *bool          `json:"nostat,omitempty"`
	Path             *string        `json:"path,omitempty"`
	Ro               *[]interface{} `json:"ro,omitempty"`
	Rw               *[]interface{} `json:"rw,omitempty"`
	Timemachine      *bool          `json:"timemachine,omitempty"`
	TimemachineQuota *int           `json:"timemachine_quota,omitempty"`
	Umask            *string        `json:"umask,omitempty"`
	Upriv            *bool          `json:"upriv,omitempty"`
	Vuid             *string        `json:"vuid"`
}

// SharingNfsCreate0 defines model for sharing_nfs_create_0.
type SharingNfsCreate0 struct {
	Alldirs      *bool     `json:"alldirs,omitempty"`
	Comment      *string   `json:"comment,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Hosts        *[]string `json:"hosts,omitempty"`
	MapallGroup  *string   `json:"mapall_group"`
	MapallUser   *string   `json:"mapall_user"`
	MaprootGroup *string   `json:"maproot_group"`
	MaprootUser  *string   `json:"maproot_user"`
	Networks     *[]string `json:"networks,omitempty"`
	Paths        *[]string `json:"paths,omitempty"`
	Quiet        *bool     `json:"quiet,omitempty"`
	Ro           *bool     `json:"ro,omitempty"`
	Security     *[]string `json:"security,omitempty"`
}

// SharingNfsUpdate1 defines model for sharing_nfs_update_1.
type SharingNfsUpdate1 struct {
	Alldirs      *bool     `json:"alldirs,omitempty"`
	Comment      *string   `json:"comment,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Hosts        *[]string `json:"hosts,omitempty"`
	MapallGroup  *string   `json:"mapall_group"`
	MapallUser   *string   `json:"mapall_user"`
	MaprootGroup *string   `json:"maproot_group"`
	MaprootUser  *string   `json:"maproot_user"`
	Networks     *[]string `json:"networks,omitempty"`
	Paths        *[]string `json:"paths,omitempty"`
	Quiet        *bool     `json:"quiet,omitempty"`
	Ro           *bool     `json:"ro,omitempty"`
	Security     *[]string `json:"security,omitempty"`
}

// SharingSmbCreate0 defines model for sharing_smb_create_0.
type SharingSmbCreate0 struct {
	Abe             *bool          `json:"abe,omitempty"`
	Auxsmbconf      *string        `json:"auxsmbconf,omitempty"`
	Browsable       *bool          `json:"browsable,omitempty"`
	Comment         *string        `json:"comment,omitempty"`
	Enabled         *bool          `json:"enabled,omitempty"`
	Guestok         *bool          `json:"guestok,omitempty"`
	Guestonly       *bool          `json:"guestonly,omitempty"`
	Home            *bool          `json:"home,omitempty"`
	Hostsallow      *[]interface{} `json:"hostsallow,omitempty"`
	Hostsdeny       *[]interface{} `json:"hostsdeny,omitempty"`
	Name            *string        `json:"name,omitempty"`
	Path            *string        `json:"path,omitempty"`
	Recyclebin      *bool          `json:"recyclebin,omitempty"`
	Ro              *bool          `json:"ro,omitempty"`
	Shadowcopy      *bool          `json:"shadowcopy,omitempty"`
	Showhiddenfiles *bool          `json:"showhiddenfiles,omitempty"`
	Timemachine     *bool          `json:"timemachine,omitempty"`
	Vfsobjects      *[]interface{} `json:"vfsobjects,omitempty"`
}

// SharingSmbUpdate1 defines model for sharing_smb_update_1.
type SharingSmbUpdate1 struct {
	Abe             *bool          `json:"abe,omitempty"`
	Auxsmbconf      *string        `json:"auxsmbconf,omitempty"`
	Browsable       *bool          `json:"browsable,omitempty"`
	Comment         *string        `json:"comment,omitempty"`
	Enabled         *bool          `json:"enabled,omitempty"`
	Guestok         *bool          `json:"guestok,omitempty"`
	Guestonly       *bool          `json:"guestonly,omitempty"`
	Home            *bool          `json:"home,omitempty"`
	Hostsallow      *[]interface{} `json:"hostsallow,omitempty"`
	Hostsdeny       *[]interface{} `json:"hostsdeny,omitempty"`
	Name            *string        `json:"name,omitempty"`
	Path            *string        `json:"path,omitempty"`
	Recyclebin      *bool          `json:"recyclebin,omitempty"`
	Ro              *bool          `json:"ro,omitempty"`
	Shadowcopy      *bool          `json:"shadowcopy,omitempty"`
	Showhiddenfiles *bool          `json:"showhiddenfiles,omitempty"`
	Timemachine     *bool          `json:"timemachine,omitempty"`
	Vfsobjects      *[]interface{} `json:"vfsobjects,omitempty"`
}

// SharingWebdavCreate0 defines model for sharing_webdav_create_0.
type SharingWebdavCreate0 struct {
	Comment *string `json:"comment,omitempty"`
	Name    *string `json:"name,omitempty"`
	Path    *string `json:"path,omitempty"`
	Perm    *bool   `json:"perm,omitempty"`
	Ro      *bool   `json:"ro,omitempty"`
}

// SharingWebdavUpdate1 defines model for sharing_webdav_update_1.
type SharingWebdavUpdate1 struct {
	Comment *string `json:"comment,omitempty"`
	Name    *string `json:"name,omitempty"`
	Path    *string `json:"path,omitempty"`
	Perm    *bool   `json:"perm,omitempty"`
	Ro      *bool   `json:"ro,omitempty"`
}

// SmartTestCreate0 defines model for smart_test_create_0.
type SmartTestCreate0 struct {
	AllDisks *bool     `json:"all_disks,omitempty"`
	Desc     *string   `json:"desc,omitempty"`
	Disks    *[]string `json:"disks,omitempty"`
	Schedule *struct {
		Dom   *string `json:"dom,omitempty"`
		Dow   *string `json:"dow,omitempty"`
		Hour  *string `json:"hour,omitempty"`
		Month *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Type *string `json:"type,omitempty"`
}

// SmartTestUpdate1 defines model for smart_test_update_1.
type SmartTestUpdate1 struct {
	AllDisks *bool     `json:"all_disks,omitempty"`
	Desc     *string   `json:"desc,omitempty"`
	Disks    *[]string `json:"disks,omitempty"`
	Schedule *struct {
		Dom   *string `json:"dom,omitempty"`
		Dow   *string `json:"dow,omitempty"`
		Hour  *string `json:"hour,omitempty"`
		Month *string `json:"month,omitempty"`
	} `json:"schedule,omitempty"`
	Type *string `json:"type,omitempty"`
}

// SmartUpdate0 defines model for smart_update_0.
type SmartUpdate0 struct {
	Critical      *int    `json:"critical,omitempty"`
	Difference    *int    `json:"difference,omitempty"`
	Informational *int    `json:"informational,omitempty"`
	Interval      *int    `json:"interval,omitempty"`
	Powermode     *string `json:"powermode,omitempty"`
}

// SmbSharesecCreate0 defines model for smb_sharesec_create_0.
type SmbSharesecCreate0 struct {
	ShareAcl  *[]map[string]interface{} `json:"share_acl,omitempty"`
	ShareName *string                   `json:"share_name,omitempty"`
}

// SmbSharesecGetacl defines model for smb_sharesec_getacl.
type SmbSharesecGetacl struct {
	Options   *SmbSharesecGetacl1 `json:"options,omitempty"`
	ShareName *SmbSharesecGetacl0 `json:"share_name,omitempty"`
}

// SmbSharesecGetacl0 defines model for smb_sharesec_getacl_0.
type SmbSharesecGetacl0 string

// SmbSharesecGetacl1 defines model for smb_sharesec_getacl_1.
type SmbSharesecGetacl1 struct {
	ResolveSids *bool `json:"resolve_sids,omitempty"`
}

// SmbSharesecUpdate1 defines model for smb_sharesec_update_1.
type SmbSharesecUpdate1 struct {
	ShareAcl *[]map[string]interface{} `json:"share_acl,omitempty"`
}

// SmbUpdate0 defines model for smb_update_0.
type SmbUpdate0 struct {
	AdminGroup   *string   `json:"admin_group"`
	Bindip       *[]string `json:"bindip,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Dirmask      *string   `json:"dirmask,omitempty"`
	EnableSmb1   *bool     `json:"enable_smb1,omitempty"`
	Filemask     *string   `json:"filemask,omitempty"`
	Guest        *string   `json:"guest,omitempty"`
	Localmaster  *bool     `json:"localmaster,omitempty"`
	Loglevel     *string   `json:"loglevel,omitempty"`
	Netbiosalias *[]string `json:"netbiosalias,omitempty"`
	Netbiosname  *string   `json:"netbiosname,omitempty"`
	NetbiosnameB *string   `json:"netbiosname_b,omitempty"`
	Ntlmv1Auth   *bool     `json:"ntlmv1_auth,omitempty"`
	SmbOptions   *string   `json:"smb_options,omitempty"`
	Syslog       *bool     `json:"syslog,omitempty"`
	Unixcharset  *string   `json:"unixcharset,omitempty"`
	Workgroup    *string   `json:"workgroup,omitempty"`
	Zeroconf     *bool     `json:"zeroconf,omitempty"`
}

// SnmpUpdate0 defines model for snmp_update_0.
type SnmpUpdate0 struct {
	Community        *string `json:"community,omitempty"`
	Contact          *string `json:"contact,omitempty"`
	Location         *string `json:"location,omitempty"`
	Loglevel         *int    `json:"loglevel,omitempty"`
	Options          *string `json:"options,omitempty"`
	Traps            *bool   `json:"traps,omitempty"`
	V3               *bool   `json:"v3,omitempty"`
	V3Authtype       *string `json:"v3_authtype,omitempty"`
	V3Password       *string `json:"v3_password,omitempty"`
	V3Privpassphrase *string `json:"v3_privpassphrase,omitempty"`
	V3Privproto      *string `json:"v3_privproto"`
	V3Username       *string `json:"v3_username,omitempty"`
	Zilstat          *bool   `json:"zilstat,omitempty"`
}

// SshUpdate0 defines model for ssh_update_0.
type SshUpdate0 struct {
	Bindiface       *[]string `json:"bindiface,omitempty"`
	Compression     *bool     `json:"compression,omitempty"`
	Kerberosauth    *bool     `json:"kerberosauth,omitempty"`
	Options         *string   `json:"options,omitempty"`
	Passwordauth    *bool     `json:"passwordauth,omitempty"`
	Rootlogin       *bool     `json:"rootlogin,omitempty"`
	SftpLogFacility *string   `json:"sftp_log_facility,omitempty"`
	SftpLogLevel    *string   `json:"sftp_log_level,omitempty"`
	Tcpfwd          *bool     `json:"tcpfwd,omitempty"`
	Tcpport         *int      `json:"tcpport,omitempty"`
}

// StaticrouteCreate0 defines model for staticroute_create_0.
type StaticrouteCreate0 struct {
	Description *string `json:"description,omitempty"`
	Destination *string `json:"destination,omitempty"`
	Gateway     *string `json:"gateway,omitempty"`
}

// StaticrouteUpdate1 defines model for staticroute_update_1.
type StaticrouteUpdate1 struct {
	Description *string `json:"description,omitempty"`
	Destination *string `json:"destination,omitempty"`
	Gateway     *string `json:"gateway,omitempty"`
}

// StatsGetData defines model for stats_get_data.
type StatsGetData struct {
	StatsFilter *StatsGetData1 `json:"stats-filter,omitempty"`
	StatsList   *StatsGetData0 `json:"stats_list,omitempty"`
}

// StatsGetData0 defines model for stats_get_data_0.
type StatsGetData0 []map[string]interface{}

// StatsGetData1 defines model for stats_get_data_1.
type StatsGetData1 struct {
	End   *string `json:"end,omitempty"`
	Start *string `json:"start,omitempty"`
	Step  *int    `json:"step,omitempty"`
}

// StatsGetDatasetInfo defines model for stats_get_dataset_info.
type StatsGetDatasetInfo struct {
	Source *StatsGetDatasetInfo0 `json:"source,omitempty"`
	Type   *StatsGetDatasetInfo1 `json:"type,omitempty"`
}

// StatsGetDatasetInfo0 defines model for stats_get_dataset_info_0.
type StatsGetDatasetInfo0 string

// StatsGetDatasetInfo1 defines model for stats_get_dataset_info_1.
type StatsGetDatasetInfo1 string

// SupportFetchCategories defines model for support_fetch_categories.
type SupportFetchCategories struct {
	Password *SupportFetchCategories1 `json:"password,omitempty"`
	Username *SupportFetchCategories0 `json:"username,omitempty"`
}

// SupportFetchCategories0 defines model for support_fetch_categories_0.
type SupportFetchCategories0 string

// SupportFetchCategories1 defines model for support_fetch_categories_1.
type SupportFetchCategories1 string

// SupportNewTicket0 defines model for support_new_ticket_0.
type SupportNewTicket0 struct {
	AttachDebug *bool   `json:"attach_debug,omitempty"`
	Body        *string `json:"body,omitempty"`
	Category    *string `json:"category,omitempty"`
	Criticality *string `json:"criticality,omitempty"`
	Email       *string `json:"email,omitempty"`
	Environment *string `json:"environment,omitempty"`
	Name        *string `json:"name,omitempty"`
	Password    *string `json:"password,omitempty"`
	Phone       *string `json:"phone,omitempty"`
	Title       *string `json:"title,omitempty"`
	Type        *string `json:"type,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// SupportUpdate0 defines model for support_update_0.
type SupportUpdate0 struct {
	Email          *string `json:"email,omitempty"`
	Enabled        *bool   `json:"enabled"`
	Name           *string `json:"name,omitempty"`
	Phone          *string `json:"phone,omitempty"`
	SecondaryEmail *string `json:"secondary_email,omitempty"`
	SecondaryName  *string `json:"secondary_name,omitempty"`
	SecondaryPhone *string `json:"secondary_phone,omitempty"`
	SecondaryTitle *string `json:"secondary_title,omitempty"`
	Title          *string `json:"title,omitempty"`
}

// SystemAdvancedUpdate0 defines model for system_advanced_update_0.
type SystemAdvancedUpdate0 struct {
	Advancedmode  *bool   `json:"advancedmode,omitempty"`
	Anonstats     *bool   `json:"anonstats,omitempty"`
	Autotune      *bool   `json:"autotune,omitempty"`
	BootScrub     *int    `json:"boot_scrub,omitempty"`
	Consolemenu   *bool   `json:"consolemenu,omitempty"`
	Consolemsg    *bool   `json:"consolemsg,omitempty"`
	Debugkernel   *bool   `json:"debugkernel,omitempty"`
	FqdnSyslog    *bool   `json:"fqdn_syslog,omitempty"`
	LegacyUi      *bool   `json:"legacy_ui,omitempty"`
	Motd          *string `json:"motd,omitempty"`
	Powerdaemon   *bool   `json:"powerdaemon,omitempty"`
	SedPasswd     *string `json:"sed_passwd,omitempty"`
	SedUser       *string `json:"sed_user,omitempty"`
	Serialconsole *bool   `json:"serialconsole,omitempty"`
	Serialport    *string `json:"serialport,omitempty"`
	Serialspeed   *string `json:"serialspeed,omitempty"`
	Swapondrive   *int    `json:"swapondrive,omitempty"`
	Traceback     *bool   `json:"traceback,omitempty"`
	Uploadcrash   *bool   `json:"uploadcrash,omitempty"`
}

// SystemFeatureEnabled0 defines model for system_feature_enabled_0.
type SystemFeatureEnabled0 string

// List of SystemFeatureEnabled0
const (
	SystemFeatureEnabled0_DEDUP        SystemFeatureEnabled0 = "DEDUP"
	SystemFeatureEnabled0_FIBRECHANNEL SystemFeatureEnabled0 = "FIBRECHANNEL"
	SystemFeatureEnabled0_JAILS        SystemFeatureEnabled0 = "JAILS"
	SystemFeatureEnabled0_VM           SystemFeatureEnabled0 = "VM"
)

// SystemGeneralUpdate0 defines model for system_general_update_0.
type SystemGeneralUpdate0 struct {
	CrashReporting  *bool     `json:"crash_reporting"`
	Kbdmap          *string   `json:"kbdmap,omitempty"`
	Language        *string   `json:"language,omitempty"`
	Sysloglevel     *string   `json:"sysloglevel,omitempty"`
	Syslogserver    *string   `json:"syslogserver,omitempty"`
	Timezone        *string   `json:"timezone,omitempty"`
	UiAddress       *[]string `json:"ui_address,omitempty"`
	UiCertificate   *int      `json:"ui_certificate"`
	UiHttpsport     *int      `json:"ui_httpsport,omitempty"`
	UiHttpsredirect *bool     `json:"ui_httpsredirect,omitempty"`
	UiPort          *int      `json:"ui_port,omitempty"`
	UiV6address     *[]string `json:"ui_v6address,omitempty"`
	UsageCollection *bool     `json:"usage_collection"`
}

// SystemLicenseUpdate0 defines model for system_license_update_0.
type SystemLicenseUpdate0 string

// SystemNtpserverCreate0 defines model for system_ntpserver_create_0.
type SystemNtpserverCreate0 struct {
	Address *string `json:"address,omitempty"`
	Burst   *bool   `json:"burst,omitempty"`
	Force   *bool   `json:"force,omitempty"`
	Iburst  *bool   `json:"iburst,omitempty"`
	Maxpoll *int    `json:"maxpoll,omitempty"`
	Minpoll *int    `json:"minpoll,omitempty"`
	Prefer  *bool   `json:"prefer,omitempty"`
}

// SystemNtpserverUpdate1 defines model for system_ntpserver_update_1.
type SystemNtpserverUpdate1 struct {
	Address *string `json:"address,omitempty"`
	Burst   *bool   `json:"burst,omitempty"`
	Force   *bool   `json:"force,omitempty"`
	Iburst  *bool   `json:"iburst,omitempty"`
	Maxpoll *int    `json:"maxpoll,omitempty"`
	Minpoll *int    `json:"minpoll,omitempty"`
	Prefer  *bool   `json:"prefer,omitempty"`
}

// SystemReboot0 defines model for system_reboot_0.
type SystemReboot0 struct {
	Delay *int `json:"delay,omitempty"`
}

// SystemShutdown0 defines model for system_shutdown_0.
type SystemShutdown0 struct {
	Delay *int `json:"delay,omitempty"`
}

// SystemdatasetUpdate0 defines model for systemdataset_update_0.
type SystemdatasetUpdate0 struct {
	Pool        *string `json:"pool"`
	PoolExclude *string `json:"pool_exclude"`
	Syslog      *bool   `json:"syslog,omitempty"`
}

// TftpUpdate0 defines model for tftp_update_0.
type TftpUpdate0 struct {
	Directory *string `json:"directory,omitempty"`
	Host      *string `json:"host,omitempty"`
	Newfiles  *bool   `json:"newfiles,omitempty"`
	Options   *string `json:"options,omitempty"`
	Port      *int    `json:"port,omitempty"`
	Umask     *string `json:"umask,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// TunableCreate0 defines model for tunable_create_0.
type TunableCreate0 struct {
	Comment *string `json:"comment,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
	Type    *string `json:"type,omitempty"`
	Value   *string `json:"value,omitempty"`
	Var     *string `json:"var,omitempty"`
}

// TunableUpdate1 defines model for tunable_update_1.
type TunableUpdate1 struct {
	Comment *string `json:"comment,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
	Type    *string `json:"type,omitempty"`
	Value   *string `json:"value,omitempty"`
	Var     *string `json:"var,omitempty"`
}

// UpdateCheckAvailable0 defines model for update_check_available_0.
type UpdateCheckAvailable0 struct {
	Train *string `json:"train,omitempty"`
}

// UpdateGetPending0 defines model for update_get_pending_0.
type UpdateGetPending0 string

// UpdateManual0 defines model for update_manual_0.
type UpdateManual0 string

// UpdateSetTrain0 defines model for update_set_train_0.
type UpdateSetTrain0 string

// UpdateUpdate0 defines model for update_update_0.
type UpdateUpdate0 struct {
	Reboot *bool   `json:"reboot,omitempty"`
	Train  *string `json:"train,omitempty"`
}

// UpsUpdate0 defines model for ups_update_0.
type UpsUpdate0 struct {
	Description    *string   `json:"description,omitempty"`
	Driver         *string   `json:"driver,omitempty"`
	Emailnotify    *bool     `json:"emailnotify,omitempty"`
	Extrausers     *string   `json:"extrausers,omitempty"`
	Hostsync       *int      `json:"hostsync,omitempty"`
	Identifier     *string   `json:"identifier,omitempty"`
	Mode           *string   `json:"mode,omitempty"`
	Monpwd         *string   `json:"monpwd,omitempty"`
	Monuser        *string   `json:"monuser,omitempty"`
	Nocommwarntime *int      `json:"nocommwarntime"`
	Options        *string   `json:"options,omitempty"`
	Optionsupsd    *string   `json:"optionsupsd,omitempty"`
	Port           *string   `json:"port,omitempty"`
	Powerdown      *bool     `json:"powerdown,omitempty"`
	Remotehost     *string   `json:"remotehost,omitempty"`
	Remoteport     *int      `json:"remoteport,omitempty"`
	Rmonitor       *bool     `json:"rmonitor,omitempty"`
	Shutdown       *string   `json:"shutdown,omitempty"`
	Shutdowncmd    *string   `json:"shutdowncmd"`
	Shutdowntimer  *int      `json:"shutdowntimer,omitempty"`
	Subject        *string   `json:"subject,omitempty"`
	Toemail        *[]string `json:"toemail,omitempty"`
}

// UserCreate0 defines model for user_create_0.
type UserCreate0 struct {
	Attributes       *UserCreate0_Attributes `json:"attributes,omitempty"`
	Email            *string                 `json:"email"`
	FullName         *string                 `json:"full_name,omitempty"`
	Group            *int                    `json:"group,omitempty"`
	GroupCreate      *bool                   `json:"group_create,omitempty"`
	Groups           *[]interface{}          `json:"groups,omitempty"`
	Home             *string                 `json:"home,omitempty"`
	HomeMode         *string                 `json:"home_mode,omitempty"`
	Locked           *bool                   `json:"locked,omitempty"`
	MicrosoftAccount *bool                   `json:"microsoft_account,omitempty"`
	Password         *string                 `json:"password,omitempty"`
	PasswordDisabled *bool                   `json:"password_disabled,omitempty"`
	Shell            *string                 `json:"shell,omitempty"`
	Sshpubkey        *string                 `json:"sshpubkey"`
	Sudo             *bool                   `json:"sudo,omitempty"`
	Uid              *int                    `json:"uid,omitempty"`
	Username         *string                 `json:"username,omitempty"`
}

// UserCreate0_Attributes defines model for UserCreate0.Attributes.
type UserCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UserDelete1 defines model for user_delete_1.
type UserDelete1 struct {
	DeleteGroup *bool `json:"delete_group,omitempty"`
}

// UserGetUserObj0 defines model for user_get_user_obj_0.
type UserGetUserObj0 struct {
	Uid      *int    `json:"uid,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserPopAttribute1 defines model for user_pop_attribute_1.
type UserPopAttribute1 string

// UserSetAttribute defines model for user_set_attribute.
type UserSetAttribute struct {
	Key   *UserSetAttribute1 `json:"key,omitempty"`
	Value *UserSetAttribute2 `json:"value,omitempty"`
}

// UserSetAttribute1 defines model for user_set_attribute_1.
type UserSetAttribute1 string

// UserSetAttribute2 defines model for user_set_attribute_2.
type UserSetAttribute2 interface{}

// UserUpdate1 defines model for user_update_1.
type UserUpdate1 struct {
	Attributes       *UserUpdate1_Attributes `json:"attributes,omitempty"`
	Email            *string                 `json:"email"`
	FullName         *string                 `json:"full_name,omitempty"`
	Group            *int                    `json:"group,omitempty"`
	Groups           *[]interface{}          `json:"groups,omitempty"`
	Home             *string                 `json:"home,omitempty"`
	HomeMode         *string                 `json:"home_mode,omitempty"`
	Locked           *bool                   `json:"locked,omitempty"`
	MicrosoftAccount *bool                   `json:"microsoft_account,omitempty"`
	Password         *string                 `json:"password,omitempty"`
	PasswordDisabled *bool                   `json:"password_disabled,omitempty"`
	Shell            *string                 `json:"shell,omitempty"`
	Sshpubkey        *string                 `json:"sshpubkey"`
	Sudo             *bool                   `json:"sudo,omitempty"`
	Uid              *int                    `json:"uid,omitempty"`
	Username         *string                 `json:"username,omitempty"`
}

// UserUpdate1_Attributes defines model for UserUpdate1.Attributes.
type UserUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VmClone1 defines model for vm_clone_1.
type VmClone1 string

// VmCreate0 defines model for vm_create_0.
type VmCreate0 struct {
	Autostart   *bool                     `json:"autostart,omitempty"`
	Bootloader  *string                   `json:"bootloader,omitempty"`
	Description *string                   `json:"description,omitempty"`
	Devices     *[]map[string]interface{} `json:"devices,omitempty"`
	Grubconfig  *string                   `json:"grubconfig"`
	Memory      *int                      `json:"memory,omitempty"`
	Name        *string                   `json:"name,omitempty"`
	Time        *string                   `json:"time,omitempty"`
	Vcpus       *int                      `json:"vcpus,omitempty"`
}

// VmDeviceCreate0 defines model for vm_device_create_0.
type VmDeviceCreate0 struct {
	Attributes *VmDeviceCreate0_Attributes `json:"attributes,omitempty"`
	Dtype      *string                     `json:"dtype,omitempty"`
	Order      *int                        `json:"order"`
	Vm         *int                        `json:"vm,omitempty"`
}

// VmDeviceCreate0_Attributes defines model for VmDeviceCreate0.Attributes.
type VmDeviceCreate0_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VmDeviceDelete1 defines model for vm_device_delete_1.
type VmDeviceDelete1 struct {
	RawFile *bool `json:"raw_file,omitempty"`
	Zvol    *bool `json:"zvol,omitempty"`
}

// VmDeviceUpdate1 defines model for vm_device_update_1.
type VmDeviceUpdate1 struct {
	Attributes *VmDeviceUpdate1_Attributes `json:"attributes,omitempty"`
	Dtype      *string                     `json:"dtype,omitempty"`
	Order      *int                        `json:"order"`
	Vm         *int                        `json:"vm,omitempty"`
}

// VmDeviceUpdate1_Attributes defines model for VmDeviceUpdate1.Attributes.
type VmDeviceUpdate1_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VmGetAttachedIface0 defines model for vm_get_attached_iface_0.
type VmGetAttachedIface0 int

// VmGetAvailableMemory0 defines model for vm_get_available_memory_0.
type VmGetAvailableMemory0 bool

// VmGetConsole0 defines model for vm_get_console_0.
type VmGetConsole0 int

// VmGetVnc0 defines model for vm_get_vnc_0.
type VmGetVnc0 int

// VmRestart defines model for vm_restart.
type VmRestart map[string]interface{}

// VmStart1 defines model for vm_start_1.
type VmStart1 struct {
	Overcommit *bool `json:"overcommit,omitempty"`
}

// VmStatus defines model for vm_status.
type VmStatus map[string]interface{}

// VmStop1 defines model for vm_stop_1.
type VmStop1 bool

// VmUpdate1 defines model for vm_update_1.
type VmUpdate1 struct {
	Autostart   *bool                     `json:"autostart,omitempty"`
	Bootloader  *string                   `json:"bootloader,omitempty"`
	Description *string                   `json:"description,omitempty"`
	Devices     *[]map[string]interface{} `json:"devices,omitempty"`
	Grubconfig  *string                   `json:"grubconfig"`
	Memory      *int                      `json:"memory,omitempty"`
	Name        *string                   `json:"name,omitempty"`
	Time        *string                   `json:"time,omitempty"`
	Vcpus       *int                      `json:"vcpus,omitempty"`
}

// VmwareCreate0 defines model for vmware_create_0.
type VmwareCreate0 struct {
	Datastore  *string `json:"datastore,omitempty"`
	Filesystem *string `json:"filesystem,omitempty"`
	Hostname   *string `json:"hostname,omitempty"`
	Password   *string `json:"password,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// VmwareDatasetHasVms defines model for vmware_dataset_has_vms.
type VmwareDatasetHasVms struct {
	Dataset   *VmwareDatasetHasVms0 `json:"dataset,omitempty"`
	Recursive *VmwareDatasetHasVms1 `json:"recursive,omitempty"`
}

// VmwareDatasetHasVms0 defines model for vmware_dataset_has_vms_0.
type VmwareDatasetHasVms0 string

// VmwareDatasetHasVms1 defines model for vmware_dataset_has_vms_1.
type VmwareDatasetHasVms1 bool

// VmwareGetDatastores0 defines model for vmware_get_datastores_0.
type VmwareGetDatastores0 struct {
	Hostname *string `json:"hostname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// VmwareGetVirtualMachines0 defines model for vmware_get_virtual_machines_0.
type VmwareGetVirtualMachines0 int

// VmwareMatchDatastoresWithDatasets0 defines model for vmware_match_datastores_with_datasets_0.
type VmwareMatchDatastoresWithDatasets0 struct {
	Hostname *string `json:"hostname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// VmwareUpdate1 defines model for vmware_update_1.
type VmwareUpdate1 struct {
	Datastore  *string `json:"datastore,omitempty"`
	Filesystem *string `json:"filesystem,omitempty"`
	Hostname   *string `json:"hostname,omitempty"`
	Password   *string `json:"password,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// WebdavUpdate0 defines model for webdav_update_0.
type WebdavUpdate0 struct {
	Certssl    *int    `json:"certssl"`
	Htauth     *string `json:"htauth,omitempty"`
	Password   *string `json:"password,omitempty"`
	Protocol   *string `json:"protocol,omitempty"`
	Tcpport    *int    `json:"tcpport,omitempty"`
	Tcpportssl *int    `json:"tcpportssl,omitempty"`
}

// ZfsSnapshotClone0 defines model for zfs_snapshot_clone_0.
type ZfsSnapshotClone0 struct {
	DatasetDst *string `json:"dataset_dst,omitempty"`
	Snapshot   *string `json:"snapshot,omitempty"`
}

// ZfsSnapshotCreate0 defines model for zfs_snapshot_create_0.
type ZfsSnapshotCreate0 struct {
	Dataset      *string                        `json:"dataset,omitempty"`
	Name         *string                        `json:"name,omitempty"`
	NamingSchema *string                        `json:"naming_schema,omitempty"`
	Properties   *ZfsSnapshotCreate0_Properties `json:"properties,omitempty"`
	Recursive    *bool                          `json:"recursive,omitempty"`
	VmwareSync   *bool                          `json:"vmware_sync,omitempty"`
}

// ZfsSnapshotCreate0_Properties defines model for ZfsSnapshotCreate0.Properties.
type ZfsSnapshotCreate0_Properties struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ZfsSnapshotDelete1 defines model for zfs_snapshot_delete_1.
type ZfsSnapshotDelete1 struct {
	Defer *bool `json:"defer,omitempty"`
}

// ZfsSnapshotRemove0 defines model for zfs_snapshot_remove_0.
type ZfsSnapshotRemove0 struct {
	Dataset     *string `json:"dataset,omitempty"`
	DeferDelete *bool   `json:"defer_delete,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ZfsSnapshotRollback defines model for zfs_snapshot_rollback.
type ZfsSnapshotRollback struct {
	Id      *ZfsSnapshotRollback0 `json:"id,omitempty"`
	Options *ZfsSnapshotRollback1 `json:"options,omitempty"`
}

// ZfsSnapshotRollback0 defines model for zfs_snapshot_rollback_0.
type ZfsSnapshotRollback0 string

// ZfsSnapshotRollback1 defines model for zfs_snapshot_rollback_1.
type ZfsSnapshotRollback1 struct {
	Force           *bool `json:"force,omitempty"`
	Recursive       *bool `json:"recursive,omitempty"`
	RecursiveClones *bool `json:"recursive_clones,omitempty"`
}

// GetAcmeDnsAuthenticatorParams defines parameters for GetAcmeDnsAuthenticator.
type GetAcmeDnsAuthenticatorParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostAcmeDnsAuthenticatorJSONBody defines parameters for PostAcmeDnsAuthenticator.
type PostAcmeDnsAuthenticatorJSONBody AcmeDnsAuthenticatorCreate0

// GetAcmeDnsAuthenticatorIdIdParams defines parameters for GetAcmeDnsAuthenticatorIdId.
type GetAcmeDnsAuthenticatorIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutAcmeDnsAuthenticatorIdIdJSONBody defines parameters for PutAcmeDnsAuthenticatorIdId.
type PutAcmeDnsAuthenticatorIdIdJSONBody AcmeDnsAuthenticatorUpdate1

// PutActivedirectoryJSONBody defines parameters for PutActivedirectory.
type PutActivedirectoryJSONBody ActivedirectoryUpdate0

// PostActivedirectoryLeaveJSONBody defines parameters for PostActivedirectoryLeave.
type PostActivedirectoryLeaveJSONBody ActivedirectoryLeave0

// PutAfpJSONBody defines parameters for PutAfp.
type PutAfpJSONBody AfpUpdate0

// PostAlertDismissJSONBody defines parameters for PostAlertDismiss.
type PostAlertDismissJSONBody AlertDismiss0

// PostAlertRestoreJSONBody defines parameters for PostAlertRestore.
type PostAlertRestoreJSONBody AlertRestore0

// PutAlertclassesJSONBody defines parameters for PutAlertclasses.
type PutAlertclassesJSONBody AlertclassesUpdate0

// GetAlertserviceParams defines parameters for GetAlertservice.
type GetAlertserviceParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostAlertserviceJSONBody defines parameters for PostAlertservice.
type PostAlertserviceJSONBody AlertserviceCreate0

// GetAlertserviceIdIdParams defines parameters for GetAlertserviceIdId.
type GetAlertserviceIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutAlertserviceIdIdJSONBody defines parameters for PutAlertserviceIdId.
type PutAlertserviceIdIdJSONBody AlertserviceUpdate1

// PostAlertserviceTestJSONBody defines parameters for PostAlertserviceTest.
type PostAlertserviceTestJSONBody AlertserviceTest0

// PostAuthCheckUserJSONBody defines parameters for PostAuthCheckUser.
type PostAuthCheckUserJSONBody AuthCheckUser

// PostAuthGenerateTokenJSONBody defines parameters for PostAuthGenerateToken.
type PostAuthGenerateTokenJSONBody AuthGenerateToken

// GetAuthSessionsParams defines parameters for GetAuthSessions.
type GetAuthSessionsParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostBackupJSONBody defines parameters for PostBackup.
type PostBackupJSONBody BackupCreate0

// PostBackupAzureGetBucketsJSONBody defines parameters for PostBackupAzureGetBuckets.
type PostBackupAzureGetBucketsJSONBody BackupAzureGetBuckets0

// PostBackupB2GetBucketsJSONBody defines parameters for PostBackupB2GetBuckets.
type PostBackupB2GetBucketsJSONBody BackupB2GetBuckets0

// GetBackupCredentialParams defines parameters for GetBackupCredential.
type GetBackupCredentialParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostBackupCredentialJSONBody defines parameters for PostBackupCredential.
type PostBackupCredentialJSONBody BackupCredentialCreate0

// GetBackupCredentialIdIdParams defines parameters for GetBackupCredentialIdId.
type GetBackupCredentialIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutBackupCredentialIdIdJSONBody defines parameters for PutBackupCredentialIdId.
type PutBackupCredentialIdIdJSONBody BackupCredentialUpdate1

// PostBackupGcsGetBucketsJSONBody defines parameters for PostBackupGcsGetBuckets.
type PostBackupGcsGetBucketsJSONBody BackupGcsGetBuckets0

// PutBackupIdIdJSONBody defines parameters for PutBackupIdId.
type PutBackupIdIdJSONBody BackupUpdate1

// PostBackupS3GetBucketsJSONBody defines parameters for PostBackupS3GetBuckets.
type PostBackupS3GetBucketsJSONBody BackupS3GetBuckets0

// PostBootAttachJSONBody defines parameters for PostBootAttach.
type PostBootAttachJSONBody BootAttach

// PostBootDetachJSONBody defines parameters for PostBootDetach.
type PostBootDetachJSONBody BootDetach0

// PostBootReplaceJSONBody defines parameters for PostBootReplace.
type PostBootReplaceJSONBody BootReplace

// PostBootSetScrubIntervalJSONBody defines parameters for PostBootSetScrubInterval.
type PostBootSetScrubIntervalJSONBody BootSetScrubInterval0

// GetBootenvParams defines parameters for GetBootenv.
type GetBootenvParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostBootenvJSONBody defines parameters for PostBootenv.
type PostBootenvJSONBody BootenvCreate0

// GetBootenvIdIdParams defines parameters for GetBootenvIdId.
type GetBootenvIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutBootenvIdIdJSONBody defines parameters for PutBootenvIdId.
type PutBootenvIdIdJSONBody BootenvUpdate1

// PostBootenvIdIdActivateJSONBody defines parameters for PostBootenvIdIdActivate.
type PostBootenvIdIdActivateJSONBody BootenvActivate

// PostBootenvIdIdSetAttributeJSONBody defines parameters for PostBootenvIdIdSetAttribute.
type PostBootenvIdIdSetAttributeJSONBody BootenvSetAttribute1

// GetCertificateParams defines parameters for GetCertificate.
type GetCertificateParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostCertificateJSONBody defines parameters for PostCertificate.
type PostCertificateJSONBody CertificateCreate0

// DeleteCertificateIdIdJSONBody defines parameters for DeleteCertificateIdId.
type DeleteCertificateIdIdJSONBody CertificateDelete1

// GetCertificateIdIdParams defines parameters for GetCertificateIdId.
type GetCertificateIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutCertificateIdIdJSONBody defines parameters for PutCertificateIdId.
type PutCertificateIdIdJSONBody CertificateUpdate1

// GetCertificateauthorityParams defines parameters for GetCertificateauthority.
type GetCertificateauthorityParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostCertificateauthorityJSONBody defines parameters for PostCertificateauthority.
type PostCertificateauthorityJSONBody CertificateauthorityCreate0

// PostCertificateauthorityCaSignCsrJSONBody defines parameters for PostCertificateauthorityCaSignCsr.
type PostCertificateauthorityCaSignCsrJSONBody CertificateauthorityCaSignCsr0

// GetCertificateauthorityIdIdParams defines parameters for GetCertificateauthorityIdId.
type GetCertificateauthorityIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutCertificateauthorityIdIdJSONBody defines parameters for PutCertificateauthorityIdId.
type PutCertificateauthorityIdIdJSONBody CertificateauthorityUpdate1

// GetCloudsyncParams defines parameters for GetCloudsync.
type GetCloudsyncParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostCloudsyncJSONBody defines parameters for PostCloudsync.
type PostCloudsyncJSONBody CloudsyncCreate0

// GetCloudsyncCredentialsParams defines parameters for GetCloudsyncCredentials.
type GetCloudsyncCredentialsParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostCloudsyncCredentialsJSONBody defines parameters for PostCloudsyncCredentials.
type PostCloudsyncCredentialsJSONBody CloudsyncCredentialsCreate0

// GetCloudsyncCredentialsIdIdParams defines parameters for GetCloudsyncCredentialsIdId.
type GetCloudsyncCredentialsIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutCloudsyncCredentialsIdIdJSONBody defines parameters for PutCloudsyncCredentialsIdId.
type PutCloudsyncCredentialsIdIdJSONBody CloudsyncCredentialsUpdate1

// PostCloudsyncCredentialsVerifyJSONBody defines parameters for PostCloudsyncCredentialsVerify.
type PostCloudsyncCredentialsVerifyJSONBody CloudsyncCredentialsVerify0

// GetCloudsyncIdIdParams defines parameters for GetCloudsyncIdId.
type GetCloudsyncIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutCloudsyncIdIdJSONBody defines parameters for PutCloudsyncIdId.
type PutCloudsyncIdIdJSONBody CloudsyncUpdate1

// PostCloudsyncIdIdAbortJSONBody defines parameters for PostCloudsyncIdIdAbort.
type PostCloudsyncIdIdAbortJSONBody CloudsyncAbort

// PostCloudsyncIdIdSyncJSONBody defines parameters for PostCloudsyncIdIdSync.
type PostCloudsyncIdIdSyncJSONBody CloudsyncSync

// PostCloudsyncListBucketsJSONBody defines parameters for PostCloudsyncListBuckets.
type PostCloudsyncListBucketsJSONBody CloudsyncListBuckets0

// PostCloudsyncListDirectoryJSONBody defines parameters for PostCloudsyncListDirectory.
type PostCloudsyncListDirectoryJSONBody CloudsyncListDirectory0

// PostCloudsyncOnedriveListDrivesJSONBody defines parameters for PostCloudsyncOnedriveListDrives.
type PostCloudsyncOnedriveListDrivesJSONBody CloudsyncOnedriveListDrives0

// PostConfigResetJSONBody defines parameters for PostConfigReset.
type PostConfigResetJSONBody ConfigReset0

// PostCoreBulkJSONBody defines parameters for PostCoreBulk.
type PostCoreBulkJSONBody CoreBulk

// PostCoreDebugJSONBody defines parameters for PostCoreDebug.
type PostCoreDebugJSONBody CoreDebug

// PostCoreDownloadJSONBody defines parameters for PostCoreDownload.
type PostCoreDownloadJSONBody CoreDownload

// GetCoreGetJobsParams defines parameters for GetCoreGetJobs.
type GetCoreGetJobsParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostCoreGetMethodsJSONBody defines parameters for PostCoreGetMethods.
type PostCoreGetMethodsJSONBody CoreGetMethods0

// PostCoreJobAbortJSONBody defines parameters for PostCoreJobAbort.
type PostCoreJobAbortJSONBody CoreJobAbort0

// PostCoreJobUpdateJSONBody defines parameters for PostCoreJobUpdate.
type PostCoreJobUpdateJSONBody CoreJobUpdate

// PostCoreJobWaitJSONBody defines parameters for PostCoreJobWait.
type PostCoreJobWaitJSONBody CoreJobWait0

// GetCoreSessionsParams defines parameters for GetCoreSessions.
type GetCoreSessionsParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// GetCronjobParams defines parameters for GetCronjob.
type GetCronjobParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostCronjobJSONBody defines parameters for PostCronjob.
type PostCronjobJSONBody CronjobCreate0

// GetCronjobIdIdParams defines parameters for GetCronjobIdId.
type GetCronjobIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutCronjobIdIdJSONBody defines parameters for PutCronjobIdId.
type PutCronjobIdIdJSONBody CronjobUpdate1

// PostCronjobRunJSONBody defines parameters for PostCronjobRun.
type PostCronjobRunJSONBody CronjobRun

// PostDeviceGetInfoJSONBody defines parameters for PostDeviceGetInfo.
type PostDeviceGetInfoJSONBody DeviceGetInfo0

// GetDiskParams defines parameters for GetDisk.
type GetDiskParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostDiskGetEncryptedJSONBody defines parameters for PostDiskGetEncrypted.
type PostDiskGetEncryptedJSONBody DiskGetEncrypted0

// PostDiskGetUnusedJSONBody defines parameters for PostDiskGetUnused.
type PostDiskGetUnusedJSONBody DiskGetUnused0

// GetDiskIdIdParams defines parameters for GetDiskIdId.
type GetDiskIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutDiskIdIdJSONBody defines parameters for PutDiskIdId.
type PutDiskIdIdJSONBody DiskUpdate1

// PostDiskTemperaturesJSONBody defines parameters for PostDiskTemperatures.
type PostDiskTemperaturesJSONBody DiskTemperatures

// PostDiskWipeJSONBody defines parameters for PostDiskWipe.
type PostDiskWipeJSONBody DiskWipe

// GetDnsQueryParams defines parameters for GetDnsQuery.
type GetDnsQueryParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutDyndnsJSONBody defines parameters for PutDyndns.
type PutDyndnsJSONBody DyndnsUpdate0

// PostFilesystemAclIsTrivialJSONBody defines parameters for PostFilesystemAclIsTrivial.
type PostFilesystemAclIsTrivialJSONBody FilesystemAclIsTrivial0

// PostFilesystemChownJSONBody defines parameters for PostFilesystemChown.
type PostFilesystemChownJSONBody FilesystemChown0

// PostFilesystemGetDefaultAclJSONBody defines parameters for PostFilesystemGetDefaultAcl.
type PostFilesystemGetDefaultAclJSONBody FilesystemGetDefaultAcl0

// PostFilesystemGetaclJSONBody defines parameters for PostFilesystemGetacl.
type PostFilesystemGetaclJSONBody FilesystemGetacl

// PostFilesystemListdirJSONBody defines parameters for PostFilesystemListdir.
type PostFilesystemListdirJSONBody FilesystemListdir

// PostFilesystemSetaclJSONBody defines parameters for PostFilesystemSetacl.
type PostFilesystemSetaclJSONBody FilesystemSetacl0

// PostFilesystemSetpermJSONBody defines parameters for PostFilesystemSetperm.
type PostFilesystemSetpermJSONBody FilesystemSetperm0

// PostFilesystemStatJSONBody defines parameters for PostFilesystemStat.
type PostFilesystemStatJSONBody FilesystemStat0

// PostFilesystemStatfsJSONBody defines parameters for PostFilesystemStatfs.
type PostFilesystemStatfsJSONBody FilesystemStatfs0

// PutFtpJSONBody defines parameters for PutFtp.
type PutFtpJSONBody FtpUpdate0

// GetGroupParams defines parameters for GetGroup.
type GetGroupParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostGroupJSONBody defines parameters for PostGroup.
type PostGroupJSONBody GroupCreate0

// PostGroupGetGroupObjJSONBody defines parameters for PostGroupGetGroupObj.
type PostGroupGetGroupObjJSONBody GroupGetGroupObj0

// DeleteGroupIdIdJSONBody defines parameters for DeleteGroupIdId.
type DeleteGroupIdIdJSONBody GroupDelete1

// GetGroupIdIdParams defines parameters for GetGroupIdId.
type GetGroupIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutGroupIdIdJSONBody defines parameters for PutGroupIdId.
type PutGroupIdIdJSONBody GroupUpdate1

// GetIdmapAdParams defines parameters for GetIdmapAd.
type GetIdmapAdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapAdJSONBody defines parameters for PostIdmapAd.
type PostIdmapAdJSONBody IdmapAdCreate0

// GetIdmapAdIdIdParams defines parameters for GetIdmapAdIdId.
type GetIdmapAdIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapAdIdIdJSONBody defines parameters for PutIdmapAdIdId.
type PutIdmapAdIdIdJSONBody IdmapAdUpdate1

// GetIdmapAutoridParams defines parameters for GetIdmapAutorid.
type GetIdmapAutoridParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapAutoridJSONBody defines parameters for PostIdmapAutorid.
type PostIdmapAutoridJSONBody IdmapAutoridCreate0

// GetIdmapAutoridIdIdParams defines parameters for GetIdmapAutoridIdId.
type GetIdmapAutoridIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapAutoridIdIdJSONBody defines parameters for PutIdmapAutoridIdId.
type PutIdmapAutoridIdIdJSONBody IdmapAutoridUpdate1

// GetIdmapDomainParams defines parameters for GetIdmapDomain.
type GetIdmapDomainParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapDomainJSONBody defines parameters for PostIdmapDomain.
type PostIdmapDomainJSONBody IdmapDomainCreate0

// GetIdmapDomainIdIdParams defines parameters for GetIdmapDomainIdId.
type GetIdmapDomainIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapDomainIdIdJSONBody defines parameters for PutIdmapDomainIdId.
type PutIdmapDomainIdIdJSONBody IdmapDomainUpdate1

// GetIdmapDomaintobackendParams defines parameters for GetIdmapDomaintobackend.
type GetIdmapDomaintobackendParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapDomaintobackendJSONBody defines parameters for PostIdmapDomaintobackend.
type PostIdmapDomaintobackendJSONBody IdmapDomaintobackendCreate0

// GetIdmapDomaintobackendIdIdParams defines parameters for GetIdmapDomaintobackendIdId.
type GetIdmapDomaintobackendIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapDomaintobackendIdIdJSONBody defines parameters for PutIdmapDomaintobackendIdId.
type PutIdmapDomaintobackendIdIdJSONBody IdmapDomaintobackendUpdate1

// PostIdmapGetOrCreateIdmapByDomainJSONBody defines parameters for PostIdmapGetOrCreateIdmapByDomain.
type PostIdmapGetOrCreateIdmapByDomainJSONBody IdmapGetOrCreateIdmapByDomain0

// GetIdmapLdapParams defines parameters for GetIdmapLdap.
type GetIdmapLdapParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapLdapJSONBody defines parameters for PostIdmapLdap.
type PostIdmapLdapJSONBody IdmapLdapCreate0

// GetIdmapLdapIdIdParams defines parameters for GetIdmapLdapIdId.
type GetIdmapLdapIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapLdapIdIdJSONBody defines parameters for PutIdmapLdapIdId.
type PutIdmapLdapIdIdJSONBody IdmapLdapUpdate1

// GetIdmapNssParams defines parameters for GetIdmapNss.
type GetIdmapNssParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapNssJSONBody defines parameters for PostIdmapNss.
type PostIdmapNssJSONBody IdmapNssCreate0

// GetIdmapNssIdIdParams defines parameters for GetIdmapNssIdId.
type GetIdmapNssIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapNssIdIdJSONBody defines parameters for PutIdmapNssIdId.
type PutIdmapNssIdIdJSONBody IdmapNssUpdate1

// GetIdmapRfc2307Params defines parameters for GetIdmapRfc2307.
type GetIdmapRfc2307Params struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapRfc2307JSONBody defines parameters for PostIdmapRfc2307.
type PostIdmapRfc2307JSONBody IdmapRfc2307Create0

// GetIdmapRfc2307IdIdParams defines parameters for GetIdmapRfc2307IdId.
type GetIdmapRfc2307IdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapRfc2307IdIdJSONBody defines parameters for PutIdmapRfc2307IdId.
type PutIdmapRfc2307IdIdJSONBody IdmapRfc2307Update1

// GetIdmapRidParams defines parameters for GetIdmapRid.
type GetIdmapRidParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapRidJSONBody defines parameters for PostIdmapRid.
type PostIdmapRidJSONBody IdmapRidCreate0

// GetIdmapRidIdIdParams defines parameters for GetIdmapRidIdId.
type GetIdmapRidIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapRidIdIdJSONBody defines parameters for PutIdmapRidIdId.
type PutIdmapRidIdIdJSONBody IdmapRidUpdate1

// GetIdmapScriptParams defines parameters for GetIdmapScript.
type GetIdmapScriptParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapScriptJSONBody defines parameters for PostIdmapScript.
type PostIdmapScriptJSONBody IdmapScriptCreate0

// GetIdmapScriptIdIdParams defines parameters for GetIdmapScriptIdId.
type GetIdmapScriptIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapScriptIdIdJSONBody defines parameters for PutIdmapScriptIdId.
type PutIdmapScriptIdIdJSONBody IdmapScriptUpdate1

// GetIdmapTdbParams defines parameters for GetIdmapTdb.
type GetIdmapTdbParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIdmapTdbJSONBody defines parameters for PostIdmapTdb.
type PostIdmapTdbJSONBody IdmapTdbCreate0

// GetIdmapTdbIdIdParams defines parameters for GetIdmapTdbIdId.
type GetIdmapTdbIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIdmapTdbIdIdJSONBody defines parameters for PutIdmapTdbIdId.
type PutIdmapTdbIdIdJSONBody IdmapTdbUpdate1

// GetInitshutdownscriptParams defines parameters for GetInitshutdownscript.
type GetInitshutdownscriptParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostInitshutdownscriptJSONBody defines parameters for PostInitshutdownscript.
type PostInitshutdownscriptJSONBody InitshutdownscriptCreate0

// GetInitshutdownscriptIdIdParams defines parameters for GetInitshutdownscriptIdId.
type GetInitshutdownscriptIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutInitshutdownscriptIdIdJSONBody defines parameters for PutInitshutdownscriptIdId.
type PutInitshutdownscriptIdIdJSONBody InitshutdownscriptUpdate1

// GetInterfaceParams defines parameters for GetInterface.
type GetInterfaceParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostInterfaceJSONBody defines parameters for PostInterface.
type PostInterfaceJSONBody InterfaceCreate0

// PostInterfaceBridgeMembersChoicesJSONBody defines parameters for PostInterfaceBridgeMembersChoices.
type PostInterfaceBridgeMembersChoicesJSONBody InterfaceBridgeMembersChoices0

// PostInterfaceChoicesJSONBody defines parameters for PostInterfaceChoices.
type PostInterfaceChoicesJSONBody InterfaceChoices0

// PostInterfaceCommitJSONBody defines parameters for PostInterfaceCommit.
type PostInterfaceCommitJSONBody InterfaceCommit0

// GetInterfaceIdIdParams defines parameters for GetInterfaceIdId.
type GetInterfaceIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutInterfaceIdIdJSONBody defines parameters for PutInterfaceIdId.
type PutInterfaceIdIdJSONBody InterfaceUpdate1

// PostInterfaceIpInUseJSONBody defines parameters for PostInterfaceIpInUse.
type PostInterfaceIpInUseJSONBody InterfaceIpInUse0

// PostInterfaceLagPortsChoicesJSONBody defines parameters for PostInterfaceLagPortsChoices.
type PostInterfaceLagPortsChoicesJSONBody InterfaceLagPortsChoices0

// GetIpmiParams defines parameters for GetIpmi.
type GetIpmiParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// GetIpmiIdIdParams defines parameters for GetIpmiIdId.
type GetIpmiIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIpmiIdIdJSONBody defines parameters for PutIpmiIdId.
type PutIpmiIdIdJSONBody IpmiUpdate1

// PostIpmiIdentifyJSONBody defines parameters for PostIpmiIdentify.
type PostIpmiIdentifyJSONBody IpmiIdentify0

// GetIscsiAuthParams defines parameters for GetIscsiAuth.
type GetIscsiAuthParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIscsiAuthJSONBody defines parameters for PostIscsiAuth.
type PostIscsiAuthJSONBody IscsiAuthCreate0

// GetIscsiAuthIdIdParams defines parameters for GetIscsiAuthIdId.
type GetIscsiAuthIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIscsiAuthIdIdJSONBody defines parameters for PutIscsiAuthIdId.
type PutIscsiAuthIdIdJSONBody IscsiAuthUpdate1

// GetIscsiExtentParams defines parameters for GetIscsiExtent.
type GetIscsiExtentParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIscsiExtentJSONBody defines parameters for PostIscsiExtent.
type PostIscsiExtentJSONBody IscsiExtentCreate0

// PostIscsiExtentDiskChoicesJSONBody defines parameters for PostIscsiExtentDiskChoices.
type PostIscsiExtentDiskChoicesJSONBody IscsiExtentDiskChoices0

// DeleteIscsiExtentIdIdJSONBody defines parameters for DeleteIscsiExtentIdId.
type DeleteIscsiExtentIdIdJSONBody IscsiExtentDelete

// GetIscsiExtentIdIdParams defines parameters for GetIscsiExtentIdId.
type GetIscsiExtentIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIscsiExtentIdIdJSONBody defines parameters for PutIscsiExtentIdId.
type PutIscsiExtentIdIdJSONBody IscsiExtentUpdate1

// PutIscsiGlobalJSONBody defines parameters for PutIscsiGlobal.
type PutIscsiGlobalJSONBody IscsiGlobalUpdate0

// GetIscsiGlobalSessionsParams defines parameters for GetIscsiGlobalSessions.
type GetIscsiGlobalSessionsParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// GetIscsiInitiatorParams defines parameters for GetIscsiInitiator.
type GetIscsiInitiatorParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIscsiInitiatorJSONBody defines parameters for PostIscsiInitiator.
type PostIscsiInitiatorJSONBody IscsiInitiatorCreate0

// GetIscsiInitiatorIdIdParams defines parameters for GetIscsiInitiatorIdId.
type GetIscsiInitiatorIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIscsiInitiatorIdIdJSONBody defines parameters for PutIscsiInitiatorIdId.
type PutIscsiInitiatorIdIdJSONBody IscsiInitiatorUpdate1

// GetIscsiPortalParams defines parameters for GetIscsiPortal.
type GetIscsiPortalParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIscsiPortalJSONBody defines parameters for PostIscsiPortal.
type PostIscsiPortalJSONBody IscsiPortalCreate0

// GetIscsiPortalIdIdParams defines parameters for GetIscsiPortalIdId.
type GetIscsiPortalIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIscsiPortalIdIdJSONBody defines parameters for PutIscsiPortalIdId.
type PutIscsiPortalIdIdJSONBody IscsiPortalUpdate1

// GetIscsiTargetParams defines parameters for GetIscsiTarget.
type GetIscsiTargetParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIscsiTargetJSONBody defines parameters for PostIscsiTarget.
type PostIscsiTargetJSONBody IscsiTargetCreate0

// DeleteIscsiTargetIdIdJSONBody defines parameters for DeleteIscsiTargetIdId.
type DeleteIscsiTargetIdIdJSONBody IscsiTargetDelete1

// GetIscsiTargetIdIdParams defines parameters for GetIscsiTargetIdId.
type GetIscsiTargetIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIscsiTargetIdIdJSONBody defines parameters for PutIscsiTargetIdId.
type PutIscsiTargetIdIdJSONBody IscsiTargetUpdate1

// GetIscsiTargetextentParams defines parameters for GetIscsiTargetextent.
type GetIscsiTargetextentParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostIscsiTargetextentJSONBody defines parameters for PostIscsiTargetextent.
type PostIscsiTargetextentJSONBody IscsiTargetextentCreate0

// DeleteIscsiTargetextentIdIdJSONBody defines parameters for DeleteIscsiTargetextentIdId.
type DeleteIscsiTargetextentIdIdJSONBody IscsiTargetextentDelete1

// GetIscsiTargetextentIdIdParams defines parameters for GetIscsiTargetextentIdId.
type GetIscsiTargetextentIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutIscsiTargetextentIdIdJSONBody defines parameters for PutIscsiTargetextentIdId.
type PutIscsiTargetextentIdIdJSONBody IscsiTargetextentUpdate1

// GetJailParams defines parameters for GetJail.
type GetJailParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostJailJSONBody defines parameters for PostJail.
type PostJailJSONBody JailCreate0

// PostJailActivateJSONBody defines parameters for PostJailActivate.
type PostJailActivateJSONBody JailActivate0

// PostJailCleanJSONBody defines parameters for PostJailClean.
type PostJailCleanJSONBody JailClean0

// PostJailExecJSONBody defines parameters for PostJailExec.
type PostJailExecJSONBody JailExec

// PostJailExportJSONBody defines parameters for PostJailExport.
type PostJailExportJSONBody JailExport0

// PostJailFetchJSONBody defines parameters for PostJailFetch.
type PostJailFetchJSONBody JailFetch0

// PostJailFstabJSONBody defines parameters for PostJailFstab.
type PostJailFstabJSONBody JailFstab

// DeleteJailIdIdJSONBody defines parameters for DeleteJailIdId.
type DeleteJailIdIdJSONBody JailDelete1

// GetJailIdIdParams defines parameters for GetJailIdId.
type GetJailIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutJailIdIdJSONBody defines parameters for PutJailIdId.
type PutJailIdIdJSONBody JailUpdate1

// PostJailIdIdCloneJSONBody defines parameters for PostJailIdIdClone.
type PostJailIdIdCloneJSONBody JailClone1

// PostJailImportImageJSONBody defines parameters for PostJailImportImage.
type PostJailImportImageJSONBody JailImportImage0

// PostJailRcActionJSONBody defines parameters for PostJailRcAction.
type PostJailRcActionJSONBody JailRcAction0

// PostJailReleasesChoicesJSONBody defines parameters for PostJailReleasesChoices.
type PostJailReleasesChoicesJSONBody JailReleasesChoices0

// PostJailRestartJSONBody defines parameters for PostJailRestart.
type PostJailRestartJSONBody JailRestart0

// PostJailStartJSONBody defines parameters for PostJailStart.
type PostJailStartJSONBody JailStart0

// PostJailStopJSONBody defines parameters for PostJailStop.
type PostJailStopJSONBody JailStop

// PostJailUpdateDefaultsJSONBody defines parameters for PostJailUpdateDefaults.
type PostJailUpdateDefaultsJSONBody JailUpdateDefaults0

// PostJailUpdateToLatestPatchJSONBody defines parameters for PostJailUpdateToLatestPatch.
type PostJailUpdateToLatestPatchJSONBody JailUpdateToLatestPatch

// PutKerberosJSONBody defines parameters for PutKerberos.
type PutKerberosJSONBody KerberosUpdate0

// GetKerberosKeytabParams defines parameters for GetKerberosKeytab.
type GetKerberosKeytabParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostKerberosKeytabJSONBody defines parameters for PostKerberosKeytab.
type PostKerberosKeytabJSONBody KerberosKeytabCreate0

// GetKerberosKeytabIdIdParams defines parameters for GetKerberosKeytabIdId.
type GetKerberosKeytabIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutKerberosKeytabIdIdJSONBody defines parameters for PutKerberosKeytabIdId.
type PutKerberosKeytabIdIdJSONBody KerberosKeytabUpdate1

// GetKerberosRealmParams defines parameters for GetKerberosRealm.
type GetKerberosRealmParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostKerberosRealmJSONBody defines parameters for PostKerberosRealm.
type PostKerberosRealmJSONBody KerberosRealmCreate0

// GetKerberosRealmIdIdParams defines parameters for GetKerberosRealmIdId.
type GetKerberosRealmIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutKerberosRealmIdIdJSONBody defines parameters for PutKerberosRealmIdId.
type PutKerberosRealmIdIdJSONBody KerberosRealmUpdate1

// GetKeychaincredentialParams defines parameters for GetKeychaincredential.
type GetKeychaincredentialParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostKeychaincredentialJSONBody defines parameters for PostKeychaincredential.
type PostKeychaincredentialJSONBody KeychaincredentialCreate0

// DeleteKeychaincredentialIdIdJSONBody defines parameters for DeleteKeychaincredentialIdId.
type DeleteKeychaincredentialIdIdJSONBody KeychaincredentialDelete1

// GetKeychaincredentialIdIdParams defines parameters for GetKeychaincredentialIdId.
type GetKeychaincredentialIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutKeychaincredentialIdIdJSONBody defines parameters for PutKeychaincredentialIdId.
type PutKeychaincredentialIdIdJSONBody KeychaincredentialUpdate1

// PostKeychaincredentialRemoteSshHostKeyScanJSONBody defines parameters for PostKeychaincredentialRemoteSshHostKeyScan.
type PostKeychaincredentialRemoteSshHostKeyScanJSONBody KeychaincredentialRemoteSshHostKeyScan0

// PostKeychaincredentialRemoteSshSemiautomaticSetupJSONBody defines parameters for PostKeychaincredentialRemoteSshSemiautomaticSetup.
type PostKeychaincredentialRemoteSshSemiautomaticSetupJSONBody KeychaincredentialRemoteSshSemiautomaticSetup0

// PostKeychaincredentialUsedByJSONBody defines parameters for PostKeychaincredentialUsedBy.
type PostKeychaincredentialUsedByJSONBody KeychaincredentialUsedBy0

// PutLdapJSONBody defines parameters for PutLdap.
type PutLdapJSONBody LdapUpdate0

// PutLldpJSONBody defines parameters for PutLldp.
type PutLldpJSONBody LldpUpdate0

// PutMailJSONBody defines parameters for PutMail.
type PutMailJSONBody MailUpdate0

// PostMailSendJSONBody defines parameters for PostMailSend.
type PostMailSendJSONBody MailSend

// GetMultipathParams defines parameters for GetMultipath.
type GetMultipathParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// GetMultipathIdIdParams defines parameters for GetMultipathIdId.
type GetMultipathIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutNetworkConfigurationJSONBody defines parameters for PutNetworkConfiguration.
type PutNetworkConfigurationJSONBody NetworkConfigurationUpdate0

// PutNfsJSONBody defines parameters for PutNfs.
type PutNfsJSONBody NfsUpdate0

// PutNisJSONBody defines parameters for PutNis.
type PutNisJSONBody NisUpdate0

// GetPluginParams defines parameters for GetPlugin.
type GetPluginParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostPluginJSONBody defines parameters for PostPlugin.
type PostPluginJSONBody PluginCreate0

// PostPluginAvailableJSONBody defines parameters for PostPluginAvailable.
type PostPluginAvailableJSONBody PluginAvailable0

// PostPluginBranchesChoicesJSONBody defines parameters for PostPluginBranchesChoices.
type PostPluginBranchesChoicesJSONBody PluginBranchesChoices0

// PostPluginDefaultsJSONBody defines parameters for PostPluginDefaults.
type PostPluginDefaultsJSONBody PluginDefaults0

// GetPluginIdIdParams defines parameters for GetPluginIdId.
type GetPluginIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutPluginIdIdJSONBody defines parameters for PutPluginIdId.
type PutPluginIdIdJSONBody PluginUpdate1

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostPoolJSONBody defines parameters for PostPool.
type PostPoolJSONBody PoolCreate0

// GetPoolDatasetParams defines parameters for GetPoolDataset.
type GetPoolDatasetParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostPoolDatasetJSONBody defines parameters for PostPoolDataset.
type PostPoolDatasetJSONBody PoolDatasetCreate0

// DeletePoolDatasetIdIdJSONBody defines parameters for DeletePoolDatasetIdId.
type DeletePoolDatasetIdIdJSONBody PoolDatasetDelete1

// GetPoolDatasetIdIdParams defines parameters for GetPoolDatasetIdId.
type GetPoolDatasetIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutPoolDatasetIdIdJSONBody defines parameters for PutPoolDatasetIdId.
type PutPoolDatasetIdIdJSONBody PoolDatasetUpdate1

// PostPoolDatasetIdIdAttachmentsJSONBody defines parameters for PostPoolDatasetIdIdAttachments.
type PostPoolDatasetIdIdAttachmentsJSONBody PoolDatasetAttachments

// PostPoolDatasetIdIdPermissionJSONBody defines parameters for PostPoolDatasetIdIdPermission.
type PostPoolDatasetIdIdPermissionJSONBody PoolDatasetPermission1

// PostPoolDatasetIdIdProcessesJSONBody defines parameters for PostPoolDatasetIdIdProcesses.
type PostPoolDatasetIdIdProcessesJSONBody PoolDatasetProcesses

// PostPoolDatasetIdIdPromoteJSONBody defines parameters for PostPoolDatasetIdIdPromote.
type PostPoolDatasetIdIdPromoteJSONBody PoolDatasetPromote

// PostPoolDatasetRecommendedZvolBlocksizeJSONBody defines parameters for PostPoolDatasetRecommendedZvolBlocksize.
type PostPoolDatasetRecommendedZvolBlocksizeJSONBody PoolDatasetRecommendedZvolBlocksize0

// PostPoolFilesystemChoicesJSONBody defines parameters for PostPoolFilesystemChoices.
type PostPoolFilesystemChoicesJSONBody PoolFilesystemChoices0

// GetPoolIdIdParams defines parameters for GetPoolIdId.
type GetPoolIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutPoolIdIdJSONBody defines parameters for PutPoolIdId.
type PutPoolIdIdJSONBody PoolUpdate1

// PostPoolIdIdAttachmentsJSONBody defines parameters for PostPoolIdIdAttachments.
type PostPoolIdIdAttachmentsJSONBody PoolAttachments

// PostPoolIdIdDetachJSONBody defines parameters for PostPoolIdIdDetach.
type PostPoolIdIdDetachJSONBody PoolDetach1

// PostPoolIdIdDownloadEncryptionKeyJSONBody defines parameters for PostPoolIdIdDownloadEncryptionKey.
type PostPoolIdIdDownloadEncryptionKeyJSONBody PoolDownloadEncryptionKey1

// PostPoolIdIdExportJSONBody defines parameters for PostPoolIdIdExport.
type PostPoolIdIdExportJSONBody PoolExport1

// PostPoolIdIdGetDisksJSONBody defines parameters for PostPoolIdIdGetDisks.
type PostPoolIdIdGetDisksJSONBody PoolGetDisks

// PostPoolIdIdIsUpgradedJSONBody defines parameters for PostPoolIdIdIsUpgraded.
type PostPoolIdIdIsUpgradedJSONBody PoolIsUpgraded

// PostPoolIdIdLockJSONBody defines parameters for PostPoolIdIdLock.
type PostPoolIdIdLockJSONBody PoolLock1

// PostPoolIdIdOfflineJSONBody defines parameters for PostPoolIdIdOffline.
type PostPoolIdIdOfflineJSONBody PoolOffline1

// PostPoolIdIdOnlineJSONBody defines parameters for PostPoolIdIdOnline.
type PostPoolIdIdOnlineJSONBody PoolOnline1

// PostPoolIdIdPassphraseJSONBody defines parameters for PostPoolIdIdPassphrase.
type PostPoolIdIdPassphraseJSONBody PoolPassphrase1

// PostPoolIdIdProcessesJSONBody defines parameters for PostPoolIdIdProcesses.
type PostPoolIdIdProcessesJSONBody PoolProcesses

// PostPoolIdIdRecoverykeyRmJSONBody defines parameters for PostPoolIdIdRecoverykeyRm.
type PostPoolIdIdRecoverykeyRmJSONBody PoolRecoverykeyRm1

// PostPoolIdIdRekeyJSONBody defines parameters for PostPoolIdIdRekey.
type PostPoolIdIdRekeyJSONBody PoolRekey1

// PostPoolIdIdRemoveJSONBody defines parameters for PostPoolIdIdRemove.
type PostPoolIdIdRemoveJSONBody PoolRemove1

// PostPoolIdIdReplaceJSONBody defines parameters for PostPoolIdIdReplace.
type PostPoolIdIdReplaceJSONBody PoolReplace1

// PostPoolIdIdScrubJSONBody defines parameters for PostPoolIdIdScrub.
type PostPoolIdIdScrubJSONBody PoolScrub1

// PostPoolIdIdUnlockJSONBody defines parameters for PostPoolIdIdUnlock.
type PostPoolIdIdUnlockJSONBody PoolUnlock1

// PostPoolIdIdUpgradeJSONBody defines parameters for PostPoolIdIdUpgrade.
type PostPoolIdIdUpgradeJSONBody PoolUpgrade

// PostPoolImportDiskJSONBody defines parameters for PostPoolImportDisk.
type PostPoolImportDiskJSONBody PoolImportDisk

// PostPoolImportDiskAutodetectFsTypeJSONBody defines parameters for PostPoolImportDiskAutodetectFsType.
type PostPoolImportDiskAutodetectFsTypeJSONBody PoolImportDiskAutodetectFsType0

// PostPoolImportPoolJSONBody defines parameters for PostPoolImportPool.
type PostPoolImportPoolJSONBody PoolImportPool0

// PutPoolResilverJSONBody defines parameters for PutPoolResilver.
type PutPoolResilverJSONBody PoolResilverUpdate0

// GetPoolScrubParams defines parameters for GetPoolScrub.
type GetPoolScrubParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostPoolScrubJSONBody defines parameters for PostPoolScrub.
type PostPoolScrubJSONBody PoolScrubCreate0

// GetPoolScrubIdIdParams defines parameters for GetPoolScrubIdId.
type GetPoolScrubIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutPoolScrubIdIdJSONBody defines parameters for PutPoolScrubIdId.
type PutPoolScrubIdIdJSONBody PoolScrubUpdate1

// PostPoolScrubRunJSONBody defines parameters for PostPoolScrubRun.
type PostPoolScrubRunJSONBody PoolScrubRun

// GetPoolSnapshottaskParams defines parameters for GetPoolSnapshottask.
type GetPoolSnapshottaskParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostPoolSnapshottaskJSONBody defines parameters for PostPoolSnapshottask.
type PostPoolSnapshottaskJSONBody PoolSnapshottaskCreate0

// GetPoolSnapshottaskIdIdParams defines parameters for GetPoolSnapshottaskIdId.
type GetPoolSnapshottaskIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutPoolSnapshottaskIdIdJSONBody defines parameters for PutPoolSnapshottaskIdId.
type PutPoolSnapshottaskIdIdJSONBody PoolSnapshottaskUpdate1

// PostPoolSnapshottaskIdIdRunJSONBody defines parameters for PostPoolSnapshottaskIdIdRun.
type PostPoolSnapshottaskIdIdRunJSONBody PoolSnapshottaskRun

// PostPoolUnlockServicesRestartChoicesJSONBody defines parameters for PostPoolUnlockServicesRestartChoices.
type PostPoolUnlockServicesRestartChoicesJSONBody PoolUnlockServicesRestartChoices0

// GetReplicationParams defines parameters for GetReplication.
type GetReplicationParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostReplicationJSONBody defines parameters for PostReplication.
type PostReplicationJSONBody ReplicationCreate0

// PostReplicationCountEligibleManualSnapshotsJSONBody defines parameters for PostReplicationCountEligibleManualSnapshots.
type PostReplicationCountEligibleManualSnapshotsJSONBody ReplicationCountEligibleManualSnapshots

// PostReplicationCreateDatasetJSONBody defines parameters for PostReplicationCreateDataset.
type PostReplicationCreateDatasetJSONBody ReplicationCreateDataset

// GetReplicationIdIdParams defines parameters for GetReplicationIdId.
type GetReplicationIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutReplicationIdIdJSONBody defines parameters for PutReplicationIdId.
type PutReplicationIdIdJSONBody ReplicationUpdate1

// PostReplicationIdIdRunJSONBody defines parameters for PostReplicationIdIdRun.
type PostReplicationIdIdRunJSONBody ReplicationRun

// PostReplicationListDatasetsJSONBody defines parameters for PostReplicationListDatasets.
type PostReplicationListDatasetsJSONBody ReplicationListDatasets

// PostReplicationTargetUnmatchedSnapshotsJSONBody defines parameters for PostReplicationTargetUnmatchedSnapshots.
type PostReplicationTargetUnmatchedSnapshotsJSONBody ReplicationTargetUnmatchedSnapshots

// PutReportingJSONBody defines parameters for PutReporting.
type PutReportingJSONBody ReportingUpdate0

// PostReportingGetDataJSONBody defines parameters for PostReportingGetData.
type PostReportingGetDataJSONBody ReportingGetData

// GetReportingGraphsParams defines parameters for GetReportingGraphs.
type GetReportingGraphsParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostRouteIpv4gwReachableJSONBody defines parameters for PostRouteIpv4gwReachable.
type PostRouteIpv4gwReachableJSONBody RouteIpv4gwReachable0

// GetRouteSystemRoutesParams defines parameters for GetRouteSystemRoutes.
type GetRouteSystemRoutesParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutRsyncdJSONBody defines parameters for PutRsyncd.
type PutRsyncdJSONBody RsyncdUpdate0

// GetRsyncmodParams defines parameters for GetRsyncmod.
type GetRsyncmodParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostRsyncmodJSONBody defines parameters for PostRsyncmod.
type PostRsyncmodJSONBody RsyncmodCreate0

// GetRsyncmodIdIdParams defines parameters for GetRsyncmodIdId.
type GetRsyncmodIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutRsyncmodIdIdJSONBody defines parameters for PutRsyncmodIdId.
type PutRsyncmodIdIdJSONBody RsyncmodUpdate1

// GetRsynctaskParams defines parameters for GetRsynctask.
type GetRsynctaskParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostRsynctaskJSONBody defines parameters for PostRsynctask.
type PostRsynctaskJSONBody RsynctaskCreate0

// GetRsynctaskIdIdParams defines parameters for GetRsynctaskIdId.
type GetRsynctaskIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutRsynctaskIdIdJSONBody defines parameters for PutRsynctaskIdId.
type PutRsynctaskIdIdJSONBody RsynctaskUpdate1

// PostRsynctaskIdIdRunJSONBody defines parameters for PostRsynctaskIdIdRun.
type PostRsynctaskIdIdRunJSONBody RsynctaskRun

// PutS3JSONBody defines parameters for PutS3.
type PutS3JSONBody S3Update0

// GetServiceParams defines parameters for GetService.
type GetServiceParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// GetServiceIdIdParams defines parameters for GetServiceIdId.
type GetServiceIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutServiceIdIdJSONBody defines parameters for PutServiceIdId.
type PutServiceIdIdJSONBody ServiceUpdate1

// PostServiceReloadJSONBody defines parameters for PostServiceReload.
type PostServiceReloadJSONBody ServiceReload

// PostServiceRestartJSONBody defines parameters for PostServiceRestart.
type PostServiceRestartJSONBody ServiceRestart

// PostServiceStartJSONBody defines parameters for PostServiceStart.
type PostServiceStartJSONBody ServiceStart

// PostServiceStopJSONBody defines parameters for PostServiceStop.
type PostServiceStopJSONBody ServiceStop

// PostServiceTerminateProcessJSONBody defines parameters for PostServiceTerminateProcess.
type PostServiceTerminateProcessJSONBody ServiceTerminateProcess

// GetSharingAfpParams defines parameters for GetSharingAfp.
type GetSharingAfpParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostSharingAfpJSONBody defines parameters for PostSharingAfp.
type PostSharingAfpJSONBody SharingAfpCreate0

// GetSharingAfpIdIdParams defines parameters for GetSharingAfpIdId.
type GetSharingAfpIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutSharingAfpIdIdJSONBody defines parameters for PutSharingAfpIdId.
type PutSharingAfpIdIdJSONBody SharingAfpUpdate1

// GetSharingNfsParams defines parameters for GetSharingNfs.
type GetSharingNfsParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostSharingNfsJSONBody defines parameters for PostSharingNfs.
type PostSharingNfsJSONBody SharingNfsCreate0

// GetSharingNfsIdIdParams defines parameters for GetSharingNfsIdId.
type GetSharingNfsIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutSharingNfsIdIdJSONBody defines parameters for PutSharingNfsIdId.
type PutSharingNfsIdIdJSONBody SharingNfsUpdate1

// GetSharingSmbParams defines parameters for GetSharingSmb.
type GetSharingSmbParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostSharingSmbJSONBody defines parameters for PostSharingSmb.
type PostSharingSmbJSONBody SharingSmbCreate0

// GetSharingSmbIdIdParams defines parameters for GetSharingSmbIdId.
type GetSharingSmbIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutSharingSmbIdIdJSONBody defines parameters for PutSharingSmbIdId.
type PutSharingSmbIdIdJSONBody SharingSmbUpdate1

// GetSharingWebdavParams defines parameters for GetSharingWebdav.
type GetSharingWebdavParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostSharingWebdavJSONBody defines parameters for PostSharingWebdav.
type PostSharingWebdavJSONBody SharingWebdavCreate0

// GetSharingWebdavIdIdParams defines parameters for GetSharingWebdavIdId.
type GetSharingWebdavIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutSharingWebdavIdIdJSONBody defines parameters for PutSharingWebdavIdId.
type PutSharingWebdavIdIdJSONBody SharingWebdavUpdate1

// PutSmartJSONBody defines parameters for PutSmart.
type PutSmartJSONBody SmartUpdate0

// GetSmartTestParams defines parameters for GetSmartTest.
type GetSmartTestParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostSmartTestJSONBody defines parameters for PostSmartTest.
type PostSmartTestJSONBody SmartTestCreate0

// GetSmartTestIdIdParams defines parameters for GetSmartTestIdId.
type GetSmartTestIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutSmartTestIdIdJSONBody defines parameters for PutSmartTestIdId.
type PutSmartTestIdIdJSONBody SmartTestUpdate1

// GetSmartTestResultsParams defines parameters for GetSmartTestResults.
type GetSmartTestResultsParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutSmbJSONBody defines parameters for PutSmb.
type PutSmbJSONBody SmbUpdate0

// GetSmbSharesecParams defines parameters for GetSmbSharesec.
type GetSmbSharesecParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostSmbSharesecJSONBody defines parameters for PostSmbSharesec.
type PostSmbSharesecJSONBody SmbSharesecCreate0

// PostSmbSharesecGetaclJSONBody defines parameters for PostSmbSharesecGetacl.
type PostSmbSharesecGetaclJSONBody SmbSharesecGetacl

// GetSmbSharesecIdIdParams defines parameters for GetSmbSharesecIdId.
type GetSmbSharesecIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutSmbSharesecIdIdJSONBody defines parameters for PutSmbSharesecIdId.
type PutSmbSharesecIdIdJSONBody SmbSharesecUpdate1

// PutSnmpJSONBody defines parameters for PutSnmp.
type PutSnmpJSONBody SnmpUpdate0

// PutSshJSONBody defines parameters for PutSsh.
type PutSshJSONBody SshUpdate0

// GetStaticrouteParams defines parameters for GetStaticroute.
type GetStaticrouteParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostStaticrouteJSONBody defines parameters for PostStaticroute.
type PostStaticrouteJSONBody StaticrouteCreate0

// GetStaticrouteIdIdParams defines parameters for GetStaticrouteIdId.
type GetStaticrouteIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutStaticrouteIdIdJSONBody defines parameters for PutStaticrouteIdId.
type PutStaticrouteIdIdJSONBody StaticrouteUpdate1

// PostStatsGetDataJSONBody defines parameters for PostStatsGetData.
type PostStatsGetDataJSONBody StatsGetData

// PostStatsGetDatasetInfoJSONBody defines parameters for PostStatsGetDatasetInfo.
type PostStatsGetDatasetInfoJSONBody StatsGetDatasetInfo

// PutSupportJSONBody defines parameters for PutSupport.
type PutSupportJSONBody SupportUpdate0

// PostSupportFetchCategoriesJSONBody defines parameters for PostSupportFetchCategories.
type PostSupportFetchCategoriesJSONBody SupportFetchCategories

// PostSupportNewTicketJSONBody defines parameters for PostSupportNewTicket.
type PostSupportNewTicketJSONBody SupportNewTicket0

// PutSystemAdvancedJSONBody defines parameters for PutSystemAdvanced.
type PutSystemAdvancedJSONBody SystemAdvancedUpdate0

// PostSystemFeatureEnabledJSONBody defines parameters for PostSystemFeatureEnabled.
type PostSystemFeatureEnabledJSONBody SystemFeatureEnabled0

// PutSystemGeneralJSONBody defines parameters for PutSystemGeneral.
type PutSystemGeneralJSONBody SystemGeneralUpdate0

// PostSystemLicenseUpdateJSONBody defines parameters for PostSystemLicenseUpdate.
type PostSystemLicenseUpdateJSONBody SystemLicenseUpdate0

// GetSystemNtpserverParams defines parameters for GetSystemNtpserver.
type GetSystemNtpserverParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostSystemNtpserverJSONBody defines parameters for PostSystemNtpserver.
type PostSystemNtpserverJSONBody SystemNtpserverCreate0

// GetSystemNtpserverIdIdParams defines parameters for GetSystemNtpserverIdId.
type GetSystemNtpserverIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutSystemNtpserverIdIdJSONBody defines parameters for PutSystemNtpserverIdId.
type PutSystemNtpserverIdIdJSONBody SystemNtpserverUpdate1

// PostSystemRebootJSONBody defines parameters for PostSystemReboot.
type PostSystemRebootJSONBody SystemReboot0

// PostSystemShutdownJSONBody defines parameters for PostSystemShutdown.
type PostSystemShutdownJSONBody SystemShutdown0

// PutSystemdatasetJSONBody defines parameters for PutSystemdataset.
type PutSystemdatasetJSONBody SystemdatasetUpdate0

// PutTftpJSONBody defines parameters for PutTftp.
type PutTftpJSONBody TftpUpdate0

// GetTunableParams defines parameters for GetTunable.
type GetTunableParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostTunableJSONBody defines parameters for PostTunable.
type PostTunableJSONBody TunableCreate0

// GetTunableIdIdParams defines parameters for GetTunableIdId.
type GetTunableIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutTunableIdIdJSONBody defines parameters for PutTunableIdId.
type PutTunableIdIdJSONBody TunableUpdate1

// PostUpdateCheckAvailableJSONBody defines parameters for PostUpdateCheckAvailable.
type PostUpdateCheckAvailableJSONBody UpdateCheckAvailable0

// PostUpdateGetPendingJSONBody defines parameters for PostUpdateGetPending.
type PostUpdateGetPendingJSONBody UpdateGetPending0

// PostUpdateManualJSONBody defines parameters for PostUpdateManual.
type PostUpdateManualJSONBody UpdateManual0

// PostUpdateSetTrainJSONBody defines parameters for PostUpdateSetTrain.
type PostUpdateSetTrainJSONBody UpdateSetTrain0

// PostUpdateUpdateJSONBody defines parameters for PostUpdateUpdate.
type PostUpdateUpdateJSONBody UpdateUpdate0

// PutUpsJSONBody defines parameters for PutUps.
type PutUpsJSONBody UpsUpdate0

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody UserCreate0

// PostUserGetUserObjJSONBody defines parameters for PostUserGetUserObj.
type PostUserGetUserObjJSONBody UserGetUserObj0

// DeleteUserIdIdJSONBody defines parameters for DeleteUserIdId.
type DeleteUserIdIdJSONBody UserDelete1

// GetUserIdIdParams defines parameters for GetUserIdId.
type GetUserIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutUserIdIdJSONBody defines parameters for PutUserIdId.
type PutUserIdIdJSONBody UserUpdate1

// PostUserIdIdPopAttributeJSONBody defines parameters for PostUserIdIdPopAttribute.
type PostUserIdIdPopAttributeJSONBody UserPopAttribute1

// PostUserIdIdSetAttributeJSONBody defines parameters for PostUserIdIdSetAttribute.
type PostUserIdIdSetAttributeJSONBody UserSetAttribute

// GetVmParams defines parameters for GetVm.
type GetVmParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostVmJSONBody defines parameters for PostVm.
type PostVmJSONBody VmCreate0

// GetVmDeviceParams defines parameters for GetVmDevice.
type GetVmDeviceParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostVmDeviceJSONBody defines parameters for PostVmDevice.
type PostVmDeviceJSONBody VmDeviceCreate0

// DeleteVmDeviceIdIdJSONBody defines parameters for DeleteVmDeviceIdId.
type DeleteVmDeviceIdIdJSONBody VmDeviceDelete1

// GetVmDeviceIdIdParams defines parameters for GetVmDeviceIdId.
type GetVmDeviceIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutVmDeviceIdIdJSONBody defines parameters for PutVmDeviceIdId.
type PutVmDeviceIdIdJSONBody VmDeviceUpdate1

// PostVmGetAttachedIfaceJSONBody defines parameters for PostVmGetAttachedIface.
type PostVmGetAttachedIfaceJSONBody VmGetAttachedIface0

// PostVmGetAvailableMemoryJSONBody defines parameters for PostVmGetAvailableMemory.
type PostVmGetAvailableMemoryJSONBody VmGetAvailableMemory0

// PostVmGetConsoleJSONBody defines parameters for PostVmGetConsole.
type PostVmGetConsoleJSONBody VmGetConsole0

// PostVmGetVncJSONBody defines parameters for PostVmGetVnc.
type PostVmGetVncJSONBody VmGetVnc0

// GetVmIdIdParams defines parameters for GetVmIdId.
type GetVmIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutVmIdIdJSONBody defines parameters for PutVmIdId.
type PutVmIdIdJSONBody VmUpdate1

// PostVmIdIdCloneJSONBody defines parameters for PostVmIdIdClone.
type PostVmIdIdCloneJSONBody VmClone1

// PostVmIdIdRestartJSONBody defines parameters for PostVmIdIdRestart.
type PostVmIdIdRestartJSONBody VmRestart

// PostVmIdIdStartJSONBody defines parameters for PostVmIdIdStart.
type PostVmIdIdStartJSONBody VmStart1

// PostVmIdIdStatusJSONBody defines parameters for PostVmIdIdStatus.
type PostVmIdIdStatusJSONBody VmStatus

// PostVmIdIdStopJSONBody defines parameters for PostVmIdIdStop.
type PostVmIdIdStopJSONBody VmStop1

// GetVmwareParams defines parameters for GetVmware.
type GetVmwareParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostVmwareJSONBody defines parameters for PostVmware.
type PostVmwareJSONBody VmwareCreate0

// PostVmwareDatasetHasVmsJSONBody defines parameters for PostVmwareDatasetHasVms.
type PostVmwareDatasetHasVmsJSONBody VmwareDatasetHasVms

// PostVmwareGetDatastoresJSONBody defines parameters for PostVmwareGetDatastores.
type PostVmwareGetDatastoresJSONBody VmwareGetDatastores0

// PostVmwareGetVirtualMachinesJSONBody defines parameters for PostVmwareGetVirtualMachines.
type PostVmwareGetVirtualMachinesJSONBody VmwareGetVirtualMachines0

// GetVmwareIdIdParams defines parameters for GetVmwareIdId.
type GetVmwareIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PutVmwareIdIdJSONBody defines parameters for PutVmwareIdId.
type PutVmwareIdIdJSONBody VmwareUpdate1

// PostVmwareMatchDatastoresWithDatasetsJSONBody defines parameters for PostVmwareMatchDatastoresWithDatasets.
type PostVmwareMatchDatastoresWithDatasetsJSONBody VmwareMatchDatastoresWithDatasets0

// PutWebdavJSONBody defines parameters for PutWebdav.
type PutWebdavJSONBody WebdavUpdate0

// GetWebuiImageParams defines parameters for GetWebuiImage.
type GetWebuiImageParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// GetWebuiImageIdIdParams defines parameters for GetWebuiImageIdId.
type GetWebuiImageIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// GetZfsSnapshotParams defines parameters for GetZfsSnapshot.
type GetZfsSnapshotParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostZfsSnapshotJSONBody defines parameters for PostZfsSnapshot.
type PostZfsSnapshotJSONBody ZfsSnapshotCreate0

// PostZfsSnapshotCloneJSONBody defines parameters for PostZfsSnapshotClone.
type PostZfsSnapshotCloneJSONBody ZfsSnapshotClone0

// DeleteZfsSnapshotIdIdJSONBody defines parameters for DeleteZfsSnapshotIdId.
type DeleteZfsSnapshotIdIdJSONBody ZfsSnapshotDelete1

// GetZfsSnapshotIdIdParams defines parameters for GetZfsSnapshotIdId.
type GetZfsSnapshotIdIdParams struct {
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Count  *bool   `json:"count,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostZfsSnapshotRemoveJSONBody defines parameters for PostZfsSnapshotRemove.
type PostZfsSnapshotRemoveJSONBody ZfsSnapshotRemove0

// PostZfsSnapshotRollbackJSONBody defines parameters for PostZfsSnapshotRollback.
type PostZfsSnapshotRollbackJSONBody ZfsSnapshotRollback

// PostAcmeDnsAuthenticatorJSONRequestBody defines body for PostAcmeDnsAuthenticator for application/json ContentType.
type PostAcmeDnsAuthenticatorJSONRequestBody PostAcmeDnsAuthenticatorJSONBody

// PutAcmeDnsAuthenticatorIdIdJSONRequestBody defines body for PutAcmeDnsAuthenticatorIdId for application/json ContentType.
type PutAcmeDnsAuthenticatorIdIdJSONRequestBody PutAcmeDnsAuthenticatorIdIdJSONBody

// PutActivedirectoryJSONRequestBody defines body for PutActivedirectory for application/json ContentType.
type PutActivedirectoryJSONRequestBody PutActivedirectoryJSONBody

// PostActivedirectoryLeaveJSONRequestBody defines body for PostActivedirectoryLeave for application/json ContentType.
type PostActivedirectoryLeaveJSONRequestBody PostActivedirectoryLeaveJSONBody

// PutAfpJSONRequestBody defines body for PutAfp for application/json ContentType.
type PutAfpJSONRequestBody PutAfpJSONBody

// PostAlertDismissJSONRequestBody defines body for PostAlertDismiss for application/json ContentType.
type PostAlertDismissJSONRequestBody PostAlertDismissJSONBody

// PostAlertRestoreJSONRequestBody defines body for PostAlertRestore for application/json ContentType.
type PostAlertRestoreJSONRequestBody PostAlertRestoreJSONBody

// PutAlertclassesJSONRequestBody defines body for PutAlertclasses for application/json ContentType.
type PutAlertclassesJSONRequestBody PutAlertclassesJSONBody

// PostAlertserviceJSONRequestBody defines body for PostAlertservice for application/json ContentType.
type PostAlertserviceJSONRequestBody PostAlertserviceJSONBody

// PutAlertserviceIdIdJSONRequestBody defines body for PutAlertserviceIdId for application/json ContentType.
type PutAlertserviceIdIdJSONRequestBody PutAlertserviceIdIdJSONBody

// PostAlertserviceTestJSONRequestBody defines body for PostAlertserviceTest for application/json ContentType.
type PostAlertserviceTestJSONRequestBody PostAlertserviceTestJSONBody

// PostAuthCheckUserJSONRequestBody defines body for PostAuthCheckUser for application/json ContentType.
type PostAuthCheckUserJSONRequestBody PostAuthCheckUserJSONBody

// PostAuthGenerateTokenJSONRequestBody defines body for PostAuthGenerateToken for application/json ContentType.
type PostAuthGenerateTokenJSONRequestBody PostAuthGenerateTokenJSONBody

// PostBackupJSONRequestBody defines body for PostBackup for application/json ContentType.
type PostBackupJSONRequestBody PostBackupJSONBody

// PostBackupAzureGetBucketsJSONRequestBody defines body for PostBackupAzureGetBuckets for application/json ContentType.
type PostBackupAzureGetBucketsJSONRequestBody PostBackupAzureGetBucketsJSONBody

// PostBackupB2GetBucketsJSONRequestBody defines body for PostBackupB2GetBuckets for application/json ContentType.
type PostBackupB2GetBucketsJSONRequestBody PostBackupB2GetBucketsJSONBody

// PostBackupCredentialJSONRequestBody defines body for PostBackupCredential for application/json ContentType.
type PostBackupCredentialJSONRequestBody PostBackupCredentialJSONBody

// PutBackupCredentialIdIdJSONRequestBody defines body for PutBackupCredentialIdId for application/json ContentType.
type PutBackupCredentialIdIdJSONRequestBody PutBackupCredentialIdIdJSONBody

// PostBackupGcsGetBucketsJSONRequestBody defines body for PostBackupGcsGetBuckets for application/json ContentType.
type PostBackupGcsGetBucketsJSONRequestBody PostBackupGcsGetBucketsJSONBody

// PutBackupIdIdJSONRequestBody defines body for PutBackupIdId for application/json ContentType.
type PutBackupIdIdJSONRequestBody PutBackupIdIdJSONBody

// PostBackupS3GetBucketsJSONRequestBody defines body for PostBackupS3GetBuckets for application/json ContentType.
type PostBackupS3GetBucketsJSONRequestBody PostBackupS3GetBucketsJSONBody

// PostBootAttachJSONRequestBody defines body for PostBootAttach for application/json ContentType.
type PostBootAttachJSONRequestBody PostBootAttachJSONBody

// PostBootDetachJSONRequestBody defines body for PostBootDetach for application/json ContentType.
type PostBootDetachJSONRequestBody PostBootDetachJSONBody

// PostBootReplaceJSONRequestBody defines body for PostBootReplace for application/json ContentType.
type PostBootReplaceJSONRequestBody PostBootReplaceJSONBody

// PostBootSetScrubIntervalJSONRequestBody defines body for PostBootSetScrubInterval for application/json ContentType.
type PostBootSetScrubIntervalJSONRequestBody PostBootSetScrubIntervalJSONBody

// PostBootenvJSONRequestBody defines body for PostBootenv for application/json ContentType.
type PostBootenvJSONRequestBody PostBootenvJSONBody

// PutBootenvIdIdJSONRequestBody defines body for PutBootenvIdId for application/json ContentType.
type PutBootenvIdIdJSONRequestBody PutBootenvIdIdJSONBody

// PostBootenvIdIdActivateJSONRequestBody defines body for PostBootenvIdIdActivate for application/json ContentType.
type PostBootenvIdIdActivateJSONRequestBody PostBootenvIdIdActivateJSONBody

// PostBootenvIdIdSetAttributeJSONRequestBody defines body for PostBootenvIdIdSetAttribute for application/json ContentType.
type PostBootenvIdIdSetAttributeJSONRequestBody PostBootenvIdIdSetAttributeJSONBody

// PostCertificateJSONRequestBody defines body for PostCertificate for application/json ContentType.
type PostCertificateJSONRequestBody PostCertificateJSONBody

// DeleteCertificateIdIdJSONRequestBody defines body for DeleteCertificateIdId for application/json ContentType.
type DeleteCertificateIdIdJSONRequestBody DeleteCertificateIdIdJSONBody

// PutCertificateIdIdJSONRequestBody defines body for PutCertificateIdId for application/json ContentType.
type PutCertificateIdIdJSONRequestBody PutCertificateIdIdJSONBody

// PostCertificateauthorityJSONRequestBody defines body for PostCertificateauthority for application/json ContentType.
type PostCertificateauthorityJSONRequestBody PostCertificateauthorityJSONBody

// PostCertificateauthorityCaSignCsrJSONRequestBody defines body for PostCertificateauthorityCaSignCsr for application/json ContentType.
type PostCertificateauthorityCaSignCsrJSONRequestBody PostCertificateauthorityCaSignCsrJSONBody

// PutCertificateauthorityIdIdJSONRequestBody defines body for PutCertificateauthorityIdId for application/json ContentType.
type PutCertificateauthorityIdIdJSONRequestBody PutCertificateauthorityIdIdJSONBody

// PostCloudsyncJSONRequestBody defines body for PostCloudsync for application/json ContentType.
type PostCloudsyncJSONRequestBody PostCloudsyncJSONBody

// PostCloudsyncCredentialsJSONRequestBody defines body for PostCloudsyncCredentials for application/json ContentType.
type PostCloudsyncCredentialsJSONRequestBody PostCloudsyncCredentialsJSONBody

// PutCloudsyncCredentialsIdIdJSONRequestBody defines body for PutCloudsyncCredentialsIdId for application/json ContentType.
type PutCloudsyncCredentialsIdIdJSONRequestBody PutCloudsyncCredentialsIdIdJSONBody

// PostCloudsyncCredentialsVerifyJSONRequestBody defines body for PostCloudsyncCredentialsVerify for application/json ContentType.
type PostCloudsyncCredentialsVerifyJSONRequestBody PostCloudsyncCredentialsVerifyJSONBody

// PutCloudsyncIdIdJSONRequestBody defines body for PutCloudsyncIdId for application/json ContentType.
type PutCloudsyncIdIdJSONRequestBody PutCloudsyncIdIdJSONBody

// PostCloudsyncIdIdAbortJSONRequestBody defines body for PostCloudsyncIdIdAbort for application/json ContentType.
type PostCloudsyncIdIdAbortJSONRequestBody PostCloudsyncIdIdAbortJSONBody

// PostCloudsyncIdIdSyncJSONRequestBody defines body for PostCloudsyncIdIdSync for application/json ContentType.
type PostCloudsyncIdIdSyncJSONRequestBody PostCloudsyncIdIdSyncJSONBody

// PostCloudsyncListBucketsJSONRequestBody defines body for PostCloudsyncListBuckets for application/json ContentType.
type PostCloudsyncListBucketsJSONRequestBody PostCloudsyncListBucketsJSONBody

// PostCloudsyncListDirectoryJSONRequestBody defines body for PostCloudsyncListDirectory for application/json ContentType.
type PostCloudsyncListDirectoryJSONRequestBody PostCloudsyncListDirectoryJSONBody

// PostCloudsyncOnedriveListDrivesJSONRequestBody defines body for PostCloudsyncOnedriveListDrives for application/json ContentType.
type PostCloudsyncOnedriveListDrivesJSONRequestBody PostCloudsyncOnedriveListDrivesJSONBody

// PostConfigResetJSONRequestBody defines body for PostConfigReset for application/json ContentType.
type PostConfigResetJSONRequestBody PostConfigResetJSONBody

// PostCoreBulkJSONRequestBody defines body for PostCoreBulk for application/json ContentType.
type PostCoreBulkJSONRequestBody PostCoreBulkJSONBody

// PostCoreDebugJSONRequestBody defines body for PostCoreDebug for application/json ContentType.
type PostCoreDebugJSONRequestBody PostCoreDebugJSONBody

// PostCoreDownloadJSONRequestBody defines body for PostCoreDownload for application/json ContentType.
type PostCoreDownloadJSONRequestBody PostCoreDownloadJSONBody

// PostCoreGetMethodsJSONRequestBody defines body for PostCoreGetMethods for application/json ContentType.
type PostCoreGetMethodsJSONRequestBody PostCoreGetMethodsJSONBody

// PostCoreJobAbortJSONRequestBody defines body for PostCoreJobAbort for application/json ContentType.
type PostCoreJobAbortJSONRequestBody PostCoreJobAbortJSONBody

// PostCoreJobUpdateJSONRequestBody defines body for PostCoreJobUpdate for application/json ContentType.
type PostCoreJobUpdateJSONRequestBody PostCoreJobUpdateJSONBody

// PostCoreJobWaitJSONRequestBody defines body for PostCoreJobWait for application/json ContentType.
type PostCoreJobWaitJSONRequestBody PostCoreJobWaitJSONBody

// PostCronjobJSONRequestBody defines body for PostCronjob for application/json ContentType.
type PostCronjobJSONRequestBody PostCronjobJSONBody

// PutCronjobIdIdJSONRequestBody defines body for PutCronjobIdId for application/json ContentType.
type PutCronjobIdIdJSONRequestBody PutCronjobIdIdJSONBody

// PostCronjobRunJSONRequestBody defines body for PostCronjobRun for application/json ContentType.
type PostCronjobRunJSONRequestBody PostCronjobRunJSONBody

// PostDeviceGetInfoJSONRequestBody defines body for PostDeviceGetInfo for application/json ContentType.
type PostDeviceGetInfoJSONRequestBody PostDeviceGetInfoJSONBody

// PostDiskGetEncryptedJSONRequestBody defines body for PostDiskGetEncrypted for application/json ContentType.
type PostDiskGetEncryptedJSONRequestBody PostDiskGetEncryptedJSONBody

// PostDiskGetUnusedJSONRequestBody defines body for PostDiskGetUnused for application/json ContentType.
type PostDiskGetUnusedJSONRequestBody PostDiskGetUnusedJSONBody

// PutDiskIdIdJSONRequestBody defines body for PutDiskIdId for application/json ContentType.
type PutDiskIdIdJSONRequestBody PutDiskIdIdJSONBody

// PostDiskTemperaturesJSONRequestBody defines body for PostDiskTemperatures for application/json ContentType.
type PostDiskTemperaturesJSONRequestBody PostDiskTemperaturesJSONBody

// PostDiskWipeJSONRequestBody defines body for PostDiskWipe for application/json ContentType.
type PostDiskWipeJSONRequestBody PostDiskWipeJSONBody

// PutDyndnsJSONRequestBody defines body for PutDyndns for application/json ContentType.
type PutDyndnsJSONRequestBody PutDyndnsJSONBody

// PostFilesystemAclIsTrivialJSONRequestBody defines body for PostFilesystemAclIsTrivial for application/json ContentType.
type PostFilesystemAclIsTrivialJSONRequestBody PostFilesystemAclIsTrivialJSONBody

// PostFilesystemChownJSONRequestBody defines body for PostFilesystemChown for application/json ContentType.
type PostFilesystemChownJSONRequestBody PostFilesystemChownJSONBody

// PostFilesystemGetDefaultAclJSONRequestBody defines body for PostFilesystemGetDefaultAcl for application/json ContentType.
type PostFilesystemGetDefaultAclJSONRequestBody PostFilesystemGetDefaultAclJSONBody

// PostFilesystemGetaclJSONRequestBody defines body for PostFilesystemGetacl for application/json ContentType.
type PostFilesystemGetaclJSONRequestBody PostFilesystemGetaclJSONBody

// PostFilesystemListdirJSONRequestBody defines body for PostFilesystemListdir for application/json ContentType.
type PostFilesystemListdirJSONRequestBody PostFilesystemListdirJSONBody

// PostFilesystemSetaclJSONRequestBody defines body for PostFilesystemSetacl for application/json ContentType.
type PostFilesystemSetaclJSONRequestBody PostFilesystemSetaclJSONBody

// PostFilesystemSetpermJSONRequestBody defines body for PostFilesystemSetperm for application/json ContentType.
type PostFilesystemSetpermJSONRequestBody PostFilesystemSetpermJSONBody

// PostFilesystemStatJSONRequestBody defines body for PostFilesystemStat for application/json ContentType.
type PostFilesystemStatJSONRequestBody PostFilesystemStatJSONBody

// PostFilesystemStatfsJSONRequestBody defines body for PostFilesystemStatfs for application/json ContentType.
type PostFilesystemStatfsJSONRequestBody PostFilesystemStatfsJSONBody

// PutFtpJSONRequestBody defines body for PutFtp for application/json ContentType.
type PutFtpJSONRequestBody PutFtpJSONBody

// PostGroupJSONRequestBody defines body for PostGroup for application/json ContentType.
type PostGroupJSONRequestBody PostGroupJSONBody

// PostGroupGetGroupObjJSONRequestBody defines body for PostGroupGetGroupObj for application/json ContentType.
type PostGroupGetGroupObjJSONRequestBody PostGroupGetGroupObjJSONBody

// DeleteGroupIdIdJSONRequestBody defines body for DeleteGroupIdId for application/json ContentType.
type DeleteGroupIdIdJSONRequestBody DeleteGroupIdIdJSONBody

// PutGroupIdIdJSONRequestBody defines body for PutGroupIdId for application/json ContentType.
type PutGroupIdIdJSONRequestBody PutGroupIdIdJSONBody

// PostIdmapAdJSONRequestBody defines body for PostIdmapAd for application/json ContentType.
type PostIdmapAdJSONRequestBody PostIdmapAdJSONBody

// PutIdmapAdIdIdJSONRequestBody defines body for PutIdmapAdIdId for application/json ContentType.
type PutIdmapAdIdIdJSONRequestBody PutIdmapAdIdIdJSONBody

// PostIdmapAutoridJSONRequestBody defines body for PostIdmapAutorid for application/json ContentType.
type PostIdmapAutoridJSONRequestBody PostIdmapAutoridJSONBody

// PutIdmapAutoridIdIdJSONRequestBody defines body for PutIdmapAutoridIdId for application/json ContentType.
type PutIdmapAutoridIdIdJSONRequestBody PutIdmapAutoridIdIdJSONBody

// PostIdmapDomainJSONRequestBody defines body for PostIdmapDomain for application/json ContentType.
type PostIdmapDomainJSONRequestBody PostIdmapDomainJSONBody

// PutIdmapDomainIdIdJSONRequestBody defines body for PutIdmapDomainIdId for application/json ContentType.
type PutIdmapDomainIdIdJSONRequestBody PutIdmapDomainIdIdJSONBody

// PostIdmapDomaintobackendJSONRequestBody defines body for PostIdmapDomaintobackend for application/json ContentType.
type PostIdmapDomaintobackendJSONRequestBody PostIdmapDomaintobackendJSONBody

// PutIdmapDomaintobackendIdIdJSONRequestBody defines body for PutIdmapDomaintobackendIdId for application/json ContentType.
type PutIdmapDomaintobackendIdIdJSONRequestBody PutIdmapDomaintobackendIdIdJSONBody

// PostIdmapGetOrCreateIdmapByDomainJSONRequestBody defines body for PostIdmapGetOrCreateIdmapByDomain for application/json ContentType.
type PostIdmapGetOrCreateIdmapByDomainJSONRequestBody PostIdmapGetOrCreateIdmapByDomainJSONBody

// PostIdmapLdapJSONRequestBody defines body for PostIdmapLdap for application/json ContentType.
type PostIdmapLdapJSONRequestBody PostIdmapLdapJSONBody

// PutIdmapLdapIdIdJSONRequestBody defines body for PutIdmapLdapIdId for application/json ContentType.
type PutIdmapLdapIdIdJSONRequestBody PutIdmapLdapIdIdJSONBody

// PostIdmapNssJSONRequestBody defines body for PostIdmapNss for application/json ContentType.
type PostIdmapNssJSONRequestBody PostIdmapNssJSONBody

// PutIdmapNssIdIdJSONRequestBody defines body for PutIdmapNssIdId for application/json ContentType.
type PutIdmapNssIdIdJSONRequestBody PutIdmapNssIdIdJSONBody

// PostIdmapRfc2307JSONRequestBody defines body for PostIdmapRfc2307 for application/json ContentType.
type PostIdmapRfc2307JSONRequestBody PostIdmapRfc2307JSONBody

// PutIdmapRfc2307IdIdJSONRequestBody defines body for PutIdmapRfc2307IdId for application/json ContentType.
type PutIdmapRfc2307IdIdJSONRequestBody PutIdmapRfc2307IdIdJSONBody

// PostIdmapRidJSONRequestBody defines body for PostIdmapRid for application/json ContentType.
type PostIdmapRidJSONRequestBody PostIdmapRidJSONBody

// PutIdmapRidIdIdJSONRequestBody defines body for PutIdmapRidIdId for application/json ContentType.
type PutIdmapRidIdIdJSONRequestBody PutIdmapRidIdIdJSONBody

// PostIdmapScriptJSONRequestBody defines body for PostIdmapScript for application/json ContentType.
type PostIdmapScriptJSONRequestBody PostIdmapScriptJSONBody

// PutIdmapScriptIdIdJSONRequestBody defines body for PutIdmapScriptIdId for application/json ContentType.
type PutIdmapScriptIdIdJSONRequestBody PutIdmapScriptIdIdJSONBody

// PostIdmapTdbJSONRequestBody defines body for PostIdmapTdb for application/json ContentType.
type PostIdmapTdbJSONRequestBody PostIdmapTdbJSONBody

// PutIdmapTdbIdIdJSONRequestBody defines body for PutIdmapTdbIdId for application/json ContentType.
type PutIdmapTdbIdIdJSONRequestBody PutIdmapTdbIdIdJSONBody

// PostInitshutdownscriptJSONRequestBody defines body for PostInitshutdownscript for application/json ContentType.
type PostInitshutdownscriptJSONRequestBody PostInitshutdownscriptJSONBody

// PutInitshutdownscriptIdIdJSONRequestBody defines body for PutInitshutdownscriptIdId for application/json ContentType.
type PutInitshutdownscriptIdIdJSONRequestBody PutInitshutdownscriptIdIdJSONBody

// PostInterfaceJSONRequestBody defines body for PostInterface for application/json ContentType.
type PostInterfaceJSONRequestBody PostInterfaceJSONBody

// PostInterfaceBridgeMembersChoicesJSONRequestBody defines body for PostInterfaceBridgeMembersChoices for application/json ContentType.
type PostInterfaceBridgeMembersChoicesJSONRequestBody PostInterfaceBridgeMembersChoicesJSONBody

// PostInterfaceChoicesJSONRequestBody defines body for PostInterfaceChoices for application/json ContentType.
type PostInterfaceChoicesJSONRequestBody PostInterfaceChoicesJSONBody

// PostInterfaceCommitJSONRequestBody defines body for PostInterfaceCommit for application/json ContentType.
type PostInterfaceCommitJSONRequestBody PostInterfaceCommitJSONBody

// PutInterfaceIdIdJSONRequestBody defines body for PutInterfaceIdId for application/json ContentType.
type PutInterfaceIdIdJSONRequestBody PutInterfaceIdIdJSONBody

// PostInterfaceIpInUseJSONRequestBody defines body for PostInterfaceIpInUse for application/json ContentType.
type PostInterfaceIpInUseJSONRequestBody PostInterfaceIpInUseJSONBody

// PostInterfaceLagPortsChoicesJSONRequestBody defines body for PostInterfaceLagPortsChoices for application/json ContentType.
type PostInterfaceLagPortsChoicesJSONRequestBody PostInterfaceLagPortsChoicesJSONBody

// PutIpmiIdIdJSONRequestBody defines body for PutIpmiIdId for application/json ContentType.
type PutIpmiIdIdJSONRequestBody PutIpmiIdIdJSONBody

// PostIpmiIdentifyJSONRequestBody defines body for PostIpmiIdentify for application/json ContentType.
type PostIpmiIdentifyJSONRequestBody PostIpmiIdentifyJSONBody

// PostIscsiAuthJSONRequestBody defines body for PostIscsiAuth for application/json ContentType.
type PostIscsiAuthJSONRequestBody PostIscsiAuthJSONBody

// PutIscsiAuthIdIdJSONRequestBody defines body for PutIscsiAuthIdId for application/json ContentType.
type PutIscsiAuthIdIdJSONRequestBody PutIscsiAuthIdIdJSONBody

// PostIscsiExtentJSONRequestBody defines body for PostIscsiExtent for application/json ContentType.
type PostIscsiExtentJSONRequestBody PostIscsiExtentJSONBody

// PostIscsiExtentDiskChoicesJSONRequestBody defines body for PostIscsiExtentDiskChoices for application/json ContentType.
type PostIscsiExtentDiskChoicesJSONRequestBody PostIscsiExtentDiskChoicesJSONBody

// DeleteIscsiExtentIdIdJSONRequestBody defines body for DeleteIscsiExtentIdId for application/json ContentType.
type DeleteIscsiExtentIdIdJSONRequestBody DeleteIscsiExtentIdIdJSONBody

// PutIscsiExtentIdIdJSONRequestBody defines body for PutIscsiExtentIdId for application/json ContentType.
type PutIscsiExtentIdIdJSONRequestBody PutIscsiExtentIdIdJSONBody

// PutIscsiGlobalJSONRequestBody defines body for PutIscsiGlobal for application/json ContentType.
type PutIscsiGlobalJSONRequestBody PutIscsiGlobalJSONBody

// PostIscsiInitiatorJSONRequestBody defines body for PostIscsiInitiator for application/json ContentType.
type PostIscsiInitiatorJSONRequestBody PostIscsiInitiatorJSONBody

// PutIscsiInitiatorIdIdJSONRequestBody defines body for PutIscsiInitiatorIdId for application/json ContentType.
type PutIscsiInitiatorIdIdJSONRequestBody PutIscsiInitiatorIdIdJSONBody

// PostIscsiPortalJSONRequestBody defines body for PostIscsiPortal for application/json ContentType.
type PostIscsiPortalJSONRequestBody PostIscsiPortalJSONBody

// PutIscsiPortalIdIdJSONRequestBody defines body for PutIscsiPortalIdId for application/json ContentType.
type PutIscsiPortalIdIdJSONRequestBody PutIscsiPortalIdIdJSONBody

// PostIscsiTargetJSONRequestBody defines body for PostIscsiTarget for application/json ContentType.
type PostIscsiTargetJSONRequestBody PostIscsiTargetJSONBody

// DeleteIscsiTargetIdIdJSONRequestBody defines body for DeleteIscsiTargetIdId for application/json ContentType.
type DeleteIscsiTargetIdIdJSONRequestBody DeleteIscsiTargetIdIdJSONBody

// PutIscsiTargetIdIdJSONRequestBody defines body for PutIscsiTargetIdId for application/json ContentType.
type PutIscsiTargetIdIdJSONRequestBody PutIscsiTargetIdIdJSONBody

// PostIscsiTargetextentJSONRequestBody defines body for PostIscsiTargetextent for application/json ContentType.
type PostIscsiTargetextentJSONRequestBody PostIscsiTargetextentJSONBody

// DeleteIscsiTargetextentIdIdJSONRequestBody defines body for DeleteIscsiTargetextentIdId for application/json ContentType.
type DeleteIscsiTargetextentIdIdJSONRequestBody DeleteIscsiTargetextentIdIdJSONBody

// PutIscsiTargetextentIdIdJSONRequestBody defines body for PutIscsiTargetextentIdId for application/json ContentType.
type PutIscsiTargetextentIdIdJSONRequestBody PutIscsiTargetextentIdIdJSONBody

// PostJailJSONRequestBody defines body for PostJail for application/json ContentType.
type PostJailJSONRequestBody PostJailJSONBody

// PostJailActivateJSONRequestBody defines body for PostJailActivate for application/json ContentType.
type PostJailActivateJSONRequestBody PostJailActivateJSONBody

// PostJailCleanJSONRequestBody defines body for PostJailClean for application/json ContentType.
type PostJailCleanJSONRequestBody PostJailCleanJSONBody

// PostJailExecJSONRequestBody defines body for PostJailExec for application/json ContentType.
type PostJailExecJSONRequestBody PostJailExecJSONBody

// PostJailExportJSONRequestBody defines body for PostJailExport for application/json ContentType.
type PostJailExportJSONRequestBody PostJailExportJSONBody

// PostJailFetchJSONRequestBody defines body for PostJailFetch for application/json ContentType.
type PostJailFetchJSONRequestBody PostJailFetchJSONBody

// PostJailFstabJSONRequestBody defines body for PostJailFstab for application/json ContentType.
type PostJailFstabJSONRequestBody PostJailFstabJSONBody

// DeleteJailIdIdJSONRequestBody defines body for DeleteJailIdId for application/json ContentType.
type DeleteJailIdIdJSONRequestBody DeleteJailIdIdJSONBody

// PutJailIdIdJSONRequestBody defines body for PutJailIdId for application/json ContentType.
type PutJailIdIdJSONRequestBody PutJailIdIdJSONBody

// PostJailIdIdCloneJSONRequestBody defines body for PostJailIdIdClone for application/json ContentType.
type PostJailIdIdCloneJSONRequestBody PostJailIdIdCloneJSONBody

// PostJailImportImageJSONRequestBody defines body for PostJailImportImage for application/json ContentType.
type PostJailImportImageJSONRequestBody PostJailImportImageJSONBody

// PostJailRcActionJSONRequestBody defines body for PostJailRcAction for application/json ContentType.
type PostJailRcActionJSONRequestBody PostJailRcActionJSONBody

// PostJailReleasesChoicesJSONRequestBody defines body for PostJailReleasesChoices for application/json ContentType.
type PostJailReleasesChoicesJSONRequestBody PostJailReleasesChoicesJSONBody

// PostJailRestartJSONRequestBody defines body for PostJailRestart for application/json ContentType.
type PostJailRestartJSONRequestBody PostJailRestartJSONBody

// PostJailStartJSONRequestBody defines body for PostJailStart for application/json ContentType.
type PostJailStartJSONRequestBody PostJailStartJSONBody

// PostJailStopJSONRequestBody defines body for PostJailStop for application/json ContentType.
type PostJailStopJSONRequestBody PostJailStopJSONBody

// PostJailUpdateDefaultsJSONRequestBody defines body for PostJailUpdateDefaults for application/json ContentType.
type PostJailUpdateDefaultsJSONRequestBody PostJailUpdateDefaultsJSONBody

// PostJailUpdateToLatestPatchJSONRequestBody defines body for PostJailUpdateToLatestPatch for application/json ContentType.
type PostJailUpdateToLatestPatchJSONRequestBody PostJailUpdateToLatestPatchJSONBody

// PutKerberosJSONRequestBody defines body for PutKerberos for application/json ContentType.
type PutKerberosJSONRequestBody PutKerberosJSONBody

// PostKerberosKeytabJSONRequestBody defines body for PostKerberosKeytab for application/json ContentType.
type PostKerberosKeytabJSONRequestBody PostKerberosKeytabJSONBody

// PutKerberosKeytabIdIdJSONRequestBody defines body for PutKerberosKeytabIdId for application/json ContentType.
type PutKerberosKeytabIdIdJSONRequestBody PutKerberosKeytabIdIdJSONBody

// PostKerberosRealmJSONRequestBody defines body for PostKerberosRealm for application/json ContentType.
type PostKerberosRealmJSONRequestBody PostKerberosRealmJSONBody

// PutKerberosRealmIdIdJSONRequestBody defines body for PutKerberosRealmIdId for application/json ContentType.
type PutKerberosRealmIdIdJSONRequestBody PutKerberosRealmIdIdJSONBody

// PostKeychaincredentialJSONRequestBody defines body for PostKeychaincredential for application/json ContentType.
type PostKeychaincredentialJSONRequestBody PostKeychaincredentialJSONBody

// DeleteKeychaincredentialIdIdJSONRequestBody defines body for DeleteKeychaincredentialIdId for application/json ContentType.
type DeleteKeychaincredentialIdIdJSONRequestBody DeleteKeychaincredentialIdIdJSONBody

// PutKeychaincredentialIdIdJSONRequestBody defines body for PutKeychaincredentialIdId for application/json ContentType.
type PutKeychaincredentialIdIdJSONRequestBody PutKeychaincredentialIdIdJSONBody

// PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody defines body for PostKeychaincredentialRemoteSshHostKeyScan for application/json ContentType.
type PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody PostKeychaincredentialRemoteSshHostKeyScanJSONBody

// PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody defines body for PostKeychaincredentialRemoteSshSemiautomaticSetup for application/json ContentType.
type PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody PostKeychaincredentialRemoteSshSemiautomaticSetupJSONBody

// PostKeychaincredentialUsedByJSONRequestBody defines body for PostKeychaincredentialUsedBy for application/json ContentType.
type PostKeychaincredentialUsedByJSONRequestBody PostKeychaincredentialUsedByJSONBody

// PutLdapJSONRequestBody defines body for PutLdap for application/json ContentType.
type PutLdapJSONRequestBody PutLdapJSONBody

// PutLldpJSONRequestBody defines body for PutLldp for application/json ContentType.
type PutLldpJSONRequestBody PutLldpJSONBody

// PutMailJSONRequestBody defines body for PutMail for application/json ContentType.
type PutMailJSONRequestBody PutMailJSONBody

// PostMailSendJSONRequestBody defines body for PostMailSend for application/json ContentType.
type PostMailSendJSONRequestBody PostMailSendJSONBody

// PutNetworkConfigurationJSONRequestBody defines body for PutNetworkConfiguration for application/json ContentType.
type PutNetworkConfigurationJSONRequestBody PutNetworkConfigurationJSONBody

// PutNfsJSONRequestBody defines body for PutNfs for application/json ContentType.
type PutNfsJSONRequestBody PutNfsJSONBody

// PutNisJSONRequestBody defines body for PutNis for application/json ContentType.
type PutNisJSONRequestBody PutNisJSONBody

// PostPluginJSONRequestBody defines body for PostPlugin for application/json ContentType.
type PostPluginJSONRequestBody PostPluginJSONBody

// PostPluginAvailableJSONRequestBody defines body for PostPluginAvailable for application/json ContentType.
type PostPluginAvailableJSONRequestBody PostPluginAvailableJSONBody

// PostPluginBranchesChoicesJSONRequestBody defines body for PostPluginBranchesChoices for application/json ContentType.
type PostPluginBranchesChoicesJSONRequestBody PostPluginBranchesChoicesJSONBody

// PostPluginDefaultsJSONRequestBody defines body for PostPluginDefaults for application/json ContentType.
type PostPluginDefaultsJSONRequestBody PostPluginDefaultsJSONBody

// PutPluginIdIdJSONRequestBody defines body for PutPluginIdId for application/json ContentType.
type PutPluginIdIdJSONRequestBody PutPluginIdIdJSONBody

// PostPoolJSONRequestBody defines body for PostPool for application/json ContentType.
type PostPoolJSONRequestBody PostPoolJSONBody

// PostPoolDatasetJSONRequestBody defines body for PostPoolDataset for application/json ContentType.
type PostPoolDatasetJSONRequestBody PostPoolDatasetJSONBody

// DeletePoolDatasetIdIdJSONRequestBody defines body for DeletePoolDatasetIdId for application/json ContentType.
type DeletePoolDatasetIdIdJSONRequestBody DeletePoolDatasetIdIdJSONBody

// PutPoolDatasetIdIdJSONRequestBody defines body for PutPoolDatasetIdId for application/json ContentType.
type PutPoolDatasetIdIdJSONRequestBody PutPoolDatasetIdIdJSONBody

// PostPoolDatasetIdIdAttachmentsJSONRequestBody defines body for PostPoolDatasetIdIdAttachments for application/json ContentType.
type PostPoolDatasetIdIdAttachmentsJSONRequestBody PostPoolDatasetIdIdAttachmentsJSONBody

// PostPoolDatasetIdIdPermissionJSONRequestBody defines body for PostPoolDatasetIdIdPermission for application/json ContentType.
type PostPoolDatasetIdIdPermissionJSONRequestBody PostPoolDatasetIdIdPermissionJSONBody

// PostPoolDatasetIdIdProcessesJSONRequestBody defines body for PostPoolDatasetIdIdProcesses for application/json ContentType.
type PostPoolDatasetIdIdProcessesJSONRequestBody PostPoolDatasetIdIdProcessesJSONBody

// PostPoolDatasetIdIdPromoteJSONRequestBody defines body for PostPoolDatasetIdIdPromote for application/json ContentType.
type PostPoolDatasetIdIdPromoteJSONRequestBody PostPoolDatasetIdIdPromoteJSONBody

// PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody defines body for PostPoolDatasetRecommendedZvolBlocksize for application/json ContentType.
type PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody PostPoolDatasetRecommendedZvolBlocksizeJSONBody

// PostPoolFilesystemChoicesJSONRequestBody defines body for PostPoolFilesystemChoices for application/json ContentType.
type PostPoolFilesystemChoicesJSONRequestBody PostPoolFilesystemChoicesJSONBody

// PutPoolIdIdJSONRequestBody defines body for PutPoolIdId for application/json ContentType.
type PutPoolIdIdJSONRequestBody PutPoolIdIdJSONBody

// PostPoolIdIdAttachmentsJSONRequestBody defines body for PostPoolIdIdAttachments for application/json ContentType.
type PostPoolIdIdAttachmentsJSONRequestBody PostPoolIdIdAttachmentsJSONBody

// PostPoolIdIdDetachJSONRequestBody defines body for PostPoolIdIdDetach for application/json ContentType.
type PostPoolIdIdDetachJSONRequestBody PostPoolIdIdDetachJSONBody

// PostPoolIdIdDownloadEncryptionKeyJSONRequestBody defines body for PostPoolIdIdDownloadEncryptionKey for application/json ContentType.
type PostPoolIdIdDownloadEncryptionKeyJSONRequestBody PostPoolIdIdDownloadEncryptionKeyJSONBody

// PostPoolIdIdExportJSONRequestBody defines body for PostPoolIdIdExport for application/json ContentType.
type PostPoolIdIdExportJSONRequestBody PostPoolIdIdExportJSONBody

// PostPoolIdIdGetDisksJSONRequestBody defines body for PostPoolIdIdGetDisks for application/json ContentType.
type PostPoolIdIdGetDisksJSONRequestBody PostPoolIdIdGetDisksJSONBody

// PostPoolIdIdIsUpgradedJSONRequestBody defines body for PostPoolIdIdIsUpgraded for application/json ContentType.
type PostPoolIdIdIsUpgradedJSONRequestBody PostPoolIdIdIsUpgradedJSONBody

// PostPoolIdIdLockJSONRequestBody defines body for PostPoolIdIdLock for application/json ContentType.
type PostPoolIdIdLockJSONRequestBody PostPoolIdIdLockJSONBody

// PostPoolIdIdOfflineJSONRequestBody defines body for PostPoolIdIdOffline for application/json ContentType.
type PostPoolIdIdOfflineJSONRequestBody PostPoolIdIdOfflineJSONBody

// PostPoolIdIdOnlineJSONRequestBody defines body for PostPoolIdIdOnline for application/json ContentType.
type PostPoolIdIdOnlineJSONRequestBody PostPoolIdIdOnlineJSONBody

// PostPoolIdIdPassphraseJSONRequestBody defines body for PostPoolIdIdPassphrase for application/json ContentType.
type PostPoolIdIdPassphraseJSONRequestBody PostPoolIdIdPassphraseJSONBody

// PostPoolIdIdProcessesJSONRequestBody defines body for PostPoolIdIdProcesses for application/json ContentType.
type PostPoolIdIdProcessesJSONRequestBody PostPoolIdIdProcessesJSONBody

// PostPoolIdIdRecoverykeyRmJSONRequestBody defines body for PostPoolIdIdRecoverykeyRm for application/json ContentType.
type PostPoolIdIdRecoverykeyRmJSONRequestBody PostPoolIdIdRecoverykeyRmJSONBody

// PostPoolIdIdRekeyJSONRequestBody defines body for PostPoolIdIdRekey for application/json ContentType.
type PostPoolIdIdRekeyJSONRequestBody PostPoolIdIdRekeyJSONBody

// PostPoolIdIdRemoveJSONRequestBody defines body for PostPoolIdIdRemove for application/json ContentType.
type PostPoolIdIdRemoveJSONRequestBody PostPoolIdIdRemoveJSONBody

// PostPoolIdIdReplaceJSONRequestBody defines body for PostPoolIdIdReplace for application/json ContentType.
type PostPoolIdIdReplaceJSONRequestBody PostPoolIdIdReplaceJSONBody

// PostPoolIdIdScrubJSONRequestBody defines body for PostPoolIdIdScrub for application/json ContentType.
type PostPoolIdIdScrubJSONRequestBody PostPoolIdIdScrubJSONBody

// PostPoolIdIdUnlockJSONRequestBody defines body for PostPoolIdIdUnlock for application/json ContentType.
type PostPoolIdIdUnlockJSONRequestBody PostPoolIdIdUnlockJSONBody

// PostPoolIdIdUpgradeJSONRequestBody defines body for PostPoolIdIdUpgrade for application/json ContentType.
type PostPoolIdIdUpgradeJSONRequestBody PostPoolIdIdUpgradeJSONBody

// PostPoolImportDiskJSONRequestBody defines body for PostPoolImportDisk for application/json ContentType.
type PostPoolImportDiskJSONRequestBody PostPoolImportDiskJSONBody

// PostPoolImportDiskAutodetectFsTypeJSONRequestBody defines body for PostPoolImportDiskAutodetectFsType for application/json ContentType.
type PostPoolImportDiskAutodetectFsTypeJSONRequestBody PostPoolImportDiskAutodetectFsTypeJSONBody

// PostPoolImportPoolJSONRequestBody defines body for PostPoolImportPool for application/json ContentType.
type PostPoolImportPoolJSONRequestBody PostPoolImportPoolJSONBody

// PutPoolResilverJSONRequestBody defines body for PutPoolResilver for application/json ContentType.
type PutPoolResilverJSONRequestBody PutPoolResilverJSONBody

// PostPoolScrubJSONRequestBody defines body for PostPoolScrub for application/json ContentType.
type PostPoolScrubJSONRequestBody PostPoolScrubJSONBody

// PutPoolScrubIdIdJSONRequestBody defines body for PutPoolScrubIdId for application/json ContentType.
type PutPoolScrubIdIdJSONRequestBody PutPoolScrubIdIdJSONBody

// PostPoolScrubRunJSONRequestBody defines body for PostPoolScrubRun for application/json ContentType.
type PostPoolScrubRunJSONRequestBody PostPoolScrubRunJSONBody

// PostPoolSnapshottaskJSONRequestBody defines body for PostPoolSnapshottask for application/json ContentType.
type PostPoolSnapshottaskJSONRequestBody PostPoolSnapshottaskJSONBody

// PutPoolSnapshottaskIdIdJSONRequestBody defines body for PutPoolSnapshottaskIdId for application/json ContentType.
type PutPoolSnapshottaskIdIdJSONRequestBody PutPoolSnapshottaskIdIdJSONBody

// PostPoolSnapshottaskIdIdRunJSONRequestBody defines body for PostPoolSnapshottaskIdIdRun for application/json ContentType.
type PostPoolSnapshottaskIdIdRunJSONRequestBody PostPoolSnapshottaskIdIdRunJSONBody

// PostPoolUnlockServicesRestartChoicesJSONRequestBody defines body for PostPoolUnlockServicesRestartChoices for application/json ContentType.
type PostPoolUnlockServicesRestartChoicesJSONRequestBody PostPoolUnlockServicesRestartChoicesJSONBody

// PostReplicationJSONRequestBody defines body for PostReplication for application/json ContentType.
type PostReplicationJSONRequestBody PostReplicationJSONBody

// PostReplicationCountEligibleManualSnapshotsJSONRequestBody defines body for PostReplicationCountEligibleManualSnapshots for application/json ContentType.
type PostReplicationCountEligibleManualSnapshotsJSONRequestBody PostReplicationCountEligibleManualSnapshotsJSONBody

// PostReplicationCreateDatasetJSONRequestBody defines body for PostReplicationCreateDataset for application/json ContentType.
type PostReplicationCreateDatasetJSONRequestBody PostReplicationCreateDatasetJSONBody

// PutReplicationIdIdJSONRequestBody defines body for PutReplicationIdId for application/json ContentType.
type PutReplicationIdIdJSONRequestBody PutReplicationIdIdJSONBody

// PostReplicationIdIdRunJSONRequestBody defines body for PostReplicationIdIdRun for application/json ContentType.
type PostReplicationIdIdRunJSONRequestBody PostReplicationIdIdRunJSONBody

// PostReplicationListDatasetsJSONRequestBody defines body for PostReplicationListDatasets for application/json ContentType.
type PostReplicationListDatasetsJSONRequestBody PostReplicationListDatasetsJSONBody

// PostReplicationTargetUnmatchedSnapshotsJSONRequestBody defines body for PostReplicationTargetUnmatchedSnapshots for application/json ContentType.
type PostReplicationTargetUnmatchedSnapshotsJSONRequestBody PostReplicationTargetUnmatchedSnapshotsJSONBody

// PutReportingJSONRequestBody defines body for PutReporting for application/json ContentType.
type PutReportingJSONRequestBody PutReportingJSONBody

// PostReportingGetDataJSONRequestBody defines body for PostReportingGetData for application/json ContentType.
type PostReportingGetDataJSONRequestBody PostReportingGetDataJSONBody

// PostRouteIpv4gwReachableJSONRequestBody defines body for PostRouteIpv4gwReachable for application/json ContentType.
type PostRouteIpv4gwReachableJSONRequestBody PostRouteIpv4gwReachableJSONBody

// PutRsyncdJSONRequestBody defines body for PutRsyncd for application/json ContentType.
type PutRsyncdJSONRequestBody PutRsyncdJSONBody

// PostRsyncmodJSONRequestBody defines body for PostRsyncmod for application/json ContentType.
type PostRsyncmodJSONRequestBody PostRsyncmodJSONBody

// PutRsyncmodIdIdJSONRequestBody defines body for PutRsyncmodIdId for application/json ContentType.
type PutRsyncmodIdIdJSONRequestBody PutRsyncmodIdIdJSONBody

// PostRsynctaskJSONRequestBody defines body for PostRsynctask for application/json ContentType.
type PostRsynctaskJSONRequestBody PostRsynctaskJSONBody

// PutRsynctaskIdIdJSONRequestBody defines body for PutRsynctaskIdId for application/json ContentType.
type PutRsynctaskIdIdJSONRequestBody PutRsynctaskIdIdJSONBody

// PostRsynctaskIdIdRunJSONRequestBody defines body for PostRsynctaskIdIdRun for application/json ContentType.
type PostRsynctaskIdIdRunJSONRequestBody PostRsynctaskIdIdRunJSONBody

// PutS3JSONRequestBody defines body for PutS3 for application/json ContentType.
type PutS3JSONRequestBody PutS3JSONBody

// PutServiceIdIdJSONRequestBody defines body for PutServiceIdId for application/json ContentType.
type PutServiceIdIdJSONRequestBody PutServiceIdIdJSONBody

// PostServiceReloadJSONRequestBody defines body for PostServiceReload for application/json ContentType.
type PostServiceReloadJSONRequestBody PostServiceReloadJSONBody

// PostServiceRestartJSONRequestBody defines body for PostServiceRestart for application/json ContentType.
type PostServiceRestartJSONRequestBody PostServiceRestartJSONBody

// PostServiceStartJSONRequestBody defines body for PostServiceStart for application/json ContentType.
type PostServiceStartJSONRequestBody PostServiceStartJSONBody

// PostServiceStopJSONRequestBody defines body for PostServiceStop for application/json ContentType.
type PostServiceStopJSONRequestBody PostServiceStopJSONBody

// PostServiceTerminateProcessJSONRequestBody defines body for PostServiceTerminateProcess for application/json ContentType.
type PostServiceTerminateProcessJSONRequestBody PostServiceTerminateProcessJSONBody

// PostSharingAfpJSONRequestBody defines body for PostSharingAfp for application/json ContentType.
type PostSharingAfpJSONRequestBody PostSharingAfpJSONBody

// PutSharingAfpIdIdJSONRequestBody defines body for PutSharingAfpIdId for application/json ContentType.
type PutSharingAfpIdIdJSONRequestBody PutSharingAfpIdIdJSONBody

// PostSharingNfsJSONRequestBody defines body for PostSharingNfs for application/json ContentType.
type PostSharingNfsJSONRequestBody PostSharingNfsJSONBody

// PutSharingNfsIdIdJSONRequestBody defines body for PutSharingNfsIdId for application/json ContentType.
type PutSharingNfsIdIdJSONRequestBody PutSharingNfsIdIdJSONBody

// PostSharingSmbJSONRequestBody defines body for PostSharingSmb for application/json ContentType.
type PostSharingSmbJSONRequestBody PostSharingSmbJSONBody

// PutSharingSmbIdIdJSONRequestBody defines body for PutSharingSmbIdId for application/json ContentType.
type PutSharingSmbIdIdJSONRequestBody PutSharingSmbIdIdJSONBody

// PostSharingWebdavJSONRequestBody defines body for PostSharingWebdav for application/json ContentType.
type PostSharingWebdavJSONRequestBody PostSharingWebdavJSONBody

// PutSharingWebdavIdIdJSONRequestBody defines body for PutSharingWebdavIdId for application/json ContentType.
type PutSharingWebdavIdIdJSONRequestBody PutSharingWebdavIdIdJSONBody

// PutSmartJSONRequestBody defines body for PutSmart for application/json ContentType.
type PutSmartJSONRequestBody PutSmartJSONBody

// PostSmartTestJSONRequestBody defines body for PostSmartTest for application/json ContentType.
type PostSmartTestJSONRequestBody PostSmartTestJSONBody

// PutSmartTestIdIdJSONRequestBody defines body for PutSmartTestIdId for application/json ContentType.
type PutSmartTestIdIdJSONRequestBody PutSmartTestIdIdJSONBody

// PutSmbJSONRequestBody defines body for PutSmb for application/json ContentType.
type PutSmbJSONRequestBody PutSmbJSONBody

// PostSmbSharesecJSONRequestBody defines body for PostSmbSharesec for application/json ContentType.
type PostSmbSharesecJSONRequestBody PostSmbSharesecJSONBody

// PostSmbSharesecGetaclJSONRequestBody defines body for PostSmbSharesecGetacl for application/json ContentType.
type PostSmbSharesecGetaclJSONRequestBody PostSmbSharesecGetaclJSONBody

// PutSmbSharesecIdIdJSONRequestBody defines body for PutSmbSharesecIdId for application/json ContentType.
type PutSmbSharesecIdIdJSONRequestBody PutSmbSharesecIdIdJSONBody

// PutSnmpJSONRequestBody defines body for PutSnmp for application/json ContentType.
type PutSnmpJSONRequestBody PutSnmpJSONBody

// PutSshJSONRequestBody defines body for PutSsh for application/json ContentType.
type PutSshJSONRequestBody PutSshJSONBody

// PostStaticrouteJSONRequestBody defines body for PostStaticroute for application/json ContentType.
type PostStaticrouteJSONRequestBody PostStaticrouteJSONBody

// PutStaticrouteIdIdJSONRequestBody defines body for PutStaticrouteIdId for application/json ContentType.
type PutStaticrouteIdIdJSONRequestBody PutStaticrouteIdIdJSONBody

// PostStatsGetDataJSONRequestBody defines body for PostStatsGetData for application/json ContentType.
type PostStatsGetDataJSONRequestBody PostStatsGetDataJSONBody

// PostStatsGetDatasetInfoJSONRequestBody defines body for PostStatsGetDatasetInfo for application/json ContentType.
type PostStatsGetDatasetInfoJSONRequestBody PostStatsGetDatasetInfoJSONBody

// PutSupportJSONRequestBody defines body for PutSupport for application/json ContentType.
type PutSupportJSONRequestBody PutSupportJSONBody

// PostSupportFetchCategoriesJSONRequestBody defines body for PostSupportFetchCategories for application/json ContentType.
type PostSupportFetchCategoriesJSONRequestBody PostSupportFetchCategoriesJSONBody

// PostSupportNewTicketJSONRequestBody defines body for PostSupportNewTicket for application/json ContentType.
type PostSupportNewTicketJSONRequestBody PostSupportNewTicketJSONBody

// PutSystemAdvancedJSONRequestBody defines body for PutSystemAdvanced for application/json ContentType.
type PutSystemAdvancedJSONRequestBody PutSystemAdvancedJSONBody

// PostSystemFeatureEnabledJSONRequestBody defines body for PostSystemFeatureEnabled for application/json ContentType.
type PostSystemFeatureEnabledJSONRequestBody PostSystemFeatureEnabledJSONBody

// PutSystemGeneralJSONRequestBody defines body for PutSystemGeneral for application/json ContentType.
type PutSystemGeneralJSONRequestBody PutSystemGeneralJSONBody

// PostSystemLicenseUpdateJSONRequestBody defines body for PostSystemLicenseUpdate for application/json ContentType.
type PostSystemLicenseUpdateJSONRequestBody PostSystemLicenseUpdateJSONBody

// PostSystemNtpserverJSONRequestBody defines body for PostSystemNtpserver for application/json ContentType.
type PostSystemNtpserverJSONRequestBody PostSystemNtpserverJSONBody

// PutSystemNtpserverIdIdJSONRequestBody defines body for PutSystemNtpserverIdId for application/json ContentType.
type PutSystemNtpserverIdIdJSONRequestBody PutSystemNtpserverIdIdJSONBody

// PostSystemRebootJSONRequestBody defines body for PostSystemReboot for application/json ContentType.
type PostSystemRebootJSONRequestBody PostSystemRebootJSONBody

// PostSystemShutdownJSONRequestBody defines body for PostSystemShutdown for application/json ContentType.
type PostSystemShutdownJSONRequestBody PostSystemShutdownJSONBody

// PutSystemdatasetJSONRequestBody defines body for PutSystemdataset for application/json ContentType.
type PutSystemdatasetJSONRequestBody PutSystemdatasetJSONBody

// PutTftpJSONRequestBody defines body for PutTftp for application/json ContentType.
type PutTftpJSONRequestBody PutTftpJSONBody

// PostTunableJSONRequestBody defines body for PostTunable for application/json ContentType.
type PostTunableJSONRequestBody PostTunableJSONBody

// PutTunableIdIdJSONRequestBody defines body for PutTunableIdId for application/json ContentType.
type PutTunableIdIdJSONRequestBody PutTunableIdIdJSONBody

// PostUpdateCheckAvailableJSONRequestBody defines body for PostUpdateCheckAvailable for application/json ContentType.
type PostUpdateCheckAvailableJSONRequestBody PostUpdateCheckAvailableJSONBody

// PostUpdateGetPendingJSONRequestBody defines body for PostUpdateGetPending for application/json ContentType.
type PostUpdateGetPendingJSONRequestBody PostUpdateGetPendingJSONBody

// PostUpdateManualJSONRequestBody defines body for PostUpdateManual for application/json ContentType.
type PostUpdateManualJSONRequestBody PostUpdateManualJSONBody

// PostUpdateSetTrainJSONRequestBody defines body for PostUpdateSetTrain for application/json ContentType.
type PostUpdateSetTrainJSONRequestBody PostUpdateSetTrainJSONBody

// PostUpdateUpdateJSONRequestBody defines body for PostUpdateUpdate for application/json ContentType.
type PostUpdateUpdateJSONRequestBody PostUpdateUpdateJSONBody

// PutUpsJSONRequestBody defines body for PutUps for application/json ContentType.
type PutUpsJSONRequestBody PutUpsJSONBody

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// PostUserGetUserObjJSONRequestBody defines body for PostUserGetUserObj for application/json ContentType.
type PostUserGetUserObjJSONRequestBody PostUserGetUserObjJSONBody

// DeleteUserIdIdJSONRequestBody defines body for DeleteUserIdId for application/json ContentType.
type DeleteUserIdIdJSONRequestBody DeleteUserIdIdJSONBody

// PutUserIdIdJSONRequestBody defines body for PutUserIdId for application/json ContentType.
type PutUserIdIdJSONRequestBody PutUserIdIdJSONBody

// PostUserIdIdPopAttributeJSONRequestBody defines body for PostUserIdIdPopAttribute for application/json ContentType.
type PostUserIdIdPopAttributeJSONRequestBody PostUserIdIdPopAttributeJSONBody

// PostUserIdIdSetAttributeJSONRequestBody defines body for PostUserIdIdSetAttribute for application/json ContentType.
type PostUserIdIdSetAttributeJSONRequestBody PostUserIdIdSetAttributeJSONBody

// PostVmJSONRequestBody defines body for PostVm for application/json ContentType.
type PostVmJSONRequestBody PostVmJSONBody

// PostVmDeviceJSONRequestBody defines body for PostVmDevice for application/json ContentType.
type PostVmDeviceJSONRequestBody PostVmDeviceJSONBody

// DeleteVmDeviceIdIdJSONRequestBody defines body for DeleteVmDeviceIdId for application/json ContentType.
type DeleteVmDeviceIdIdJSONRequestBody DeleteVmDeviceIdIdJSONBody

// PutVmDeviceIdIdJSONRequestBody defines body for PutVmDeviceIdId for application/json ContentType.
type PutVmDeviceIdIdJSONRequestBody PutVmDeviceIdIdJSONBody

// PostVmGetAttachedIfaceJSONRequestBody defines body for PostVmGetAttachedIface for application/json ContentType.
type PostVmGetAttachedIfaceJSONRequestBody PostVmGetAttachedIfaceJSONBody

// PostVmGetAvailableMemoryJSONRequestBody defines body for PostVmGetAvailableMemory for application/json ContentType.
type PostVmGetAvailableMemoryJSONRequestBody PostVmGetAvailableMemoryJSONBody

// PostVmGetConsoleJSONRequestBody defines body for PostVmGetConsole for application/json ContentType.
type PostVmGetConsoleJSONRequestBody PostVmGetConsoleJSONBody

// PostVmGetVncJSONRequestBody defines body for PostVmGetVnc for application/json ContentType.
type PostVmGetVncJSONRequestBody PostVmGetVncJSONBody

// PutVmIdIdJSONRequestBody defines body for PutVmIdId for application/json ContentType.
type PutVmIdIdJSONRequestBody PutVmIdIdJSONBody

// PostVmIdIdCloneJSONRequestBody defines body for PostVmIdIdClone for application/json ContentType.
type PostVmIdIdCloneJSONRequestBody PostVmIdIdCloneJSONBody

// PostVmIdIdRestartJSONRequestBody defines body for PostVmIdIdRestart for application/json ContentType.
type PostVmIdIdRestartJSONRequestBody PostVmIdIdRestartJSONBody

// PostVmIdIdStartJSONRequestBody defines body for PostVmIdIdStart for application/json ContentType.
type PostVmIdIdStartJSONRequestBody PostVmIdIdStartJSONBody

// PostVmIdIdStatusJSONRequestBody defines body for PostVmIdIdStatus for application/json ContentType.
type PostVmIdIdStatusJSONRequestBody PostVmIdIdStatusJSONBody

// PostVmIdIdStopJSONRequestBody defines body for PostVmIdIdStop for application/json ContentType.
type PostVmIdIdStopJSONRequestBody PostVmIdIdStopJSONBody

// PostVmwareJSONRequestBody defines body for PostVmware for application/json ContentType.
type PostVmwareJSONRequestBody PostVmwareJSONBody

// PostVmwareDatasetHasVmsJSONRequestBody defines body for PostVmwareDatasetHasVms for application/json ContentType.
type PostVmwareDatasetHasVmsJSONRequestBody PostVmwareDatasetHasVmsJSONBody

// PostVmwareGetDatastoresJSONRequestBody defines body for PostVmwareGetDatastores for application/json ContentType.
type PostVmwareGetDatastoresJSONRequestBody PostVmwareGetDatastoresJSONBody

// PostVmwareGetVirtualMachinesJSONRequestBody defines body for PostVmwareGetVirtualMachines for application/json ContentType.
type PostVmwareGetVirtualMachinesJSONRequestBody PostVmwareGetVirtualMachinesJSONBody

// PutVmwareIdIdJSONRequestBody defines body for PutVmwareIdId for application/json ContentType.
type PutVmwareIdIdJSONRequestBody PutVmwareIdIdJSONBody

// PostVmwareMatchDatastoresWithDatasetsJSONRequestBody defines body for PostVmwareMatchDatastoresWithDatasets for application/json ContentType.
type PostVmwareMatchDatastoresWithDatasetsJSONRequestBody PostVmwareMatchDatastoresWithDatasetsJSONBody

// PutWebdavJSONRequestBody defines body for PutWebdav for application/json ContentType.
type PutWebdavJSONRequestBody PutWebdavJSONBody

// PostZfsSnapshotJSONRequestBody defines body for PostZfsSnapshot for application/json ContentType.
type PostZfsSnapshotJSONRequestBody PostZfsSnapshotJSONBody

// PostZfsSnapshotCloneJSONRequestBody defines body for PostZfsSnapshotClone for application/json ContentType.
type PostZfsSnapshotCloneJSONRequestBody PostZfsSnapshotCloneJSONBody

// DeleteZfsSnapshotIdIdJSONRequestBody defines body for DeleteZfsSnapshotIdId for application/json ContentType.
type DeleteZfsSnapshotIdIdJSONRequestBody DeleteZfsSnapshotIdIdJSONBody

// PostZfsSnapshotRemoveJSONRequestBody defines body for PostZfsSnapshotRemove for application/json ContentType.
type PostZfsSnapshotRemoveJSONRequestBody PostZfsSnapshotRemoveJSONBody

// PostZfsSnapshotRollbackJSONRequestBody defines body for PostZfsSnapshotRollback for application/json ContentType.
type PostZfsSnapshotRollbackJSONRequestBody PostZfsSnapshotRollbackJSONBody

// Getter for additional properties for AcmeDnsAuthenticatorCreate0_Attributes. Returns the specified
// element and whether it was found
func (a AcmeDnsAuthenticatorCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcmeDnsAuthenticatorCreate0_Attributes
func (a *AcmeDnsAuthenticatorCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcmeDnsAuthenticatorCreate0_Attributes to handle AdditionalProperties
func (a *AcmeDnsAuthenticatorCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcmeDnsAuthenticatorCreate0_Attributes to handle AdditionalProperties
func (a AcmeDnsAuthenticatorCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AcmeDnsAuthenticatorUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a AcmeDnsAuthenticatorUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcmeDnsAuthenticatorUpdate1_Attributes
func (a *AcmeDnsAuthenticatorUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcmeDnsAuthenticatorUpdate1_Attributes to handle AdditionalProperties
func (a *AcmeDnsAuthenticatorUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcmeDnsAuthenticatorUpdate1_Attributes to handle AdditionalProperties
func (a AcmeDnsAuthenticatorUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlertclassesUpdate0_Classes. Returns the specified
// element and whether it was found
func (a AlertclassesUpdate0_Classes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlertclassesUpdate0_Classes
func (a *AlertclassesUpdate0_Classes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlertclassesUpdate0_Classes to handle AdditionalProperties
func (a *AlertclassesUpdate0_Classes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlertclassesUpdate0_Classes to handle AdditionalProperties
func (a AlertclassesUpdate0_Classes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlertserviceCreate0_Attributes. Returns the specified
// element and whether it was found
func (a AlertserviceCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlertserviceCreate0_Attributes
func (a *AlertserviceCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlertserviceCreate0_Attributes to handle AdditionalProperties
func (a *AlertserviceCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlertserviceCreate0_Attributes to handle AdditionalProperties
func (a AlertserviceCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlertserviceTest0_Attributes. Returns the specified
// element and whether it was found
func (a AlertserviceTest0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlertserviceTest0_Attributes
func (a *AlertserviceTest0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlertserviceTest0_Attributes to handle AdditionalProperties
func (a *AlertserviceTest0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlertserviceTest0_Attributes to handle AdditionalProperties
func (a AlertserviceTest0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlertserviceUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a AlertserviceUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlertserviceUpdate1_Attributes
func (a *AlertserviceUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlertserviceUpdate1_Attributes to handle AdditionalProperties
func (a *AlertserviceUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlertserviceUpdate1_Attributes to handle AdditionalProperties
func (a AlertserviceUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthGenerateToken1. Returns the specified
// element and whether it was found
func (a AuthGenerateToken1) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthGenerateToken1
func (a *AuthGenerateToken1) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthGenerateToken1 to handle AdditionalProperties
func (a *AuthGenerateToken1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthGenerateToken1 to handle AdditionalProperties
func (a AuthGenerateToken1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BackupCreate0_Attributes. Returns the specified
// element and whether it was found
func (a BackupCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BackupCreate0_Attributes
func (a *BackupCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BackupCreate0_Attributes to handle AdditionalProperties
func (a *BackupCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BackupCreate0_Attributes to handle AdditionalProperties
func (a BackupCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BackupCredentialCreate0_Attributes. Returns the specified
// element and whether it was found
func (a BackupCredentialCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BackupCredentialCreate0_Attributes
func (a *BackupCredentialCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BackupCredentialCreate0_Attributes to handle AdditionalProperties
func (a *BackupCredentialCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BackupCredentialCreate0_Attributes to handle AdditionalProperties
func (a BackupCredentialCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BackupCredentialUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a BackupCredentialUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BackupCredentialUpdate1_Attributes
func (a *BackupCredentialUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BackupCredentialUpdate1_Attributes to handle AdditionalProperties
func (a *BackupCredentialUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BackupCredentialUpdate1_Attributes to handle AdditionalProperties
func (a BackupCredentialUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BackupUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a BackupUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BackupUpdate1_Attributes
func (a *BackupUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BackupUpdate1_Attributes to handle AdditionalProperties
func (a *BackupUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BackupUpdate1_Attributes to handle AdditionalProperties
func (a BackupUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CertificateCreate0_DnsMapping. Returns the specified
// element and whether it was found
func (a CertificateCreate0_DnsMapping) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CertificateCreate0_DnsMapping
func (a *CertificateCreate0_DnsMapping) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CertificateCreate0_DnsMapping to handle AdditionalProperties
func (a *CertificateCreate0_DnsMapping) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CertificateCreate0_DnsMapping to handle AdditionalProperties
func (a CertificateCreate0_DnsMapping) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CloudsyncCreate0_Attributes. Returns the specified
// element and whether it was found
func (a CloudsyncCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CloudsyncCreate0_Attributes
func (a *CloudsyncCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CloudsyncCreate0_Attributes to handle AdditionalProperties
func (a *CloudsyncCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CloudsyncCreate0_Attributes to handle AdditionalProperties
func (a CloudsyncCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CloudsyncCredentialsCreate0_Attributes. Returns the specified
// element and whether it was found
func (a CloudsyncCredentialsCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CloudsyncCredentialsCreate0_Attributes
func (a *CloudsyncCredentialsCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CloudsyncCredentialsCreate0_Attributes to handle AdditionalProperties
func (a *CloudsyncCredentialsCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CloudsyncCredentialsCreate0_Attributes to handle AdditionalProperties
func (a CloudsyncCredentialsCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CloudsyncCredentialsUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a CloudsyncCredentialsUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CloudsyncCredentialsUpdate1_Attributes
func (a *CloudsyncCredentialsUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CloudsyncCredentialsUpdate1_Attributes to handle AdditionalProperties
func (a *CloudsyncCredentialsUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CloudsyncCredentialsUpdate1_Attributes to handle AdditionalProperties
func (a CloudsyncCredentialsUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CloudsyncCredentialsVerify0_Attributes. Returns the specified
// element and whether it was found
func (a CloudsyncCredentialsVerify0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CloudsyncCredentialsVerify0_Attributes
func (a *CloudsyncCredentialsVerify0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CloudsyncCredentialsVerify0_Attributes to handle AdditionalProperties
func (a *CloudsyncCredentialsVerify0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CloudsyncCredentialsVerify0_Attributes to handle AdditionalProperties
func (a CloudsyncCredentialsVerify0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CloudsyncListDirectory0_Attributes. Returns the specified
// element and whether it was found
func (a CloudsyncListDirectory0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CloudsyncListDirectory0_Attributes
func (a *CloudsyncListDirectory0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CloudsyncListDirectory0_Attributes to handle AdditionalProperties
func (a *CloudsyncListDirectory0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CloudsyncListDirectory0_Attributes to handle AdditionalProperties
func (a CloudsyncListDirectory0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CloudsyncUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a CloudsyncUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CloudsyncUpdate1_Attributes
func (a *CloudsyncUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CloudsyncUpdate1_Attributes to handle AdditionalProperties
func (a *CloudsyncUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CloudsyncUpdate1_Attributes to handle AdditionalProperties
func (a CloudsyncUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CoreJobUpdate1_Progress. Returns the specified
// element and whether it was found
func (a CoreJobUpdate1_Progress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CoreJobUpdate1_Progress
func (a *CoreJobUpdate1_Progress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CoreJobUpdate1_Progress to handle AdditionalProperties
func (a *CoreJobUpdate1_Progress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CoreJobUpdate1_Progress to handle AdditionalProperties
func (a CoreJobUpdate1_Progress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for FilesystemListdir2_Extra. Returns the specified
// element and whether it was found
func (a FilesystemListdir2_Extra) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FilesystemListdir2_Extra
func (a *FilesystemListdir2_Extra) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FilesystemListdir2_Extra to handle AdditionalProperties
func (a *FilesystemListdir2_Extra) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FilesystemListdir2_Extra to handle AdditionalProperties
func (a FilesystemListdir2_Extra) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for JailUpdate1. Returns the specified
// element and whether it was found
func (a JailUpdate1) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JailUpdate1
func (a *JailUpdate1) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JailUpdate1 to handle AdditionalProperties
func (a *JailUpdate1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["plugin"]; found {
		err = json.Unmarshal(raw, &a.Plugin)
		if err != nil {
			return errors.Wrap(err, "error reading 'plugin'")
		}
		delete(object, "plugin")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JailUpdate1 to handle AdditionalProperties
func (a JailUpdate1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Plugin != nil {
		object["plugin"], err = json.Marshal(a.Plugin)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'plugin'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for JailUpdateDefaults0. Returns the specified
// element and whether it was found
func (a JailUpdateDefaults0) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JailUpdateDefaults0
func (a *JailUpdateDefaults0) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JailUpdateDefaults0 to handle AdditionalProperties
func (a *JailUpdateDefaults0) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JailUpdateDefaults0 to handle AdditionalProperties
func (a JailUpdateDefaults0) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for KeychaincredentialCreate0_Attributes. Returns the specified
// element and whether it was found
func (a KeychaincredentialCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KeychaincredentialCreate0_Attributes
func (a *KeychaincredentialCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KeychaincredentialCreate0_Attributes to handle AdditionalProperties
func (a *KeychaincredentialCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KeychaincredentialCreate0_Attributes to handle AdditionalProperties
func (a KeychaincredentialCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for KeychaincredentialUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a KeychaincredentialUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KeychaincredentialUpdate1_Attributes
func (a *KeychaincredentialUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KeychaincredentialUpdate1_Attributes to handle AdditionalProperties
func (a *KeychaincredentialUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KeychaincredentialUpdate1_Attributes to handle AdditionalProperties
func (a KeychaincredentialUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MailSend0_ExtraHeaders. Returns the specified
// element and whether it was found
func (a MailSend0_ExtraHeaders) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MailSend0_ExtraHeaders
func (a *MailSend0_ExtraHeaders) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MailSend0_ExtraHeaders to handle AdditionalProperties
func (a *MailSend0_ExtraHeaders) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MailSend0_ExtraHeaders to handle AdditionalProperties
func (a MailSend0_ExtraHeaders) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PluginUpdate1. Returns the specified
// element and whether it was found
func (a PluginUpdate1) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PluginUpdate1
func (a *PluginUpdate1) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PluginUpdate1 to handle AdditionalProperties
func (a *PluginUpdate1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["plugin"]; found {
		err = json.Unmarshal(raw, &a.Plugin)
		if err != nil {
			return errors.Wrap(err, "error reading 'plugin'")
		}
		delete(object, "plugin")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PluginUpdate1 to handle AdditionalProperties
func (a PluginUpdate1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Plugin != nil {
		object["plugin"], err = json.Marshal(a.Plugin)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'plugin'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PoolImportDisk2. Returns the specified
// element and whether it was found
func (a PoolImportDisk2) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PoolImportDisk2
func (a *PoolImportDisk2) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PoolImportDisk2 to handle AdditionalProperties
func (a *PoolImportDisk2) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PoolImportDisk2 to handle AdditionalProperties
func (a PoolImportDisk2) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserCreate0_Attributes. Returns the specified
// element and whether it was found
func (a UserCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserCreate0_Attributes
func (a *UserCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserCreate0_Attributes to handle AdditionalProperties
func (a *UserCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserCreate0_Attributes to handle AdditionalProperties
func (a UserCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a UserUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserUpdate1_Attributes
func (a *UserUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserUpdate1_Attributes to handle AdditionalProperties
func (a *UserUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserUpdate1_Attributes to handle AdditionalProperties
func (a UserUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VmDeviceCreate0_Attributes. Returns the specified
// element and whether it was found
func (a VmDeviceCreate0_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VmDeviceCreate0_Attributes
func (a *VmDeviceCreate0_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VmDeviceCreate0_Attributes to handle AdditionalProperties
func (a *VmDeviceCreate0_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VmDeviceCreate0_Attributes to handle AdditionalProperties
func (a VmDeviceCreate0_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VmDeviceUpdate1_Attributes. Returns the specified
// element and whether it was found
func (a VmDeviceUpdate1_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VmDeviceUpdate1_Attributes
func (a *VmDeviceUpdate1_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VmDeviceUpdate1_Attributes to handle AdditionalProperties
func (a *VmDeviceUpdate1_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VmDeviceUpdate1_Attributes to handle AdditionalProperties
func (a VmDeviceUpdate1_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ZfsSnapshotCreate0_Properties. Returns the specified
// element and whether it was found
func (a ZfsSnapshotCreate0_Properties) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ZfsSnapshotCreate0_Properties
func (a *ZfsSnapshotCreate0_Properties) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ZfsSnapshotCreate0_Properties to handle AdditionalProperties
func (a *ZfsSnapshotCreate0_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ZfsSnapshotCreate0_Properties to handle AdditionalProperties
func (a ZfsSnapshotCreate0_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAcmeDnsAuthenticator request
	GetAcmeDnsAuthenticator(ctx context.Context, params *GetAcmeDnsAuthenticatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAcmeDnsAuthenticator request  with any body
	PostAcmeDnsAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAcmeDnsAuthenticator(ctx context.Context, body PostAcmeDnsAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAcmeDnsAuthenticatorAuthenticatorSchemas request
	GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAcmeDnsAuthenticatorIdId request
	DeleteAcmeDnsAuthenticatorIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAcmeDnsAuthenticatorIdId request
	GetAcmeDnsAuthenticatorIdId(ctx context.Context, id []interface{}, params *GetAcmeDnsAuthenticatorIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAcmeDnsAuthenticatorIdId request  with any body
	PutAcmeDnsAuthenticatorIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAcmeDnsAuthenticatorIdId(ctx context.Context, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectory request
	GetActivedirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutActivedirectory request  with any body
	PutActivedirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutActivedirectory(ctx context.Context, body PutActivedirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryChangeTrustAccountPw request
	GetActivedirectoryChangeTrustAccountPw(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryDomainInfo request
	GetActivedirectoryDomainInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryGetSpnList request
	GetActivedirectoryGetSpnList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryGetState request
	GetActivedirectoryGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryIdmapBackendChoices request
	GetActivedirectoryIdmapBackendChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActivedirectoryLeave request  with any body
	PostActivedirectoryLeaveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostActivedirectoryLeave(ctx context.Context, body PostActivedirectoryLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryNssInfoChoices request
	GetActivedirectoryNssInfoChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectorySaslWrappingChoices request
	GetActivedirectorySaslWrappingChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectorySslChoices request
	GetActivedirectorySslChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivedirectoryStarted request
	GetActivedirectoryStarted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAfp request
	GetAfp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAfp request  with any body
	PutAfpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAfp(ctx context.Context, body PutAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAfpBindipChoices request
	GetAfpBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertDismiss request  with any body
	PostAlertDismissWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertDismiss(ctx context.Context, body PostAlertDismissJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertList request
	GetAlertList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertListCategories request
	GetAlertListCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertListPolicies request
	GetAlertListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertRestore request  with any body
	PostAlertRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertRestore(ctx context.Context, body PostAlertRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertclasses request
	GetAlertclasses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAlertclasses request  with any body
	PutAlertclassesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAlertclasses(ctx context.Context, body PutAlertclassesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertservice request
	GetAlertservice(ctx context.Context, params *GetAlertserviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertservice request  with any body
	PostAlertserviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertservice(ctx context.Context, body PostAlertserviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertserviceIdId request
	DeleteAlertserviceIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertserviceIdId request
	GetAlertserviceIdId(ctx context.Context, id []interface{}, params *GetAlertserviceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAlertserviceIdId request  with any body
	PutAlertserviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAlertserviceIdId(ctx context.Context, id int, body PutAlertserviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertserviceListTypes request
	GetAlertserviceListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertserviceTest request  with any body
	PostAlertserviceTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertserviceTest(ctx context.Context, body PostAlertserviceTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthCheckUser request  with any body
	PostAuthCheckUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthCheckUser(ctx context.Context, body PostAuthCheckUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthGenerateToken request  with any body
	PostAuthGenerateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthGenerateToken(ctx context.Context, body PostAuthGenerateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthSessions request
	GetAuthSessions(ctx context.Context, params *GetAuthSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackup request
	GetBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackup request  with any body
	PostBackupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBackup(ctx context.Context, body PostBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackupAzureGetBuckets request  with any body
	PostBackupAzureGetBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBackupAzureGetBuckets(ctx context.Context, body PostBackupAzureGetBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackupB2GetBuckets request  with any body
	PostBackupB2GetBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBackupB2GetBuckets(ctx context.Context, body PostBackupB2GetBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackupCredential request
	GetBackupCredential(ctx context.Context, params *GetBackupCredentialParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackupCredential request  with any body
	PostBackupCredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBackupCredential(ctx context.Context, body PostBackupCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackupCredentialIdId request
	DeleteBackupCredentialIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackupCredentialIdId request
	GetBackupCredentialIdId(ctx context.Context, id []interface{}, params *GetBackupCredentialIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBackupCredentialIdId request  with any body
	PutBackupCredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBackupCredentialIdId(ctx context.Context, id int, body PutBackupCredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackupGcsGetBuckets request  with any body
	PostBackupGcsGetBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBackupGcsGetBuckets(ctx context.Context, body PostBackupGcsGetBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackupIdId request
	DeleteBackupIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackupIdId request
	GetBackupIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBackupIdId request  with any body
	PutBackupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBackupIdId(ctx context.Context, id int, body PutBackupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackupS3GetBuckets request  with any body
	PostBackupS3GetBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBackupS3GetBuckets(ctx context.Context, body PostBackupS3GetBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootAttach request  with any body
	PostBootAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootAttach(ctx context.Context, body PostBootAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootDetach request  with any body
	PostBootDetachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootDetach(ctx context.Context, body PostBootDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootGetDisks request
	GetBootGetDisks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootGetScrubInterval request
	GetBootGetScrubInterval(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootGetState request
	GetBootGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootReplace request  with any body
	PostBootReplaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootReplace(ctx context.Context, body PostBootReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootScrub request
	GetBootScrub(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootSetScrubInterval request  with any body
	PostBootSetScrubIntervalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootSetScrubInterval(ctx context.Context, body PostBootSetScrubIntervalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootenv request
	GetBootenv(ctx context.Context, params *GetBootenvParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootenv request  with any body
	PostBootenvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootenv(ctx context.Context, body PostBootenvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBootenvIdId request
	DeleteBootenvIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBootenvIdId request
	GetBootenvIdId(ctx context.Context, id []interface{}, params *GetBootenvIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBootenvIdId request  with any body
	PutBootenvIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBootenvIdId(ctx context.Context, id string, body PutBootenvIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootenvIdIdActivate request  with any body
	PostBootenvIdIdActivateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootenvIdIdActivate(ctx context.Context, id string, body PostBootenvIdIdActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBootenvIdIdSetAttribute request  with any body
	PostBootenvIdIdSetAttributeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBootenvIdIdSetAttribute(ctx context.Context, id string, body PostBootenvIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificate request
	GetCertificate(ctx context.Context, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCertificate request  with any body
	PostCertificateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCertificate(ctx context.Context, body PostCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateAcmeServerChoices request
	GetCertificateAcmeServerChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateEcCurveChoices request
	GetCertificateEcCurveChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCertificateIdId request  with any body
	DeleteCertificateIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCertificateIdId(ctx context.Context, id int, body DeleteCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateIdId request
	GetCertificateIdId(ctx context.Context, id []interface{}, params *GetCertificateIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCertificateIdId request  with any body
	PutCertificateIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCertificateIdId(ctx context.Context, id int, body PutCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateKeyTypeChoices request
	GetCertificateKeyTypeChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateauthority request
	GetCertificateauthority(ctx context.Context, params *GetCertificateauthorityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCertificateauthority request  with any body
	PostCertificateauthorityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCertificateauthority(ctx context.Context, body PostCertificateauthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCertificateauthorityCaSignCsr request  with any body
	PostCertificateauthorityCaSignCsrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCertificateauthorityCaSignCsr(ctx context.Context, body PostCertificateauthorityCaSignCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCertificateauthorityIdId request
	DeleteCertificateauthorityIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateauthorityIdId request
	GetCertificateauthorityIdId(ctx context.Context, id []interface{}, params *GetCertificateauthorityIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCertificateauthorityIdId request  with any body
	PutCertificateauthorityIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCertificateauthorityIdId(ctx context.Context, id int, body PutCertificateauthorityIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsync request
	GetCloudsync(ctx context.Context, params *GetCloudsyncParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsync request  with any body
	PostCloudsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsync(ctx context.Context, body PostCloudsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncCommonTaskSchema request
	GetCloudsyncCommonTaskSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncCredentials request
	GetCloudsyncCredentials(ctx context.Context, params *GetCloudsyncCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncCredentials request  with any body
	PostCloudsyncCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncCredentials(ctx context.Context, body PostCloudsyncCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCloudsyncCredentialsIdId request
	DeleteCloudsyncCredentialsIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncCredentialsIdId request
	GetCloudsyncCredentialsIdId(ctx context.Context, id []interface{}, params *GetCloudsyncCredentialsIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCloudsyncCredentialsIdId request  with any body
	PutCloudsyncCredentialsIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCloudsyncCredentialsIdId(ctx context.Context, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncCredentialsVerify request  with any body
	PostCloudsyncCredentialsVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncCredentialsVerify(ctx context.Context, body PostCloudsyncCredentialsVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCloudsyncIdId request
	DeleteCloudsyncIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncIdId request
	GetCloudsyncIdId(ctx context.Context, id []interface{}, params *GetCloudsyncIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCloudsyncIdId request  with any body
	PutCloudsyncIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCloudsyncIdId(ctx context.Context, id int, body PutCloudsyncIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncIdIdAbort request  with any body
	PostCloudsyncIdIdAbortWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncIdIdAbort(ctx context.Context, id int, body PostCloudsyncIdIdAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncIdIdSync request  with any body
	PostCloudsyncIdIdSyncWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncIdIdSync(ctx context.Context, id int, body PostCloudsyncIdIdSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncListBuckets request  with any body
	PostCloudsyncListBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncListBuckets(ctx context.Context, body PostCloudsyncListBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncListDirectory request  with any body
	PostCloudsyncListDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncListDirectory(ctx context.Context, body PostCloudsyncListDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudsyncOnedriveListDrives request  with any body
	PostCloudsyncOnedriveListDrivesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCloudsyncOnedriveListDrives(ctx context.Context, body PostCloudsyncOnedriveListDrivesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudsyncProviders request
	GetCloudsyncProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfigReset request  with any body
	PostConfigResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfigReset(ctx context.Context, body PostConfigResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreBulk request  with any body
	PostCoreBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreBulk(ctx context.Context, body PostCoreBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreDebug request  with any body
	PostCoreDebugWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreDebug(ctx context.Context, body PostCoreDebugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreDownload request  with any body
	PostCoreDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreDownload(ctx context.Context, body PostCoreDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreGetEvents request
	GetCoreGetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreGetJobs request
	GetCoreGetJobs(ctx context.Context, params *GetCoreGetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreGetMethods request  with any body
	PostCoreGetMethodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreGetMethods(ctx context.Context, body PostCoreGetMethodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreGetServices request
	GetCoreGetServices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreJobAbort request  with any body
	PostCoreJobAbortWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreJobAbort(ctx context.Context, body PostCoreJobAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreJobUpdate request  with any body
	PostCoreJobUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreJobUpdate(ctx context.Context, body PostCoreJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCoreJobWait request  with any body
	PostCoreJobWaitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCoreJobWait(ctx context.Context, body PostCoreJobWaitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorePing request
	GetCorePing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreSessions request
	GetCoreSessions(ctx context.Context, params *GetCoreSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCronjob request
	GetCronjob(ctx context.Context, params *GetCronjobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCronjob request  with any body
	PostCronjobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCronjob(ctx context.Context, body PostCronjobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCronjobIdId request
	DeleteCronjobIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCronjobIdId request
	GetCronjobIdId(ctx context.Context, id []interface{}, params *GetCronjobIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCronjobIdId request  with any body
	PutCronjobIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCronjobIdId(ctx context.Context, id int, body PutCronjobIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCronjobRun request  with any body
	PostCronjobRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCronjobRun(ctx context.Context, body PostCronjobRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeviceGetInfo request  with any body
	PostDeviceGetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeviceGetInfo(ctx context.Context, body PostDeviceGetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDirectoryservicesGetState request
	GetDirectoryservicesGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDisk request
	GetDisk(ctx context.Context, params *GetDiskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskGetEncrypted request  with any body
	PostDiskGetEncryptedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskGetEncrypted(ctx context.Context, body PostDiskGetEncryptedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskGetUnused request  with any body
	PostDiskGetUnusedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskGetUnused(ctx context.Context, body PostDiskGetUnusedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiskIdId request
	GetDiskIdId(ctx context.Context, id []interface{}, params *GetDiskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDiskIdId request  with any body
	PutDiskIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDiskIdId(ctx context.Context, id string, body PutDiskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskTemperatures request  with any body
	PostDiskTemperaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskTemperatures(ctx context.Context, body PostDiskTemperaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDiskWipe request  with any body
	PostDiskWipeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDiskWipe(ctx context.Context, body PostDiskWipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDnsQuery request
	GetDnsQuery(ctx context.Context, params *GetDnsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDyndns request
	GetDyndns(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDyndns request  with any body
	PutDyndnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDyndns(ctx context.Context, body PutDyndnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDyndnsProviderChoices request
	GetDyndnsProviderChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemAclIsTrivial request  with any body
	PostFilesystemAclIsTrivialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemAclIsTrivial(ctx context.Context, body PostFilesystemAclIsTrivialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemChown request  with any body
	PostFilesystemChownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemChown(ctx context.Context, body PostFilesystemChownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilesystemDefaultAclChoices request
	GetFilesystemDefaultAclChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemGetDefaultAcl request  with any body
	PostFilesystemGetDefaultAclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemGetDefaultAcl(ctx context.Context, body PostFilesystemGetDefaultAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemGetacl request  with any body
	PostFilesystemGetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemGetacl(ctx context.Context, body PostFilesystemGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemListdir request  with any body
	PostFilesystemListdirWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemListdir(ctx context.Context, body PostFilesystemListdirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemSetacl request  with any body
	PostFilesystemSetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemSetacl(ctx context.Context, body PostFilesystemSetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemSetperm request  with any body
	PostFilesystemSetpermWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemSetperm(ctx context.Context, body PostFilesystemSetpermJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemStat request  with any body
	PostFilesystemStatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemStat(ctx context.Context, body PostFilesystemStatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemStatfs request  with any body
	PostFilesystemStatfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystemStatfs(ctx context.Context, body PostFilesystemStatfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFtp request
	GetFtp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFtp request  with any body
	PutFtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFtp(ctx context.Context, body PutFtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroup request
	GetGroup(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroup request  with any body
	PostGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroup(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupGetGroupObj request  with any body
	PostGroupGetGroupObjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupGetGroupObj(ctx context.Context, body PostGroupGetGroupObjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupGetNextGid request
	GetGroupGetNextGid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupIdId request  with any body
	DeleteGroupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGroupIdId(ctx context.Context, id int, body DeleteGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupIdId request
	GetGroupIdId(ctx context.Context, id []interface{}, params *GetGroupIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroupIdId request  with any body
	PutGroupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupIdId(ctx context.Context, id int, body PutGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapAd request
	GetIdmapAd(ctx context.Context, params *GetIdmapAdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapAd request  with any body
	PostIdmapAdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapAd(ctx context.Context, body PostIdmapAdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapAdIdId request
	DeleteIdmapAdIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapAdIdId request
	GetIdmapAdIdId(ctx context.Context, id []interface{}, params *GetIdmapAdIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapAdIdId request  with any body
	PutIdmapAdIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapAdIdId(ctx context.Context, id int, body PutIdmapAdIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapAutorid request
	GetIdmapAutorid(ctx context.Context, params *GetIdmapAutoridParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapAutorid request  with any body
	PostIdmapAutoridWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapAutorid(ctx context.Context, body PostIdmapAutoridJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapAutoridIdId request
	DeleteIdmapAutoridIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapAutoridIdId request
	GetIdmapAutoridIdId(ctx context.Context, id []interface{}, params *GetIdmapAutoridIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapAutoridIdId request  with any body
	PutIdmapAutoridIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapAutoridIdId(ctx context.Context, id int, body PutIdmapAutoridIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapClearIdmapCache request
	GetIdmapClearIdmapCache(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapDomain request
	GetIdmapDomain(ctx context.Context, params *GetIdmapDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapDomain request  with any body
	PostIdmapDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapDomain(ctx context.Context, body PostIdmapDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapDomainIdId request
	DeleteIdmapDomainIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapDomainIdId request
	GetIdmapDomainIdId(ctx context.Context, id []interface{}, params *GetIdmapDomainIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapDomainIdId request  with any body
	PutIdmapDomainIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapDomainIdId(ctx context.Context, id int, body PutIdmapDomainIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapDomaintobackend request
	GetIdmapDomaintobackend(ctx context.Context, params *GetIdmapDomaintobackendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapDomaintobackend request  with any body
	PostIdmapDomaintobackendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapDomaintobackend(ctx context.Context, body PostIdmapDomaintobackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapDomaintobackendIdId request
	DeleteIdmapDomaintobackendIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapDomaintobackendIdId request
	GetIdmapDomaintobackendIdId(ctx context.Context, id []interface{}, params *GetIdmapDomaintobackendIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapDomaintobackendIdId request  with any body
	PutIdmapDomaintobackendIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapDomaintobackendIdId(ctx context.Context, id int, body PutIdmapDomaintobackendIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapGetConfiguredIdmapDomains request
	GetIdmapGetConfiguredIdmapDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapGetOrCreateIdmapByDomain request  with any body
	PostIdmapGetOrCreateIdmapByDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapGetOrCreateIdmapByDomain(ctx context.Context, body PostIdmapGetOrCreateIdmapByDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapLdap request
	GetIdmapLdap(ctx context.Context, params *GetIdmapLdapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapLdap request  with any body
	PostIdmapLdapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapLdap(ctx context.Context, body PostIdmapLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapLdapIdId request
	DeleteIdmapLdapIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapLdapIdId request
	GetIdmapLdapIdId(ctx context.Context, id []interface{}, params *GetIdmapLdapIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapLdapIdId request  with any body
	PutIdmapLdapIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapLdapIdId(ctx context.Context, id int, body PutIdmapLdapIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapNss request
	GetIdmapNss(ctx context.Context, params *GetIdmapNssParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapNss request  with any body
	PostIdmapNssWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapNss(ctx context.Context, body PostIdmapNssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapNssIdId request
	DeleteIdmapNssIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapNssIdId request
	GetIdmapNssIdId(ctx context.Context, id []interface{}, params *GetIdmapNssIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapNssIdId request  with any body
	PutIdmapNssIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapNssIdId(ctx context.Context, id int, body PutIdmapNssIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapRfc2307 request
	GetIdmapRfc2307(ctx context.Context, params *GetIdmapRfc2307Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapRfc2307 request  with any body
	PostIdmapRfc2307WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapRfc2307(ctx context.Context, body PostIdmapRfc2307JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapRfc2307IdId request
	DeleteIdmapRfc2307IdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapRfc2307IdId request
	GetIdmapRfc2307IdId(ctx context.Context, id []interface{}, params *GetIdmapRfc2307IdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapRfc2307IdId request  with any body
	PutIdmapRfc2307IdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapRfc2307IdId(ctx context.Context, id int, body PutIdmapRfc2307IdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapRid request
	GetIdmapRid(ctx context.Context, params *GetIdmapRidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapRid request  with any body
	PostIdmapRidWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapRid(ctx context.Context, body PostIdmapRidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapRidIdId request
	DeleteIdmapRidIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapRidIdId request
	GetIdmapRidIdId(ctx context.Context, id []interface{}, params *GetIdmapRidIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapRidIdId request  with any body
	PutIdmapRidIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapRidIdId(ctx context.Context, id int, body PutIdmapRidIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapScript request
	GetIdmapScript(ctx context.Context, params *GetIdmapScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapScript request  with any body
	PostIdmapScriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapScript(ctx context.Context, body PostIdmapScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapScriptIdId request
	DeleteIdmapScriptIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapScriptIdId request
	GetIdmapScriptIdId(ctx context.Context, id []interface{}, params *GetIdmapScriptIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapScriptIdId request  with any body
	PutIdmapScriptIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapScriptIdId(ctx context.Context, id int, body PutIdmapScriptIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapTdb request
	GetIdmapTdb(ctx context.Context, params *GetIdmapTdbParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdmapTdb request  with any body
	PostIdmapTdbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdmapTdb(ctx context.Context, body PostIdmapTdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdmapTdbIdId request
	DeleteIdmapTdbIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdmapTdbIdId request
	GetIdmapTdbIdId(ctx context.Context, id []interface{}, params *GetIdmapTdbIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdmapTdbIdId request  with any body
	PutIdmapTdbIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdmapTdbIdId(ctx context.Context, id int, body PutIdmapTdbIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInitshutdownscript request
	GetInitshutdownscript(ctx context.Context, params *GetInitshutdownscriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInitshutdownscript request  with any body
	PostInitshutdownscriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInitshutdownscript(ctx context.Context, body PostInitshutdownscriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInitshutdownscriptIdId request
	DeleteInitshutdownscriptIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInitshutdownscriptIdId request
	GetInitshutdownscriptIdId(ctx context.Context, id []interface{}, params *GetInitshutdownscriptIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInitshutdownscriptIdId request  with any body
	PutInitshutdownscriptIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInitshutdownscriptIdId(ctx context.Context, id int, body PutInitshutdownscriptIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterface request
	GetInterface(ctx context.Context, params *GetInterfaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterface request  with any body
	PostInterfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterface(ctx context.Context, body PostInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceBridgeMembersChoices request  with any body
	PostInterfaceBridgeMembersChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceBridgeMembersChoices(ctx context.Context, body PostInterfaceBridgeMembersChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceCheckin request
	GetInterfaceCheckin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceCheckinWaiting request
	GetInterfaceCheckinWaiting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceChoices request  with any body
	PostInterfaceChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceChoices(ctx context.Context, body PostInterfaceChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceCommit request  with any body
	PostInterfaceCommitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceCommit(ctx context.Context, body PostInterfaceCommitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceHasPendingChanges request
	GetInterfaceHasPendingChanges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInterfaceIdId request
	DeleteInterfaceIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceIdId request
	GetInterfaceIdId(ctx context.Context, id []interface{}, params *GetInterfaceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInterfaceIdId request  with any body
	PutInterfaceIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInterfaceIdId(ctx context.Context, id string, body PutInterfaceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceIpInUse request  with any body
	PostInterfaceIpInUseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceIpInUse(ctx context.Context, body PostInterfaceIpInUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInterfaceLagPortsChoices request  with any body
	PostInterfaceLagPortsChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInterfaceLagPortsChoices(ctx context.Context, body PostInterfaceLagPortsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceRollback request
	GetInterfaceRollback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInterfaceVlanParentInterfaceChoices request
	GetInterfaceVlanParentInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmi request
	GetIpmi(ctx context.Context, params *GetIpmiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmiChannels request
	GetIpmiChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmiIdId request
	GetIpmiIdId(ctx context.Context, id []interface{}, params *GetIpmiIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIpmiIdId request  with any body
	PutIpmiIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIpmiIdId(ctx context.Context, id int, body PutIpmiIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIpmiIdentify request  with any body
	PostIpmiIdentifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIpmiIdentify(ctx context.Context, body PostIpmiIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpmiIsLoaded request
	GetIpmiIsLoaded(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiAuth request
	GetIscsiAuth(ctx context.Context, params *GetIscsiAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiAuth request  with any body
	PostIscsiAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiAuth(ctx context.Context, body PostIscsiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiAuthIdId request
	DeleteIscsiAuthIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiAuthIdId request
	GetIscsiAuthIdId(ctx context.Context, id []interface{}, params *GetIscsiAuthIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiAuthIdId request  with any body
	PutIscsiAuthIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiAuthIdId(ctx context.Context, id int, body PutIscsiAuthIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiExtent request
	GetIscsiExtent(ctx context.Context, params *GetIscsiExtentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiExtent request  with any body
	PostIscsiExtentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiExtent(ctx context.Context, body PostIscsiExtentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiExtentDiskChoices request  with any body
	PostIscsiExtentDiskChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiExtentDiskChoices(ctx context.Context, body PostIscsiExtentDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiExtentIdId request  with any body
	DeleteIscsiExtentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiExtentIdId(ctx context.Context, id int, body DeleteIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiExtentIdId request
	GetIscsiExtentIdId(ctx context.Context, id []interface{}, params *GetIscsiExtentIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiExtentIdId request  with any body
	PutIscsiExtentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiExtentIdId(ctx context.Context, id int, body PutIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiGlobal request
	GetIscsiGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiGlobal request  with any body
	PutIscsiGlobalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiGlobal(ctx context.Context, body PutIscsiGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiGlobalSessions request
	GetIscsiGlobalSessions(ctx context.Context, params *GetIscsiGlobalSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiInitiator request
	GetIscsiInitiator(ctx context.Context, params *GetIscsiInitiatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiInitiator request  with any body
	PostIscsiInitiatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiInitiator(ctx context.Context, body PostIscsiInitiatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiInitiatorIdId request
	DeleteIscsiInitiatorIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiInitiatorIdId request
	GetIscsiInitiatorIdId(ctx context.Context, id []interface{}, params *GetIscsiInitiatorIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiInitiatorIdId request  with any body
	PutIscsiInitiatorIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiInitiatorIdId(ctx context.Context, id int, body PutIscsiInitiatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiPortal request
	GetIscsiPortal(ctx context.Context, params *GetIscsiPortalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiPortal request  with any body
	PostIscsiPortalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiPortal(ctx context.Context, body PostIscsiPortalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiPortalIdId request
	DeleteIscsiPortalIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiPortalIdId request
	GetIscsiPortalIdId(ctx context.Context, id []interface{}, params *GetIscsiPortalIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiPortalIdId request  with any body
	PutIscsiPortalIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiPortalIdId(ctx context.Context, id int, body PutIscsiPortalIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiPortalListenIpChoices request
	GetIscsiPortalListenIpChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTarget request
	GetIscsiTarget(ctx context.Context, params *GetIscsiTargetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiTarget request  with any body
	PostIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiTarget(ctx context.Context, body PostIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiTargetIdId request  with any body
	DeleteIscsiTargetIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiTargetIdId(ctx context.Context, id int, body DeleteIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTargetIdId request
	GetIscsiTargetIdId(ctx context.Context, id []interface{}, params *GetIscsiTargetIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiTargetIdId request  with any body
	PutIscsiTargetIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiTargetIdId(ctx context.Context, id int, body PutIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTargetextent request
	GetIscsiTargetextent(ctx context.Context, params *GetIscsiTargetextentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIscsiTargetextent request  with any body
	PostIscsiTargetextentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIscsiTargetextent(ctx context.Context, body PostIscsiTargetextentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIscsiTargetextentIdId request  with any body
	DeleteIscsiTargetextentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIscsiTargetextentIdId(ctx context.Context, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIscsiTargetextentIdId request
	GetIscsiTargetextentIdId(ctx context.Context, id []interface{}, params *GetIscsiTargetextentIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIscsiTargetextentIdId request  with any body
	PutIscsiTargetextentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIscsiTargetextentIdId(ctx context.Context, id int, body PutIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJail request
	GetJail(ctx context.Context, params *GetJailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJail request  with any body
	PostJailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJail(ctx context.Context, body PostJailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailActivate request  with any body
	PostJailActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailActivate(ctx context.Context, body PostJailActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailClean request  with any body
	PostJailCleanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailClean(ctx context.Context, body PostJailCleanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailDefaultConfiguration request
	GetJailDefaultConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailExec request  with any body
	PostJailExecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailExec(ctx context.Context, body PostJailExecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailExport request  with any body
	PostJailExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailExport(ctx context.Context, body PostJailExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailFetch request  with any body
	PostJailFetchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailFetch(ctx context.Context, body PostJailFetchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailFstab request  with any body
	PostJailFstabWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailFstab(ctx context.Context, body PostJailFstabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailGetActivatedPool request
	GetJailGetActivatedPool(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJailIdId request  with any body
	DeleteJailIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteJailIdId(ctx context.Context, id string, body DeleteJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailIdId request
	GetJailIdId(ctx context.Context, id []interface{}, params *GetJailIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJailIdId request  with any body
	PutJailIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJailIdId(ctx context.Context, id string, body PutJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailIdIdClone request  with any body
	PostJailIdIdCloneWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailIdIdClone(ctx context.Context, id string, body PostJailIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailImportImage request  with any body
	PostJailImportImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailImportImage(ctx context.Context, body PostJailImportImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJailInterfaceChoices request
	GetJailInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailRcAction request  with any body
	PostJailRcActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailRcAction(ctx context.Context, body PostJailRcActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailReleasesChoices request  with any body
	PostJailReleasesChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailReleasesChoices(ctx context.Context, body PostJailReleasesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailRestart request  with any body
	PostJailRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailRestart(ctx context.Context, body PostJailRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailStart request  with any body
	PostJailStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailStart(ctx context.Context, body PostJailStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailStop request  with any body
	PostJailStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailStop(ctx context.Context, body PostJailStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailUpdateDefaults request  with any body
	PostJailUpdateDefaultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailUpdateDefaults(ctx context.Context, body PostJailUpdateDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJailUpdateToLatestPatch request  with any body
	PostJailUpdateToLatestPatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJailUpdateToLatestPatch(ctx context.Context, body PostJailUpdateToLatestPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberos request
	GetKerberos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKerberos request  with any body
	PutKerberosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKerberos(ctx context.Context, body PutKerberosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosKeytab request
	GetKerberosKeytab(ctx context.Context, params *GetKerberosKeytabParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKerberosKeytab request  with any body
	PostKerberosKeytabWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKerberosKeytab(ctx context.Context, body PostKerberosKeytabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKerberosKeytabIdId request
	DeleteKerberosKeytabIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosKeytabIdId request
	GetKerberosKeytabIdId(ctx context.Context, id []interface{}, params *GetKerberosKeytabIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKerberosKeytabIdId request  with any body
	PutKerberosKeytabIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKerberosKeytabIdId(ctx context.Context, id int, body PutKerberosKeytabIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosKeytabSystemKeytabList request
	GetKerberosKeytabSystemKeytabList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosRealm request
	GetKerberosRealm(ctx context.Context, params *GetKerberosRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKerberosRealm request  with any body
	PostKerberosRealmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKerberosRealm(ctx context.Context, body PostKerberosRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKerberosRealmIdId request
	DeleteKerberosRealmIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKerberosRealmIdId request
	GetKerberosRealmIdId(ctx context.Context, id []interface{}, params *GetKerberosRealmIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKerberosRealmIdId request  with any body
	PutKerberosRealmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKerberosRealmIdId(ctx context.Context, id int, body PutKerberosRealmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeychaincredential request
	GetKeychaincredential(ctx context.Context, params *GetKeychaincredentialParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeychaincredential request  with any body
	PostKeychaincredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeychaincredential(ctx context.Context, body PostKeychaincredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeychaincredentialGenerateSshKeyPair request
	GetKeychaincredentialGenerateSshKeyPair(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKeychaincredentialIdId request  with any body
	DeleteKeychaincredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteKeychaincredentialIdId(ctx context.Context, id int, body DeleteKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeychaincredentialIdId request
	GetKeychaincredentialIdId(ctx context.Context, id []interface{}, params *GetKeychaincredentialIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutKeychaincredentialIdId request  with any body
	PutKeychaincredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutKeychaincredentialIdId(ctx context.Context, id int, body PutKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeychaincredentialRemoteSshHostKeyScan request  with any body
	PostKeychaincredentialRemoteSshHostKeyScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeychaincredentialRemoteSshHostKeyScan(ctx context.Context, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeychaincredentialRemoteSshSemiautomaticSetup request  with any body
	PostKeychaincredentialRemoteSshSemiautomaticSetupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx context.Context, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKeychaincredentialUsedBy request  with any body
	PostKeychaincredentialUsedByWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKeychaincredentialUsedBy(ctx context.Context, body PostKeychaincredentialUsedByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdap request
	GetLdap(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLdap request  with any body
	PutLdapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLdap(ctx context.Context, body PutLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapGetState request
	GetLdapGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapIdmapBackendChoices request
	GetLdapIdmapBackendChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapSchemaChoices request
	GetLdapSchemaChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapSslChoices request
	GetLdapSslChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLldp request
	GetLldp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLldp request  with any body
	PutLldpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLldp(ctx context.Context, body PutLldpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMail request
	GetMail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMail request  with any body
	PutMailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMail(ctx context.Context, body PutMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMailSend request  with any body
	PostMailSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMailSend(ctx context.Context, body PostMailSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMultipath request
	GetMultipath(ctx context.Context, params *GetMultipathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMultipathIdId request
	GetMultipathIdId(ctx context.Context, id []interface{}, params *GetMultipathIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkConfiguration request
	GetNetworkConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNetworkConfiguration request  with any body
	PutNetworkConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNetworkConfiguration(ctx context.Context, body PutNetworkConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkGeneralSummary request
	GetNetworkGeneralSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNfs request
	GetNfs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNfs request  with any body
	PutNfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNfs(ctx context.Context, body PutNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNis request
	GetNis(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNis request  with any body
	PutNisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNis(ctx context.Context, body PutNisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNisGetState request
	GetNisGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlugin request
	GetPlugin(ctx context.Context, params *GetPluginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlugin request  with any body
	PostPluginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlugin(ctx context.Context, body PostPluginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPluginAvailable request  with any body
	PostPluginAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPluginAvailable(ctx context.Context, body PostPluginAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPluginBranchesChoices request  with any body
	PostPluginBranchesChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPluginBranchesChoices(ctx context.Context, body PostPluginBranchesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPluginDefaults request  with any body
	PostPluginDefaultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPluginDefaults(ctx context.Context, body PostPluginDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePluginIdId request
	DeletePluginIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginIdId request
	GetPluginIdId(ctx context.Context, id []interface{}, params *GetPluginIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPluginIdId request  with any body
	PutPluginIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPluginIdId(ctx context.Context, id string, body PutPluginIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginOfficialRepositories request
	GetPluginOfficialRepositories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPluginRetrieveVersionsForRepos request
	GetPluginRetrieveVersionsForRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPool request
	GetPool(ctx context.Context, params *GetPoolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPool request  with any body
	PostPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPool(ctx context.Context, body PostPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolDataset request
	GetPoolDataset(ctx context.Context, params *GetPoolDatasetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDataset request  with any body
	PostPoolDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDataset(ctx context.Context, body PostPoolDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePoolDatasetIdId request  with any body
	DeletePoolDatasetIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeletePoolDatasetIdId(ctx context.Context, id string, body DeletePoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolDatasetIdId request
	GetPoolDatasetIdId(ctx context.Context, id []interface{}, params *GetPoolDatasetIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolDatasetIdId request  with any body
	PutPoolDatasetIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolDatasetIdId(ctx context.Context, id string, body PutPoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdAttachments request  with any body
	PostPoolDatasetIdIdAttachmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdAttachments(ctx context.Context, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdPermission request  with any body
	PostPoolDatasetIdIdPermissionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdPermission(ctx context.Context, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdProcesses request  with any body
	PostPoolDatasetIdIdProcessesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdProcesses(ctx context.Context, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetIdIdPromote request  with any body
	PostPoolDatasetIdIdPromoteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetIdIdPromote(ctx context.Context, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolDatasetRecommendedZvolBlocksize request  with any body
	PostPoolDatasetRecommendedZvolBlocksizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolDatasetRecommendedZvolBlocksize(ctx context.Context, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolFilesystemChoices request  with any body
	PostPoolFilesystemChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolFilesystemChoices(ctx context.Context, body PostPoolFilesystemChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolIdId request
	GetPoolIdId(ctx context.Context, id []interface{}, params *GetPoolIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolIdId request  with any body
	PutPoolIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolIdId(ctx context.Context, id int, body PutPoolIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdAttachments request  with any body
	PostPoolIdIdAttachmentsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdAttachments(ctx context.Context, id int, body PostPoolIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdDetach request  with any body
	PostPoolIdIdDetachWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdDetach(ctx context.Context, id int, body PostPoolIdIdDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdDownloadEncryptionKey request  with any body
	PostPoolIdIdDownloadEncryptionKeyWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdDownloadEncryptionKey(ctx context.Context, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdExport request  with any body
	PostPoolIdIdExportWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdExport(ctx context.Context, id int, body PostPoolIdIdExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdGetDisks request  with any body
	PostPoolIdIdGetDisksWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdGetDisks(ctx context.Context, id int, body PostPoolIdIdGetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdIsUpgraded request  with any body
	PostPoolIdIdIsUpgradedWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdIsUpgraded(ctx context.Context, id int, body PostPoolIdIdIsUpgradedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdLock request  with any body
	PostPoolIdIdLockWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdLock(ctx context.Context, id int, body PostPoolIdIdLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdOffline request  with any body
	PostPoolIdIdOfflineWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdOffline(ctx context.Context, id int, body PostPoolIdIdOfflineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdOnline request  with any body
	PostPoolIdIdOnlineWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdOnline(ctx context.Context, id int, body PostPoolIdIdOnlineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdPassphrase request  with any body
	PostPoolIdIdPassphraseWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdPassphrase(ctx context.Context, id int, body PostPoolIdIdPassphraseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdProcesses request  with any body
	PostPoolIdIdProcessesWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdProcesses(ctx context.Context, id int, body PostPoolIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdRecoverykeyRm request  with any body
	PostPoolIdIdRecoverykeyRmWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdRecoverykeyRm(ctx context.Context, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdRekey request  with any body
	PostPoolIdIdRekeyWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdRekey(ctx context.Context, id int, body PostPoolIdIdRekeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdRemove request  with any body
	PostPoolIdIdRemoveWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdRemove(ctx context.Context, id int, body PostPoolIdIdRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdReplace request  with any body
	PostPoolIdIdReplaceWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdReplace(ctx context.Context, id int, body PostPoolIdIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdScrub request  with any body
	PostPoolIdIdScrubWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdScrub(ctx context.Context, id int, body PostPoolIdIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdUnlock request  with any body
	PostPoolIdIdUnlockWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdUnlock(ctx context.Context, id int, body PostPoolIdIdUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolIdIdUpgrade request  with any body
	PostPoolIdIdUpgradeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolIdIdUpgrade(ctx context.Context, id int, body PostPoolIdIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolImportDisk request  with any body
	PostPoolImportDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolImportDisk(ctx context.Context, body PostPoolImportDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolImportDiskAutodetectFsType request  with any body
	PostPoolImportDiskAutodetectFsTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolImportDiskAutodetectFsType(ctx context.Context, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolImportDiskMsdosfsLocales request
	GetPoolImportDiskMsdosfsLocales(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolImportFind request
	GetPoolImportFind(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolImportPool request  with any body
	PostPoolImportPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolImportPool(ctx context.Context, body PostPoolImportPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolResilver request
	GetPoolResilver(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolResilver request  with any body
	PutPoolResilverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolResilver(ctx context.Context, body PutPoolResilverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolScrub request
	GetPoolScrub(ctx context.Context, params *GetPoolScrubParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolScrub request  with any body
	PostPoolScrubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolScrub(ctx context.Context, body PostPoolScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePoolScrubIdId request
	DeletePoolScrubIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolScrubIdId request
	GetPoolScrubIdId(ctx context.Context, id []interface{}, params *GetPoolScrubIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolScrubIdId request  with any body
	PutPoolScrubIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolScrubIdId(ctx context.Context, id int, body PutPoolScrubIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolScrubRun request  with any body
	PostPoolScrubRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolScrubRun(ctx context.Context, body PostPoolScrubRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolSnapshottask request
	GetPoolSnapshottask(ctx context.Context, params *GetPoolSnapshottaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolSnapshottask request  with any body
	PostPoolSnapshottaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolSnapshottask(ctx context.Context, body PostPoolSnapshottaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePoolSnapshottaskIdId request
	DeletePoolSnapshottaskIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoolSnapshottaskIdId request
	GetPoolSnapshottaskIdId(ctx context.Context, id []interface{}, params *GetPoolSnapshottaskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPoolSnapshottaskIdId request  with any body
	PutPoolSnapshottaskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPoolSnapshottaskIdId(ctx context.Context, id int, body PutPoolSnapshottaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolSnapshottaskIdIdRun request  with any body
	PostPoolSnapshottaskIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolSnapshottaskIdIdRun(ctx context.Context, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPoolUnlockServicesRestartChoices request  with any body
	PostPoolUnlockServicesRestartChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPoolUnlockServicesRestartChoices(ctx context.Context, body PostPoolUnlockServicesRestartChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplication request
	GetReplication(ctx context.Context, params *GetReplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplication request  with any body
	PostReplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplication(ctx context.Context, body PostReplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationCountEligibleManualSnapshots request  with any body
	PostReplicationCountEligibleManualSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationCountEligibleManualSnapshots(ctx context.Context, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationCreateDataset request  with any body
	PostReplicationCreateDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationCreateDataset(ctx context.Context, body PostReplicationCreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReplicationIdId request
	DeleteReplicationIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplicationIdId request
	GetReplicationIdId(ctx context.Context, id []interface{}, params *GetReplicationIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutReplicationIdId request  with any body
	PutReplicationIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutReplicationIdId(ctx context.Context, id int, body PutReplicationIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationIdIdRun request  with any body
	PostReplicationIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationIdIdRun(ctx context.Context, id int, body PostReplicationIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationListDatasets request  with any body
	PostReplicationListDatasetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationListDatasets(ctx context.Context, body PostReplicationListDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplicationListNamingSchemas request
	GetReplicationListNamingSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReplicationTargetUnmatchedSnapshots request  with any body
	PostReplicationTargetUnmatchedSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReplicationTargetUnmatchedSnapshots(ctx context.Context, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReporting request
	GetReporting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutReporting request  with any body
	PutReportingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutReporting(ctx context.Context, body PutReportingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReportingGetData request  with any body
	PostReportingGetDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReportingGetData(ctx context.Context, body PostReportingGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportingGraphs request
	GetReportingGraphs(ctx context.Context, params *GetReportingGraphsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRouteIpv4gwReachable request  with any body
	PostRouteIpv4gwReachableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRouteIpv4gwReachable(ctx context.Context, body PostRouteIpv4gwReachableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRouteSystemRoutes request
	GetRouteSystemRoutes(ctx context.Context, params *GetRouteSystemRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsyncd request
	GetRsyncd(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRsyncd request  with any body
	PutRsyncdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRsyncd(ctx context.Context, body PutRsyncdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsyncmod request
	GetRsyncmod(ctx context.Context, params *GetRsyncmodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRsyncmod request  with any body
	PostRsyncmodWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRsyncmod(ctx context.Context, body PostRsyncmodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRsyncmodIdId request
	DeleteRsyncmodIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsyncmodIdId request
	GetRsyncmodIdId(ctx context.Context, id []interface{}, params *GetRsyncmodIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRsyncmodIdId request  with any body
	PutRsyncmodIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRsyncmodIdId(ctx context.Context, id int, body PutRsyncmodIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsynctask request
	GetRsynctask(ctx context.Context, params *GetRsynctaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRsynctask request  with any body
	PostRsynctaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRsynctask(ctx context.Context, body PostRsynctaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRsynctaskIdId request
	DeleteRsynctaskIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRsynctaskIdId request
	GetRsynctaskIdId(ctx context.Context, id []interface{}, params *GetRsynctaskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRsynctaskIdId request  with any body
	PutRsynctaskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRsynctaskIdId(ctx context.Context, id int, body PutRsynctaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRsynctaskIdIdRun request  with any body
	PostRsynctaskIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRsynctaskIdIdRun(ctx context.Context, id int, body PostRsynctaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetS3 request
	GetS3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutS3 request  with any body
	PutS3WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutS3(ctx context.Context, body PutS3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetService request
	GetService(ctx context.Context, params *GetServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceIdId request
	GetServiceIdId(ctx context.Context, id []interface{}, params *GetServiceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceIdId request  with any body
	PutServiceIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceIdId(ctx context.Context, id string, body PutServiceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceReload request  with any body
	PostServiceReloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceReload(ctx context.Context, body PostServiceReloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceRestart request  with any body
	PostServiceRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceRestart(ctx context.Context, body PostServiceRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceStart request  with any body
	PostServiceStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceStart(ctx context.Context, body PostServiceStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceStarted request
	GetServiceStarted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceStop request  with any body
	PostServiceStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceStop(ctx context.Context, body PostServiceStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceTerminateProcess request  with any body
	PostServiceTerminateProcessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceTerminateProcess(ctx context.Context, body PostServiceTerminateProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingAfp request
	GetSharingAfp(ctx context.Context, params *GetSharingAfpParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharingAfp request  with any body
	PostSharingAfpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharingAfp(ctx context.Context, body PostSharingAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSharingAfpIdId request
	DeleteSharingAfpIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingAfpIdId request
	GetSharingAfpIdId(ctx context.Context, id []interface{}, params *GetSharingAfpIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSharingAfpIdId request  with any body
	PutSharingAfpIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSharingAfpIdId(ctx context.Context, id int, body PutSharingAfpIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingNfs request
	GetSharingNfs(ctx context.Context, params *GetSharingNfsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharingNfs request  with any body
	PostSharingNfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharingNfs(ctx context.Context, body PostSharingNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSharingNfsIdId request
	DeleteSharingNfsIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingNfsIdId request
	GetSharingNfsIdId(ctx context.Context, id []interface{}, params *GetSharingNfsIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSharingNfsIdId request  with any body
	PutSharingNfsIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSharingNfsIdId(ctx context.Context, id int, body PutSharingNfsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingSmb request
	GetSharingSmb(ctx context.Context, params *GetSharingSmbParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharingSmb request  with any body
	PostSharingSmbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharingSmb(ctx context.Context, body PostSharingSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSharingSmbIdId request
	DeleteSharingSmbIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingSmbIdId request
	GetSharingSmbIdId(ctx context.Context, id []interface{}, params *GetSharingSmbIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSharingSmbIdId request  with any body
	PutSharingSmbIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSharingSmbIdId(ctx context.Context, id int, body PutSharingSmbIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingSmbVfsobjectsChoices request
	GetSharingSmbVfsobjectsChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingWebdav request
	GetSharingWebdav(ctx context.Context, params *GetSharingWebdavParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharingWebdav request  with any body
	PostSharingWebdavWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharingWebdav(ctx context.Context, body PostSharingWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSharingWebdavIdId request
	DeleteSharingWebdavIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharingWebdavIdId request
	GetSharingWebdavIdId(ctx context.Context, id []interface{}, params *GetSharingWebdavIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSharingWebdavIdId request  with any body
	PutSharingWebdavIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSharingWebdavIdId(ctx context.Context, id int, body PutSharingWebdavIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmart request
	GetSmart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSmart request  with any body
	PutSmartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSmart(ctx context.Context, body PutSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmartTest request
	GetSmartTest(ctx context.Context, params *GetSmartTestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmartTest request  with any body
	PostSmartTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmartTest(ctx context.Context, body PostSmartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmartTestIdId request
	DeleteSmartTestIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmartTestIdId request
	GetSmartTestIdId(ctx context.Context, id []interface{}, params *GetSmartTestIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSmartTestIdId request  with any body
	PutSmartTestIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSmartTestIdId(ctx context.Context, id int, body PutSmartTestIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmartTestResults request
	GetSmartTestResults(ctx context.Context, params *GetSmartTestResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmb request
	GetSmb(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSmb request  with any body
	PutSmbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSmb(ctx context.Context, body PutSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbBindipChoices request
	GetSmbBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbDomainChoices request
	GetSmbDomainChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbSharesec request
	GetSmbSharesec(ctx context.Context, params *GetSmbSharesecParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmbSharesec request  with any body
	PostSmbSharesecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmbSharesec(ctx context.Context, body PostSmbSharesecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmbSharesecGetacl request  with any body
	PostSmbSharesecGetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSmbSharesecGetacl(ctx context.Context, body PostSmbSharesecGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmbSharesecIdId request
	DeleteSmbSharesecIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbSharesecIdId request
	GetSmbSharesecIdId(ctx context.Context, id []interface{}, params *GetSmbSharesecIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSmbSharesecIdId request  with any body
	PutSmbSharesecIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSmbSharesecIdId(ctx context.Context, id int, body PutSmbSharesecIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbSharesecSynchronizeAcls request
	GetSmbSharesecSynchronizeAcls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmbUnixcharsetChoices request
	GetSmbUnixcharsetChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnmp request
	GetSnmp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSnmp request  with any body
	PutSnmpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSnmp(ctx context.Context, body PutSnmpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSsh request
	GetSsh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSsh request  with any body
	PutSshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSsh(ctx context.Context, body PutSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSshBindifaceChoices request
	GetSshBindifaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaticroute request
	GetStaticroute(ctx context.Context, params *GetStaticrouteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStaticroute request  with any body
	PostStaticrouteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStaticroute(ctx context.Context, body PostStaticrouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStaticrouteIdId request
	DeleteStaticrouteIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaticrouteIdId request
	GetStaticrouteIdId(ctx context.Context, id []interface{}, params *GetStaticrouteIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStaticrouteIdId request  with any body
	PutStaticrouteIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStaticrouteIdId(ctx context.Context, id int, body PutStaticrouteIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatsGetData request  with any body
	PostStatsGetDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatsGetData(ctx context.Context, body PostStatsGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatsGetDatasetInfo request  with any body
	PostStatsGetDatasetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatsGetDatasetInfo(ctx context.Context, body PostStatsGetDatasetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatsGetSources request
	GetStatsGetSources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupport request
	GetSupport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSupport request  with any body
	PutSupportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSupport(ctx context.Context, body PutSupportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSupportFetchCategories request  with any body
	PostSupportFetchCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSupportFetchCategories(ctx context.Context, body PostSupportFetchCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportFields request
	GetSupportFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportIsAvailable request
	GetSupportIsAvailable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportIsAvailableAndEnabled request
	GetSupportIsAvailableAndEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSupportNewTicket request  with any body
	PostSupportNewTicketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSupportNewTicket(ctx context.Context, body PostSupportNewTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemAdvanced request
	GetSystemAdvanced(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemAdvanced request  with any body
	PutSystemAdvancedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemAdvanced(ctx context.Context, body PutSystemAdvancedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemAdvancedSerialPortChoices request
	GetSystemAdvancedSerialPortChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemBootId request
	GetSystemBootId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemFeatureEnabled request  with any body
	PostSystemFeatureEnabledWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemFeatureEnabled(ctx context.Context, body PostSystemFeatureEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneral request
	GetSystemGeneral(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemGeneral request  with any body
	PutSystemGeneralWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemGeneral(ctx context.Context, body PutSystemGeneralJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralCountryChoices request
	GetSystemGeneralCountryChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralKbdmapChoices request
	GetSystemGeneralKbdmapChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralLanguageChoices request
	GetSystemGeneralLanguageChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralLocalUrl request
	GetSystemGeneralLocalUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralTimezoneChoices request
	GetSystemGeneralTimezoneChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiAddressChoices request
	GetSystemGeneralUiAddressChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiCertificateChoices request
	GetSystemGeneralUiCertificateChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiRestart request
	GetSystemGeneralUiRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemGeneralUiV6addressChoices request
	GetSystemGeneralUiV6addressChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemInfo request
	GetSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemIsFreenas request
	GetSystemIsFreenas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemLegacyUiEnabled request
	GetSystemLegacyUiEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemLicenseUpdate request  with any body
	PostSystemLicenseUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemLicenseUpdate(ctx context.Context, body PostSystemLicenseUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemNtpserver request
	GetSystemNtpserver(ctx context.Context, params *GetSystemNtpserverParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemNtpserver request  with any body
	PostSystemNtpserverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemNtpserver(ctx context.Context, body PostSystemNtpserverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSystemNtpserverIdId request
	DeleteSystemNtpserverIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemNtpserverIdId request
	GetSystemNtpserverIdId(ctx context.Context, id []interface{}, params *GetSystemNtpserverIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemNtpserverIdId request  with any body
	PutSystemNtpserverIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemNtpserverIdId(ctx context.Context, id int, body PutSystemNtpserverIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemNtpserverTestNtpServer request
	GetSystemNtpserverTestNtpServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemProductName request
	GetSystemProductName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemReady request
	GetSystemReady(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemReboot request  with any body
	PostSystemRebootWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemReboot(ctx context.Context, body PostSystemRebootJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemShutdown request  with any body
	PostSystemShutdownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemShutdown(ctx context.Context, body PostSystemShutdownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemState request
	GetSystemState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemVersion request
	GetSystemVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemdataset request
	GetSystemdataset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSystemdataset request  with any body
	PutSystemdatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSystemdataset(ctx context.Context, body PutSystemdatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTftp request
	GetTftp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTftp request  with any body
	PutTftpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTftp(ctx context.Context, body PutTftpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTunable request
	GetTunable(ctx context.Context, params *GetTunableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTunable request  with any body
	PostTunableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTunable(ctx context.Context, body PostTunableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTunableIdId request
	DeleteTunableIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTunableIdId request
	GetTunableIdId(ctx context.Context, id []interface{}, params *GetTunableIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTunableIdId request  with any body
	PutTunableIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTunableIdId(ctx context.Context, id int, body PutTunableIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateCheckAvailable request  with any body
	PostUpdateCheckAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateCheckAvailable(ctx context.Context, body PostUpdateCheckAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateDownload request
	GetUpdateDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateGetPending request  with any body
	PostUpdateGetPendingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateGetPending(ctx context.Context, body PostUpdateGetPendingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateGetTrains request
	GetUpdateGetTrains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateManual request  with any body
	PostUpdateManualWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateManual(ctx context.Context, body PostUpdateManualJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateSetTrain request  with any body
	PostUpdateSetTrainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateSetTrain(ctx context.Context, body PostUpdateSetTrainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateUpdate request  with any body
	PostUpdateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateUpdate(ctx context.Context, body PostUpdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUps request
	GetUps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUps request  with any body
	PutUpsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUps(ctx context.Context, body PutUpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpsDriverChoices request
	GetUpsDriverChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpsPortChoices request
	GetUpsPortChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUser request  with any body
	PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGetNextUid request
	GetUserGetNextUid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserGetUserObj request  with any body
	PostUserGetUserObjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserGetUserObj(ctx context.Context, body PostUserGetUserObjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserHasRootPassword request
	GetUserHasRootPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserIdId request  with any body
	DeleteUserIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserIdId(ctx context.Context, id int, body DeleteUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserIdId request
	GetUserIdId(ctx context.Context, id []interface{}, params *GetUserIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserIdId request  with any body
	PutUserIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserIdId(ctx context.Context, id int, body PutUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserIdIdPopAttribute request  with any body
	PostUserIdIdPopAttributeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserIdIdPopAttribute(ctx context.Context, id int, body PostUserIdIdPopAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserIdIdSetAttribute request  with any body
	PostUserIdIdSetAttributeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserIdIdSetAttribute(ctx context.Context, id int, body PostUserIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserShellChoices request
	GetUserShellChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVm request
	GetVm(ctx context.Context, params *GetVmParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVm request  with any body
	PostVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVm(ctx context.Context, body PostVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDevice request
	GetVmDevice(ctx context.Context, params *GetVmDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmDevice request  with any body
	PostVmDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmDevice(ctx context.Context, body PostVmDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmDeviceIdId request  with any body
	DeleteVmDeviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteVmDeviceIdId(ctx context.Context, id int, body DeleteVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDeviceIdId request
	GetVmDeviceIdId(ctx context.Context, id []interface{}, params *GetVmDeviceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmDeviceIdId request  with any body
	PutVmDeviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmDeviceIdId(ctx context.Context, id int, body PutVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDeviceNicAttachChoices request
	GetVmDeviceNicAttachChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmDeviceVncBindChoices request
	GetVmDeviceVncBindChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmFlags request
	GetVmFlags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmGetAttachedIface request  with any body
	PostVmGetAttachedIfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmGetAttachedIface(ctx context.Context, body PostVmGetAttachedIfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmGetAvailableMemory request  with any body
	PostVmGetAvailableMemoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmGetAvailableMemory(ctx context.Context, body PostVmGetAvailableMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmGetConsole request  with any body
	PostVmGetConsoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmGetConsole(ctx context.Context, body PostVmGetConsoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmGetVmemoryInUse request
	GetVmGetVmemoryInUse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmGetVnc request  with any body
	PostVmGetVncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmGetVnc(ctx context.Context, body PostVmGetVncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmGetVncIpv4 request
	GetVmGetVncIpv4(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmIdId request
	DeleteVmIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmIdId request
	GetVmIdId(ctx context.Context, id []interface{}, params *GetVmIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmIdId request  with any body
	PutVmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmIdId(ctx context.Context, id int, body PutVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdClone request  with any body
	PostVmIdIdCloneWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdClone(ctx context.Context, id int, body PostVmIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdRestart request  with any body
	PostVmIdIdRestartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdRestart(ctx context.Context, id int, body PostVmIdIdRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdStart request  with any body
	PostVmIdIdStartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdStart(ctx context.Context, id int, body PostVmIdIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdStatus request  with any body
	PostVmIdIdStatusWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdStatus(ctx context.Context, id int, body PostVmIdIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmIdIdStop request  with any body
	PostVmIdIdStopWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmIdIdStop(ctx context.Context, id int, body PostVmIdIdStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmIdentifyHypervisor request
	GetVmIdentifyHypervisor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmRandomMac request
	GetVmRandomMac(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmVncPortWizard request
	GetVmVncPortWizard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmware request
	GetVmware(ctx context.Context, params *GetVmwareParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmware request  with any body
	PostVmwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmware(ctx context.Context, body PostVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareDatasetHasVms request  with any body
	PostVmwareDatasetHasVmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmwareDatasetHasVms(ctx context.Context, body PostVmwareDatasetHasVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareGetDatastores request  with any body
	PostVmwareGetDatastoresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmwareGetDatastores(ctx context.Context, body PostVmwareGetDatastoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareGetVirtualMachines request  with any body
	PostVmwareGetVirtualMachinesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmwareGetVirtualMachines(ctx context.Context, body PostVmwareGetVirtualMachinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVmwareIdId request
	DeleteVmwareIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVmwareIdId request
	GetVmwareIdId(ctx context.Context, id []interface{}, params *GetVmwareIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVmwareIdId request  with any body
	PutVmwareIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVmwareIdId(ctx context.Context, id int, body PutVmwareIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVmwareMatchDatastoresWithDatasets request  with any body
	PostVmwareMatchDatastoresWithDatasetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVmwareMatchDatastoresWithDatasets(ctx context.Context, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebdav request
	GetWebdav(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWebdav request  with any body
	PutWebdavWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWebdav(ctx context.Context, body PutWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebuiImage request
	GetWebuiImage(ctx context.Context, params *GetWebuiImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebuiImageIdId request
	DeleteWebuiImageIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebuiImageIdId request
	GetWebuiImageIdId(ctx context.Context, id []interface{}, params *GetWebuiImageIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZfsSnapshot request
	GetZfsSnapshot(ctx context.Context, params *GetZfsSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZfsSnapshot request  with any body
	PostZfsSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZfsSnapshot(ctx context.Context, body PostZfsSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZfsSnapshotClone request  with any body
	PostZfsSnapshotCloneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZfsSnapshotClone(ctx context.Context, body PostZfsSnapshotCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteZfsSnapshotIdId request  with any body
	DeleteZfsSnapshotIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteZfsSnapshotIdId(ctx context.Context, id string, body DeleteZfsSnapshotIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZfsSnapshotIdId request
	GetZfsSnapshotIdId(ctx context.Context, id []interface{}, params *GetZfsSnapshotIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZfsSnapshotRemove request  with any body
	PostZfsSnapshotRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZfsSnapshotRemove(ctx context.Context, body PostZfsSnapshotRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZfsSnapshotRollback request  with any body
	PostZfsSnapshotRollbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZfsSnapshotRollback(ctx context.Context, body PostZfsSnapshotRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAcmeDnsAuthenticator(ctx context.Context, params *GetAcmeDnsAuthenticatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAcmeDnsAuthenticatorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAcmeDnsAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAcmeDnsAuthenticatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAcmeDnsAuthenticator(ctx context.Context, body PostAcmeDnsAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAcmeDnsAuthenticatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAcmeDnsAuthenticatorAuthenticatorSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAcmeDnsAuthenticatorIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAcmeDnsAuthenticatorIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAcmeDnsAuthenticatorIdId(ctx context.Context, id []interface{}, params *GetAcmeDnsAuthenticatorIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAcmeDnsAuthenticatorIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAcmeDnsAuthenticatorIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAcmeDnsAuthenticatorIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAcmeDnsAuthenticatorIdId(ctx context.Context, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAcmeDnsAuthenticatorIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActivedirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActivedirectoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActivedirectory(ctx context.Context, body PutActivedirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActivedirectoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryChangeTrustAccountPw(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryChangeTrustAccountPwRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryDomainInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryDomainInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryGetSpnList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryGetSpnListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryIdmapBackendChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryIdmapBackendChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActivedirectoryLeaveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActivedirectoryLeaveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActivedirectoryLeave(ctx context.Context, body PostActivedirectoryLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActivedirectoryLeaveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryNssInfoChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryNssInfoChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectorySaslWrappingChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectorySaslWrappingChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectorySslChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectorySslChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivedirectoryStarted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivedirectoryStartedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAfp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAfpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAfpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAfpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAfp(ctx context.Context, body PutAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAfpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAfpBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAfpBindipChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertDismissWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertDismissRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertDismiss(ctx context.Context, body PostAlertDismissJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertDismissRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertListCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertListCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertListPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertListPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertRestoreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertRestore(ctx context.Context, body PostAlertRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertRestoreRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertclasses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertclassesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertclassesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertclassesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertclasses(ctx context.Context, body PutAlertclassesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertclassesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertservice(ctx context.Context, params *GetAlertserviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertserviceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertserviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertserviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertservice(ctx context.Context, body PostAlertserviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertserviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertserviceIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertserviceIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertserviceIdId(ctx context.Context, id []interface{}, params *GetAlertserviceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertserviceIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertserviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertserviceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertserviceIdId(ctx context.Context, id int, body PutAlertserviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertserviceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertserviceListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertserviceListTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertserviceTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertserviceTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertserviceTest(ctx context.Context, body PostAlertserviceTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertserviceTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthCheckUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthCheckUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthCheckUser(ctx context.Context, body PostAuthCheckUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthCheckUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthGenerateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthGenerateTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthGenerateToken(ctx context.Context, body PostAuthGenerateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthGenerateTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthSessions(ctx context.Context, params *GetAuthSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackup(ctx context.Context, body PostBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupAzureGetBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupAzureGetBucketsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupAzureGetBuckets(ctx context.Context, body PostBackupAzureGetBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupAzureGetBucketsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupB2GetBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupB2GetBucketsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupB2GetBuckets(ctx context.Context, body PostBackupB2GetBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupB2GetBucketsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackupCredential(ctx context.Context, params *GetBackupCredentialParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupCredentialRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupCredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupCredentialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupCredential(ctx context.Context, body PostBackupCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupCredentialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackupCredentialIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackupCredentialIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackupCredentialIdId(ctx context.Context, id []interface{}, params *GetBackupCredentialIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupCredentialIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBackupCredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBackupCredentialIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBackupCredentialIdId(ctx context.Context, id int, body PutBackupCredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBackupCredentialIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupGcsGetBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupGcsGetBucketsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupGcsGetBuckets(ctx context.Context, body PostBackupGcsGetBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupGcsGetBucketsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackupIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackupIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackupIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBackupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBackupIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBackupIdId(ctx context.Context, id int, body PutBackupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBackupIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupS3GetBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupS3GetBucketsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackupS3GetBuckets(ctx context.Context, body PostBackupS3GetBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackupS3GetBucketsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootAttachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootAttachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootAttach(ctx context.Context, body PostBootAttachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootAttachRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootDetachWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootDetachRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootDetach(ctx context.Context, body PostBootDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootDetachRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootGetDisks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootGetDisksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootGetScrubInterval(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootGetScrubIntervalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootReplaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootReplaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootReplace(ctx context.Context, body PostBootReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootReplaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootScrub(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootScrubRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootSetScrubIntervalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootSetScrubIntervalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootSetScrubInterval(ctx context.Context, body PostBootSetScrubIntervalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootSetScrubIntervalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootenv(ctx context.Context, params *GetBootenvParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootenvRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenv(ctx context.Context, body PostBootenvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBootenvIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBootenvIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBootenvIdId(ctx context.Context, id []interface{}, params *GetBootenvIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBootenvIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBootenvIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBootenvIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBootenvIdId(ctx context.Context, id string, body PutBootenvIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBootenvIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvIdIdActivateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvIdIdActivateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvIdIdActivate(ctx context.Context, id string, body PostBootenvIdIdActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvIdIdActivateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvIdIdSetAttributeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvIdIdSetAttributeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBootenvIdIdSetAttribute(ctx context.Context, id string, body PostBootenvIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBootenvIdIdSetAttributeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificate(ctx context.Context, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificate(ctx context.Context, body PostCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateAcmeServerChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateAcmeServerChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateEcCurveChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateEcCurveChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCertificateIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertificateIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCertificateIdId(ctx context.Context, id int, body DeleteCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertificateIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateIdId(ctx context.Context, id []interface{}, params *GetCertificateIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateIdId(ctx context.Context, id int, body PutCertificateIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateKeyTypeChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateKeyTypeChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateauthority(ctx context.Context, params *GetCertificateauthorityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateauthorityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateauthorityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateauthorityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateauthority(ctx context.Context, body PostCertificateauthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateauthorityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateauthorityCaSignCsrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateauthorityCaSignCsrRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificateauthorityCaSignCsr(ctx context.Context, body PostCertificateauthorityCaSignCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificateauthorityCaSignCsrRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCertificateauthorityIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertificateauthorityIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateauthorityIdId(ctx context.Context, id []interface{}, params *GetCertificateauthorityIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateauthorityIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateauthorityIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateauthorityIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateauthorityIdId(ctx context.Context, id int, body PutCertificateauthorityIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateauthorityIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsync(ctx context.Context, params *GetCloudsyncParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsync(ctx context.Context, body PostCloudsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncCommonTaskSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncCommonTaskSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncCredentials(ctx context.Context, params *GetCloudsyncCredentialsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncCredentialsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncCredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncCredentials(ctx context.Context, body PostCloudsyncCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncCredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCloudsyncCredentialsIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCloudsyncCredentialsIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncCredentialsIdId(ctx context.Context, id []interface{}, params *GetCloudsyncCredentialsIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncCredentialsIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudsyncCredentialsIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudsyncCredentialsIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudsyncCredentialsIdId(ctx context.Context, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudsyncCredentialsIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncCredentialsVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncCredentialsVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncCredentialsVerify(ctx context.Context, body PostCloudsyncCredentialsVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncCredentialsVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCloudsyncIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCloudsyncIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncIdId(ctx context.Context, id []interface{}, params *GetCloudsyncIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudsyncIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudsyncIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudsyncIdId(ctx context.Context, id int, body PutCloudsyncIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudsyncIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdAbortWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdAbortRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdAbort(ctx context.Context, id int, body PostCloudsyncIdIdAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdAbortRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdSyncWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdSyncRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncIdIdSync(ctx context.Context, id int, body PostCloudsyncIdIdSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncIdIdSyncRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncListBucketsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncListBucketsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncListBuckets(ctx context.Context, body PostCloudsyncListBucketsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncListBucketsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncListDirectoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncListDirectoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncListDirectory(ctx context.Context, body PostCloudsyncListDirectoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncListDirectoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncOnedriveListDrivesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncOnedriveListDrivesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudsyncOnedriveListDrives(ctx context.Context, body PostCloudsyncOnedriveListDrivesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudsyncOnedriveListDrivesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudsyncProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudsyncProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigReset(ctx context.Context, body PostConfigResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreBulk(ctx context.Context, body PostCoreBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreDebugWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreDebugRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreDebug(ctx context.Context, body PostCoreDebugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreDebugRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreDownloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreDownloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreDownload(ctx context.Context, body PostCoreDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreDownloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreGetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreGetEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreGetJobs(ctx context.Context, params *GetCoreGetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreGetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreGetMethodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreGetMethodsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreGetMethods(ctx context.Context, body PostCoreGetMethodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreGetMethodsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreGetServices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreGetServicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobAbortWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobAbortRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobAbort(ctx context.Context, body PostCoreJobAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobAbortRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobUpdate(ctx context.Context, body PostCoreJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobWaitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobWaitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCoreJobWait(ctx context.Context, body PostCoreJobWaitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreJobWaitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorePing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorePingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreSessions(ctx context.Context, params *GetCoreSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCronjob(ctx context.Context, params *GetCronjobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCronjobRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCronjobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCronjobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCronjob(ctx context.Context, body PostCronjobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCronjobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCronjobIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCronjobIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCronjobIdId(ctx context.Context, id []interface{}, params *GetCronjobIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCronjobIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCronjobIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCronjobIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCronjobIdId(ctx context.Context, id int, body PutCronjobIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCronjobIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCronjobRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCronjobRunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCronjobRun(ctx context.Context, body PostCronjobRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCronjobRunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceGetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceGetInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceGetInfo(ctx context.Context, body PostDeviceGetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceGetInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDirectoryservicesGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDirectoryservicesGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDisk(ctx context.Context, params *GetDiskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskGetEncryptedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskGetEncryptedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskGetEncrypted(ctx context.Context, body PostDiskGetEncryptedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskGetEncryptedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskGetUnusedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskGetUnusedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskGetUnused(ctx context.Context, body PostDiskGetUnusedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskGetUnusedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiskIdId(ctx context.Context, id []interface{}, params *GetDiskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiskIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDiskIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDiskIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDiskIdId(ctx context.Context, id string, body PutDiskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDiskIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskTemperaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskTemperaturesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskTemperatures(ctx context.Context, body PostDiskTemperaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskTemperaturesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskWipeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskWipeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDiskWipe(ctx context.Context, body PostDiskWipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDiskWipeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDnsQuery(ctx context.Context, params *GetDnsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDnsQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDyndns(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDyndnsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDyndnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDyndnsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDyndns(ctx context.Context, body PutDyndnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDyndnsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDyndnsProviderChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDyndnsProviderChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemAclIsTrivialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemAclIsTrivialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemAclIsTrivial(ctx context.Context, body PostFilesystemAclIsTrivialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemAclIsTrivialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemChownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemChownRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemChown(ctx context.Context, body PostFilesystemChownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemChownRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilesystemDefaultAclChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilesystemDefaultAclChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemGetDefaultAclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemGetDefaultAclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemGetDefaultAcl(ctx context.Context, body PostFilesystemGetDefaultAclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemGetDefaultAclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemGetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemGetaclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemGetacl(ctx context.Context, body PostFilesystemGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemGetaclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemListdirWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemListdirRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemListdir(ctx context.Context, body PostFilesystemListdirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemListdirRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemSetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemSetaclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemSetacl(ctx context.Context, body PostFilesystemSetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemSetaclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemSetpermWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemSetpermRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemSetperm(ctx context.Context, body PostFilesystemSetpermJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemSetpermRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemStatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemStatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemStat(ctx context.Context, body PostFilesystemStatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemStatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemStatfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemStatfsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemStatfs(ctx context.Context, body PostFilesystemStatfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemStatfsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFtp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFtpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFtp(ctx context.Context, body PutFtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroup(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroup(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupGetGroupObjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupGetGroupObjRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupGetGroupObj(ctx context.Context, body PostGroupGetGroupObjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupGetGroupObjRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupGetNextGid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupGetNextGidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupIdId(ctx context.Context, id int, body DeleteGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupIdId(ctx context.Context, id []interface{}, params *GetGroupIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupIdId(ctx context.Context, id int, body PutGroupIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapAd(ctx context.Context, params *GetIdmapAdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapAdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapAdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapAdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapAd(ctx context.Context, body PostIdmapAdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapAdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapAdIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapAdIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapAdIdId(ctx context.Context, id []interface{}, params *GetIdmapAdIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapAdIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapAdIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapAdIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapAdIdId(ctx context.Context, id int, body PutIdmapAdIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapAdIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapAutorid(ctx context.Context, params *GetIdmapAutoridParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapAutoridRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapAutoridWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapAutoridRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapAutorid(ctx context.Context, body PostIdmapAutoridJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapAutoridRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapAutoridIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapAutoridIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapAutoridIdId(ctx context.Context, id []interface{}, params *GetIdmapAutoridIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapAutoridIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapAutoridIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapAutoridIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapAutoridIdId(ctx context.Context, id int, body PutIdmapAutoridIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapAutoridIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapClearIdmapCache(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapClearIdmapCacheRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapDomain(ctx context.Context, params *GetIdmapDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapDomainRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapDomain(ctx context.Context, body PostIdmapDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapDomainIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapDomainIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapDomainIdId(ctx context.Context, id []interface{}, params *GetIdmapDomainIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapDomainIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapDomainIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapDomainIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapDomainIdId(ctx context.Context, id int, body PutIdmapDomainIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapDomainIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapDomaintobackend(ctx context.Context, params *GetIdmapDomaintobackendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapDomaintobackendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapDomaintobackendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapDomaintobackendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapDomaintobackend(ctx context.Context, body PostIdmapDomaintobackendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapDomaintobackendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapDomaintobackendIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapDomaintobackendIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapDomaintobackendIdId(ctx context.Context, id []interface{}, params *GetIdmapDomaintobackendIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapDomaintobackendIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapDomaintobackendIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapDomaintobackendIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapDomaintobackendIdId(ctx context.Context, id int, body PutIdmapDomaintobackendIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapDomaintobackendIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapGetConfiguredIdmapDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapGetConfiguredIdmapDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapGetOrCreateIdmapByDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapGetOrCreateIdmapByDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapGetOrCreateIdmapByDomain(ctx context.Context, body PostIdmapGetOrCreateIdmapByDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapGetOrCreateIdmapByDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapLdap(ctx context.Context, params *GetIdmapLdapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapLdapRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapLdapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapLdapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapLdap(ctx context.Context, body PostIdmapLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapLdapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapLdapIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapLdapIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapLdapIdId(ctx context.Context, id []interface{}, params *GetIdmapLdapIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapLdapIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapLdapIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapLdapIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapLdapIdId(ctx context.Context, id int, body PutIdmapLdapIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapLdapIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapNss(ctx context.Context, params *GetIdmapNssParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapNssRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapNssWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapNssRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapNss(ctx context.Context, body PostIdmapNssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapNssRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapNssIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapNssIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapNssIdId(ctx context.Context, id []interface{}, params *GetIdmapNssIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapNssIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapNssIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapNssIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapNssIdId(ctx context.Context, id int, body PutIdmapNssIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapNssIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapRfc2307(ctx context.Context, params *GetIdmapRfc2307Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapRfc2307Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapRfc2307WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapRfc2307RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapRfc2307(ctx context.Context, body PostIdmapRfc2307JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapRfc2307Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapRfc2307IdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapRfc2307IdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapRfc2307IdId(ctx context.Context, id []interface{}, params *GetIdmapRfc2307IdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapRfc2307IdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapRfc2307IdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapRfc2307IdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapRfc2307IdId(ctx context.Context, id int, body PutIdmapRfc2307IdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapRfc2307IdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapRid(ctx context.Context, params *GetIdmapRidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapRidRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapRidWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapRidRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapRid(ctx context.Context, body PostIdmapRidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapRidRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapRidIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapRidIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapRidIdId(ctx context.Context, id []interface{}, params *GetIdmapRidIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapRidIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapRidIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapRidIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapRidIdId(ctx context.Context, id int, body PutIdmapRidIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapRidIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapScript(ctx context.Context, params *GetIdmapScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapScriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapScriptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapScript(ctx context.Context, body PostIdmapScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapScriptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapScriptIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapScriptIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapScriptIdId(ctx context.Context, id []interface{}, params *GetIdmapScriptIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapScriptIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapScriptIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapScriptIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapScriptIdId(ctx context.Context, id int, body PutIdmapScriptIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapScriptIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapTdb(ctx context.Context, params *GetIdmapTdbParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapTdbRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapTdbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapTdbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdmapTdb(ctx context.Context, body PostIdmapTdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdmapTdbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdmapTdbIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdmapTdbIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdmapTdbIdId(ctx context.Context, id []interface{}, params *GetIdmapTdbIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdmapTdbIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapTdbIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapTdbIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdmapTdbIdId(ctx context.Context, id int, body PutIdmapTdbIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdmapTdbIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInitshutdownscript(ctx context.Context, params *GetInitshutdownscriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInitshutdownscriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInitshutdownscriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInitshutdownscriptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInitshutdownscript(ctx context.Context, body PostInitshutdownscriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInitshutdownscriptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInitshutdownscriptIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInitshutdownscriptIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInitshutdownscriptIdId(ctx context.Context, id []interface{}, params *GetInitshutdownscriptIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInitshutdownscriptIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInitshutdownscriptIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInitshutdownscriptIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInitshutdownscriptIdId(ctx context.Context, id int, body PutInitshutdownscriptIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInitshutdownscriptIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterface(ctx context.Context, params *GetInterfaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterface(ctx context.Context, body PostInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceBridgeMembersChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceBridgeMembersChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceBridgeMembersChoices(ctx context.Context, body PostInterfaceBridgeMembersChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceBridgeMembersChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceCheckin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceCheckinRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceCheckinWaiting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceCheckinWaitingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceChoices(ctx context.Context, body PostInterfaceChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceCommitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceCommitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceCommit(ctx context.Context, body PostInterfaceCommitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceCommitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceHasPendingChanges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceHasPendingChangesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInterfaceIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInterfaceIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceIdId(ctx context.Context, id []interface{}, params *GetInterfaceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInterfaceIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInterfaceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInterfaceIdId(ctx context.Context, id string, body PutInterfaceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInterfaceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceIpInUseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceIpInUseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceIpInUse(ctx context.Context, body PostInterfaceIpInUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceIpInUseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceLagPortsChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceLagPortsChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInterfaceLagPortsChoices(ctx context.Context, body PostInterfaceLagPortsChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInterfaceLagPortsChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceRollback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceRollbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterfaceVlanParentInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInterfaceVlanParentInterfaceChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmi(ctx context.Context, params *GetIpmiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmiRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmiChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmiChannelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmiIdId(ctx context.Context, id []interface{}, params *GetIpmiIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmiIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIpmiIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIpmiIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIpmiIdId(ctx context.Context, id int, body PutIpmiIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIpmiIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIpmiIdentifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIpmiIdentifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIpmiIdentify(ctx context.Context, body PostIpmiIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIpmiIdentifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpmiIsLoaded(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpmiIsLoadedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiAuth(ctx context.Context, params *GetIscsiAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiAuthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiAuth(ctx context.Context, body PostIscsiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiAuthIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiAuthIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiAuthIdId(ctx context.Context, id []interface{}, params *GetIscsiAuthIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiAuthIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiAuthIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiAuthIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiAuthIdId(ctx context.Context, id int, body PutIscsiAuthIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiAuthIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiExtent(ctx context.Context, params *GetIscsiExtentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiExtentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiExtentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiExtentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiExtent(ctx context.Context, body PostIscsiExtentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiExtentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiExtentDiskChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiExtentDiskChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiExtentDiskChoices(ctx context.Context, body PostIscsiExtentDiskChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiExtentDiskChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiExtentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiExtentIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiExtentIdId(ctx context.Context, id int, body DeleteIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiExtentIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiExtentIdId(ctx context.Context, id []interface{}, params *GetIscsiExtentIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiExtentIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiExtentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiExtentIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiExtentIdId(ctx context.Context, id int, body PutIscsiExtentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiExtentIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiGlobal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiGlobalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiGlobalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiGlobalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiGlobal(ctx context.Context, body PutIscsiGlobalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiGlobalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiGlobalSessions(ctx context.Context, params *GetIscsiGlobalSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiGlobalSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiInitiator(ctx context.Context, params *GetIscsiInitiatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiInitiatorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiInitiatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiInitiatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiInitiator(ctx context.Context, body PostIscsiInitiatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiInitiatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiInitiatorIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiInitiatorIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiInitiatorIdId(ctx context.Context, id []interface{}, params *GetIscsiInitiatorIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiInitiatorIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiInitiatorIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiInitiatorIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiInitiatorIdId(ctx context.Context, id int, body PutIscsiInitiatorIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiInitiatorIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiPortal(ctx context.Context, params *GetIscsiPortalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiPortalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiPortalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiPortalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiPortal(ctx context.Context, body PostIscsiPortalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiPortalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiPortalIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiPortalIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiPortalIdId(ctx context.Context, id []interface{}, params *GetIscsiPortalIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiPortalIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiPortalIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiPortalIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiPortalIdId(ctx context.Context, id int, body PutIscsiPortalIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiPortalIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiPortalListenIpChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiPortalListenIpChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTarget(ctx context.Context, params *GetIscsiTargetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiTargetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiTarget(ctx context.Context, body PostIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiTargetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetIdId(ctx context.Context, id int, body DeleteIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetIdId(ctx context.Context, id []interface{}, params *GetIscsiTargetIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiTargetIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiTargetIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiTargetIdId(ctx context.Context, id int, body PutIscsiTargetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiTargetIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetextent(ctx context.Context, params *GetIscsiTargetextentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetextentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiTargetextentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiTargetextentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIscsiTargetextent(ctx context.Context, body PostIscsiTargetextentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIscsiTargetextentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetextentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetextentIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIscsiTargetextentIdId(ctx context.Context, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIscsiTargetextentIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIscsiTargetextentIdId(ctx context.Context, id []interface{}, params *GetIscsiTargetextentIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIscsiTargetextentIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiTargetextentIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiTargetextentIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIscsiTargetextentIdId(ctx context.Context, id int, body PutIscsiTargetextentIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIscsiTargetextentIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJail(ctx context.Context, params *GetJailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJail(ctx context.Context, body PostJailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailActivateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailActivate(ctx context.Context, body PostJailActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailActivateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailCleanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailCleanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailClean(ctx context.Context, body PostJailCleanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailCleanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailDefaultConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailDefaultConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailExecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailExecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailExec(ctx context.Context, body PostJailExecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailExecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailExport(ctx context.Context, body PostJailExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailFetchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailFetchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailFetch(ctx context.Context, body PostJailFetchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailFetchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailFstabWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailFstabRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailFstab(ctx context.Context, body PostJailFstabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailFstabRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailGetActivatedPool(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailGetActivatedPoolRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJailIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJailIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJailIdId(ctx context.Context, id string, body DeleteJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJailIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailIdId(ctx context.Context, id []interface{}, params *GetJailIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJailIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJailIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJailIdId(ctx context.Context, id string, body PutJailIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJailIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailIdIdCloneWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailIdIdCloneRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailIdIdClone(ctx context.Context, id string, body PostJailIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailIdIdCloneRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailImportImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailImportImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailImportImage(ctx context.Context, body PostJailImportImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailImportImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJailInterfaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJailInterfaceChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailRcActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRcActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailRcAction(ctx context.Context, body PostJailRcActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRcActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailReleasesChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailReleasesChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailReleasesChoices(ctx context.Context, body PostJailReleasesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailReleasesChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRestartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailRestart(ctx context.Context, body PostJailRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailRestartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailStart(ctx context.Context, body PostJailStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailStopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailStop(ctx context.Context, body PostJailStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailStopRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailUpdateDefaultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailUpdateDefaultsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailUpdateDefaults(ctx context.Context, body PostJailUpdateDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailUpdateDefaultsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailUpdateToLatestPatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailUpdateToLatestPatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJailUpdateToLatestPatch(ctx context.Context, body PostJailUpdateToLatestPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJailUpdateToLatestPatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberos(ctx context.Context, body PutKerberosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosKeytab(ctx context.Context, params *GetKerberosKeytabParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosKeytabRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKerberosKeytabWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKerberosKeytabRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKerberosKeytab(ctx context.Context, body PostKerberosKeytabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKerberosKeytabRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKerberosKeytabIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKerberosKeytabIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosKeytabIdId(ctx context.Context, id []interface{}, params *GetKerberosKeytabIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosKeytabIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosKeytabIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosKeytabIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosKeytabIdId(ctx context.Context, id int, body PutKerberosKeytabIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosKeytabIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosKeytabSystemKeytabList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosKeytabSystemKeytabListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosRealm(ctx context.Context, params *GetKerberosRealmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosRealmRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKerberosRealmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKerberosRealmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKerberosRealm(ctx context.Context, body PostKerberosRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKerberosRealmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKerberosRealmIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKerberosRealmIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKerberosRealmIdId(ctx context.Context, id []interface{}, params *GetKerberosRealmIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKerberosRealmIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosRealmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosRealmIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKerberosRealmIdId(ctx context.Context, id int, body PutKerberosRealmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKerberosRealmIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeychaincredential(ctx context.Context, params *GetKeychaincredentialParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeychaincredentialRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredential(ctx context.Context, body PostKeychaincredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeychaincredentialGenerateSshKeyPair(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeychaincredentialGenerateSshKeyPairRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeychaincredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeychaincredentialIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeychaincredentialIdId(ctx context.Context, id int, body DeleteKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeychaincredentialIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeychaincredentialIdId(ctx context.Context, id []interface{}, params *GetKeychaincredentialIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeychaincredentialIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKeychaincredentialIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKeychaincredentialIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutKeychaincredentialIdId(ctx context.Context, id int, body PutKeychaincredentialIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutKeychaincredentialIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialRemoteSshHostKeyScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRemoteSshHostKeyScanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialRemoteSshHostKeyScan(ctx context.Context, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRemoteSshHostKeyScanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialRemoteSshSemiautomaticSetupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx context.Context, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialUsedByWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialUsedByRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKeychaincredentialUsedBy(ctx context.Context, body PostKeychaincredentialUsedByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKeychaincredentialUsedByRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdap(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLdapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLdapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLdap(ctx context.Context, body PutLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLdapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapIdmapBackendChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapIdmapBackendChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapSchemaChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapSchemaChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapSslChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapSslChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLldp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLldpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLldpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLldpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLldp(ctx context.Context, body PutLldpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLldpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMail(ctx context.Context, body PutMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMailSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMailSendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMailSend(ctx context.Context, body PostMailSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMailSendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMultipath(ctx context.Context, params *GetMultipathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMultipathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMultipathIdId(ctx context.Context, id []interface{}, params *GetMultipathIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMultipathIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNetworkConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNetworkConfigurationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNetworkConfiguration(ctx context.Context, body PutNetworkConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNetworkConfigurationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkGeneralSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkGeneralSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNfs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNfsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNfsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNfs(ctx context.Context, body PutNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNfsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNis(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNisRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNis(ctx context.Context, body PutNisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNisGetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNisGetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlugin(ctx context.Context, params *GetPluginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlugin(ctx context.Context, body PostPluginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginAvailableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginAvailable(ctx context.Context, body PostPluginAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginAvailableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginBranchesChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginBranchesChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginBranchesChoices(ctx context.Context, body PostPluginBranchesChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginBranchesChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginDefaultsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginDefaultsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPluginDefaults(ctx context.Context, body PostPluginDefaultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPluginDefaultsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePluginIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePluginIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginIdId(ctx context.Context, id []interface{}, params *GetPluginIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPluginIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPluginIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPluginIdId(ctx context.Context, id string, body PutPluginIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPluginIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginOfficialRepositories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginOfficialRepositoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPluginRetrieveVersionsForRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPluginRetrieveVersionsForReposRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPool(ctx context.Context, params *GetPoolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPool(ctx context.Context, body PostPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolDataset(ctx context.Context, params *GetPoolDatasetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolDatasetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDataset(ctx context.Context, body PostPoolDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolDatasetIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolDatasetIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolDatasetIdId(ctx context.Context, id string, body DeletePoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolDatasetIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolDatasetIdId(ctx context.Context, id []interface{}, params *GetPoolDatasetIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolDatasetIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolDatasetIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolDatasetIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolDatasetIdId(ctx context.Context, id string, body PutPoolDatasetIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolDatasetIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdAttachmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdAttachments(ctx context.Context, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdAttachmentsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdPermissionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdPermissionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdPermission(ctx context.Context, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdPermissionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdProcessesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdProcessesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdProcesses(ctx context.Context, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdProcessesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdPromoteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdPromoteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetIdIdPromote(ctx context.Context, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetIdIdPromoteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetRecommendedZvolBlocksizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetRecommendedZvolBlocksizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolDatasetRecommendedZvolBlocksize(ctx context.Context, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolDatasetRecommendedZvolBlocksizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolFilesystemChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolFilesystemChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolFilesystemChoices(ctx context.Context, body PostPoolFilesystemChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolFilesystemChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolIdId(ctx context.Context, id []interface{}, params *GetPoolIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolIdId(ctx context.Context, id int, body PutPoolIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdAttachmentsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdAttachments(ctx context.Context, id int, body PostPoolIdIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdAttachmentsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdDetachWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdDetachRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdDetach(ctx context.Context, id int, body PostPoolIdIdDetachJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdDetachRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdDownloadEncryptionKeyWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdDownloadEncryptionKeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdDownloadEncryptionKey(ctx context.Context, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdDownloadEncryptionKeyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdExportWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdExportRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdExport(ctx context.Context, id int, body PostPoolIdIdExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdExportRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdGetDisksWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdGetDisksRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdGetDisks(ctx context.Context, id int, body PostPoolIdIdGetDisksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdGetDisksRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdIsUpgradedWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdIsUpgradedRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdIsUpgraded(ctx context.Context, id int, body PostPoolIdIdIsUpgradedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdIsUpgradedRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdLockWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdLockRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdLock(ctx context.Context, id int, body PostPoolIdIdLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdLockRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdOfflineWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdOfflineRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdOffline(ctx context.Context, id int, body PostPoolIdIdOfflineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdOfflineRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdOnlineWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdOnlineRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdOnline(ctx context.Context, id int, body PostPoolIdIdOnlineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdOnlineRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdPassphraseWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdPassphraseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdPassphrase(ctx context.Context, id int, body PostPoolIdIdPassphraseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdPassphraseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdProcessesWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdProcessesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdProcesses(ctx context.Context, id int, body PostPoolIdIdProcessesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdProcessesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRecoverykeyRmWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRecoverykeyRmRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRecoverykeyRm(ctx context.Context, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRecoverykeyRmRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRekeyWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRekeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRekey(ctx context.Context, id int, body PostPoolIdIdRekeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRekeyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRemoveWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRemoveRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdRemove(ctx context.Context, id int, body PostPoolIdIdRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdRemoveRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdReplaceWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdReplaceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdReplace(ctx context.Context, id int, body PostPoolIdIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdReplaceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdScrubWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdScrubRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdScrub(ctx context.Context, id int, body PostPoolIdIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdScrubRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdUnlockWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdUnlockRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdUnlock(ctx context.Context, id int, body PostPoolIdIdUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdUnlockRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdUpgradeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdUpgradeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolIdIdUpgrade(ctx context.Context, id int, body PostPoolIdIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolIdIdUpgradeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportDiskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportDiskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportDisk(ctx context.Context, body PostPoolImportDiskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportDiskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportDiskAutodetectFsTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportDiskAutodetectFsTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportDiskAutodetectFsType(ctx context.Context, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportDiskAutodetectFsTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolImportDiskMsdosfsLocales(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolImportDiskMsdosfsLocalesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolImportFind(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolImportFindRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportPoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolImportPool(ctx context.Context, body PostPoolImportPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolImportPoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolResilver(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolResilverRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolResilverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolResilverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolResilver(ctx context.Context, body PutPoolResilverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolResilverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolScrub(ctx context.Context, params *GetPoolScrubParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolScrubRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolScrubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolScrubRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolScrub(ctx context.Context, body PostPoolScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolScrubRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolScrubIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolScrubIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolScrubIdId(ctx context.Context, id []interface{}, params *GetPoolScrubIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolScrubIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolScrubIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolScrubIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolScrubIdId(ctx context.Context, id int, body PutPoolScrubIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolScrubIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolScrubRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolScrubRunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolScrubRun(ctx context.Context, body PostPoolScrubRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolScrubRunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolSnapshottask(ctx context.Context, params *GetPoolSnapshottaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolSnapshottaskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolSnapshottaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolSnapshottaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolSnapshottask(ctx context.Context, body PostPoolSnapshottaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolSnapshottaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePoolSnapshottaskIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePoolSnapshottaskIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoolSnapshottaskIdId(ctx context.Context, id []interface{}, params *GetPoolSnapshottaskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoolSnapshottaskIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolSnapshottaskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolSnapshottaskIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPoolSnapshottaskIdId(ctx context.Context, id int, body PutPoolSnapshottaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPoolSnapshottaskIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolSnapshottaskIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolSnapshottaskIdIdRunRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolSnapshottaskIdIdRun(ctx context.Context, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolSnapshottaskIdIdRunRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolUnlockServicesRestartChoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolUnlockServicesRestartChoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPoolUnlockServicesRestartChoices(ctx context.Context, body PostPoolUnlockServicesRestartChoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPoolUnlockServicesRestartChoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplication(ctx context.Context, params *GetReplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplicationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplication(ctx context.Context, body PostReplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationCountEligibleManualSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationCountEligibleManualSnapshotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationCountEligibleManualSnapshots(ctx context.Context, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationCountEligibleManualSnapshotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationCreateDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationCreateDatasetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationCreateDataset(ctx context.Context, body PostReplicationCreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationCreateDatasetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReplicationIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReplicationIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplicationIdId(ctx context.Context, id []interface{}, params *GetReplicationIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplicationIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReplicationIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReplicationIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReplicationIdId(ctx context.Context, id int, body PutReplicationIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReplicationIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationIdIdRunRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationIdIdRun(ctx context.Context, id int, body PostReplicationIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationIdIdRunRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationListDatasetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationListDatasetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationListDatasets(ctx context.Context, body PostReplicationListDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationListDatasetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplicationListNamingSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplicationListNamingSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationTargetUnmatchedSnapshotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationTargetUnmatchedSnapshotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReplicationTargetUnmatchedSnapshots(ctx context.Context, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReplicationTargetUnmatchedSnapshotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReporting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReportingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReportingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReporting(ctx context.Context, body PutReportingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReportingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReportingGetDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportingGetDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReportingGetData(ctx context.Context, body PostReportingGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportingGetDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportingGraphs(ctx context.Context, params *GetReportingGraphsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportingGraphsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRouteIpv4gwReachableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRouteIpv4gwReachableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRouteIpv4gwReachable(ctx context.Context, body PostRouteIpv4gwReachableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRouteIpv4gwReachableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRouteSystemRoutes(ctx context.Context, params *GetRouteSystemRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRouteSystemRoutesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsyncd(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsyncdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsyncdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsyncdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsyncd(ctx context.Context, body PutRsyncdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsyncdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsyncmod(ctx context.Context, params *GetRsyncmodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsyncmodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsyncmodWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsyncmodRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsyncmod(ctx context.Context, body PostRsyncmodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsyncmodRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRsyncmodIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRsyncmodIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsyncmodIdId(ctx context.Context, id []interface{}, params *GetRsyncmodIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsyncmodIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsyncmodIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsyncmodIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsyncmodIdId(ctx context.Context, id int, body PutRsyncmodIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsyncmodIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsynctask(ctx context.Context, params *GetRsynctaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsynctaskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsynctaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsynctaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsynctask(ctx context.Context, body PostRsynctaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsynctaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRsynctaskIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRsynctaskIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRsynctaskIdId(ctx context.Context, id []interface{}, params *GetRsynctaskIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRsynctaskIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsynctaskIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsynctaskIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRsynctaskIdId(ctx context.Context, id int, body PutRsynctaskIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRsynctaskIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsynctaskIdIdRunWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsynctaskIdIdRunRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRsynctaskIdIdRun(ctx context.Context, id int, body PostRsynctaskIdIdRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRsynctaskIdIdRunRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetS3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetS3Request(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutS3WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutS3RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutS3(ctx context.Context, body PutS3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutS3Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetService(ctx context.Context, params *GetServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceIdId(ctx context.Context, id []interface{}, params *GetServiceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceIdId(ctx context.Context, id string, body PutServiceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceReloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceReloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceReload(ctx context.Context, body PostServiceReloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceReloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceRestartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceRestartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceRestart(ctx context.Context, body PostServiceRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceRestartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceStart(ctx context.Context, body PostServiceStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceStarted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceStartedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceStopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceStop(ctx context.Context, body PostServiceStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceStopRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceTerminateProcessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceTerminateProcessRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceTerminateProcess(ctx context.Context, body PostServiceTerminateProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceTerminateProcessRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingAfp(ctx context.Context, params *GetSharingAfpParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingAfpRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingAfpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingAfpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingAfp(ctx context.Context, body PostSharingAfpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingAfpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSharingAfpIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSharingAfpIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingAfpIdId(ctx context.Context, id []interface{}, params *GetSharingAfpIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingAfpIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingAfpIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingAfpIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingAfpIdId(ctx context.Context, id int, body PutSharingAfpIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingAfpIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingNfs(ctx context.Context, params *GetSharingNfsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingNfsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingNfsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingNfsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingNfs(ctx context.Context, body PostSharingNfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingNfsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSharingNfsIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSharingNfsIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingNfsIdId(ctx context.Context, id []interface{}, params *GetSharingNfsIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingNfsIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingNfsIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingNfsIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingNfsIdId(ctx context.Context, id int, body PutSharingNfsIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingNfsIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingSmb(ctx context.Context, params *GetSharingSmbParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingSmbRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingSmbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingSmbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingSmb(ctx context.Context, body PostSharingSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingSmbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSharingSmbIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSharingSmbIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingSmbIdId(ctx context.Context, id []interface{}, params *GetSharingSmbIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingSmbIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingSmbIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingSmbIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingSmbIdId(ctx context.Context, id int, body PutSharingSmbIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingSmbIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingSmbVfsobjectsChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingSmbVfsobjectsChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingWebdav(ctx context.Context, params *GetSharingWebdavParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingWebdavRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingWebdavWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingWebdavRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharingWebdav(ctx context.Context, body PostSharingWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharingWebdavRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSharingWebdavIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSharingWebdavIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharingWebdavIdId(ctx context.Context, id []interface{}, params *GetSharingWebdavIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharingWebdavIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingWebdavIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingWebdavIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSharingWebdavIdId(ctx context.Context, id int, body PutSharingWebdavIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSharingWebdavIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmart(ctx context.Context, body PutSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmartTest(ctx context.Context, params *GetSmartTestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartTestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmartTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmartTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmartTest(ctx context.Context, body PostSmartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmartTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmartTestIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmartTestIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmartTestIdId(ctx context.Context, id []interface{}, params *GetSmartTestIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartTestIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmartTestIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmartTestIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmartTestIdId(ctx context.Context, id int, body PutSmartTestIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmartTestIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmartTestResults(ctx context.Context, params *GetSmartTestResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartTestResultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmb(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmb(ctx context.Context, body PutSmbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbBindipChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbBindipChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbDomainChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbDomainChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbSharesec(ctx context.Context, params *GetSmbSharesecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbSharesecRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbSharesecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbSharesecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbSharesec(ctx context.Context, body PostSmbSharesecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbSharesecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbSharesecGetaclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbSharesecGetaclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmbSharesecGetacl(ctx context.Context, body PostSmbSharesecGetaclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmbSharesecGetaclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmbSharesecIdId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmbSharesecIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbSharesecIdId(ctx context.Context, id []interface{}, params *GetSmbSharesecIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbSharesecIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmbSharesecIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmbSharesecIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSmbSharesecIdId(ctx context.Context, id int, body PutSmbSharesecIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSmbSharesecIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbSharesecSynchronizeAcls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbSharesecSynchronizeAclsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmbUnixcharsetChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmbUnixcharsetChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnmp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnmpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnmpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnmpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnmp(ctx context.Context, body PutSnmpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnmpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSsh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSshRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSsh(ctx context.Context, body PutSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSshBindifaceChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSshBindifaceChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaticroute(ctx context.Context, params *GetStaticrouteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaticrouteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStaticrouteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStaticrouteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStaticroute(ctx context.Context, body PostStaticrouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStaticrouteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStaticrouteIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStaticrouteIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaticrouteIdId(ctx context.Context, id []interface{}, params *GetStaticrouteIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaticrouteIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStaticrouteIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStaticrouteIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStaticrouteIdId(ctx context.Context, id int, body PutStaticrouteIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStaticrouteIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatsGetDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatsGetDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatsGetData(ctx context.Context, body PostStatsGetDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatsGetDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatsGetDatasetInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatsGetDatasetInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatsGetDatasetInfo(ctx context.Context, body PostStatsGetDatasetInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatsGetDatasetInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatsGetSources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsGetSourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSupportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSupportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSupport(ctx context.Context, body PutSupportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSupportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupportFetchCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupportFetchCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupportFetchCategories(ctx context.Context, body PostSupportFetchCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupportFetchCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportIsAvailable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportIsAvailableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportIsAvailableAndEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportIsAvailableAndEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupportNewTicketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupportNewTicketRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSupportNewTicket(ctx context.Context, body PostSupportNewTicketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSupportNewTicketRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAdvanced(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAdvancedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemAdvancedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemAdvancedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemAdvanced(ctx context.Context, body PutSystemAdvancedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemAdvancedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemAdvancedSerialPortChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemAdvancedSerialPortChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemBootId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemBootIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemFeatureEnabledWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemFeatureEnabledRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemFeatureEnabled(ctx context.Context, body PostSystemFeatureEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemFeatureEnabledRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneral(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemGeneralWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemGeneralRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemGeneral(ctx context.Context, body PutSystemGeneralJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemGeneralRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralCountryChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralCountryChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralKbdmapChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralKbdmapChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralLanguageChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralLanguageChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralLocalUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralLocalUrlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralTimezoneChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralTimezoneChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiAddressChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiAddressChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiCertificateChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiCertificateChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiRestartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemGeneralUiV6addressChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemGeneralUiV6addressChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemIsFreenas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemIsFreenasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemLegacyUiEnabled(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemLegacyUiEnabledRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemLicenseUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemLicenseUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemLicenseUpdate(ctx context.Context, body PostSystemLicenseUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemLicenseUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemNtpserver(ctx context.Context, params *GetSystemNtpserverParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemNtpserverRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemNtpserverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemNtpserverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemNtpserver(ctx context.Context, body PostSystemNtpserverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemNtpserverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSystemNtpserverIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSystemNtpserverIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemNtpserverIdId(ctx context.Context, id []interface{}, params *GetSystemNtpserverIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemNtpserverIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemNtpserverIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemNtpserverIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemNtpserverIdId(ctx context.Context, id int, body PutSystemNtpserverIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemNtpserverIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemNtpserverTestNtpServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemNtpserverTestNtpServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemProductName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemProductNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemReady(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemReadyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemRebootWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemRebootRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemReboot(ctx context.Context, body PostSystemRebootJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemRebootRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemShutdownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemShutdownRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemShutdown(ctx context.Context, body PostSystemShutdownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemShutdownRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemdataset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemdatasetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemdatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemdatasetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSystemdataset(ctx context.Context, body PutSystemdatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSystemdatasetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTftp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTftpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTftpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTftpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTftp(ctx context.Context, body PutTftpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTftpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTunable(ctx context.Context, params *GetTunableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTunableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTunableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTunableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTunable(ctx context.Context, body PostTunableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTunableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTunableIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTunableIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTunableIdId(ctx context.Context, id []interface{}, params *GetTunableIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTunableIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTunableIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTunableIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTunableIdId(ctx context.Context, id int, body PutTunableIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTunableIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateCheckAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateCheckAvailableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateCheckAvailable(ctx context.Context, body PostUpdateCheckAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateCheckAvailableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateDownloadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateGetPendingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateGetPendingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateGetPending(ctx context.Context, body PostUpdateGetPendingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateGetPendingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateGetTrains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateGetTrainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateManualWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateManualRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateManual(ctx context.Context, body PostUpdateManualJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateManualRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateSetTrainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateSetTrainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateSetTrain(ctx context.Context, body PostUpdateSetTrainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateSetTrainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateUpdate(ctx context.Context, body PostUpdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUpsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUpsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUps(ctx context.Context, body PutUpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUpsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpsDriverChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpsDriverChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpsPortChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpsPortChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGetNextUid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGetNextUidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserGetUserObjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserGetUserObjRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserGetUserObj(ctx context.Context, body PostUserGetUserObjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserGetUserObjRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserHasRootPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserHasRootPasswordRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserIdId(ctx context.Context, id int, body DeleteUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserIdId(ctx context.Context, id []interface{}, params *GetUserIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdId(ctx context.Context, id int, body PutUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdIdPopAttributeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdIdPopAttributeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdIdPopAttribute(ctx context.Context, id int, body PostUserIdIdPopAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdIdPopAttributeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdIdSetAttributeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdIdSetAttributeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdIdSetAttribute(ctx context.Context, id int, body PostUserIdIdSetAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdIdSetAttributeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserShellChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserShellChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVm(ctx context.Context, params *GetVmParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVm(ctx context.Context, body PostVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDevice(ctx context.Context, params *GetVmDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDeviceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmDevice(ctx context.Context, body PostVmDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmDeviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmDeviceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmDeviceIdId(ctx context.Context, id int, body DeleteVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmDeviceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDeviceIdId(ctx context.Context, id []interface{}, params *GetVmDeviceIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDeviceIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmDeviceIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmDeviceIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmDeviceIdId(ctx context.Context, id int, body PutVmDeviceIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmDeviceIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDeviceNicAttachChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDeviceNicAttachChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmDeviceVncBindChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmDeviceVncBindChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmFlags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmFlagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetAttachedIfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetAttachedIfaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetAttachedIface(ctx context.Context, body PostVmGetAttachedIfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetAttachedIfaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetAvailableMemoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetAvailableMemoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetAvailableMemory(ctx context.Context, body PostVmGetAvailableMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetAvailableMemoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetConsoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetConsoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetConsole(ctx context.Context, body PostVmGetConsoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetConsoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmGetVmemoryInUse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmGetVmemoryInUseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetVncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetVncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmGetVnc(ctx context.Context, body PostVmGetVncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmGetVncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmGetVncIpv4(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmGetVncIpv4Request(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmIdId(ctx context.Context, id []interface{}, params *GetVmIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmIdId(ctx context.Context, id int, body PutVmIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdCloneWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdCloneRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdClone(ctx context.Context, id int, body PostVmIdIdCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdCloneRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdRestartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdRestartRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdRestart(ctx context.Context, id int, body PostVmIdIdRestartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdRestartRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStartRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStart(ctx context.Context, id int, body PostVmIdIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStartRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStatusWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStatus(ctx context.Context, id int, body PostVmIdIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStopWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStopRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmIdIdStop(ctx context.Context, id int, body PostVmIdIdStopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmIdIdStopRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmIdentifyHypervisor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmIdentifyHypervisorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmRandomMac(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmRandomMacRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmVncPortWizard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmVncPortWizardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmware(ctx context.Context, params *GetVmwareParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmwareRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmware(ctx context.Context, body PostVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareDatasetHasVmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareDatasetHasVmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareDatasetHasVms(ctx context.Context, body PostVmwareDatasetHasVmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareDatasetHasVmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareGetDatastoresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareGetDatastoresRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareGetDatastores(ctx context.Context, body PostVmwareGetDatastoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareGetDatastoresRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareGetVirtualMachinesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareGetVirtualMachinesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareGetVirtualMachines(ctx context.Context, body PostVmwareGetVirtualMachinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareGetVirtualMachinesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVmwareIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmwareIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVmwareIdId(ctx context.Context, id []interface{}, params *GetVmwareIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmwareIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmwareIdIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmwareIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVmwareIdId(ctx context.Context, id int, body PutVmwareIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVmwareIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareMatchDatastoresWithDatasetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareMatchDatastoresWithDatasetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVmwareMatchDatastoresWithDatasets(ctx context.Context, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVmwareMatchDatastoresWithDatasetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebdav(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebdavRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWebdavWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWebdavRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWebdav(ctx context.Context, body PutWebdavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWebdavRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebuiImage(ctx context.Context, params *GetWebuiImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebuiImageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebuiImageIdId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebuiImageIdIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebuiImageIdId(ctx context.Context, id []interface{}, params *GetWebuiImageIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebuiImageIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZfsSnapshot(ctx context.Context, params *GetZfsSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZfsSnapshotRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshot(ctx context.Context, body PostZfsSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotCloneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotCloneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotClone(ctx context.Context, body PostZfsSnapshotCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotCloneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteZfsSnapshotIdIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteZfsSnapshotIdIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteZfsSnapshotIdId(ctx context.Context, id string, body DeleteZfsSnapshotIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteZfsSnapshotIdIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZfsSnapshotIdId(ctx context.Context, id []interface{}, params *GetZfsSnapshotIdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZfsSnapshotIdIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotRemove(ctx context.Context, body PostZfsSnapshotRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRemoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotRollbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRollbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZfsSnapshotRollback(ctx context.Context, body PostZfsSnapshotRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZfsSnapshotRollbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAcmeDnsAuthenticatorRequest generates requests for GetAcmeDnsAuthenticator
func NewGetAcmeDnsAuthenticatorRequest(server string, params *GetAcmeDnsAuthenticatorParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/acme/dns/authenticator")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAcmeDnsAuthenticatorRequest calls the generic PostAcmeDnsAuthenticator builder with application/json body
func NewPostAcmeDnsAuthenticatorRequest(server string, body PostAcmeDnsAuthenticatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAcmeDnsAuthenticatorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAcmeDnsAuthenticatorRequestWithBody generates requests for PostAcmeDnsAuthenticator with any type of body
func NewPostAcmeDnsAuthenticatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/acme/dns/authenticator")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAcmeDnsAuthenticatorAuthenticatorSchemasRequest generates requests for GetAcmeDnsAuthenticatorAuthenticatorSchemas
func NewGetAcmeDnsAuthenticatorAuthenticatorSchemasRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/acme/dns/authenticator/authenticator_schemas")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAcmeDnsAuthenticatorIdIdRequest generates requests for DeleteAcmeDnsAuthenticatorIdId
func NewDeleteAcmeDnsAuthenticatorIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/acme/dns/authenticator/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAcmeDnsAuthenticatorIdIdRequest generates requests for GetAcmeDnsAuthenticatorIdId
func NewGetAcmeDnsAuthenticatorIdIdRequest(server string, id []interface{}, params *GetAcmeDnsAuthenticatorIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/acme/dns/authenticator/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAcmeDnsAuthenticatorIdIdRequest calls the generic PutAcmeDnsAuthenticatorIdId builder with application/json body
func NewPutAcmeDnsAuthenticatorIdIdRequest(server string, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAcmeDnsAuthenticatorIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAcmeDnsAuthenticatorIdIdRequestWithBody generates requests for PutAcmeDnsAuthenticatorIdId with any type of body
func NewPutAcmeDnsAuthenticatorIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/acme/dns/authenticator/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivedirectoryRequest generates requests for GetActivedirectory
func NewGetActivedirectoryRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutActivedirectoryRequest calls the generic PutActivedirectory builder with application/json body
func NewPutActivedirectoryRequest(server string, body PutActivedirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutActivedirectoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPutActivedirectoryRequestWithBody generates requests for PutActivedirectory with any type of body
func NewPutActivedirectoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivedirectoryChangeTrustAccountPwRequest generates requests for GetActivedirectoryChangeTrustAccountPw
func NewGetActivedirectoryChangeTrustAccountPwRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/change_trust_account_pw")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryDomainInfoRequest generates requests for GetActivedirectoryDomainInfo
func NewGetActivedirectoryDomainInfoRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/domain_info")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryGetSpnListRequest generates requests for GetActivedirectoryGetSpnList
func NewGetActivedirectoryGetSpnListRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/get_spn_list")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryGetStateRequest generates requests for GetActivedirectoryGetState
func NewGetActivedirectoryGetStateRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/get_state")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryIdmapBackendChoicesRequest generates requests for GetActivedirectoryIdmapBackendChoices
func NewGetActivedirectoryIdmapBackendChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/idmap_backend_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActivedirectoryLeaveRequest calls the generic PostActivedirectoryLeave builder with application/json body
func NewPostActivedirectoryLeaveRequest(server string, body PostActivedirectoryLeaveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActivedirectoryLeaveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostActivedirectoryLeaveRequestWithBody generates requests for PostActivedirectoryLeave with any type of body
func NewPostActivedirectoryLeaveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/leave")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivedirectoryNssInfoChoicesRequest generates requests for GetActivedirectoryNssInfoChoices
func NewGetActivedirectoryNssInfoChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/nss_info_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectorySaslWrappingChoicesRequest generates requests for GetActivedirectorySaslWrappingChoices
func NewGetActivedirectorySaslWrappingChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/sasl_wrapping_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectorySslChoicesRequest generates requests for GetActivedirectorySslChoices
func NewGetActivedirectorySslChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/ssl_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivedirectoryStartedRequest generates requests for GetActivedirectoryStarted
func NewGetActivedirectoryStartedRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activedirectory/started")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAfpRequest generates requests for GetAfp
func NewGetAfpRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/afp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAfpRequest calls the generic PutAfp builder with application/json body
func NewPutAfpRequest(server string, body PutAfpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAfpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAfpRequestWithBody generates requests for PutAfp with any type of body
func NewPutAfpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/afp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAfpBindipChoicesRequest generates requests for GetAfpBindipChoices
func NewGetAfpBindipChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/afp/bindip_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertDismissRequest calls the generic PostAlertDismiss builder with application/json body
func NewPostAlertDismissRequest(server string, body PostAlertDismissJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertDismissRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertDismissRequestWithBody generates requests for PostAlertDismiss with any type of body
func NewPostAlertDismissRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alert/dismiss")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertListRequest generates requests for GetAlertList
func NewGetAlertListRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alert/list")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertListCategoriesRequest generates requests for GetAlertListCategories
func NewGetAlertListCategoriesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alert/list_categories")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertListPoliciesRequest generates requests for GetAlertListPolicies
func NewGetAlertListPoliciesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alert/list_policies")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertRestoreRequest calls the generic PostAlertRestore builder with application/json body
func NewPostAlertRestoreRequest(server string, body PostAlertRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertRestoreRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertRestoreRequestWithBody generates requests for PostAlertRestore with any type of body
func NewPostAlertRestoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alert/restore")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertclassesRequest generates requests for GetAlertclasses
func NewGetAlertclassesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertclasses")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAlertclassesRequest calls the generic PutAlertclasses builder with application/json body
func NewPutAlertclassesRequest(server string, body PutAlertclassesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAlertclassesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAlertclassesRequestWithBody generates requests for PutAlertclasses with any type of body
func NewPutAlertclassesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertclasses")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertserviceRequest generates requests for GetAlertservice
func NewGetAlertserviceRequest(server string, params *GetAlertserviceParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertservice")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertserviceRequest calls the generic PostAlertservice builder with application/json body
func NewPostAlertserviceRequest(server string, body PostAlertserviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertserviceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertserviceRequestWithBody generates requests for PostAlertservice with any type of body
func NewPostAlertserviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertservice")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertserviceIdIdRequest generates requests for DeleteAlertserviceIdId
func NewDeleteAlertserviceIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertservice/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertserviceIdIdRequest generates requests for GetAlertserviceIdId
func NewGetAlertserviceIdIdRequest(server string, id []interface{}, params *GetAlertserviceIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertservice/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAlertserviceIdIdRequest calls the generic PutAlertserviceIdId builder with application/json body
func NewPutAlertserviceIdIdRequest(server string, id int, body PutAlertserviceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAlertserviceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAlertserviceIdIdRequestWithBody generates requests for PutAlertserviceIdId with any type of body
func NewPutAlertserviceIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertservice/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertserviceListTypesRequest generates requests for GetAlertserviceListTypes
func NewGetAlertserviceListTypesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertservice/list_types")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertserviceTestRequest calls the generic PostAlertserviceTest builder with application/json body
func NewPostAlertserviceTestRequest(server string, body PostAlertserviceTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertserviceTestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertserviceTestRequestWithBody generates requests for PostAlertserviceTest with any type of body
func NewPostAlertserviceTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/alertservice/test")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthCheckUserRequest calls the generic PostAuthCheckUser builder with application/json body
func NewPostAuthCheckUserRequest(server string, body PostAuthCheckUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthCheckUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthCheckUserRequestWithBody generates requests for PostAuthCheckUser with any type of body
func NewPostAuthCheckUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/check_user")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthGenerateTokenRequest calls the generic PostAuthGenerateToken builder with application/json body
func NewPostAuthGenerateTokenRequest(server string, body PostAuthGenerateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthGenerateTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthGenerateTokenRequestWithBody generates requests for PostAuthGenerateToken with any type of body
func NewPostAuthGenerateTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/generate_token")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthSessionsRequest generates requests for GetAuthSessions
func NewGetAuthSessionsRequest(server string, params *GetAuthSessionsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/auth/sessions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackupRequest generates requests for GetBackup
func NewGetBackupRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBackupRequest calls the generic PostBackup builder with application/json body
func NewPostBackupRequest(server string, body PostBackupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBackupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBackupRequestWithBody generates requests for PostBackup with any type of body
func NewPostBackupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBackupAzureGetBucketsRequest calls the generic PostBackupAzureGetBuckets builder with application/json body
func NewPostBackupAzureGetBucketsRequest(server string, body PostBackupAzureGetBucketsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBackupAzureGetBucketsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBackupAzureGetBucketsRequestWithBody generates requests for PostBackupAzureGetBuckets with any type of body
func NewPostBackupAzureGetBucketsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/azure/get_buckets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBackupB2GetBucketsRequest calls the generic PostBackupB2GetBuckets builder with application/json body
func NewPostBackupB2GetBucketsRequest(server string, body PostBackupB2GetBucketsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBackupB2GetBucketsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBackupB2GetBucketsRequestWithBody generates requests for PostBackupB2GetBuckets with any type of body
func NewPostBackupB2GetBucketsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/b2/get_buckets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBackupCredentialRequest generates requests for GetBackupCredential
func NewGetBackupCredentialRequest(server string, params *GetBackupCredentialParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/credential")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBackupCredentialRequest calls the generic PostBackupCredential builder with application/json body
func NewPostBackupCredentialRequest(server string, body PostBackupCredentialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBackupCredentialRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBackupCredentialRequestWithBody generates requests for PostBackupCredential with any type of body
func NewPostBackupCredentialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/credential")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBackupCredentialIdIdRequest generates requests for DeleteBackupCredentialIdId
func NewDeleteBackupCredentialIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/credential/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackupCredentialIdIdRequest generates requests for GetBackupCredentialIdId
func NewGetBackupCredentialIdIdRequest(server string, id []interface{}, params *GetBackupCredentialIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/credential/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBackupCredentialIdIdRequest calls the generic PutBackupCredentialIdId builder with application/json body
func NewPutBackupCredentialIdIdRequest(server string, id int, body PutBackupCredentialIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBackupCredentialIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBackupCredentialIdIdRequestWithBody generates requests for PutBackupCredentialIdId with any type of body
func NewPutBackupCredentialIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/credential/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBackupGcsGetBucketsRequest calls the generic PostBackupGcsGetBuckets builder with application/json body
func NewPostBackupGcsGetBucketsRequest(server string, body PostBackupGcsGetBucketsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBackupGcsGetBucketsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBackupGcsGetBucketsRequestWithBody generates requests for PostBackupGcsGetBuckets with any type of body
func NewPostBackupGcsGetBucketsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/gcs/get_buckets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBackupIdIdRequest generates requests for DeleteBackupIdId
func NewDeleteBackupIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackupIdIdRequest generates requests for GetBackupIdId
func NewGetBackupIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBackupIdIdRequest calls the generic PutBackupIdId builder with application/json body
func NewPutBackupIdIdRequest(server string, id int, body PutBackupIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBackupIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBackupIdIdRequestWithBody generates requests for PutBackupIdId with any type of body
func NewPutBackupIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBackupS3GetBucketsRequest calls the generic PostBackupS3GetBuckets builder with application/json body
func NewPostBackupS3GetBucketsRequest(server string, body PostBackupS3GetBucketsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBackupS3GetBucketsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBackupS3GetBucketsRequestWithBody generates requests for PostBackupS3GetBuckets with any type of body
func NewPostBackupS3GetBucketsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/backup/s3/get_buckets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBootAttachRequest calls the generic PostBootAttach builder with application/json body
func NewPostBootAttachRequest(server string, body PostBootAttachJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootAttachRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootAttachRequestWithBody generates requests for PostBootAttach with any type of body
func NewPostBootAttachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/boot/attach")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBootDetachRequest calls the generic PostBootDetach builder with application/json body
func NewPostBootDetachRequest(server string, body PostBootDetachJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootDetachRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootDetachRequestWithBody generates requests for PostBootDetach with any type of body
func NewPostBootDetachRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/boot/detach")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBootGetDisksRequest generates requests for GetBootGetDisks
func NewGetBootGetDisksRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/boot/get_disks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBootGetScrubIntervalRequest generates requests for GetBootGetScrubInterval
func NewGetBootGetScrubIntervalRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/boot/get_scrub_interval")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBootGetStateRequest generates requests for GetBootGetState
func NewGetBootGetStateRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/boot/get_state")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBootReplaceRequest calls the generic PostBootReplace builder with application/json body
func NewPostBootReplaceRequest(server string, body PostBootReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootReplaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootReplaceRequestWithBody generates requests for PostBootReplace with any type of body
func NewPostBootReplaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/boot/replace")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBootScrubRequest generates requests for GetBootScrub
func NewGetBootScrubRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/boot/scrub")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBootSetScrubIntervalRequest calls the generic PostBootSetScrubInterval builder with application/json body
func NewPostBootSetScrubIntervalRequest(server string, body PostBootSetScrubIntervalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootSetScrubIntervalRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootSetScrubIntervalRequestWithBody generates requests for PostBootSetScrubInterval with any type of body
func NewPostBootSetScrubIntervalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/boot/set_scrub_interval")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBootenvRequest generates requests for GetBootenv
func NewGetBootenvRequest(server string, params *GetBootenvParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bootenv")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBootenvRequest calls the generic PostBootenv builder with application/json body
func NewPostBootenvRequest(server string, body PostBootenvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootenvRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBootenvRequestWithBody generates requests for PostBootenv with any type of body
func NewPostBootenvRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bootenv")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBootenvIdIdRequest generates requests for DeleteBootenvIdId
func NewDeleteBootenvIdIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bootenv/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBootenvIdIdRequest generates requests for GetBootenvIdId
func NewGetBootenvIdIdRequest(server string, id []interface{}, params *GetBootenvIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bootenv/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBootenvIdIdRequest calls the generic PutBootenvIdId builder with application/json body
func NewPutBootenvIdIdRequest(server string, id string, body PutBootenvIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBootenvIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBootenvIdIdRequestWithBody generates requests for PutBootenvIdId with any type of body
func NewPutBootenvIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bootenv/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBootenvIdIdActivateRequest calls the generic PostBootenvIdIdActivate builder with application/json body
func NewPostBootenvIdIdActivateRequest(server string, id string, body PostBootenvIdIdActivateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootenvIdIdActivateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBootenvIdIdActivateRequestWithBody generates requests for PostBootenvIdIdActivate with any type of body
func NewPostBootenvIdIdActivateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bootenv/id/%s/activate", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBootenvIdIdSetAttributeRequest calls the generic PostBootenvIdIdSetAttribute builder with application/json body
func NewPostBootenvIdIdSetAttributeRequest(server string, id string, body PostBootenvIdIdSetAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBootenvIdIdSetAttributeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBootenvIdIdSetAttributeRequestWithBody generates requests for PostBootenvIdIdSetAttribute with any type of body
func NewPostBootenvIdIdSetAttributeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bootenv/id/%s/set_attribute", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateRequest generates requests for GetCertificate
func NewGetCertificateRequest(server string, params *GetCertificateParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificate")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCertificateRequest calls the generic PostCertificate builder with application/json body
func NewPostCertificateRequest(server string, body PostCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCertificateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCertificateRequestWithBody generates requests for PostCertificate with any type of body
func NewPostCertificateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificate")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateAcmeServerChoicesRequest generates requests for GetCertificateAcmeServerChoices
func NewGetCertificateAcmeServerChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificate/acme_server_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateEcCurveChoicesRequest generates requests for GetCertificateEcCurveChoices
func NewGetCertificateEcCurveChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificate/ec_curve_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCertificateIdIdRequest calls the generic DeleteCertificateIdId builder with application/json body
func NewDeleteCertificateIdIdRequest(server string, id int, body DeleteCertificateIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCertificateIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteCertificateIdIdRequestWithBody generates requests for DeleteCertificateIdId with any type of body
func NewDeleteCertificateIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificate/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateIdIdRequest generates requests for GetCertificateIdId
func NewGetCertificateIdIdRequest(server string, id []interface{}, params *GetCertificateIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificate/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCertificateIdIdRequest calls the generic PutCertificateIdId builder with application/json body
func NewPutCertificateIdIdRequest(server string, id int, body PutCertificateIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCertificateIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCertificateIdIdRequestWithBody generates requests for PutCertificateIdId with any type of body
func NewPutCertificateIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificate/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateKeyTypeChoicesRequest generates requests for GetCertificateKeyTypeChoices
func NewGetCertificateKeyTypeChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificate/key_type_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateauthorityRequest generates requests for GetCertificateauthority
func NewGetCertificateauthorityRequest(server string, params *GetCertificateauthorityParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificateauthority")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCertificateauthorityRequest calls the generic PostCertificateauthority builder with application/json body
func NewPostCertificateauthorityRequest(server string, body PostCertificateauthorityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCertificateauthorityRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCertificateauthorityRequestWithBody generates requests for PostCertificateauthority with any type of body
func NewPostCertificateauthorityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificateauthority")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCertificateauthorityCaSignCsrRequest calls the generic PostCertificateauthorityCaSignCsr builder with application/json body
func NewPostCertificateauthorityCaSignCsrRequest(server string, body PostCertificateauthorityCaSignCsrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCertificateauthorityCaSignCsrRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCertificateauthorityCaSignCsrRequestWithBody generates requests for PostCertificateauthorityCaSignCsr with any type of body
func NewPostCertificateauthorityCaSignCsrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificateauthority/ca_sign_csr")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCertificateauthorityIdIdRequest generates requests for DeleteCertificateauthorityIdId
func NewDeleteCertificateauthorityIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificateauthority/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateauthorityIdIdRequest generates requests for GetCertificateauthorityIdId
func NewGetCertificateauthorityIdIdRequest(server string, id []interface{}, params *GetCertificateauthorityIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificateauthority/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCertificateauthorityIdIdRequest calls the generic PutCertificateauthorityIdId builder with application/json body
func NewPutCertificateauthorityIdIdRequest(server string, id int, body PutCertificateauthorityIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCertificateauthorityIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCertificateauthorityIdIdRequestWithBody generates requests for PutCertificateauthorityIdId with any type of body
func NewPutCertificateauthorityIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/certificateauthority/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCloudsyncRequest generates requests for GetCloudsync
func NewGetCloudsyncRequest(server string, params *GetCloudsyncParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCloudsyncRequest calls the generic PostCloudsync builder with application/json body
func NewPostCloudsyncRequest(server string, body PostCloudsyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncRequestWithBody generates requests for PostCloudsync with any type of body
func NewPostCloudsyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCloudsyncCommonTaskSchemaRequest generates requests for GetCloudsyncCommonTaskSchema
func NewGetCloudsyncCommonTaskSchemaRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/common_task_schema")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudsyncCredentialsRequest generates requests for GetCloudsyncCredentials
func NewGetCloudsyncCredentialsRequest(server string, params *GetCloudsyncCredentialsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/credentials")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCloudsyncCredentialsRequest calls the generic PostCloudsyncCredentials builder with application/json body
func NewPostCloudsyncCredentialsRequest(server string, body PostCloudsyncCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncCredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncCredentialsRequestWithBody generates requests for PostCloudsyncCredentials with any type of body
func NewPostCloudsyncCredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/credentials")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCloudsyncCredentialsIdIdRequest generates requests for DeleteCloudsyncCredentialsIdId
func NewDeleteCloudsyncCredentialsIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/credentials/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudsyncCredentialsIdIdRequest generates requests for GetCloudsyncCredentialsIdId
func NewGetCloudsyncCredentialsIdIdRequest(server string, id []interface{}, params *GetCloudsyncCredentialsIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/credentials/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCloudsyncCredentialsIdIdRequest calls the generic PutCloudsyncCredentialsIdId builder with application/json body
func NewPutCloudsyncCredentialsIdIdRequest(server string, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCloudsyncCredentialsIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCloudsyncCredentialsIdIdRequestWithBody generates requests for PutCloudsyncCredentialsIdId with any type of body
func NewPutCloudsyncCredentialsIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/credentials/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncCredentialsVerifyRequest calls the generic PostCloudsyncCredentialsVerify builder with application/json body
func NewPostCloudsyncCredentialsVerifyRequest(server string, body PostCloudsyncCredentialsVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncCredentialsVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncCredentialsVerifyRequestWithBody generates requests for PostCloudsyncCredentialsVerify with any type of body
func NewPostCloudsyncCredentialsVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/credentials/verify")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCloudsyncIdIdRequest generates requests for DeleteCloudsyncIdId
func NewDeleteCloudsyncIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudsyncIdIdRequest generates requests for GetCloudsyncIdId
func NewGetCloudsyncIdIdRequest(server string, id []interface{}, params *GetCloudsyncIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCloudsyncIdIdRequest calls the generic PutCloudsyncIdId builder with application/json body
func NewPutCloudsyncIdIdRequest(server string, id int, body PutCloudsyncIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCloudsyncIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCloudsyncIdIdRequestWithBody generates requests for PutCloudsyncIdId with any type of body
func NewPutCloudsyncIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncIdIdAbortRequest calls the generic PostCloudsyncIdIdAbort builder with application/json body
func NewPostCloudsyncIdIdAbortRequest(server string, id int, body PostCloudsyncIdIdAbortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncIdIdAbortRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCloudsyncIdIdAbortRequestWithBody generates requests for PostCloudsyncIdIdAbort with any type of body
func NewPostCloudsyncIdIdAbortRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/id/%s/abort", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncIdIdSyncRequest calls the generic PostCloudsyncIdIdSync builder with application/json body
func NewPostCloudsyncIdIdSyncRequest(server string, id int, body PostCloudsyncIdIdSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncIdIdSyncRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCloudsyncIdIdSyncRequestWithBody generates requests for PostCloudsyncIdIdSync with any type of body
func NewPostCloudsyncIdIdSyncRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/id/%s/sync", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncListBucketsRequest calls the generic PostCloudsyncListBuckets builder with application/json body
func NewPostCloudsyncListBucketsRequest(server string, body PostCloudsyncListBucketsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncListBucketsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncListBucketsRequestWithBody generates requests for PostCloudsyncListBuckets with any type of body
func NewPostCloudsyncListBucketsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/list_buckets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncListDirectoryRequest calls the generic PostCloudsyncListDirectory builder with application/json body
func NewPostCloudsyncListDirectoryRequest(server string, body PostCloudsyncListDirectoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncListDirectoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncListDirectoryRequestWithBody generates requests for PostCloudsyncListDirectory with any type of body
func NewPostCloudsyncListDirectoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/list_directory")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloudsyncOnedriveListDrivesRequest calls the generic PostCloudsyncOnedriveListDrives builder with application/json body
func NewPostCloudsyncOnedriveListDrivesRequest(server string, body PostCloudsyncOnedriveListDrivesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCloudsyncOnedriveListDrivesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCloudsyncOnedriveListDrivesRequestWithBody generates requests for PostCloudsyncOnedriveListDrives with any type of body
func NewPostCloudsyncOnedriveListDrivesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/onedrive_list_drives")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCloudsyncProvidersRequest generates requests for GetCloudsyncProviders
func NewGetCloudsyncProvidersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cloudsync/providers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigResetRequest calls the generic PostConfigReset builder with application/json body
func NewPostConfigResetRequest(server string, body PostConfigResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConfigResetRequestWithBody generates requests for PostConfigReset with any type of body
func NewPostConfigResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/config/reset")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreBulkRequest calls the generic PostCoreBulk builder with application/json body
func NewPostCoreBulkRequest(server string, body PostCoreBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreBulkRequestWithBody generates requests for PostCoreBulk with any type of body
func NewPostCoreBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/bulk")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreDebugRequest calls the generic PostCoreDebug builder with application/json body
func NewPostCoreDebugRequest(server string, body PostCoreDebugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreDebugRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreDebugRequestWithBody generates requests for PostCoreDebug with any type of body
func NewPostCoreDebugRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/debug")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreDownloadRequest calls the generic PostCoreDownload builder with application/json body
func NewPostCoreDownloadRequest(server string, body PostCoreDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreDownloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreDownloadRequestWithBody generates requests for PostCoreDownload with any type of body
func NewPostCoreDownloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/download")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCoreGetEventsRequest generates requests for GetCoreGetEvents
func NewGetCoreGetEventsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/get_events")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCoreGetJobsRequest generates requests for GetCoreGetJobs
func NewGetCoreGetJobsRequest(server string, params *GetCoreGetJobsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/get_jobs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCoreGetMethodsRequest calls the generic PostCoreGetMethods builder with application/json body
func NewPostCoreGetMethodsRequest(server string, body PostCoreGetMethodsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreGetMethodsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreGetMethodsRequestWithBody generates requests for PostCoreGetMethods with any type of body
func NewPostCoreGetMethodsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/get_methods")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCoreGetServicesRequest generates requests for GetCoreGetServices
func NewGetCoreGetServicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/get_services")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCoreJobAbortRequest calls the generic PostCoreJobAbort builder with application/json body
func NewPostCoreJobAbortRequest(server string, body PostCoreJobAbortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreJobAbortRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreJobAbortRequestWithBody generates requests for PostCoreJobAbort with any type of body
func NewPostCoreJobAbortRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/job_abort")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreJobUpdateRequest calls the generic PostCoreJobUpdate builder with application/json body
func NewPostCoreJobUpdateRequest(server string, body PostCoreJobUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreJobUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreJobUpdateRequestWithBody generates requests for PostCoreJobUpdate with any type of body
func NewPostCoreJobUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/job_update")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCoreJobWaitRequest calls the generic PostCoreJobWait builder with application/json body
func NewPostCoreJobWaitRequest(server string, body PostCoreJobWaitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCoreJobWaitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCoreJobWaitRequestWithBody generates requests for PostCoreJobWait with any type of body
func NewPostCoreJobWaitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/job_wait")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCorePingRequest generates requests for GetCorePing
func NewGetCorePingRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/ping")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCoreSessionsRequest generates requests for GetCoreSessions
func NewGetCoreSessionsRequest(server string, params *GetCoreSessionsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/core/sessions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCronjobRequest generates requests for GetCronjob
func NewGetCronjobRequest(server string, params *GetCronjobParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cronjob")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCronjobRequest calls the generic PostCronjob builder with application/json body
func NewPostCronjobRequest(server string, body PostCronjobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCronjobRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCronjobRequestWithBody generates requests for PostCronjob with any type of body
func NewPostCronjobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cronjob")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCronjobIdIdRequest generates requests for DeleteCronjobIdId
func NewDeleteCronjobIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cronjob/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCronjobIdIdRequest generates requests for GetCronjobIdId
func NewGetCronjobIdIdRequest(server string, id []interface{}, params *GetCronjobIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cronjob/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCronjobIdIdRequest calls the generic PutCronjobIdId builder with application/json body
func NewPutCronjobIdIdRequest(server string, id int, body PutCronjobIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCronjobIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCronjobIdIdRequestWithBody generates requests for PutCronjobIdId with any type of body
func NewPutCronjobIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cronjob/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCronjobRunRequest calls the generic PostCronjobRun builder with application/json body
func NewPostCronjobRunRequest(server string, body PostCronjobRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCronjobRunRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCronjobRunRequestWithBody generates requests for PostCronjobRun with any type of body
func NewPostCronjobRunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cronjob/run")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeviceGetInfoRequest calls the generic PostDeviceGetInfo builder with application/json body
func NewPostDeviceGetInfoRequest(server string, body PostDeviceGetInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeviceGetInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeviceGetInfoRequestWithBody generates requests for PostDeviceGetInfo with any type of body
func NewPostDeviceGetInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/device/get_info")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDirectoryservicesGetStateRequest generates requests for GetDirectoryservicesGetState
func NewGetDirectoryservicesGetStateRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/directoryservices/get_state")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDiskRequest generates requests for GetDisk
func NewGetDiskRequest(server string, params *GetDiskParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/disk")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDiskGetEncryptedRequest calls the generic PostDiskGetEncrypted builder with application/json body
func NewPostDiskGetEncryptedRequest(server string, body PostDiskGetEncryptedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskGetEncryptedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskGetEncryptedRequestWithBody generates requests for PostDiskGetEncrypted with any type of body
func NewPostDiskGetEncryptedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/disk/get_encrypted")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskGetUnusedRequest calls the generic PostDiskGetUnused builder with application/json body
func NewPostDiskGetUnusedRequest(server string, body PostDiskGetUnusedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskGetUnusedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskGetUnusedRequestWithBody generates requests for PostDiskGetUnused with any type of body
func NewPostDiskGetUnusedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/disk/get_unused")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDiskIdIdRequest generates requests for GetDiskIdId
func NewGetDiskIdIdRequest(server string, id []interface{}, params *GetDiskIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/disk/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDiskIdIdRequest calls the generic PutDiskIdId builder with application/json body
func NewPutDiskIdIdRequest(server string, id string, body PutDiskIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDiskIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutDiskIdIdRequestWithBody generates requests for PutDiskIdId with any type of body
func NewPutDiskIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/disk/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskTemperaturesRequest calls the generic PostDiskTemperatures builder with application/json body
func NewPostDiskTemperaturesRequest(server string, body PostDiskTemperaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskTemperaturesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskTemperaturesRequestWithBody generates requests for PostDiskTemperatures with any type of body
func NewPostDiskTemperaturesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/disk/temperatures")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDiskWipeRequest calls the generic PostDiskWipe builder with application/json body
func NewPostDiskWipeRequest(server string, body PostDiskWipeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDiskWipeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDiskWipeRequestWithBody generates requests for PostDiskWipe with any type of body
func NewPostDiskWipeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/disk/wipe")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDnsQueryRequest generates requests for GetDnsQuery
func NewGetDnsQueryRequest(server string, params *GetDnsQueryParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dns/query")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDyndnsRequest generates requests for GetDyndns
func NewGetDyndnsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dyndns")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDyndnsRequest calls the generic PutDyndns builder with application/json body
func NewPutDyndnsRequest(server string, body PutDyndnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDyndnsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutDyndnsRequestWithBody generates requests for PutDyndns with any type of body
func NewPutDyndnsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dyndns")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDyndnsProviderChoicesRequest generates requests for GetDyndnsProviderChoices
func NewGetDyndnsProviderChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/dyndns/provider_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFilesystemAclIsTrivialRequest calls the generic PostFilesystemAclIsTrivial builder with application/json body
func NewPostFilesystemAclIsTrivialRequest(server string, body PostFilesystemAclIsTrivialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemAclIsTrivialRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemAclIsTrivialRequestWithBody generates requests for PostFilesystemAclIsTrivial with any type of body
func NewPostFilesystemAclIsTrivialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/acl_is_trivial")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemChownRequest calls the generic PostFilesystemChown builder with application/json body
func NewPostFilesystemChownRequest(server string, body PostFilesystemChownJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemChownRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemChownRequestWithBody generates requests for PostFilesystemChown with any type of body
func NewPostFilesystemChownRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/chown")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFilesystemDefaultAclChoicesRequest generates requests for GetFilesystemDefaultAclChoices
func NewGetFilesystemDefaultAclChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/default_acl_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFilesystemGetDefaultAclRequest calls the generic PostFilesystemGetDefaultAcl builder with application/json body
func NewPostFilesystemGetDefaultAclRequest(server string, body PostFilesystemGetDefaultAclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemGetDefaultAclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemGetDefaultAclRequestWithBody generates requests for PostFilesystemGetDefaultAcl with any type of body
func NewPostFilesystemGetDefaultAclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/get_default_acl")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemGetaclRequest calls the generic PostFilesystemGetacl builder with application/json body
func NewPostFilesystemGetaclRequest(server string, body PostFilesystemGetaclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemGetaclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemGetaclRequestWithBody generates requests for PostFilesystemGetacl with any type of body
func NewPostFilesystemGetaclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/getacl")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemListdirRequest calls the generic PostFilesystemListdir builder with application/json body
func NewPostFilesystemListdirRequest(server string, body PostFilesystemListdirJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemListdirRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemListdirRequestWithBody generates requests for PostFilesystemListdir with any type of body
func NewPostFilesystemListdirRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/listdir")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemSetaclRequest calls the generic PostFilesystemSetacl builder with application/json body
func NewPostFilesystemSetaclRequest(server string, body PostFilesystemSetaclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemSetaclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemSetaclRequestWithBody generates requests for PostFilesystemSetacl with any type of body
func NewPostFilesystemSetaclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/setacl")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemSetpermRequest calls the generic PostFilesystemSetperm builder with application/json body
func NewPostFilesystemSetpermRequest(server string, body PostFilesystemSetpermJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemSetpermRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemSetpermRequestWithBody generates requests for PostFilesystemSetperm with any type of body
func NewPostFilesystemSetpermRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/setperm")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemStatRequest calls the generic PostFilesystemStat builder with application/json body
func NewPostFilesystemStatRequest(server string, body PostFilesystemStatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemStatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemStatRequestWithBody generates requests for PostFilesystemStat with any type of body
func NewPostFilesystemStatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/stat")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFilesystemStatfsRequest calls the generic PostFilesystemStatfs builder with application/json body
func NewPostFilesystemStatfsRequest(server string, body PostFilesystemStatfsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemStatfsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFilesystemStatfsRequestWithBody generates requests for PostFilesystemStatfs with any type of body
func NewPostFilesystemStatfsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/filesystem/statfs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFtpRequest generates requests for GetFtp
func NewGetFtpRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ftp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFtpRequest calls the generic PutFtp builder with application/json body
func NewPutFtpRequest(server string, body PutFtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFtpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutFtpRequestWithBody generates requests for PutFtp with any type of body
func NewPutFtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ftp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupRequest generates requests for GetGroup
func NewGetGroupRequest(server string, params *GetGroupParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupRequest calls the generic PostGroup builder with application/json body
func NewPostGroupRequest(server string, body PostGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupRequestWithBody generates requests for PostGroup with any type of body
func NewPostGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/group")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupGetGroupObjRequest calls the generic PostGroupGetGroupObj builder with application/json body
func NewPostGroupGetGroupObjRequest(server string, body PostGroupGetGroupObjJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupGetGroupObjRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupGetGroupObjRequestWithBody generates requests for PostGroupGetGroupObj with any type of body
func NewPostGroupGetGroupObjRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/group/get_group_obj")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupGetNextGidRequest generates requests for GetGroupGetNextGid
func NewGetGroupGetNextGidRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/group/get_next_gid")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGroupIdIdRequest calls the generic DeleteGroupIdId builder with application/json body
func NewDeleteGroupIdIdRequest(server string, id int, body DeleteGroupIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGroupIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteGroupIdIdRequestWithBody generates requests for DeleteGroupIdId with any type of body
func NewDeleteGroupIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/group/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupIdIdRequest generates requests for GetGroupIdId
func NewGetGroupIdIdRequest(server string, id []interface{}, params *GetGroupIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/group/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGroupIdIdRequest calls the generic PutGroupIdId builder with application/json body
func NewPutGroupIdIdRequest(server string, id int, body PutGroupIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutGroupIdIdRequestWithBody generates requests for PutGroupIdId with any type of body
func NewPutGroupIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/group/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapAdRequest generates requests for GetIdmapAd
func NewGetIdmapAdRequest(server string, params *GetIdmapAdParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ad")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapAdRequest calls the generic PostIdmapAd builder with application/json body
func NewPostIdmapAdRequest(server string, body PostIdmapAdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapAdRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapAdRequestWithBody generates requests for PostIdmapAd with any type of body
func NewPostIdmapAdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ad")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapAdIdIdRequest generates requests for DeleteIdmapAdIdId
func NewDeleteIdmapAdIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ad/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapAdIdIdRequest generates requests for GetIdmapAdIdId
func NewGetIdmapAdIdIdRequest(server string, id []interface{}, params *GetIdmapAdIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ad/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapAdIdIdRequest calls the generic PutIdmapAdIdId builder with application/json body
func NewPutIdmapAdIdIdRequest(server string, id int, body PutIdmapAdIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapAdIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapAdIdIdRequestWithBody generates requests for PutIdmapAdIdId with any type of body
func NewPutIdmapAdIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ad/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapAutoridRequest generates requests for GetIdmapAutorid
func NewGetIdmapAutoridRequest(server string, params *GetIdmapAutoridParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/autorid")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapAutoridRequest calls the generic PostIdmapAutorid builder with application/json body
func NewPostIdmapAutoridRequest(server string, body PostIdmapAutoridJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapAutoridRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapAutoridRequestWithBody generates requests for PostIdmapAutorid with any type of body
func NewPostIdmapAutoridRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/autorid")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapAutoridIdIdRequest generates requests for DeleteIdmapAutoridIdId
func NewDeleteIdmapAutoridIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/autorid/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapAutoridIdIdRequest generates requests for GetIdmapAutoridIdId
func NewGetIdmapAutoridIdIdRequest(server string, id []interface{}, params *GetIdmapAutoridIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/autorid/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapAutoridIdIdRequest calls the generic PutIdmapAutoridIdId builder with application/json body
func NewPutIdmapAutoridIdIdRequest(server string, id int, body PutIdmapAutoridIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapAutoridIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapAutoridIdIdRequestWithBody generates requests for PutIdmapAutoridIdId with any type of body
func NewPutIdmapAutoridIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/autorid/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapClearIdmapCacheRequest generates requests for GetIdmapClearIdmapCache
func NewGetIdmapClearIdmapCacheRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/clear_idmap_cache")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapDomainRequest generates requests for GetIdmapDomain
func NewGetIdmapDomainRequest(server string, params *GetIdmapDomainParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domain")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapDomainRequest calls the generic PostIdmapDomain builder with application/json body
func NewPostIdmapDomainRequest(server string, body PostIdmapDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapDomainRequestWithBody generates requests for PostIdmapDomain with any type of body
func NewPostIdmapDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domain")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapDomainIdIdRequest generates requests for DeleteIdmapDomainIdId
func NewDeleteIdmapDomainIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domain/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapDomainIdIdRequest generates requests for GetIdmapDomainIdId
func NewGetIdmapDomainIdIdRequest(server string, id []interface{}, params *GetIdmapDomainIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domain/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapDomainIdIdRequest calls the generic PutIdmapDomainIdId builder with application/json body
func NewPutIdmapDomainIdIdRequest(server string, id int, body PutIdmapDomainIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapDomainIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapDomainIdIdRequestWithBody generates requests for PutIdmapDomainIdId with any type of body
func NewPutIdmapDomainIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domain/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapDomaintobackendRequest generates requests for GetIdmapDomaintobackend
func NewGetIdmapDomaintobackendRequest(server string, params *GetIdmapDomaintobackendParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domaintobackend")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapDomaintobackendRequest calls the generic PostIdmapDomaintobackend builder with application/json body
func NewPostIdmapDomaintobackendRequest(server string, body PostIdmapDomaintobackendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapDomaintobackendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapDomaintobackendRequestWithBody generates requests for PostIdmapDomaintobackend with any type of body
func NewPostIdmapDomaintobackendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domaintobackend")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapDomaintobackendIdIdRequest generates requests for DeleteIdmapDomaintobackendIdId
func NewDeleteIdmapDomaintobackendIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domaintobackend/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapDomaintobackendIdIdRequest generates requests for GetIdmapDomaintobackendIdId
func NewGetIdmapDomaintobackendIdIdRequest(server string, id []interface{}, params *GetIdmapDomaintobackendIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domaintobackend/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapDomaintobackendIdIdRequest calls the generic PutIdmapDomaintobackendIdId builder with application/json body
func NewPutIdmapDomaintobackendIdIdRequest(server string, id int, body PutIdmapDomaintobackendIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapDomaintobackendIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapDomaintobackendIdIdRequestWithBody generates requests for PutIdmapDomaintobackendIdId with any type of body
func NewPutIdmapDomaintobackendIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/domaintobackend/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapGetConfiguredIdmapDomainsRequest generates requests for GetIdmapGetConfiguredIdmapDomains
func NewGetIdmapGetConfiguredIdmapDomainsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/get_configured_idmap_domains")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapGetOrCreateIdmapByDomainRequest calls the generic PostIdmapGetOrCreateIdmapByDomain builder with application/json body
func NewPostIdmapGetOrCreateIdmapByDomainRequest(server string, body PostIdmapGetOrCreateIdmapByDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapGetOrCreateIdmapByDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapGetOrCreateIdmapByDomainRequestWithBody generates requests for PostIdmapGetOrCreateIdmapByDomain with any type of body
func NewPostIdmapGetOrCreateIdmapByDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/get_or_create_idmap_by_domain")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapLdapRequest generates requests for GetIdmapLdap
func NewGetIdmapLdapRequest(server string, params *GetIdmapLdapParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ldap")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapLdapRequest calls the generic PostIdmapLdap builder with application/json body
func NewPostIdmapLdapRequest(server string, body PostIdmapLdapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapLdapRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapLdapRequestWithBody generates requests for PostIdmapLdap with any type of body
func NewPostIdmapLdapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ldap")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapLdapIdIdRequest generates requests for DeleteIdmapLdapIdId
func NewDeleteIdmapLdapIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ldap/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapLdapIdIdRequest generates requests for GetIdmapLdapIdId
func NewGetIdmapLdapIdIdRequest(server string, id []interface{}, params *GetIdmapLdapIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ldap/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapLdapIdIdRequest calls the generic PutIdmapLdapIdId builder with application/json body
func NewPutIdmapLdapIdIdRequest(server string, id int, body PutIdmapLdapIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapLdapIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapLdapIdIdRequestWithBody generates requests for PutIdmapLdapIdId with any type of body
func NewPutIdmapLdapIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/ldap/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapNssRequest generates requests for GetIdmapNss
func NewGetIdmapNssRequest(server string, params *GetIdmapNssParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/nss")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapNssRequest calls the generic PostIdmapNss builder with application/json body
func NewPostIdmapNssRequest(server string, body PostIdmapNssJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapNssRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapNssRequestWithBody generates requests for PostIdmapNss with any type of body
func NewPostIdmapNssRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/nss")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapNssIdIdRequest generates requests for DeleteIdmapNssIdId
func NewDeleteIdmapNssIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/nss/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapNssIdIdRequest generates requests for GetIdmapNssIdId
func NewGetIdmapNssIdIdRequest(server string, id []interface{}, params *GetIdmapNssIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/nss/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapNssIdIdRequest calls the generic PutIdmapNssIdId builder with application/json body
func NewPutIdmapNssIdIdRequest(server string, id int, body PutIdmapNssIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapNssIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapNssIdIdRequestWithBody generates requests for PutIdmapNssIdId with any type of body
func NewPutIdmapNssIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/nss/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapRfc2307Request generates requests for GetIdmapRfc2307
func NewGetIdmapRfc2307Request(server string, params *GetIdmapRfc2307Params) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rfc2307")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapRfc2307Request calls the generic PostIdmapRfc2307 builder with application/json body
func NewPostIdmapRfc2307Request(server string, body PostIdmapRfc2307JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapRfc2307RequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapRfc2307RequestWithBody generates requests for PostIdmapRfc2307 with any type of body
func NewPostIdmapRfc2307RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rfc2307")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapRfc2307IdIdRequest generates requests for DeleteIdmapRfc2307IdId
func NewDeleteIdmapRfc2307IdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rfc2307/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapRfc2307IdIdRequest generates requests for GetIdmapRfc2307IdId
func NewGetIdmapRfc2307IdIdRequest(server string, id []interface{}, params *GetIdmapRfc2307IdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rfc2307/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapRfc2307IdIdRequest calls the generic PutIdmapRfc2307IdId builder with application/json body
func NewPutIdmapRfc2307IdIdRequest(server string, id int, body PutIdmapRfc2307IdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapRfc2307IdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapRfc2307IdIdRequestWithBody generates requests for PutIdmapRfc2307IdId with any type of body
func NewPutIdmapRfc2307IdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rfc2307/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapRidRequest generates requests for GetIdmapRid
func NewGetIdmapRidRequest(server string, params *GetIdmapRidParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rid")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapRidRequest calls the generic PostIdmapRid builder with application/json body
func NewPostIdmapRidRequest(server string, body PostIdmapRidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapRidRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapRidRequestWithBody generates requests for PostIdmapRid with any type of body
func NewPostIdmapRidRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rid")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapRidIdIdRequest generates requests for DeleteIdmapRidIdId
func NewDeleteIdmapRidIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rid/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapRidIdIdRequest generates requests for GetIdmapRidIdId
func NewGetIdmapRidIdIdRequest(server string, id []interface{}, params *GetIdmapRidIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rid/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapRidIdIdRequest calls the generic PutIdmapRidIdId builder with application/json body
func NewPutIdmapRidIdIdRequest(server string, id int, body PutIdmapRidIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapRidIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapRidIdIdRequestWithBody generates requests for PutIdmapRidIdId with any type of body
func NewPutIdmapRidIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/rid/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapScriptRequest generates requests for GetIdmapScript
func NewGetIdmapScriptRequest(server string, params *GetIdmapScriptParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/script")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapScriptRequest calls the generic PostIdmapScript builder with application/json body
func NewPostIdmapScriptRequest(server string, body PostIdmapScriptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapScriptRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapScriptRequestWithBody generates requests for PostIdmapScript with any type of body
func NewPostIdmapScriptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/script")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapScriptIdIdRequest generates requests for DeleteIdmapScriptIdId
func NewDeleteIdmapScriptIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/script/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapScriptIdIdRequest generates requests for GetIdmapScriptIdId
func NewGetIdmapScriptIdIdRequest(server string, id []interface{}, params *GetIdmapScriptIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/script/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapScriptIdIdRequest calls the generic PutIdmapScriptIdId builder with application/json body
func NewPutIdmapScriptIdIdRequest(server string, id int, body PutIdmapScriptIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapScriptIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapScriptIdIdRequestWithBody generates requests for PutIdmapScriptIdId with any type of body
func NewPutIdmapScriptIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/script/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdmapTdbRequest generates requests for GetIdmapTdb
func NewGetIdmapTdbRequest(server string, params *GetIdmapTdbParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/tdb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdmapTdbRequest calls the generic PostIdmapTdb builder with application/json body
func NewPostIdmapTdbRequest(server string, body PostIdmapTdbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdmapTdbRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdmapTdbRequestWithBody generates requests for PostIdmapTdb with any type of body
func NewPostIdmapTdbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/tdb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdmapTdbIdIdRequest generates requests for DeleteIdmapTdbIdId
func NewDeleteIdmapTdbIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/tdb/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdmapTdbIdIdRequest generates requests for GetIdmapTdbIdId
func NewGetIdmapTdbIdIdRequest(server string, id []interface{}, params *GetIdmapTdbIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/tdb/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdmapTdbIdIdRequest calls the generic PutIdmapTdbIdId builder with application/json body
func NewPutIdmapTdbIdIdRequest(server string, id int, body PutIdmapTdbIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdmapTdbIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIdmapTdbIdIdRequestWithBody generates requests for PutIdmapTdbIdId with any type of body
func NewPutIdmapTdbIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/idmap/tdb/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInitshutdownscriptRequest generates requests for GetInitshutdownscript
func NewGetInitshutdownscriptRequest(server string, params *GetInitshutdownscriptParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/initshutdownscript")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInitshutdownscriptRequest calls the generic PostInitshutdownscript builder with application/json body
func NewPostInitshutdownscriptRequest(server string, body PostInitshutdownscriptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInitshutdownscriptRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInitshutdownscriptRequestWithBody generates requests for PostInitshutdownscript with any type of body
func NewPostInitshutdownscriptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/initshutdownscript")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInitshutdownscriptIdIdRequest generates requests for DeleteInitshutdownscriptIdId
func NewDeleteInitshutdownscriptIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/initshutdownscript/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInitshutdownscriptIdIdRequest generates requests for GetInitshutdownscriptIdId
func NewGetInitshutdownscriptIdIdRequest(server string, id []interface{}, params *GetInitshutdownscriptIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/initshutdownscript/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInitshutdownscriptIdIdRequest calls the generic PutInitshutdownscriptIdId builder with application/json body
func NewPutInitshutdownscriptIdIdRequest(server string, id int, body PutInitshutdownscriptIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInitshutdownscriptIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutInitshutdownscriptIdIdRequestWithBody generates requests for PutInitshutdownscriptIdId with any type of body
func NewPutInitshutdownscriptIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/initshutdownscript/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInterfaceRequest generates requests for GetInterface
func NewGetInterfaceRequest(server string, params *GetInterfaceParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInterfaceRequest calls the generic PostInterface builder with application/json body
func NewPostInterfaceRequest(server string, body PostInterfaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceRequestWithBody generates requests for PostInterface with any type of body
func NewPostInterfaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInterfaceBridgeMembersChoicesRequest calls the generic PostInterfaceBridgeMembersChoices builder with application/json body
func NewPostInterfaceBridgeMembersChoicesRequest(server string, body PostInterfaceBridgeMembersChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceBridgeMembersChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceBridgeMembersChoicesRequestWithBody generates requests for PostInterfaceBridgeMembersChoices with any type of body
func NewPostInterfaceBridgeMembersChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/bridge_members_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInterfaceCheckinRequest generates requests for GetInterfaceCheckin
func NewGetInterfaceCheckinRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/checkin")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceCheckinWaitingRequest generates requests for GetInterfaceCheckinWaiting
func NewGetInterfaceCheckinWaitingRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/checkin_waiting")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInterfaceChoicesRequest calls the generic PostInterfaceChoices builder with application/json body
func NewPostInterfaceChoicesRequest(server string, body PostInterfaceChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceChoicesRequestWithBody generates requests for PostInterfaceChoices with any type of body
func NewPostInterfaceChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInterfaceCommitRequest calls the generic PostInterfaceCommit builder with application/json body
func NewPostInterfaceCommitRequest(server string, body PostInterfaceCommitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceCommitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceCommitRequestWithBody generates requests for PostInterfaceCommit with any type of body
func NewPostInterfaceCommitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/commit")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInterfaceHasPendingChangesRequest generates requests for GetInterfaceHasPendingChanges
func NewGetInterfaceHasPendingChangesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/has_pending_changes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInterfaceIdIdRequest generates requests for DeleteInterfaceIdId
func NewDeleteInterfaceIdIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceIdIdRequest generates requests for GetInterfaceIdId
func NewGetInterfaceIdIdRequest(server string, id []interface{}, params *GetInterfaceIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInterfaceIdIdRequest calls the generic PutInterfaceIdId builder with application/json body
func NewPutInterfaceIdIdRequest(server string, id string, body PutInterfaceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInterfaceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutInterfaceIdIdRequestWithBody generates requests for PutInterfaceIdId with any type of body
func NewPutInterfaceIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInterfaceIpInUseRequest calls the generic PostInterfaceIpInUse builder with application/json body
func NewPostInterfaceIpInUseRequest(server string, body PostInterfaceIpInUseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceIpInUseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceIpInUseRequestWithBody generates requests for PostInterfaceIpInUse with any type of body
func NewPostInterfaceIpInUseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/ip_in_use")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInterfaceLagPortsChoicesRequest calls the generic PostInterfaceLagPortsChoices builder with application/json body
func NewPostInterfaceLagPortsChoicesRequest(server string, body PostInterfaceLagPortsChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInterfaceLagPortsChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInterfaceLagPortsChoicesRequestWithBody generates requests for PostInterfaceLagPortsChoices with any type of body
func NewPostInterfaceLagPortsChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/lag_ports_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInterfaceRollbackRequest generates requests for GetInterfaceRollback
func NewGetInterfaceRollbackRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/rollback")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInterfaceVlanParentInterfaceChoicesRequest generates requests for GetInterfaceVlanParentInterfaceChoices
func NewGetInterfaceVlanParentInterfaceChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interface/vlan_parent_interface_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpmiRequest generates requests for GetIpmi
func NewGetIpmiRequest(server string, params *GetIpmiParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ipmi")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpmiChannelsRequest generates requests for GetIpmiChannels
func NewGetIpmiChannelsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ipmi/channels")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpmiIdIdRequest generates requests for GetIpmiIdId
func NewGetIpmiIdIdRequest(server string, id []interface{}, params *GetIpmiIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ipmi/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIpmiIdIdRequest calls the generic PutIpmiIdId builder with application/json body
func NewPutIpmiIdIdRequest(server string, id int, body PutIpmiIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIpmiIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIpmiIdIdRequestWithBody generates requests for PutIpmiIdId with any type of body
func NewPutIpmiIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ipmi/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIpmiIdentifyRequest calls the generic PostIpmiIdentify builder with application/json body
func NewPostIpmiIdentifyRequest(server string, body PostIpmiIdentifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIpmiIdentifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIpmiIdentifyRequestWithBody generates requests for PostIpmiIdentify with any type of body
func NewPostIpmiIdentifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ipmi/identify")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIpmiIsLoadedRequest generates requests for GetIpmiIsLoaded
func NewGetIpmiIsLoadedRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ipmi/is_loaded")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiAuthRequest generates requests for GetIscsiAuth
func NewGetIscsiAuthRequest(server string, params *GetIscsiAuthParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/auth")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiAuthRequest calls the generic PostIscsiAuth builder with application/json body
func NewPostIscsiAuthRequest(server string, body PostIscsiAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiAuthRequestWithBody generates requests for PostIscsiAuth with any type of body
func NewPostIscsiAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/auth")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiAuthIdIdRequest generates requests for DeleteIscsiAuthIdId
func NewDeleteIscsiAuthIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/auth/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiAuthIdIdRequest generates requests for GetIscsiAuthIdId
func NewGetIscsiAuthIdIdRequest(server string, id []interface{}, params *GetIscsiAuthIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/auth/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiAuthIdIdRequest calls the generic PutIscsiAuthIdId builder with application/json body
func NewPutIscsiAuthIdIdRequest(server string, id int, body PutIscsiAuthIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiAuthIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiAuthIdIdRequestWithBody generates requests for PutIscsiAuthIdId with any type of body
func NewPutIscsiAuthIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/auth/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiExtentRequest generates requests for GetIscsiExtent
func NewGetIscsiExtentRequest(server string, params *GetIscsiExtentParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/extent")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiExtentRequest calls the generic PostIscsiExtent builder with application/json body
func NewPostIscsiExtentRequest(server string, body PostIscsiExtentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiExtentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiExtentRequestWithBody generates requests for PostIscsiExtent with any type of body
func NewPostIscsiExtentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/extent")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIscsiExtentDiskChoicesRequest calls the generic PostIscsiExtentDiskChoices builder with application/json body
func NewPostIscsiExtentDiskChoicesRequest(server string, body PostIscsiExtentDiskChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiExtentDiskChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiExtentDiskChoicesRequestWithBody generates requests for PostIscsiExtentDiskChoices with any type of body
func NewPostIscsiExtentDiskChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/extent/disk_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiExtentIdIdRequest calls the generic DeleteIscsiExtentIdId builder with application/json body
func NewDeleteIscsiExtentIdIdRequest(server string, id int, body DeleteIscsiExtentIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiExtentIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteIscsiExtentIdIdRequestWithBody generates requests for DeleteIscsiExtentIdId with any type of body
func NewDeleteIscsiExtentIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/extent/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiExtentIdIdRequest generates requests for GetIscsiExtentIdId
func NewGetIscsiExtentIdIdRequest(server string, id []interface{}, params *GetIscsiExtentIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/extent/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiExtentIdIdRequest calls the generic PutIscsiExtentIdId builder with application/json body
func NewPutIscsiExtentIdIdRequest(server string, id int, body PutIscsiExtentIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiExtentIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiExtentIdIdRequestWithBody generates requests for PutIscsiExtentIdId with any type of body
func NewPutIscsiExtentIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/extent/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiGlobalRequest generates requests for GetIscsiGlobal
func NewGetIscsiGlobalRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/global")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiGlobalRequest calls the generic PutIscsiGlobal builder with application/json body
func NewPutIscsiGlobalRequest(server string, body PutIscsiGlobalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiGlobalRequestWithBody(server, "application/json", bodyReader)
}

// NewPutIscsiGlobalRequestWithBody generates requests for PutIscsiGlobal with any type of body
func NewPutIscsiGlobalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/global")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiGlobalSessionsRequest generates requests for GetIscsiGlobalSessions
func NewGetIscsiGlobalSessionsRequest(server string, params *GetIscsiGlobalSessionsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/global/sessions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiInitiatorRequest generates requests for GetIscsiInitiator
func NewGetIscsiInitiatorRequest(server string, params *GetIscsiInitiatorParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/initiator")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiInitiatorRequest calls the generic PostIscsiInitiator builder with application/json body
func NewPostIscsiInitiatorRequest(server string, body PostIscsiInitiatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiInitiatorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiInitiatorRequestWithBody generates requests for PostIscsiInitiator with any type of body
func NewPostIscsiInitiatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/initiator")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiInitiatorIdIdRequest generates requests for DeleteIscsiInitiatorIdId
func NewDeleteIscsiInitiatorIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/initiator/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiInitiatorIdIdRequest generates requests for GetIscsiInitiatorIdId
func NewGetIscsiInitiatorIdIdRequest(server string, id []interface{}, params *GetIscsiInitiatorIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/initiator/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiInitiatorIdIdRequest calls the generic PutIscsiInitiatorIdId builder with application/json body
func NewPutIscsiInitiatorIdIdRequest(server string, id int, body PutIscsiInitiatorIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiInitiatorIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiInitiatorIdIdRequestWithBody generates requests for PutIscsiInitiatorIdId with any type of body
func NewPutIscsiInitiatorIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/initiator/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiPortalRequest generates requests for GetIscsiPortal
func NewGetIscsiPortalRequest(server string, params *GetIscsiPortalParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/portal")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiPortalRequest calls the generic PostIscsiPortal builder with application/json body
func NewPostIscsiPortalRequest(server string, body PostIscsiPortalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiPortalRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiPortalRequestWithBody generates requests for PostIscsiPortal with any type of body
func NewPostIscsiPortalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/portal")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiPortalIdIdRequest generates requests for DeleteIscsiPortalIdId
func NewDeleteIscsiPortalIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/portal/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiPortalIdIdRequest generates requests for GetIscsiPortalIdId
func NewGetIscsiPortalIdIdRequest(server string, id []interface{}, params *GetIscsiPortalIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/portal/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiPortalIdIdRequest calls the generic PutIscsiPortalIdId builder with application/json body
func NewPutIscsiPortalIdIdRequest(server string, id int, body PutIscsiPortalIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiPortalIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiPortalIdIdRequestWithBody generates requests for PutIscsiPortalIdId with any type of body
func NewPutIscsiPortalIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/portal/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiPortalListenIpChoicesRequest generates requests for GetIscsiPortalListenIpChoices
func NewGetIscsiPortalListenIpChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/portal/listen_ip_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIscsiTargetRequest generates requests for GetIscsiTarget
func NewGetIscsiTargetRequest(server string, params *GetIscsiTargetParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/target")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiTargetRequest calls the generic PostIscsiTarget builder with application/json body
func NewPostIscsiTargetRequest(server string, body PostIscsiTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiTargetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiTargetRequestWithBody generates requests for PostIscsiTarget with any type of body
func NewPostIscsiTargetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/target")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiTargetIdIdRequest calls the generic DeleteIscsiTargetIdId builder with application/json body
func NewDeleteIscsiTargetIdIdRequest(server string, id int, body DeleteIscsiTargetIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiTargetIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteIscsiTargetIdIdRequestWithBody generates requests for DeleteIscsiTargetIdId with any type of body
func NewDeleteIscsiTargetIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/target/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiTargetIdIdRequest generates requests for GetIscsiTargetIdId
func NewGetIscsiTargetIdIdRequest(server string, id []interface{}, params *GetIscsiTargetIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/target/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiTargetIdIdRequest calls the generic PutIscsiTargetIdId builder with application/json body
func NewPutIscsiTargetIdIdRequest(server string, id int, body PutIscsiTargetIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiTargetIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiTargetIdIdRequestWithBody generates requests for PutIscsiTargetIdId with any type of body
func NewPutIscsiTargetIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/target/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiTargetextentRequest generates requests for GetIscsiTargetextent
func NewGetIscsiTargetextentRequest(server string, params *GetIscsiTargetextentParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/targetextent")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIscsiTargetextentRequest calls the generic PostIscsiTargetextent builder with application/json body
func NewPostIscsiTargetextentRequest(server string, body PostIscsiTargetextentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIscsiTargetextentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIscsiTargetextentRequestWithBody generates requests for PostIscsiTargetextent with any type of body
func NewPostIscsiTargetextentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/targetextent")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIscsiTargetextentIdIdRequest calls the generic DeleteIscsiTargetextentIdId builder with application/json body
func NewDeleteIscsiTargetextentIdIdRequest(server string, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIscsiTargetextentIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteIscsiTargetextentIdIdRequestWithBody generates requests for DeleteIscsiTargetextentIdId with any type of body
func NewDeleteIscsiTargetextentIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/targetextent/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIscsiTargetextentIdIdRequest generates requests for GetIscsiTargetextentIdId
func NewGetIscsiTargetextentIdIdRequest(server string, id []interface{}, params *GetIscsiTargetextentIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/targetextent/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIscsiTargetextentIdIdRequest calls the generic PutIscsiTargetextentIdId builder with application/json body
func NewPutIscsiTargetextentIdIdRequest(server string, id int, body PutIscsiTargetextentIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIscsiTargetextentIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutIscsiTargetextentIdIdRequestWithBody generates requests for PutIscsiTargetextentIdId with any type of body
func NewPutIscsiTargetextentIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/iscsi/targetextent/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailRequest generates requests for GetJail
func NewGetJailRequest(server string, params *GetJailParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJailRequest calls the generic PostJail builder with application/json body
func NewPostJailRequest(server string, body PostJailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailRequestWithBody generates requests for PostJail with any type of body
func NewPostJailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailActivateRequest calls the generic PostJailActivate builder with application/json body
func NewPostJailActivateRequest(server string, body PostJailActivateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailActivateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailActivateRequestWithBody generates requests for PostJailActivate with any type of body
func NewPostJailActivateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/activate")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailCleanRequest calls the generic PostJailClean builder with application/json body
func NewPostJailCleanRequest(server string, body PostJailCleanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailCleanRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailCleanRequestWithBody generates requests for PostJailClean with any type of body
func NewPostJailCleanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/clean")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailDefaultConfigurationRequest generates requests for GetJailDefaultConfiguration
func NewGetJailDefaultConfigurationRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/default_configuration")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJailExecRequest calls the generic PostJailExec builder with application/json body
func NewPostJailExecRequest(server string, body PostJailExecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailExecRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailExecRequestWithBody generates requests for PostJailExec with any type of body
func NewPostJailExecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/exec")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailExportRequest calls the generic PostJailExport builder with application/json body
func NewPostJailExportRequest(server string, body PostJailExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailExportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailExportRequestWithBody generates requests for PostJailExport with any type of body
func NewPostJailExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/export")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailFetchRequest calls the generic PostJailFetch builder with application/json body
func NewPostJailFetchRequest(server string, body PostJailFetchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailFetchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailFetchRequestWithBody generates requests for PostJailFetch with any type of body
func NewPostJailFetchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/fetch")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailFstabRequest calls the generic PostJailFstab builder with application/json body
func NewPostJailFstabRequest(server string, body PostJailFstabJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailFstabRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailFstabRequestWithBody generates requests for PostJailFstab with any type of body
func NewPostJailFstabRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/fstab")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailGetActivatedPoolRequest generates requests for GetJailGetActivatedPool
func NewGetJailGetActivatedPoolRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/get_activated_pool")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteJailIdIdRequest calls the generic DeleteJailIdId builder with application/json body
func NewDeleteJailIdIdRequest(server string, id string, body DeleteJailIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteJailIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteJailIdIdRequestWithBody generates requests for DeleteJailIdId with any type of body
func NewDeleteJailIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailIdIdRequest generates requests for GetJailIdId
func NewGetJailIdIdRequest(server string, id []interface{}, params *GetJailIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutJailIdIdRequest calls the generic PutJailIdId builder with application/json body
func NewPutJailIdIdRequest(server string, id string, body PutJailIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJailIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutJailIdIdRequestWithBody generates requests for PutJailIdId with any type of body
func NewPutJailIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailIdIdCloneRequest calls the generic PostJailIdIdClone builder with application/json body
func NewPostJailIdIdCloneRequest(server string, id string, body PostJailIdIdCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailIdIdCloneRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostJailIdIdCloneRequestWithBody generates requests for PostJailIdIdClone with any type of body
func NewPostJailIdIdCloneRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/id/%s/clone", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailImportImageRequest calls the generic PostJailImportImage builder with application/json body
func NewPostJailImportImageRequest(server string, body PostJailImportImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailImportImageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailImportImageRequestWithBody generates requests for PostJailImportImage with any type of body
func NewPostJailImportImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/import_image")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJailInterfaceChoicesRequest generates requests for GetJailInterfaceChoices
func NewGetJailInterfaceChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/interface_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJailRcActionRequest calls the generic PostJailRcAction builder with application/json body
func NewPostJailRcActionRequest(server string, body PostJailRcActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailRcActionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailRcActionRequestWithBody generates requests for PostJailRcAction with any type of body
func NewPostJailRcActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/rc_action")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailReleasesChoicesRequest calls the generic PostJailReleasesChoices builder with application/json body
func NewPostJailReleasesChoicesRequest(server string, body PostJailReleasesChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailReleasesChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailReleasesChoicesRequestWithBody generates requests for PostJailReleasesChoices with any type of body
func NewPostJailReleasesChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/releases_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailRestartRequest calls the generic PostJailRestart builder with application/json body
func NewPostJailRestartRequest(server string, body PostJailRestartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailRestartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailRestartRequestWithBody generates requests for PostJailRestart with any type of body
func NewPostJailRestartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/restart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailStartRequest calls the generic PostJailStart builder with application/json body
func NewPostJailStartRequest(server string, body PostJailStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailStartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailStartRequestWithBody generates requests for PostJailStart with any type of body
func NewPostJailStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/start")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailStopRequest calls the generic PostJailStop builder with application/json body
func NewPostJailStopRequest(server string, body PostJailStopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailStopRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailStopRequestWithBody generates requests for PostJailStop with any type of body
func NewPostJailStopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/stop")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailUpdateDefaultsRequest calls the generic PostJailUpdateDefaults builder with application/json body
func NewPostJailUpdateDefaultsRequest(server string, body PostJailUpdateDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailUpdateDefaultsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailUpdateDefaultsRequestWithBody generates requests for PostJailUpdateDefaults with any type of body
func NewPostJailUpdateDefaultsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/update_defaults")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJailUpdateToLatestPatchRequest calls the generic PostJailUpdateToLatestPatch builder with application/json body
func NewPostJailUpdateToLatestPatchRequest(server string, body PostJailUpdateToLatestPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJailUpdateToLatestPatchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJailUpdateToLatestPatchRequestWithBody generates requests for PostJailUpdateToLatestPatch with any type of body
func NewPostJailUpdateToLatestPatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/jail/update_to_latest_patch")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKerberosRequest generates requests for GetKerberos
func NewGetKerberosRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKerberosRequest calls the generic PutKerberos builder with application/json body
func NewPutKerberosRequest(server string, body PutKerberosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKerberosRequestWithBody(server, "application/json", bodyReader)
}

// NewPutKerberosRequestWithBody generates requests for PutKerberos with any type of body
func NewPutKerberosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKerberosKeytabRequest generates requests for GetKerberosKeytab
func NewGetKerberosKeytabRequest(server string, params *GetKerberosKeytabParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/keytab")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKerberosKeytabRequest calls the generic PostKerberosKeytab builder with application/json body
func NewPostKerberosKeytabRequest(server string, body PostKerberosKeytabJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKerberosKeytabRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKerberosKeytabRequestWithBody generates requests for PostKerberosKeytab with any type of body
func NewPostKerberosKeytabRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/keytab")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKerberosKeytabIdIdRequest generates requests for DeleteKerberosKeytabIdId
func NewDeleteKerberosKeytabIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/keytab/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKerberosKeytabIdIdRequest generates requests for GetKerberosKeytabIdId
func NewGetKerberosKeytabIdIdRequest(server string, id []interface{}, params *GetKerberosKeytabIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/keytab/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKerberosKeytabIdIdRequest calls the generic PutKerberosKeytabIdId builder with application/json body
func NewPutKerberosKeytabIdIdRequest(server string, id int, body PutKerberosKeytabIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKerberosKeytabIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutKerberosKeytabIdIdRequestWithBody generates requests for PutKerberosKeytabIdId with any type of body
func NewPutKerberosKeytabIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/keytab/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKerberosKeytabSystemKeytabListRequest generates requests for GetKerberosKeytabSystemKeytabList
func NewGetKerberosKeytabSystemKeytabListRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/keytab/system_keytab_list")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKerberosRealmRequest generates requests for GetKerberosRealm
func NewGetKerberosRealmRequest(server string, params *GetKerberosRealmParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/realm")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKerberosRealmRequest calls the generic PostKerberosRealm builder with application/json body
func NewPostKerberosRealmRequest(server string, body PostKerberosRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKerberosRealmRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKerberosRealmRequestWithBody generates requests for PostKerberosRealm with any type of body
func NewPostKerberosRealmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/realm")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKerberosRealmIdIdRequest generates requests for DeleteKerberosRealmIdId
func NewDeleteKerberosRealmIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/realm/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKerberosRealmIdIdRequest generates requests for GetKerberosRealmIdId
func NewGetKerberosRealmIdIdRequest(server string, id []interface{}, params *GetKerberosRealmIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/realm/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKerberosRealmIdIdRequest calls the generic PutKerberosRealmIdId builder with application/json body
func NewPutKerberosRealmIdIdRequest(server string, id int, body PutKerberosRealmIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKerberosRealmIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutKerberosRealmIdIdRequestWithBody generates requests for PutKerberosRealmIdId with any type of body
func NewPutKerberosRealmIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/kerberos/realm/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeychaincredentialRequest generates requests for GetKeychaincredential
func NewGetKeychaincredentialRequest(server string, params *GetKeychaincredentialParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostKeychaincredentialRequest calls the generic PostKeychaincredential builder with application/json body
func NewPostKeychaincredentialRequest(server string, body PostKeychaincredentialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeychaincredentialRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeychaincredentialRequestWithBody generates requests for PostKeychaincredential with any type of body
func NewPostKeychaincredentialRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeychaincredentialGenerateSshKeyPairRequest generates requests for GetKeychaincredentialGenerateSshKeyPair
func NewGetKeychaincredentialGenerateSshKeyPairRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential/generate_ssh_key_pair")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteKeychaincredentialIdIdRequest calls the generic DeleteKeychaincredentialIdId builder with application/json body
func NewDeleteKeychaincredentialIdIdRequest(server string, id int, body DeleteKeychaincredentialIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteKeychaincredentialIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteKeychaincredentialIdIdRequestWithBody generates requests for DeleteKeychaincredentialIdId with any type of body
func NewDeleteKeychaincredentialIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeychaincredentialIdIdRequest generates requests for GetKeychaincredentialIdId
func NewGetKeychaincredentialIdIdRequest(server string, id []interface{}, params *GetKeychaincredentialIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutKeychaincredentialIdIdRequest calls the generic PutKeychaincredentialIdId builder with application/json body
func NewPutKeychaincredentialIdIdRequest(server string, id int, body PutKeychaincredentialIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutKeychaincredentialIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutKeychaincredentialIdIdRequestWithBody generates requests for PutKeychaincredentialIdId with any type of body
func NewPutKeychaincredentialIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeychaincredentialRemoteSshHostKeyScanRequest calls the generic PostKeychaincredentialRemoteSshHostKeyScan builder with application/json body
func NewPostKeychaincredentialRemoteSshHostKeyScanRequest(server string, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeychaincredentialRemoteSshHostKeyScanRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeychaincredentialRemoteSshHostKeyScanRequestWithBody generates requests for PostKeychaincredentialRemoteSshHostKeyScan with any type of body
func NewPostKeychaincredentialRemoteSshHostKeyScanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential/remote_ssh_host_key_scan")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequest calls the generic PostKeychaincredentialRemoteSshSemiautomaticSetup builder with application/json body
func NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequest(server string, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequestWithBody generates requests for PostKeychaincredentialRemoteSshSemiautomaticSetup with any type of body
func NewPostKeychaincredentialRemoteSshSemiautomaticSetupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential/remote_ssh_semiautomatic_setup")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKeychaincredentialUsedByRequest calls the generic PostKeychaincredentialUsedBy builder with application/json body
func NewPostKeychaincredentialUsedByRequest(server string, body PostKeychaincredentialUsedByJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKeychaincredentialUsedByRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKeychaincredentialUsedByRequestWithBody generates requests for PostKeychaincredentialUsedBy with any type of body
func NewPostKeychaincredentialUsedByRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/keychaincredential/used_by")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLdapRequest generates requests for GetLdap
func NewGetLdapRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ldap")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLdapRequest calls the generic PutLdap builder with application/json body
func NewPutLdapRequest(server string, body PutLdapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLdapRequestWithBody(server, "application/json", bodyReader)
}

// NewPutLdapRequestWithBody generates requests for PutLdap with any type of body
func NewPutLdapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ldap")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLdapGetStateRequest generates requests for GetLdapGetState
func NewGetLdapGetStateRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ldap/get_state")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLdapIdmapBackendChoicesRequest generates requests for GetLdapIdmapBackendChoices
func NewGetLdapIdmapBackendChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ldap/idmap_backend_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLdapSchemaChoicesRequest generates requests for GetLdapSchemaChoices
func NewGetLdapSchemaChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ldap/schema_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLdapSslChoicesRequest generates requests for GetLdapSslChoices
func NewGetLdapSslChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ldap/ssl_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLldpRequest generates requests for GetLldp
func NewGetLldpRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lldp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLldpRequest calls the generic PutLldp builder with application/json body
func NewPutLldpRequest(server string, body PutLldpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLldpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutLldpRequestWithBody generates requests for PutLldp with any type of body
func NewPutLldpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lldp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMailRequest generates requests for GetMail
func NewGetMailRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/mail")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMailRequest calls the generic PutMail builder with application/json body
func NewPutMailRequest(server string, body PutMailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMailRequestWithBody(server, "application/json", bodyReader)
}

// NewPutMailRequestWithBody generates requests for PutMail with any type of body
func NewPutMailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/mail")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMailSendRequest calls the generic PostMailSend builder with application/json body
func NewPostMailSendRequest(server string, body PostMailSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMailSendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMailSendRequestWithBody generates requests for PostMailSend with any type of body
func NewPostMailSendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/mail/send")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMultipathRequest generates requests for GetMultipath
func NewGetMultipathRequest(server string, params *GetMultipathParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/multipath")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMultipathIdIdRequest generates requests for GetMultipathIdId
func NewGetMultipathIdIdRequest(server string, id []interface{}, params *GetMultipathIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/multipath/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNetworkConfigurationRequest generates requests for GetNetworkConfiguration
func NewGetNetworkConfigurationRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/network/configuration")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNetworkConfigurationRequest calls the generic PutNetworkConfiguration builder with application/json body
func NewPutNetworkConfigurationRequest(server string, body PutNetworkConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNetworkConfigurationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutNetworkConfigurationRequestWithBody generates requests for PutNetworkConfiguration with any type of body
func NewPutNetworkConfigurationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/network/configuration")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNetworkGeneralSummaryRequest generates requests for GetNetworkGeneralSummary
func NewGetNetworkGeneralSummaryRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/network/general/summary")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNfsRequest generates requests for GetNfs
func NewGetNfsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/nfs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNfsRequest calls the generic PutNfs builder with application/json body
func NewPutNfsRequest(server string, body PutNfsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNfsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutNfsRequestWithBody generates requests for PutNfs with any type of body
func NewPutNfsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/nfs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNisRequest generates requests for GetNis
func NewGetNisRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/nis")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNisRequest calls the generic PutNis builder with application/json body
func NewPutNisRequest(server string, body PutNisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNisRequestWithBody(server, "application/json", bodyReader)
}

// NewPutNisRequestWithBody generates requests for PutNis with any type of body
func NewPutNisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/nis")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNisGetStateRequest generates requests for GetNisGetState
func NewGetNisGetStateRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/nis/get_state")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginRequest generates requests for GetPlugin
func NewGetPluginRequest(server string, params *GetPluginParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPluginRequest calls the generic PostPlugin builder with application/json body
func NewPostPluginRequest(server string, body PostPluginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginRequestWithBody generates requests for PostPlugin with any type of body
func NewPostPluginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPluginAvailableRequest calls the generic PostPluginAvailable builder with application/json body
func NewPostPluginAvailableRequest(server string, body PostPluginAvailableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginAvailableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginAvailableRequestWithBody generates requests for PostPluginAvailable with any type of body
func NewPostPluginAvailableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin/available")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPluginBranchesChoicesRequest calls the generic PostPluginBranchesChoices builder with application/json body
func NewPostPluginBranchesChoicesRequest(server string, body PostPluginBranchesChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginBranchesChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginBranchesChoicesRequestWithBody generates requests for PostPluginBranchesChoices with any type of body
func NewPostPluginBranchesChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin/branches_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPluginDefaultsRequest calls the generic PostPluginDefaults builder with application/json body
func NewPostPluginDefaultsRequest(server string, body PostPluginDefaultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPluginDefaultsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPluginDefaultsRequestWithBody generates requests for PostPluginDefaults with any type of body
func NewPostPluginDefaultsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin/defaults")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePluginIdIdRequest generates requests for DeletePluginIdId
func NewDeletePluginIdIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginIdIdRequest generates requests for GetPluginIdId
func NewGetPluginIdIdRequest(server string, id []interface{}, params *GetPluginIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPluginIdIdRequest calls the generic PutPluginIdId builder with application/json body
func NewPutPluginIdIdRequest(server string, id string, body PutPluginIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPluginIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPluginIdIdRequestWithBody generates requests for PutPluginIdId with any type of body
func NewPutPluginIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPluginOfficialRepositoriesRequest generates requests for GetPluginOfficialRepositories
func NewGetPluginOfficialRepositoriesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin/official_repositories")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPluginRetrieveVersionsForReposRequest generates requests for GetPluginRetrieveVersionsForRepos
func NewGetPluginRetrieveVersionsForReposRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/plugin/retrieve_versions_for_repos")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolRequest generates requests for GetPool
func NewGetPoolRequest(server string, params *GetPoolParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolRequest calls the generic PostPool builder with application/json body
func NewPostPoolRequest(server string, body PostPoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolRequestWithBody generates requests for PostPool with any type of body
func NewPostPoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolDatasetRequest generates requests for GetPoolDataset
func NewGetPoolDatasetRequest(server string, params *GetPoolDatasetParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolDatasetRequest calls the generic PostPoolDataset builder with application/json body
func NewPostPoolDatasetRequest(server string, body PostPoolDatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetRequestWithBody generates requests for PostPoolDataset with any type of body
func NewPostPoolDatasetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePoolDatasetIdIdRequest calls the generic DeletePoolDatasetIdId builder with application/json body
func NewDeletePoolDatasetIdIdRequest(server string, id string, body DeletePoolDatasetIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeletePoolDatasetIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeletePoolDatasetIdIdRequestWithBody generates requests for DeletePoolDatasetIdId with any type of body
func NewDeletePoolDatasetIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolDatasetIdIdRequest generates requests for GetPoolDatasetIdId
func NewGetPoolDatasetIdIdRequest(server string, id []interface{}, params *GetPoolDatasetIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolDatasetIdIdRequest calls the generic PutPoolDatasetIdId builder with application/json body
func NewPutPoolDatasetIdIdRequest(server string, id string, body PutPoolDatasetIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolDatasetIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolDatasetIdIdRequestWithBody generates requests for PutPoolDatasetIdId with any type of body
func NewPutPoolDatasetIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdAttachmentsRequest calls the generic PostPoolDatasetIdIdAttachments builder with application/json body
func NewPostPoolDatasetIdIdAttachmentsRequest(server string, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdAttachmentsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdAttachmentsRequestWithBody generates requests for PostPoolDatasetIdIdAttachments with any type of body
func NewPostPoolDatasetIdIdAttachmentsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset/id/%s/attachments", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdPermissionRequest calls the generic PostPoolDatasetIdIdPermission builder with application/json body
func NewPostPoolDatasetIdIdPermissionRequest(server string, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdPermissionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdPermissionRequestWithBody generates requests for PostPoolDatasetIdIdPermission with any type of body
func NewPostPoolDatasetIdIdPermissionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset/id/%s/permission", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdProcessesRequest calls the generic PostPoolDatasetIdIdProcesses builder with application/json body
func NewPostPoolDatasetIdIdProcessesRequest(server string, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdProcessesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdProcessesRequestWithBody generates requests for PostPoolDatasetIdIdProcesses with any type of body
func NewPostPoolDatasetIdIdProcessesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset/id/%s/processes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetIdIdPromoteRequest calls the generic PostPoolDatasetIdIdPromote builder with application/json body
func NewPostPoolDatasetIdIdPromoteRequest(server string, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetIdIdPromoteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolDatasetIdIdPromoteRequestWithBody generates requests for PostPoolDatasetIdIdPromote with any type of body
func NewPostPoolDatasetIdIdPromoteRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset/id/%s/promote", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolDatasetRecommendedZvolBlocksizeRequest calls the generic PostPoolDatasetRecommendedZvolBlocksize builder with application/json body
func NewPostPoolDatasetRecommendedZvolBlocksizeRequest(server string, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolDatasetRecommendedZvolBlocksizeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolDatasetRecommendedZvolBlocksizeRequestWithBody generates requests for PostPoolDatasetRecommendedZvolBlocksize with any type of body
func NewPostPoolDatasetRecommendedZvolBlocksizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/dataset/recommended_zvol_blocksize")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolFilesystemChoicesRequest calls the generic PostPoolFilesystemChoices builder with application/json body
func NewPostPoolFilesystemChoicesRequest(server string, body PostPoolFilesystemChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolFilesystemChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolFilesystemChoicesRequestWithBody generates requests for PostPoolFilesystemChoices with any type of body
func NewPostPoolFilesystemChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/filesystem_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolIdIdRequest generates requests for GetPoolIdId
func NewGetPoolIdIdRequest(server string, id []interface{}, params *GetPoolIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolIdIdRequest calls the generic PutPoolIdId builder with application/json body
func NewPutPoolIdIdRequest(server string, id int, body PutPoolIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolIdIdRequestWithBody generates requests for PutPoolIdId with any type of body
func NewPutPoolIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdAttachmentsRequest calls the generic PostPoolIdIdAttachments builder with application/json body
func NewPostPoolIdIdAttachmentsRequest(server string, id int, body PostPoolIdIdAttachmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdAttachmentsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdAttachmentsRequestWithBody generates requests for PostPoolIdIdAttachments with any type of body
func NewPostPoolIdIdAttachmentsRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/attachments", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdDetachRequest calls the generic PostPoolIdIdDetach builder with application/json body
func NewPostPoolIdIdDetachRequest(server string, id int, body PostPoolIdIdDetachJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdDetachRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdDetachRequestWithBody generates requests for PostPoolIdIdDetach with any type of body
func NewPostPoolIdIdDetachRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/detach", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdDownloadEncryptionKeyRequest calls the generic PostPoolIdIdDownloadEncryptionKey builder with application/json body
func NewPostPoolIdIdDownloadEncryptionKeyRequest(server string, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdDownloadEncryptionKeyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdDownloadEncryptionKeyRequestWithBody generates requests for PostPoolIdIdDownloadEncryptionKey with any type of body
func NewPostPoolIdIdDownloadEncryptionKeyRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/download_encryption_key", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdExportRequest calls the generic PostPoolIdIdExport builder with application/json body
func NewPostPoolIdIdExportRequest(server string, id int, body PostPoolIdIdExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdExportRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdExportRequestWithBody generates requests for PostPoolIdIdExport with any type of body
func NewPostPoolIdIdExportRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/export", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdGetDisksRequest calls the generic PostPoolIdIdGetDisks builder with application/json body
func NewPostPoolIdIdGetDisksRequest(server string, id int, body PostPoolIdIdGetDisksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdGetDisksRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdGetDisksRequestWithBody generates requests for PostPoolIdIdGetDisks with any type of body
func NewPostPoolIdIdGetDisksRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/get_disks", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdIsUpgradedRequest calls the generic PostPoolIdIdIsUpgraded builder with application/json body
func NewPostPoolIdIdIsUpgradedRequest(server string, id int, body PostPoolIdIdIsUpgradedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdIsUpgradedRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdIsUpgradedRequestWithBody generates requests for PostPoolIdIdIsUpgraded with any type of body
func NewPostPoolIdIdIsUpgradedRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/is_upgraded", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdLockRequest calls the generic PostPoolIdIdLock builder with application/json body
func NewPostPoolIdIdLockRequest(server string, id int, body PostPoolIdIdLockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdLockRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdLockRequestWithBody generates requests for PostPoolIdIdLock with any type of body
func NewPostPoolIdIdLockRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/lock", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdOfflineRequest calls the generic PostPoolIdIdOffline builder with application/json body
func NewPostPoolIdIdOfflineRequest(server string, id int, body PostPoolIdIdOfflineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdOfflineRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdOfflineRequestWithBody generates requests for PostPoolIdIdOffline with any type of body
func NewPostPoolIdIdOfflineRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/offline", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdOnlineRequest calls the generic PostPoolIdIdOnline builder with application/json body
func NewPostPoolIdIdOnlineRequest(server string, id int, body PostPoolIdIdOnlineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdOnlineRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdOnlineRequestWithBody generates requests for PostPoolIdIdOnline with any type of body
func NewPostPoolIdIdOnlineRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/online", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdPassphraseRequest calls the generic PostPoolIdIdPassphrase builder with application/json body
func NewPostPoolIdIdPassphraseRequest(server string, id int, body PostPoolIdIdPassphraseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdPassphraseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdPassphraseRequestWithBody generates requests for PostPoolIdIdPassphrase with any type of body
func NewPostPoolIdIdPassphraseRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/passphrase", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdProcessesRequest calls the generic PostPoolIdIdProcesses builder with application/json body
func NewPostPoolIdIdProcessesRequest(server string, id int, body PostPoolIdIdProcessesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdProcessesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdProcessesRequestWithBody generates requests for PostPoolIdIdProcesses with any type of body
func NewPostPoolIdIdProcessesRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/processes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdRecoverykeyRmRequest calls the generic PostPoolIdIdRecoverykeyRm builder with application/json body
func NewPostPoolIdIdRecoverykeyRmRequest(server string, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdRecoverykeyRmRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdRecoverykeyRmRequestWithBody generates requests for PostPoolIdIdRecoverykeyRm with any type of body
func NewPostPoolIdIdRecoverykeyRmRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/recoverykey_rm", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdRekeyRequest calls the generic PostPoolIdIdRekey builder with application/json body
func NewPostPoolIdIdRekeyRequest(server string, id int, body PostPoolIdIdRekeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdRekeyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdRekeyRequestWithBody generates requests for PostPoolIdIdRekey with any type of body
func NewPostPoolIdIdRekeyRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/rekey", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdRemoveRequest calls the generic PostPoolIdIdRemove builder with application/json body
func NewPostPoolIdIdRemoveRequest(server string, id int, body PostPoolIdIdRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdRemoveRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdRemoveRequestWithBody generates requests for PostPoolIdIdRemove with any type of body
func NewPostPoolIdIdRemoveRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/remove", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdReplaceRequest calls the generic PostPoolIdIdReplace builder with application/json body
func NewPostPoolIdIdReplaceRequest(server string, id int, body PostPoolIdIdReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdReplaceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdReplaceRequestWithBody generates requests for PostPoolIdIdReplace with any type of body
func NewPostPoolIdIdReplaceRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/replace", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdScrubRequest calls the generic PostPoolIdIdScrub builder with application/json body
func NewPostPoolIdIdScrubRequest(server string, id int, body PostPoolIdIdScrubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdScrubRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdScrubRequestWithBody generates requests for PostPoolIdIdScrub with any type of body
func NewPostPoolIdIdScrubRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/scrub", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdUnlockRequest calls the generic PostPoolIdIdUnlock builder with application/json body
func NewPostPoolIdIdUnlockRequest(server string, id int, body PostPoolIdIdUnlockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdUnlockRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdUnlockRequestWithBody generates requests for PostPoolIdIdUnlock with any type of body
func NewPostPoolIdIdUnlockRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/unlock", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolIdIdUpgradeRequest calls the generic PostPoolIdIdUpgrade builder with application/json body
func NewPostPoolIdIdUpgradeRequest(server string, id int, body PostPoolIdIdUpgradeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolIdIdUpgradeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolIdIdUpgradeRequestWithBody generates requests for PostPoolIdIdUpgrade with any type of body
func NewPostPoolIdIdUpgradeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/id/%s/upgrade", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolImportDiskRequest calls the generic PostPoolImportDisk builder with application/json body
func NewPostPoolImportDiskRequest(server string, body PostPoolImportDiskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolImportDiskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolImportDiskRequestWithBody generates requests for PostPoolImportDisk with any type of body
func NewPostPoolImportDiskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/import_disk")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolImportDiskAutodetectFsTypeRequest calls the generic PostPoolImportDiskAutodetectFsType builder with application/json body
func NewPostPoolImportDiskAutodetectFsTypeRequest(server string, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolImportDiskAutodetectFsTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolImportDiskAutodetectFsTypeRequestWithBody generates requests for PostPoolImportDiskAutodetectFsType with any type of body
func NewPostPoolImportDiskAutodetectFsTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/import_disk_autodetect_fs_type")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolImportDiskMsdosfsLocalesRequest generates requests for GetPoolImportDiskMsdosfsLocales
func NewGetPoolImportDiskMsdosfsLocalesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/import_disk_msdosfs_locales")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolImportFindRequest generates requests for GetPoolImportFind
func NewGetPoolImportFindRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/import_find")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolImportPoolRequest calls the generic PostPoolImportPool builder with application/json body
func NewPostPoolImportPoolRequest(server string, body PostPoolImportPoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolImportPoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolImportPoolRequestWithBody generates requests for PostPoolImportPool with any type of body
func NewPostPoolImportPoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/import_pool")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolResilverRequest generates requests for GetPoolResilver
func NewGetPoolResilverRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/resilver")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolResilverRequest calls the generic PutPoolResilver builder with application/json body
func NewPutPoolResilverRequest(server string, body PutPoolResilverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolResilverRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPoolResilverRequestWithBody generates requests for PutPoolResilver with any type of body
func NewPutPoolResilverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/resilver")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolScrubRequest generates requests for GetPoolScrub
func NewGetPoolScrubRequest(server string, params *GetPoolScrubParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/scrub")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolScrubRequest calls the generic PostPoolScrub builder with application/json body
func NewPostPoolScrubRequest(server string, body PostPoolScrubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolScrubRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolScrubRequestWithBody generates requests for PostPoolScrub with any type of body
func NewPostPoolScrubRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/scrub")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePoolScrubIdIdRequest generates requests for DeletePoolScrubIdId
func NewDeletePoolScrubIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/scrub/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolScrubIdIdRequest generates requests for GetPoolScrubIdId
func NewGetPoolScrubIdIdRequest(server string, id []interface{}, params *GetPoolScrubIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/scrub/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolScrubIdIdRequest calls the generic PutPoolScrubIdId builder with application/json body
func NewPutPoolScrubIdIdRequest(server string, id int, body PutPoolScrubIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolScrubIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolScrubIdIdRequestWithBody generates requests for PutPoolScrubIdId with any type of body
func NewPutPoolScrubIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/scrub/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolScrubRunRequest calls the generic PostPoolScrubRun builder with application/json body
func NewPostPoolScrubRunRequest(server string, body PostPoolScrubRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolScrubRunRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolScrubRunRequestWithBody generates requests for PostPoolScrubRun with any type of body
func NewPostPoolScrubRunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/scrub/run")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoolSnapshottaskRequest generates requests for GetPoolSnapshottask
func NewGetPoolSnapshottaskRequest(server string, params *GetPoolSnapshottaskParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/snapshottask")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPoolSnapshottaskRequest calls the generic PostPoolSnapshottask builder with application/json body
func NewPostPoolSnapshottaskRequest(server string, body PostPoolSnapshottaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolSnapshottaskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolSnapshottaskRequestWithBody generates requests for PostPoolSnapshottask with any type of body
func NewPostPoolSnapshottaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/snapshottask")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePoolSnapshottaskIdIdRequest generates requests for DeletePoolSnapshottaskIdId
func NewDeletePoolSnapshottaskIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/snapshottask/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoolSnapshottaskIdIdRequest generates requests for GetPoolSnapshottaskIdId
func NewGetPoolSnapshottaskIdIdRequest(server string, id []interface{}, params *GetPoolSnapshottaskIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/snapshottask/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPoolSnapshottaskIdIdRequest calls the generic PutPoolSnapshottaskIdId builder with application/json body
func NewPutPoolSnapshottaskIdIdRequest(server string, id int, body PutPoolSnapshottaskIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPoolSnapshottaskIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPoolSnapshottaskIdIdRequestWithBody generates requests for PutPoolSnapshottaskIdId with any type of body
func NewPutPoolSnapshottaskIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/snapshottask/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolSnapshottaskIdIdRunRequest calls the generic PostPoolSnapshottaskIdIdRun builder with application/json body
func NewPostPoolSnapshottaskIdIdRunRequest(server string, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolSnapshottaskIdIdRunRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostPoolSnapshottaskIdIdRunRequestWithBody generates requests for PostPoolSnapshottaskIdIdRun with any type of body
func NewPostPoolSnapshottaskIdIdRunRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/snapshottask/id/%s/run", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPoolUnlockServicesRestartChoicesRequest calls the generic PostPoolUnlockServicesRestartChoices builder with application/json body
func NewPostPoolUnlockServicesRestartChoicesRequest(server string, body PostPoolUnlockServicesRestartChoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPoolUnlockServicesRestartChoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPoolUnlockServicesRestartChoicesRequestWithBody generates requests for PostPoolUnlockServicesRestartChoices with any type of body
func NewPostPoolUnlockServicesRestartChoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pool/unlock_services_restart_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReplicationRequest generates requests for GetReplication
func NewGetReplicationRequest(server string, params *GetReplicationParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostReplicationRequest calls the generic PostReplication builder with application/json body
func NewPostReplicationRequest(server string, body PostReplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationRequestWithBody generates requests for PostReplication with any type of body
func NewPostReplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationCountEligibleManualSnapshotsRequest calls the generic PostReplicationCountEligibleManualSnapshots builder with application/json body
func NewPostReplicationCountEligibleManualSnapshotsRequest(server string, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationCountEligibleManualSnapshotsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationCountEligibleManualSnapshotsRequestWithBody generates requests for PostReplicationCountEligibleManualSnapshots with any type of body
func NewPostReplicationCountEligibleManualSnapshotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/count_eligible_manual_snapshots")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationCreateDatasetRequest calls the generic PostReplicationCreateDataset builder with application/json body
func NewPostReplicationCreateDatasetRequest(server string, body PostReplicationCreateDatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationCreateDatasetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationCreateDatasetRequestWithBody generates requests for PostReplicationCreateDataset with any type of body
func NewPostReplicationCreateDatasetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/create_dataset")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteReplicationIdIdRequest generates requests for DeleteReplicationIdId
func NewDeleteReplicationIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReplicationIdIdRequest generates requests for GetReplicationIdId
func NewGetReplicationIdIdRequest(server string, id []interface{}, params *GetReplicationIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutReplicationIdIdRequest calls the generic PutReplicationIdId builder with application/json body
func NewPutReplicationIdIdRequest(server string, id int, body PutReplicationIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutReplicationIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutReplicationIdIdRequestWithBody generates requests for PutReplicationIdId with any type of body
func NewPutReplicationIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationIdIdRunRequest calls the generic PostReplicationIdIdRun builder with application/json body
func NewPostReplicationIdIdRunRequest(server string, id int, body PostReplicationIdIdRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationIdIdRunRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostReplicationIdIdRunRequestWithBody generates requests for PostReplicationIdIdRun with any type of body
func NewPostReplicationIdIdRunRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/id/%s/run", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReplicationListDatasetsRequest calls the generic PostReplicationListDatasets builder with application/json body
func NewPostReplicationListDatasetsRequest(server string, body PostReplicationListDatasetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationListDatasetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationListDatasetsRequestWithBody generates requests for PostReplicationListDatasets with any type of body
func NewPostReplicationListDatasetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/list_datasets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReplicationListNamingSchemasRequest generates requests for GetReplicationListNamingSchemas
func NewGetReplicationListNamingSchemasRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/list_naming_schemas")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostReplicationTargetUnmatchedSnapshotsRequest calls the generic PostReplicationTargetUnmatchedSnapshots builder with application/json body
func NewPostReplicationTargetUnmatchedSnapshotsRequest(server string, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReplicationTargetUnmatchedSnapshotsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReplicationTargetUnmatchedSnapshotsRequestWithBody generates requests for PostReplicationTargetUnmatchedSnapshots with any type of body
func NewPostReplicationTargetUnmatchedSnapshotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/replication/target_unmatched_snapshots")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportingRequest generates requests for GetReporting
func NewGetReportingRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reporting")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutReportingRequest calls the generic PutReporting builder with application/json body
func NewPutReportingRequest(server string, body PutReportingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutReportingRequestWithBody(server, "application/json", bodyReader)
}

// NewPutReportingRequestWithBody generates requests for PutReporting with any type of body
func NewPutReportingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reporting")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReportingGetDataRequest calls the generic PostReportingGetData builder with application/json body
func NewPostReportingGetDataRequest(server string, body PostReportingGetDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReportingGetDataRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReportingGetDataRequestWithBody generates requests for PostReportingGetData with any type of body
func NewPostReportingGetDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reporting/get_data")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportingGraphsRequest generates requests for GetReportingGraphs
func NewGetReportingGraphsRequest(server string, params *GetReportingGraphsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reporting/graphs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRouteIpv4gwReachableRequest calls the generic PostRouteIpv4gwReachable builder with application/json body
func NewPostRouteIpv4gwReachableRequest(server string, body PostRouteIpv4gwReachableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRouteIpv4gwReachableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRouteIpv4gwReachableRequestWithBody generates requests for PostRouteIpv4gwReachable with any type of body
func NewPostRouteIpv4gwReachableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/route/ipv4gw_reachable")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRouteSystemRoutesRequest generates requests for GetRouteSystemRoutes
func NewGetRouteSystemRoutesRequest(server string, params *GetRouteSystemRoutesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/route/system_routes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRsyncdRequest generates requests for GetRsyncd
func NewGetRsyncdRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsyncd")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRsyncdRequest calls the generic PutRsyncd builder with application/json body
func NewPutRsyncdRequest(server string, body PutRsyncdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRsyncdRequestWithBody(server, "application/json", bodyReader)
}

// NewPutRsyncdRequestWithBody generates requests for PutRsyncd with any type of body
func NewPutRsyncdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsyncd")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRsyncmodRequest generates requests for GetRsyncmod
func NewGetRsyncmodRequest(server string, params *GetRsyncmodParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsyncmod")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRsyncmodRequest calls the generic PostRsyncmod builder with application/json body
func NewPostRsyncmodRequest(server string, body PostRsyncmodJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRsyncmodRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRsyncmodRequestWithBody generates requests for PostRsyncmod with any type of body
func NewPostRsyncmodRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsyncmod")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRsyncmodIdIdRequest generates requests for DeleteRsyncmodIdId
func NewDeleteRsyncmodIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsyncmod/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRsyncmodIdIdRequest generates requests for GetRsyncmodIdId
func NewGetRsyncmodIdIdRequest(server string, id []interface{}, params *GetRsyncmodIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsyncmod/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRsyncmodIdIdRequest calls the generic PutRsyncmodIdId builder with application/json body
func NewPutRsyncmodIdIdRequest(server string, id int, body PutRsyncmodIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRsyncmodIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutRsyncmodIdIdRequestWithBody generates requests for PutRsyncmodIdId with any type of body
func NewPutRsyncmodIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsyncmod/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRsynctaskRequest generates requests for GetRsynctask
func NewGetRsynctaskRequest(server string, params *GetRsynctaskParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsynctask")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRsynctaskRequest calls the generic PostRsynctask builder with application/json body
func NewPostRsynctaskRequest(server string, body PostRsynctaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRsynctaskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRsynctaskRequestWithBody generates requests for PostRsynctask with any type of body
func NewPostRsynctaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsynctask")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRsynctaskIdIdRequest generates requests for DeleteRsynctaskIdId
func NewDeleteRsynctaskIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsynctask/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRsynctaskIdIdRequest generates requests for GetRsynctaskIdId
func NewGetRsynctaskIdIdRequest(server string, id []interface{}, params *GetRsynctaskIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsynctask/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRsynctaskIdIdRequest calls the generic PutRsynctaskIdId builder with application/json body
func NewPutRsynctaskIdIdRequest(server string, id int, body PutRsynctaskIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRsynctaskIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutRsynctaskIdIdRequestWithBody generates requests for PutRsynctaskIdId with any type of body
func NewPutRsynctaskIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsynctask/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRsynctaskIdIdRunRequest calls the generic PostRsynctaskIdIdRun builder with application/json body
func NewPostRsynctaskIdIdRunRequest(server string, id int, body PostRsynctaskIdIdRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRsynctaskIdIdRunRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostRsynctaskIdIdRunRequestWithBody generates requests for PostRsynctaskIdIdRun with any type of body
func NewPostRsynctaskIdIdRunRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rsynctask/id/%s/run", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetS3Request generates requests for GetS3
func NewGetS3Request(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/s3")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutS3Request calls the generic PutS3 builder with application/json body
func NewPutS3Request(server string, body PutS3JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutS3RequestWithBody(server, "application/json", bodyReader)
}

// NewPutS3RequestWithBody generates requests for PutS3 with any type of body
func NewPutS3RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/s3")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceRequest generates requests for GetService
func NewGetServiceRequest(server string, params *GetServiceParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceIdIdRequest generates requests for GetServiceIdId
func NewGetServiceIdIdRequest(server string, id []interface{}, params *GetServiceIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutServiceIdIdRequest calls the generic PutServiceIdId builder with application/json body
func NewPutServiceIdIdRequest(server string, id string, body PutServiceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutServiceIdIdRequestWithBody generates requests for PutServiceIdId with any type of body
func NewPutServiceIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceReloadRequest calls the generic PostServiceReload builder with application/json body
func NewPostServiceReloadRequest(server string, body PostServiceReloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceReloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceReloadRequestWithBody generates requests for PostServiceReload with any type of body
func NewPostServiceReloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/reload")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceRestartRequest calls the generic PostServiceRestart builder with application/json body
func NewPostServiceRestartRequest(server string, body PostServiceRestartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceRestartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceRestartRequestWithBody generates requests for PostServiceRestart with any type of body
func NewPostServiceRestartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/restart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceStartRequest calls the generic PostServiceStart builder with application/json body
func NewPostServiceStartRequest(server string, body PostServiceStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceStartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceStartRequestWithBody generates requests for PostServiceStart with any type of body
func NewPostServiceStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/start")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceStartedRequest generates requests for GetServiceStarted
func NewGetServiceStartedRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/started")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceStopRequest calls the generic PostServiceStop builder with application/json body
func NewPostServiceStopRequest(server string, body PostServiceStopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceStopRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceStopRequestWithBody generates requests for PostServiceStop with any type of body
func NewPostServiceStopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/stop")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceTerminateProcessRequest calls the generic PostServiceTerminateProcess builder with application/json body
func NewPostServiceTerminateProcessRequest(server string, body PostServiceTerminateProcessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceTerminateProcessRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceTerminateProcessRequestWithBody generates requests for PostServiceTerminateProcess with any type of body
func NewPostServiceTerminateProcessRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/service/terminate_process")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingAfpRequest generates requests for GetSharingAfp
func NewGetSharingAfpRequest(server string, params *GetSharingAfpParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/afp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSharingAfpRequest calls the generic PostSharingAfp builder with application/json body
func NewPostSharingAfpRequest(server string, body PostSharingAfpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharingAfpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharingAfpRequestWithBody generates requests for PostSharingAfp with any type of body
func NewPostSharingAfpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/afp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSharingAfpIdIdRequest generates requests for DeleteSharingAfpIdId
func NewDeleteSharingAfpIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/afp/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingAfpIdIdRequest generates requests for GetSharingAfpIdId
func NewGetSharingAfpIdIdRequest(server string, id []interface{}, params *GetSharingAfpIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/afp/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSharingAfpIdIdRequest calls the generic PutSharingAfpIdId builder with application/json body
func NewPutSharingAfpIdIdRequest(server string, id int, body PutSharingAfpIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSharingAfpIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSharingAfpIdIdRequestWithBody generates requests for PutSharingAfpIdId with any type of body
func NewPutSharingAfpIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/afp/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingNfsRequest generates requests for GetSharingNfs
func NewGetSharingNfsRequest(server string, params *GetSharingNfsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/nfs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSharingNfsRequest calls the generic PostSharingNfs builder with application/json body
func NewPostSharingNfsRequest(server string, body PostSharingNfsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharingNfsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharingNfsRequestWithBody generates requests for PostSharingNfs with any type of body
func NewPostSharingNfsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/nfs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSharingNfsIdIdRequest generates requests for DeleteSharingNfsIdId
func NewDeleteSharingNfsIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/nfs/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingNfsIdIdRequest generates requests for GetSharingNfsIdId
func NewGetSharingNfsIdIdRequest(server string, id []interface{}, params *GetSharingNfsIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/nfs/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSharingNfsIdIdRequest calls the generic PutSharingNfsIdId builder with application/json body
func NewPutSharingNfsIdIdRequest(server string, id int, body PutSharingNfsIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSharingNfsIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSharingNfsIdIdRequestWithBody generates requests for PutSharingNfsIdId with any type of body
func NewPutSharingNfsIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/nfs/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingSmbRequest generates requests for GetSharingSmb
func NewGetSharingSmbRequest(server string, params *GetSharingSmbParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/smb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSharingSmbRequest calls the generic PostSharingSmb builder with application/json body
func NewPostSharingSmbRequest(server string, body PostSharingSmbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharingSmbRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharingSmbRequestWithBody generates requests for PostSharingSmb with any type of body
func NewPostSharingSmbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/smb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSharingSmbIdIdRequest generates requests for DeleteSharingSmbIdId
func NewDeleteSharingSmbIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/smb/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingSmbIdIdRequest generates requests for GetSharingSmbIdId
func NewGetSharingSmbIdIdRequest(server string, id []interface{}, params *GetSharingSmbIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/smb/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSharingSmbIdIdRequest calls the generic PutSharingSmbIdId builder with application/json body
func NewPutSharingSmbIdIdRequest(server string, id int, body PutSharingSmbIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSharingSmbIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSharingSmbIdIdRequestWithBody generates requests for PutSharingSmbIdId with any type of body
func NewPutSharingSmbIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/smb/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharingSmbVfsobjectsChoicesRequest generates requests for GetSharingSmbVfsobjectsChoices
func NewGetSharingSmbVfsobjectsChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/smb/vfsobjects_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingWebdavRequest generates requests for GetSharingWebdav
func NewGetSharingWebdavRequest(server string, params *GetSharingWebdavParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/webdav")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSharingWebdavRequest calls the generic PostSharingWebdav builder with application/json body
func NewPostSharingWebdavRequest(server string, body PostSharingWebdavJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharingWebdavRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharingWebdavRequestWithBody generates requests for PostSharingWebdav with any type of body
func NewPostSharingWebdavRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/webdav")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSharingWebdavIdIdRequest generates requests for DeleteSharingWebdavIdId
func NewDeleteSharingWebdavIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/webdav/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharingWebdavIdIdRequest generates requests for GetSharingWebdavIdId
func NewGetSharingWebdavIdIdRequest(server string, id []interface{}, params *GetSharingWebdavIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/webdav/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSharingWebdavIdIdRequest calls the generic PutSharingWebdavIdId builder with application/json body
func NewPutSharingWebdavIdIdRequest(server string, id int, body PutSharingWebdavIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSharingWebdavIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSharingWebdavIdIdRequestWithBody generates requests for PutSharingWebdavIdId with any type of body
func NewPutSharingWebdavIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sharing/webdav/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmartRequest generates requests for GetSmart
func NewGetSmartRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmartRequest calls the generic PutSmart builder with application/json body
func NewPutSmartRequest(server string, body PutSmartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSmartRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSmartRequestWithBody generates requests for PutSmart with any type of body
func NewPutSmartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmartTestRequest generates requests for GetSmartTest
func NewGetSmartTestRequest(server string, params *GetSmartTestParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smart/test")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSmartTestRequest calls the generic PostSmartTest builder with application/json body
func NewPostSmartTestRequest(server string, body PostSmartTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmartTestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmartTestRequestWithBody generates requests for PostSmartTest with any type of body
func NewPostSmartTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smart/test")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSmartTestIdIdRequest generates requests for DeleteSmartTestIdId
func NewDeleteSmartTestIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smart/test/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmartTestIdIdRequest generates requests for GetSmartTestIdId
func NewGetSmartTestIdIdRequest(server string, id []interface{}, params *GetSmartTestIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smart/test/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmartTestIdIdRequest calls the generic PutSmartTestIdId builder with application/json body
func NewPutSmartTestIdIdRequest(server string, id int, body PutSmartTestIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSmartTestIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSmartTestIdIdRequestWithBody generates requests for PutSmartTestIdId with any type of body
func NewPutSmartTestIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smart/test/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmartTestResultsRequest generates requests for GetSmartTestResults
func NewGetSmartTestResultsRequest(server string, params *GetSmartTestResultsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smart/test/results")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmbRequest generates requests for GetSmb
func NewGetSmbRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmbRequest calls the generic PutSmb builder with application/json body
func NewPutSmbRequest(server string, body PutSmbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSmbRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSmbRequestWithBody generates requests for PutSmb with any type of body
func NewPutSmbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmbBindipChoicesRequest generates requests for GetSmbBindipChoices
func NewGetSmbBindipChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/bindip_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmbDomainChoicesRequest generates requests for GetSmbDomainChoices
func NewGetSmbDomainChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/domain_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmbSharesecRequest generates requests for GetSmbSharesec
func NewGetSmbSharesecRequest(server string, params *GetSmbSharesecParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/sharesec")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSmbSharesecRequest calls the generic PostSmbSharesec builder with application/json body
func NewPostSmbSharesecRequest(server string, body PostSmbSharesecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmbSharesecRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmbSharesecRequestWithBody generates requests for PostSmbSharesec with any type of body
func NewPostSmbSharesecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/sharesec")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSmbSharesecGetaclRequest calls the generic PostSmbSharesecGetacl builder with application/json body
func NewPostSmbSharesecGetaclRequest(server string, body PostSmbSharesecGetaclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSmbSharesecGetaclRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSmbSharesecGetaclRequestWithBody generates requests for PostSmbSharesecGetacl with any type of body
func NewPostSmbSharesecGetaclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/sharesec/getacl")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSmbSharesecIdIdRequest generates requests for DeleteSmbSharesecIdId
func NewDeleteSmbSharesecIdIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/sharesec/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmbSharesecIdIdRequest generates requests for GetSmbSharesecIdId
func NewGetSmbSharesecIdIdRequest(server string, id []interface{}, params *GetSmbSharesecIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/sharesec/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSmbSharesecIdIdRequest calls the generic PutSmbSharesecIdId builder with application/json body
func NewPutSmbSharesecIdIdRequest(server string, id int, body PutSmbSharesecIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSmbSharesecIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSmbSharesecIdIdRequestWithBody generates requests for PutSmbSharesecIdId with any type of body
func NewPutSmbSharesecIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/sharesec/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSmbSharesecSynchronizeAclsRequest generates requests for GetSmbSharesecSynchronizeAcls
func NewGetSmbSharesecSynchronizeAclsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/sharesec/synchronize_acls")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmbUnixcharsetChoicesRequest generates requests for GetSmbUnixcharsetChoices
func NewGetSmbUnixcharsetChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/smb/unixcharset_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnmpRequest generates requests for GetSnmp
func NewGetSnmpRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/snmp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSnmpRequest calls the generic PutSnmp builder with application/json body
func NewPutSnmpRequest(server string, body PutSnmpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSnmpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSnmpRequestWithBody generates requests for PutSnmp with any type of body
func NewPutSnmpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/snmp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSshRequest generates requests for GetSsh
func NewGetSshRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ssh")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSshRequest calls the generic PutSsh builder with application/json body
func NewPutSshRequest(server string, body PutSshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSshRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSshRequestWithBody generates requests for PutSsh with any type of body
func NewPutSshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ssh")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSshBindifaceChoicesRequest generates requests for GetSshBindifaceChoices
func NewGetSshBindifaceChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ssh/bindiface_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaticrouteRequest generates requests for GetStaticroute
func NewGetStaticrouteRequest(server string, params *GetStaticrouteParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/staticroute")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStaticrouteRequest calls the generic PostStaticroute builder with application/json body
func NewPostStaticrouteRequest(server string, body PostStaticrouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStaticrouteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStaticrouteRequestWithBody generates requests for PostStaticroute with any type of body
func NewPostStaticrouteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/staticroute")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStaticrouteIdIdRequest generates requests for DeleteStaticrouteIdId
func NewDeleteStaticrouteIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/staticroute/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaticrouteIdIdRequest generates requests for GetStaticrouteIdId
func NewGetStaticrouteIdIdRequest(server string, id []interface{}, params *GetStaticrouteIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/staticroute/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutStaticrouteIdIdRequest calls the generic PutStaticrouteIdId builder with application/json body
func NewPutStaticrouteIdIdRequest(server string, id int, body PutStaticrouteIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStaticrouteIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutStaticrouteIdIdRequestWithBody generates requests for PutStaticrouteIdId with any type of body
func NewPutStaticrouteIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/staticroute/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStatsGetDataRequest calls the generic PostStatsGetData builder with application/json body
func NewPostStatsGetDataRequest(server string, body PostStatsGetDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStatsGetDataRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStatsGetDataRequestWithBody generates requests for PostStatsGetData with any type of body
func NewPostStatsGetDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stats/get_data")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStatsGetDatasetInfoRequest calls the generic PostStatsGetDatasetInfo builder with application/json body
func NewPostStatsGetDatasetInfoRequest(server string, body PostStatsGetDatasetInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStatsGetDatasetInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStatsGetDatasetInfoRequestWithBody generates requests for PostStatsGetDatasetInfo with any type of body
func NewPostStatsGetDatasetInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stats/get_dataset_info")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatsGetSourcesRequest generates requests for GetStatsGetSources
func NewGetStatsGetSourcesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stats/get_sources")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportRequest generates requests for GetSupport
func NewGetSupportRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/support")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSupportRequest calls the generic PutSupport builder with application/json body
func NewPutSupportRequest(server string, body PutSupportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSupportRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSupportRequestWithBody generates requests for PutSupport with any type of body
func NewPutSupportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/support")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSupportFetchCategoriesRequest calls the generic PostSupportFetchCategories builder with application/json body
func NewPostSupportFetchCategoriesRequest(server string, body PostSupportFetchCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSupportFetchCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSupportFetchCategoriesRequestWithBody generates requests for PostSupportFetchCategories with any type of body
func NewPostSupportFetchCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/support/fetch_categories")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSupportFieldsRequest generates requests for GetSupportFields
func NewGetSupportFieldsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/support/fields")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportIsAvailableRequest generates requests for GetSupportIsAvailable
func NewGetSupportIsAvailableRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/support/is_available")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportIsAvailableAndEnabledRequest generates requests for GetSupportIsAvailableAndEnabled
func NewGetSupportIsAvailableAndEnabledRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/support/is_available_and_enabled")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSupportNewTicketRequest calls the generic PostSupportNewTicket builder with application/json body
func NewPostSupportNewTicketRequest(server string, body PostSupportNewTicketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSupportNewTicketRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSupportNewTicketRequestWithBody generates requests for PostSupportNewTicket with any type of body
func NewPostSupportNewTicketRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/support/new_ticket")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemAdvancedRequest generates requests for GetSystemAdvanced
func NewGetSystemAdvancedRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/advanced")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemAdvancedRequest calls the generic PutSystemAdvanced builder with application/json body
func NewPutSystemAdvancedRequest(server string, body PutSystemAdvancedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemAdvancedRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemAdvancedRequestWithBody generates requests for PutSystemAdvanced with any type of body
func NewPutSystemAdvancedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/advanced")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemAdvancedSerialPortChoicesRequest generates requests for GetSystemAdvancedSerialPortChoices
func NewGetSystemAdvancedSerialPortChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/advanced/serial_port_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemBootIdRequest generates requests for GetSystemBootId
func NewGetSystemBootIdRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/boot_id")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemFeatureEnabledRequest calls the generic PostSystemFeatureEnabled builder with application/json body
func NewPostSystemFeatureEnabledRequest(server string, body PostSystemFeatureEnabledJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemFeatureEnabledRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemFeatureEnabledRequestWithBody generates requests for PostSystemFeatureEnabled with any type of body
func NewPostSystemFeatureEnabledRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/feature_enabled")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemGeneralRequest generates requests for GetSystemGeneral
func NewGetSystemGeneralRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemGeneralRequest calls the generic PutSystemGeneral builder with application/json body
func NewPutSystemGeneralRequest(server string, body PutSystemGeneralJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemGeneralRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemGeneralRequestWithBody generates requests for PutSystemGeneral with any type of body
func NewPutSystemGeneralRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemGeneralCountryChoicesRequest generates requests for GetSystemGeneralCountryChoices
func NewGetSystemGeneralCountryChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/country_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralKbdmapChoicesRequest generates requests for GetSystemGeneralKbdmapChoices
func NewGetSystemGeneralKbdmapChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/kbdmap_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralLanguageChoicesRequest generates requests for GetSystemGeneralLanguageChoices
func NewGetSystemGeneralLanguageChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/language_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralLocalUrlRequest generates requests for GetSystemGeneralLocalUrl
func NewGetSystemGeneralLocalUrlRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/local_url")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralTimezoneChoicesRequest generates requests for GetSystemGeneralTimezoneChoices
func NewGetSystemGeneralTimezoneChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/timezone_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralUiAddressChoicesRequest generates requests for GetSystemGeneralUiAddressChoices
func NewGetSystemGeneralUiAddressChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/ui_address_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralUiCertificateChoicesRequest generates requests for GetSystemGeneralUiCertificateChoices
func NewGetSystemGeneralUiCertificateChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/ui_certificate_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralUiRestartRequest generates requests for GetSystemGeneralUiRestart
func NewGetSystemGeneralUiRestartRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/ui_restart")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemGeneralUiV6addressChoicesRequest generates requests for GetSystemGeneralUiV6addressChoices
func NewGetSystemGeneralUiV6addressChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/general/ui_v6address_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemInfoRequest generates requests for GetSystemInfo
func NewGetSystemInfoRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/info")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemIsFreenasRequest generates requests for GetSystemIsFreenas
func NewGetSystemIsFreenasRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/is_freenas")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemLegacyUiEnabledRequest generates requests for GetSystemLegacyUiEnabled
func NewGetSystemLegacyUiEnabledRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/legacy_ui_enabled")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemLicenseUpdateRequest calls the generic PostSystemLicenseUpdate builder with application/json body
func NewPostSystemLicenseUpdateRequest(server string, body PostSystemLicenseUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemLicenseUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemLicenseUpdateRequestWithBody generates requests for PostSystemLicenseUpdate with any type of body
func NewPostSystemLicenseUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/license_update")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemNtpserverRequest generates requests for GetSystemNtpserver
func NewGetSystemNtpserverRequest(server string, params *GetSystemNtpserverParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/ntpserver")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemNtpserverRequest calls the generic PostSystemNtpserver builder with application/json body
func NewPostSystemNtpserverRequest(server string, body PostSystemNtpserverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemNtpserverRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemNtpserverRequestWithBody generates requests for PostSystemNtpserver with any type of body
func NewPostSystemNtpserverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/ntpserver")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSystemNtpserverIdIdRequest generates requests for DeleteSystemNtpserverIdId
func NewDeleteSystemNtpserverIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/ntpserver/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemNtpserverIdIdRequest generates requests for GetSystemNtpserverIdId
func NewGetSystemNtpserverIdIdRequest(server string, id []interface{}, params *GetSystemNtpserverIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/ntpserver/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemNtpserverIdIdRequest calls the generic PutSystemNtpserverIdId builder with application/json body
func NewPutSystemNtpserverIdIdRequest(server string, id int, body PutSystemNtpserverIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemNtpserverIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSystemNtpserverIdIdRequestWithBody generates requests for PutSystemNtpserverIdId with any type of body
func NewPutSystemNtpserverIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/ntpserver/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemNtpserverTestNtpServerRequest generates requests for GetSystemNtpserverTestNtpServer
func NewGetSystemNtpserverTestNtpServerRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/ntpserver/test_ntp_server")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemProductNameRequest generates requests for GetSystemProductName
func NewGetSystemProductNameRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/product_name")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemReadyRequest generates requests for GetSystemReady
func NewGetSystemReadyRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/ready")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemRebootRequest calls the generic PostSystemReboot builder with application/json body
func NewPostSystemRebootRequest(server string, body PostSystemRebootJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemRebootRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemRebootRequestWithBody generates requests for PostSystemReboot with any type of body
func NewPostSystemRebootRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/reboot")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSystemShutdownRequest calls the generic PostSystemShutdown builder with application/json body
func NewPostSystemShutdownRequest(server string, body PostSystemShutdownJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemShutdownRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemShutdownRequestWithBody generates requests for PostSystemShutdown with any type of body
func NewPostSystemShutdownRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/shutdown")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemStateRequest generates requests for GetSystemState
func NewGetSystemStateRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/state")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemVersionRequest generates requests for GetSystemVersion
func NewGetSystemVersionRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system/version")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemdatasetRequest generates requests for GetSystemdataset
func NewGetSystemdatasetRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systemdataset")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSystemdatasetRequest calls the generic PutSystemdataset builder with application/json body
func NewPutSystemdatasetRequest(server string, body PutSystemdatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSystemdatasetRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSystemdatasetRequestWithBody generates requests for PutSystemdataset with any type of body
func NewPutSystemdatasetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systemdataset")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTftpRequest generates requests for GetTftp
func NewGetTftpRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tftp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTftpRequest calls the generic PutTftp builder with application/json body
func NewPutTftpRequest(server string, body PutTftpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTftpRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTftpRequestWithBody generates requests for PutTftp with any type of body
func NewPutTftpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tftp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTunableRequest generates requests for GetTunable
func NewGetTunableRequest(server string, params *GetTunableParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tunable")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTunableRequest calls the generic PostTunable builder with application/json body
func NewPostTunableRequest(server string, body PostTunableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTunableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTunableRequestWithBody generates requests for PostTunable with any type of body
func NewPostTunableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tunable")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTunableIdIdRequest generates requests for DeleteTunableIdId
func NewDeleteTunableIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tunable/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTunableIdIdRequest generates requests for GetTunableIdId
func NewGetTunableIdIdRequest(server string, id []interface{}, params *GetTunableIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tunable/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTunableIdIdRequest calls the generic PutTunableIdId builder with application/json body
func NewPutTunableIdIdRequest(server string, id int, body PutTunableIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTunableIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTunableIdIdRequestWithBody generates requests for PutTunableIdId with any type of body
func NewPutTunableIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tunable/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUpdateCheckAvailableRequest calls the generic PostUpdateCheckAvailable builder with application/json body
func NewPostUpdateCheckAvailableRequest(server string, body PostUpdateCheckAvailableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateCheckAvailableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateCheckAvailableRequestWithBody generates requests for PostUpdateCheckAvailable with any type of body
func NewPostUpdateCheckAvailableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/update/check_available")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUpdateDownloadRequest generates requests for GetUpdateDownload
func NewGetUpdateDownloadRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/update/download")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUpdateGetPendingRequest calls the generic PostUpdateGetPending builder with application/json body
func NewPostUpdateGetPendingRequest(server string, body PostUpdateGetPendingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateGetPendingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateGetPendingRequestWithBody generates requests for PostUpdateGetPending with any type of body
func NewPostUpdateGetPendingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/update/get_pending")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUpdateGetTrainsRequest generates requests for GetUpdateGetTrains
func NewGetUpdateGetTrainsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/update/get_trains")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUpdateManualRequest calls the generic PostUpdateManual builder with application/json body
func NewPostUpdateManualRequest(server string, body PostUpdateManualJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateManualRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateManualRequestWithBody generates requests for PostUpdateManual with any type of body
func NewPostUpdateManualRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/update/manual")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUpdateSetTrainRequest calls the generic PostUpdateSetTrain builder with application/json body
func NewPostUpdateSetTrainRequest(server string, body PostUpdateSetTrainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateSetTrainRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateSetTrainRequestWithBody generates requests for PostUpdateSetTrain with any type of body
func NewPostUpdateSetTrainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/update/set_train")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUpdateUpdateRequest calls the generic PostUpdateUpdate builder with application/json body
func NewPostUpdateUpdateRequest(server string, body PostUpdateUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateUpdateRequestWithBody generates requests for PostUpdateUpdate with any type of body
func NewPostUpdateUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/update/update")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUpsRequest generates requests for GetUps
func NewGetUpsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUpsRequest calls the generic PutUps builder with application/json body
func NewPutUpsRequest(server string, body PutUpsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUpsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutUpsRequestWithBody generates requests for PutUps with any type of body
func NewPutUpsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUpsDriverChoicesRequest generates requests for GetUpsDriverChoices
func NewGetUpsDriverChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ups/driver_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUpsPortChoicesRequest generates requests for GetUpsPortChoices
func NewGetUpsPortChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ups/port_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRequest calls the generic PostUser builder with application/json body
func NewPostUserRequest(server string, body PostUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserRequestWithBody generates requests for PostUser with any type of body
func NewPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserGetNextUidRequest generates requests for GetUserGetNextUid
func NewGetUserGetNextUidRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/get_next_uid")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserGetUserObjRequest calls the generic PostUserGetUserObj builder with application/json body
func NewPostUserGetUserObjRequest(server string, body PostUserGetUserObjJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserGetUserObjRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserGetUserObjRequestWithBody generates requests for PostUserGetUserObj with any type of body
func NewPostUserGetUserObjRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/get_user_obj")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserHasRootPasswordRequest generates requests for GetUserHasRootPassword
func NewGetUserHasRootPasswordRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/has_root_password")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserIdIdRequest calls the generic DeleteUserIdId builder with application/json body
func NewDeleteUserIdIdRequest(server string, id int, body DeleteUserIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteUserIdIdRequestWithBody generates requests for DeleteUserIdId with any type of body
func NewDeleteUserIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserIdIdRequest generates requests for GetUserIdId
func NewGetUserIdIdRequest(server string, id []interface{}, params *GetUserIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserIdIdRequest calls the generic PutUserIdId builder with application/json body
func NewPutUserIdIdRequest(server string, id int, body PutUserIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutUserIdIdRequestWithBody generates requests for PutUserIdId with any type of body
func NewPutUserIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserIdIdPopAttributeRequest calls the generic PostUserIdIdPopAttribute builder with application/json body
func NewPostUserIdIdPopAttributeRequest(server string, id int, body PostUserIdIdPopAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserIdIdPopAttributeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostUserIdIdPopAttributeRequestWithBody generates requests for PostUserIdIdPopAttribute with any type of body
func NewPostUserIdIdPopAttributeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/id/%s/pop_attribute", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserIdIdSetAttributeRequest calls the generic PostUserIdIdSetAttribute builder with application/json body
func NewPostUserIdIdSetAttributeRequest(server string, id int, body PostUserIdIdSetAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserIdIdSetAttributeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostUserIdIdSetAttributeRequestWithBody generates requests for PostUserIdIdSetAttribute with any type of body
func NewPostUserIdIdSetAttributeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/id/%s/set_attribute", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserShellChoicesRequest generates requests for GetUserShellChoices
func NewGetUserShellChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/user/shell_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmRequest generates requests for GetVm
func NewGetVmRequest(server string, params *GetVmParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmRequest calls the generic PostVm builder with application/json body
func NewPostVmRequest(server string, body PostVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmRequestWithBody generates requests for PostVm with any type of body
func NewPostVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmDeviceRequest generates requests for GetVmDevice
func NewGetVmDeviceRequest(server string, params *GetVmDeviceParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/device")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmDeviceRequest calls the generic PostVmDevice builder with application/json body
func NewPostVmDeviceRequest(server string, body PostVmDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmDeviceRequestWithBody generates requests for PostVmDevice with any type of body
func NewPostVmDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/device")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmDeviceIdIdRequest calls the generic DeleteVmDeviceIdId builder with application/json body
func NewDeleteVmDeviceIdIdRequest(server string, id int, body DeleteVmDeviceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteVmDeviceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteVmDeviceIdIdRequestWithBody generates requests for DeleteVmDeviceIdId with any type of body
func NewDeleteVmDeviceIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/device/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmDeviceIdIdRequest generates requests for GetVmDeviceIdId
func NewGetVmDeviceIdIdRequest(server string, id []interface{}, params *GetVmDeviceIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/device/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmDeviceIdIdRequest calls the generic PutVmDeviceIdId builder with application/json body
func NewPutVmDeviceIdIdRequest(server string, id int, body PutVmDeviceIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmDeviceIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutVmDeviceIdIdRequestWithBody generates requests for PutVmDeviceIdId with any type of body
func NewPutVmDeviceIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/device/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmDeviceNicAttachChoicesRequest generates requests for GetVmDeviceNicAttachChoices
func NewGetVmDeviceNicAttachChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/device/nic_attach_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmDeviceVncBindChoicesRequest generates requests for GetVmDeviceVncBindChoices
func NewGetVmDeviceVncBindChoicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/device/vnc_bind_choices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmFlagsRequest generates requests for GetVmFlags
func NewGetVmFlagsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/flags")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmGetAttachedIfaceRequest calls the generic PostVmGetAttachedIface builder with application/json body
func NewPostVmGetAttachedIfaceRequest(server string, body PostVmGetAttachedIfaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmGetAttachedIfaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmGetAttachedIfaceRequestWithBody generates requests for PostVmGetAttachedIface with any type of body
func NewPostVmGetAttachedIfaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/get_attached_iface")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmGetAvailableMemoryRequest calls the generic PostVmGetAvailableMemory builder with application/json body
func NewPostVmGetAvailableMemoryRequest(server string, body PostVmGetAvailableMemoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmGetAvailableMemoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmGetAvailableMemoryRequestWithBody generates requests for PostVmGetAvailableMemory with any type of body
func NewPostVmGetAvailableMemoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/get_available_memory")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmGetConsoleRequest calls the generic PostVmGetConsole builder with application/json body
func NewPostVmGetConsoleRequest(server string, body PostVmGetConsoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmGetConsoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmGetConsoleRequestWithBody generates requests for PostVmGetConsole with any type of body
func NewPostVmGetConsoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/get_console")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmGetVmemoryInUseRequest generates requests for GetVmGetVmemoryInUse
func NewGetVmGetVmemoryInUseRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/get_vmemory_in_use")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmGetVncRequest calls the generic PostVmGetVnc builder with application/json body
func NewPostVmGetVncRequest(server string, body PostVmGetVncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmGetVncRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmGetVncRequestWithBody generates requests for PostVmGetVnc with any type of body
func NewPostVmGetVncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/get_vnc")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmGetVncIpv4Request generates requests for GetVmGetVncIpv4
func NewGetVmGetVncIpv4Request(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/get_vnc_ipv4")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteVmIdIdRequest generates requests for DeleteVmIdId
func NewDeleteVmIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmIdIdRequest generates requests for GetVmIdId
func NewGetVmIdIdRequest(server string, id []interface{}, params *GetVmIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmIdIdRequest calls the generic PutVmIdId builder with application/json body
func NewPutVmIdIdRequest(server string, id int, body PutVmIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutVmIdIdRequestWithBody generates requests for PutVmIdId with any type of body
func NewPutVmIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdCloneRequest calls the generic PostVmIdIdClone builder with application/json body
func NewPostVmIdIdCloneRequest(server string, id int, body PostVmIdIdCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdCloneRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdCloneRequestWithBody generates requests for PostVmIdIdClone with any type of body
func NewPostVmIdIdCloneRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/id/%s/clone", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdRestartRequest calls the generic PostVmIdIdRestart builder with application/json body
func NewPostVmIdIdRestartRequest(server string, id int, body PostVmIdIdRestartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdRestartRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdRestartRequestWithBody generates requests for PostVmIdIdRestart with any type of body
func NewPostVmIdIdRestartRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/id/%s/restart", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdStartRequest calls the generic PostVmIdIdStart builder with application/json body
func NewPostVmIdIdStartRequest(server string, id int, body PostVmIdIdStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdStartRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdStartRequestWithBody generates requests for PostVmIdIdStart with any type of body
func NewPostVmIdIdStartRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/id/%s/start", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdStatusRequest calls the generic PostVmIdIdStatus builder with application/json body
func NewPostVmIdIdStatusRequest(server string, id int, body PostVmIdIdStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdStatusRequestWithBody generates requests for PostVmIdIdStatus with any type of body
func NewPostVmIdIdStatusRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/id/%s/status", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmIdIdStopRequest calls the generic PostVmIdIdStop builder with application/json body
func NewPostVmIdIdStopRequest(server string, id int, body PostVmIdIdStopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmIdIdStopRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVmIdIdStopRequestWithBody generates requests for PostVmIdIdStop with any type of body
func NewPostVmIdIdStopRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/id/%s/stop", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVmIdentifyHypervisorRequest generates requests for GetVmIdentifyHypervisor
func NewGetVmIdentifyHypervisorRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/identify_hypervisor")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmRandomMacRequest generates requests for GetVmRandomMac
func NewGetVmRandomMacRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/random_mac")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmVncPortWizardRequest generates requests for GetVmVncPortWizard
func NewGetVmVncPortWizardRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vm/vnc_port_wizard")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmwareRequest generates requests for GetVmware
func NewGetVmwareRequest(server string, params *GetVmwareParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVmwareRequest calls the generic PostVmware builder with application/json body
func NewPostVmwareRequest(server string, body PostVmwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareRequestWithBody generates requests for PostVmware with any type of body
func NewPostVmwareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmwareDatasetHasVmsRequest calls the generic PostVmwareDatasetHasVms builder with application/json body
func NewPostVmwareDatasetHasVmsRequest(server string, body PostVmwareDatasetHasVmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareDatasetHasVmsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareDatasetHasVmsRequestWithBody generates requests for PostVmwareDatasetHasVms with any type of body
func NewPostVmwareDatasetHasVmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware/dataset_has_vms")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmwareGetDatastoresRequest calls the generic PostVmwareGetDatastores builder with application/json body
func NewPostVmwareGetDatastoresRequest(server string, body PostVmwareGetDatastoresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareGetDatastoresRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareGetDatastoresRequestWithBody generates requests for PostVmwareGetDatastores with any type of body
func NewPostVmwareGetDatastoresRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware/get_datastores")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmwareGetVirtualMachinesRequest calls the generic PostVmwareGetVirtualMachines builder with application/json body
func NewPostVmwareGetVirtualMachinesRequest(server string, body PostVmwareGetVirtualMachinesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareGetVirtualMachinesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareGetVirtualMachinesRequestWithBody generates requests for PostVmwareGetVirtualMachines with any type of body
func NewPostVmwareGetVirtualMachinesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware/get_virtual_machines")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmwareIdIdRequest generates requests for DeleteVmwareIdId
func NewDeleteVmwareIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmwareIdIdRequest generates requests for GetVmwareIdId
func NewGetVmwareIdIdRequest(server string, id []interface{}, params *GetVmwareIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVmwareIdIdRequest calls the generic PutVmwareIdId builder with application/json body
func NewPutVmwareIdIdRequest(server string, id int, body PutVmwareIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVmwareIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutVmwareIdIdRequestWithBody generates requests for PutVmwareIdId with any type of body
func NewPutVmwareIdIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVmwareMatchDatastoresWithDatasetsRequest calls the generic PostVmwareMatchDatastoresWithDatasets builder with application/json body
func NewPostVmwareMatchDatastoresWithDatasetsRequest(server string, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVmwareMatchDatastoresWithDatasetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVmwareMatchDatastoresWithDatasetsRequestWithBody generates requests for PostVmwareMatchDatastoresWithDatasets with any type of body
func NewPostVmwareMatchDatastoresWithDatasetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vmware/match_datastores_with_datasets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWebdavRequest generates requests for GetWebdav
func NewGetWebdavRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webdav")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWebdavRequest calls the generic PutWebdav builder with application/json body
func NewPutWebdavRequest(server string, body PutWebdavJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWebdavRequestWithBody(server, "application/json", bodyReader)
}

// NewPutWebdavRequestWithBody generates requests for PutWebdav with any type of body
func NewPutWebdavRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webdav")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWebuiImageRequest generates requests for GetWebuiImage
func NewGetWebuiImageRequest(server string, params *GetWebuiImageParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webui/image")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWebuiImageIdIdRequest generates requests for DeleteWebuiImageIdId
func NewDeleteWebuiImageIdIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webui/image/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebuiImageIdIdRequest generates requests for GetWebuiImageIdId
func NewGetWebuiImageIdIdRequest(server string, id []interface{}, params *GetWebuiImageIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webui/image/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZfsSnapshotRequest generates requests for GetZfsSnapshot
func NewGetZfsSnapshotRequest(server string, params *GetZfsSnapshotParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/zfs/snapshot")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostZfsSnapshotRequest calls the generic PostZfsSnapshot builder with application/json body
func NewPostZfsSnapshotRequest(server string, body PostZfsSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZfsSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewPostZfsSnapshotRequestWithBody generates requests for PostZfsSnapshot with any type of body
func NewPostZfsSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/zfs/snapshot")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostZfsSnapshotCloneRequest calls the generic PostZfsSnapshotClone builder with application/json body
func NewPostZfsSnapshotCloneRequest(server string, body PostZfsSnapshotCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZfsSnapshotCloneRequestWithBody(server, "application/json", bodyReader)
}

// NewPostZfsSnapshotCloneRequestWithBody generates requests for PostZfsSnapshotClone with any type of body
func NewPostZfsSnapshotCloneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/zfs/snapshot/clone")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteZfsSnapshotIdIdRequest calls the generic DeleteZfsSnapshotIdId builder with application/json body
func NewDeleteZfsSnapshotIdIdRequest(server string, id string, body DeleteZfsSnapshotIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteZfsSnapshotIdIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteZfsSnapshotIdIdRequestWithBody generates requests for DeleteZfsSnapshotIdId with any type of body
func NewDeleteZfsSnapshotIdIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/zfs/snapshot/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZfsSnapshotIdIdRequest generates requests for GetZfsSnapshotIdId
func NewGetZfsSnapshotIdIdRequest(server string, id []interface{}, params *GetZfsSnapshotIdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/zfs/snapshot/id/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostZfsSnapshotRemoveRequest calls the generic PostZfsSnapshotRemove builder with application/json body
func NewPostZfsSnapshotRemoveRequest(server string, body PostZfsSnapshotRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZfsSnapshotRemoveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostZfsSnapshotRemoveRequestWithBody generates requests for PostZfsSnapshotRemove with any type of body
func NewPostZfsSnapshotRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/zfs/snapshot/remove")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostZfsSnapshotRollbackRequest calls the generic PostZfsSnapshotRollback builder with application/json body
func NewPostZfsSnapshotRollbackRequest(server string, body PostZfsSnapshotRollbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZfsSnapshotRollbackRequestWithBody(server, "application/json", bodyReader)
}

// NewPostZfsSnapshotRollbackRequestWithBody generates requests for PostZfsSnapshotRollback with any type of body
func NewPostZfsSnapshotRollbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/zfs/snapshot/rollback")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	// req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAcmeDnsAuthenticator request
	GetAcmeDnsAuthenticatorWithResponse(ctx context.Context, params *GetAcmeDnsAuthenticatorParams) (*GetAcmeDnsAuthenticatorResponse, error)

	// PostAcmeDnsAuthenticator request  with any body
	PostAcmeDnsAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAcmeDnsAuthenticatorResponse, error)

	PostAcmeDnsAuthenticatorWithResponse(ctx context.Context, body PostAcmeDnsAuthenticatorJSONRequestBody) (*PostAcmeDnsAuthenticatorResponse, error)

	// GetAcmeDnsAuthenticatorAuthenticatorSchemas request
	GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse(ctx context.Context) (*GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse, error)

	// DeleteAcmeDnsAuthenticatorIdId request
	DeleteAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int) (*DeleteAcmeDnsAuthenticatorIdIdResponse, error)

	// GetAcmeDnsAuthenticatorIdId request
	GetAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id []interface{}, params *GetAcmeDnsAuthenticatorIdIdParams) (*GetAcmeDnsAuthenticatorIdIdResponse, error)

	// PutAcmeDnsAuthenticatorIdId request  with any body
	PutAcmeDnsAuthenticatorIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutAcmeDnsAuthenticatorIdIdResponse, error)

	PutAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody) (*PutAcmeDnsAuthenticatorIdIdResponse, error)

	// GetActivedirectory request
	GetActivedirectoryWithResponse(ctx context.Context) (*GetActivedirectoryResponse, error)

	// PutActivedirectory request  with any body
	PutActivedirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutActivedirectoryResponse, error)

	PutActivedirectoryWithResponse(ctx context.Context, body PutActivedirectoryJSONRequestBody) (*PutActivedirectoryResponse, error)

	// GetActivedirectoryChangeTrustAccountPw request
	GetActivedirectoryChangeTrustAccountPwWithResponse(ctx context.Context) (*GetActivedirectoryChangeTrustAccountPwResponse, error)

	// GetActivedirectoryDomainInfo request
	GetActivedirectoryDomainInfoWithResponse(ctx context.Context) (*GetActivedirectoryDomainInfoResponse, error)

	// GetActivedirectoryGetSpnList request
	GetActivedirectoryGetSpnListWithResponse(ctx context.Context) (*GetActivedirectoryGetSpnListResponse, error)

	// GetActivedirectoryGetState request
	GetActivedirectoryGetStateWithResponse(ctx context.Context) (*GetActivedirectoryGetStateResponse, error)

	// GetActivedirectoryIdmapBackendChoices request
	GetActivedirectoryIdmapBackendChoicesWithResponse(ctx context.Context) (*GetActivedirectoryIdmapBackendChoicesResponse, error)

	// PostActivedirectoryLeave request  with any body
	PostActivedirectoryLeaveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostActivedirectoryLeaveResponse, error)

	PostActivedirectoryLeaveWithResponse(ctx context.Context, body PostActivedirectoryLeaveJSONRequestBody) (*PostActivedirectoryLeaveResponse, error)

	// GetActivedirectoryNssInfoChoices request
	GetActivedirectoryNssInfoChoicesWithResponse(ctx context.Context) (*GetActivedirectoryNssInfoChoicesResponse, error)

	// GetActivedirectorySaslWrappingChoices request
	GetActivedirectorySaslWrappingChoicesWithResponse(ctx context.Context) (*GetActivedirectorySaslWrappingChoicesResponse, error)

	// GetActivedirectorySslChoices request
	GetActivedirectorySslChoicesWithResponse(ctx context.Context) (*GetActivedirectorySslChoicesResponse, error)

	// GetActivedirectoryStarted request
	GetActivedirectoryStartedWithResponse(ctx context.Context) (*GetActivedirectoryStartedResponse, error)

	// GetAfp request
	GetAfpWithResponse(ctx context.Context) (*GetAfpResponse, error)

	// PutAfp request  with any body
	PutAfpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutAfpResponse, error)

	PutAfpWithResponse(ctx context.Context, body PutAfpJSONRequestBody) (*PutAfpResponse, error)

	// GetAfpBindipChoices request
	GetAfpBindipChoicesWithResponse(ctx context.Context) (*GetAfpBindipChoicesResponse, error)

	// PostAlertDismiss request  with any body
	PostAlertDismissWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAlertDismissResponse, error)

	PostAlertDismissWithResponse(ctx context.Context, body PostAlertDismissJSONRequestBody) (*PostAlertDismissResponse, error)

	// GetAlertList request
	GetAlertListWithResponse(ctx context.Context) (*GetAlertListResponse, error)

	// GetAlertListCategories request
	GetAlertListCategoriesWithResponse(ctx context.Context) (*GetAlertListCategoriesResponse, error)

	// GetAlertListPolicies request
	GetAlertListPoliciesWithResponse(ctx context.Context) (*GetAlertListPoliciesResponse, error)

	// PostAlertRestore request  with any body
	PostAlertRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAlertRestoreResponse, error)

	PostAlertRestoreWithResponse(ctx context.Context, body PostAlertRestoreJSONRequestBody) (*PostAlertRestoreResponse, error)

	// GetAlertclasses request
	GetAlertclassesWithResponse(ctx context.Context) (*GetAlertclassesResponse, error)

	// PutAlertclasses request  with any body
	PutAlertclassesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutAlertclassesResponse, error)

	PutAlertclassesWithResponse(ctx context.Context, body PutAlertclassesJSONRequestBody) (*PutAlertclassesResponse, error)

	// GetAlertservice request
	GetAlertserviceWithResponse(ctx context.Context, params *GetAlertserviceParams) (*GetAlertserviceResponse, error)

	// PostAlertservice request  with any body
	PostAlertserviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAlertserviceResponse, error)

	PostAlertserviceWithResponse(ctx context.Context, body PostAlertserviceJSONRequestBody) (*PostAlertserviceResponse, error)

	// DeleteAlertserviceIdId request
	DeleteAlertserviceIdIdWithResponse(ctx context.Context, id int) (*DeleteAlertserviceIdIdResponse, error)

	// GetAlertserviceIdId request
	GetAlertserviceIdIdWithResponse(ctx context.Context, id []interface{}, params *GetAlertserviceIdIdParams) (*GetAlertserviceIdIdResponse, error)

	// PutAlertserviceIdId request  with any body
	PutAlertserviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutAlertserviceIdIdResponse, error)

	PutAlertserviceIdIdWithResponse(ctx context.Context, id int, body PutAlertserviceIdIdJSONRequestBody) (*PutAlertserviceIdIdResponse, error)

	// GetAlertserviceListTypes request
	GetAlertserviceListTypesWithResponse(ctx context.Context) (*GetAlertserviceListTypesResponse, error)

	// PostAlertserviceTest request  with any body
	PostAlertserviceTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAlertserviceTestResponse, error)

	PostAlertserviceTestWithResponse(ctx context.Context, body PostAlertserviceTestJSONRequestBody) (*PostAlertserviceTestResponse, error)

	// PostAuthCheckUser request  with any body
	PostAuthCheckUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAuthCheckUserResponse, error)

	PostAuthCheckUserWithResponse(ctx context.Context, body PostAuthCheckUserJSONRequestBody) (*PostAuthCheckUserResponse, error)

	// PostAuthGenerateToken request  with any body
	PostAuthGenerateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAuthGenerateTokenResponse, error)

	PostAuthGenerateTokenWithResponse(ctx context.Context, body PostAuthGenerateTokenJSONRequestBody) (*PostAuthGenerateTokenResponse, error)

	// GetAuthSessions request
	GetAuthSessionsWithResponse(ctx context.Context, params *GetAuthSessionsParams) (*GetAuthSessionsResponse, error)

	// GetBackup request
	GetBackupWithResponse(ctx context.Context) (*GetBackupResponse, error)

	// PostBackup request  with any body
	PostBackupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupResponse, error)

	PostBackupWithResponse(ctx context.Context, body PostBackupJSONRequestBody) (*PostBackupResponse, error)

	// PostBackupAzureGetBuckets request  with any body
	PostBackupAzureGetBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupAzureGetBucketsResponse, error)

	PostBackupAzureGetBucketsWithResponse(ctx context.Context, body PostBackupAzureGetBucketsJSONRequestBody) (*PostBackupAzureGetBucketsResponse, error)

	// PostBackupB2GetBuckets request  with any body
	PostBackupB2GetBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupB2GetBucketsResponse, error)

	PostBackupB2GetBucketsWithResponse(ctx context.Context, body PostBackupB2GetBucketsJSONRequestBody) (*PostBackupB2GetBucketsResponse, error)

	// GetBackupCredential request
	GetBackupCredentialWithResponse(ctx context.Context, params *GetBackupCredentialParams) (*GetBackupCredentialResponse, error)

	// PostBackupCredential request  with any body
	PostBackupCredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupCredentialResponse, error)

	PostBackupCredentialWithResponse(ctx context.Context, body PostBackupCredentialJSONRequestBody) (*PostBackupCredentialResponse, error)

	// DeleteBackupCredentialIdId request
	DeleteBackupCredentialIdIdWithResponse(ctx context.Context, id int) (*DeleteBackupCredentialIdIdResponse, error)

	// GetBackupCredentialIdId request
	GetBackupCredentialIdIdWithResponse(ctx context.Context, id []interface{}, params *GetBackupCredentialIdIdParams) (*GetBackupCredentialIdIdResponse, error)

	// PutBackupCredentialIdId request  with any body
	PutBackupCredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutBackupCredentialIdIdResponse, error)

	PutBackupCredentialIdIdWithResponse(ctx context.Context, id int, body PutBackupCredentialIdIdJSONRequestBody) (*PutBackupCredentialIdIdResponse, error)

	// PostBackupGcsGetBuckets request  with any body
	PostBackupGcsGetBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupGcsGetBucketsResponse, error)

	PostBackupGcsGetBucketsWithResponse(ctx context.Context, body PostBackupGcsGetBucketsJSONRequestBody) (*PostBackupGcsGetBucketsResponse, error)

	// DeleteBackupIdId request
	DeleteBackupIdIdWithResponse(ctx context.Context, id int) (*DeleteBackupIdIdResponse, error)

	// GetBackupIdId request
	GetBackupIdIdWithResponse(ctx context.Context, id int) (*GetBackupIdIdResponse, error)

	// PutBackupIdId request  with any body
	PutBackupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutBackupIdIdResponse, error)

	PutBackupIdIdWithResponse(ctx context.Context, id int, body PutBackupIdIdJSONRequestBody) (*PutBackupIdIdResponse, error)

	// PostBackupS3GetBuckets request  with any body
	PostBackupS3GetBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupS3GetBucketsResponse, error)

	PostBackupS3GetBucketsWithResponse(ctx context.Context, body PostBackupS3GetBucketsJSONRequestBody) (*PostBackupS3GetBucketsResponse, error)

	// PostBootAttach request  with any body
	PostBootAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootAttachResponse, error)

	PostBootAttachWithResponse(ctx context.Context, body PostBootAttachJSONRequestBody) (*PostBootAttachResponse, error)

	// PostBootDetach request  with any body
	PostBootDetachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootDetachResponse, error)

	PostBootDetachWithResponse(ctx context.Context, body PostBootDetachJSONRequestBody) (*PostBootDetachResponse, error)

	// GetBootGetDisks request
	GetBootGetDisksWithResponse(ctx context.Context) (*GetBootGetDisksResponse, error)

	// GetBootGetScrubInterval request
	GetBootGetScrubIntervalWithResponse(ctx context.Context) (*GetBootGetScrubIntervalResponse, error)

	// GetBootGetState request
	GetBootGetStateWithResponse(ctx context.Context) (*GetBootGetStateResponse, error)

	// PostBootReplace request  with any body
	PostBootReplaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootReplaceResponse, error)

	PostBootReplaceWithResponse(ctx context.Context, body PostBootReplaceJSONRequestBody) (*PostBootReplaceResponse, error)

	// GetBootScrub request
	GetBootScrubWithResponse(ctx context.Context) (*GetBootScrubResponse, error)

	// PostBootSetScrubInterval request  with any body
	PostBootSetScrubIntervalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootSetScrubIntervalResponse, error)

	PostBootSetScrubIntervalWithResponse(ctx context.Context, body PostBootSetScrubIntervalJSONRequestBody) (*PostBootSetScrubIntervalResponse, error)

	// GetBootenv request
	GetBootenvWithResponse(ctx context.Context, params *GetBootenvParams) (*GetBootenvResponse, error)

	// PostBootenv request  with any body
	PostBootenvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootenvResponse, error)

	PostBootenvWithResponse(ctx context.Context, body PostBootenvJSONRequestBody) (*PostBootenvResponse, error)

	// DeleteBootenvIdId request
	DeleteBootenvIdIdWithResponse(ctx context.Context, id string) (*DeleteBootenvIdIdResponse, error)

	// GetBootenvIdId request
	GetBootenvIdIdWithResponse(ctx context.Context, id []interface{}, params *GetBootenvIdIdParams) (*GetBootenvIdIdResponse, error)

	// PutBootenvIdId request  with any body
	PutBootenvIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutBootenvIdIdResponse, error)

	PutBootenvIdIdWithResponse(ctx context.Context, id string, body PutBootenvIdIdJSONRequestBody) (*PutBootenvIdIdResponse, error)

	// PostBootenvIdIdActivate request  with any body
	PostBootenvIdIdActivateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostBootenvIdIdActivateResponse, error)

	PostBootenvIdIdActivateWithResponse(ctx context.Context, id string, body PostBootenvIdIdActivateJSONRequestBody) (*PostBootenvIdIdActivateResponse, error)

	// PostBootenvIdIdSetAttribute request  with any body
	PostBootenvIdIdSetAttributeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostBootenvIdIdSetAttributeResponse, error)

	PostBootenvIdIdSetAttributeWithResponse(ctx context.Context, id string, body PostBootenvIdIdSetAttributeJSONRequestBody) (*PostBootenvIdIdSetAttributeResponse, error)

	// GetCertificate request
	GetCertificateWithResponse(ctx context.Context, params *GetCertificateParams) (*GetCertificateResponse, error)

	// PostCertificate request  with any body
	PostCertificateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCertificateResponse, error)

	PostCertificateWithResponse(ctx context.Context, body PostCertificateJSONRequestBody) (*PostCertificateResponse, error)

	// GetCertificateAcmeServerChoices request
	GetCertificateAcmeServerChoicesWithResponse(ctx context.Context) (*GetCertificateAcmeServerChoicesResponse, error)

	// GetCertificateEcCurveChoices request
	GetCertificateEcCurveChoicesWithResponse(ctx context.Context) (*GetCertificateEcCurveChoicesResponse, error)

	// DeleteCertificateIdId request  with any body
	DeleteCertificateIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteCertificateIdIdResponse, error)

	DeleteCertificateIdIdWithResponse(ctx context.Context, id int, body DeleteCertificateIdIdJSONRequestBody) (*DeleteCertificateIdIdResponse, error)

	// GetCertificateIdId request
	GetCertificateIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCertificateIdIdParams) (*GetCertificateIdIdResponse, error)

	// PutCertificateIdId request  with any body
	PutCertificateIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCertificateIdIdResponse, error)

	PutCertificateIdIdWithResponse(ctx context.Context, id int, body PutCertificateIdIdJSONRequestBody) (*PutCertificateIdIdResponse, error)

	// GetCertificateKeyTypeChoices request
	GetCertificateKeyTypeChoicesWithResponse(ctx context.Context) (*GetCertificateKeyTypeChoicesResponse, error)

	// GetCertificateauthority request
	GetCertificateauthorityWithResponse(ctx context.Context, params *GetCertificateauthorityParams) (*GetCertificateauthorityResponse, error)

	// PostCertificateauthority request  with any body
	PostCertificateauthorityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCertificateauthorityResponse, error)

	PostCertificateauthorityWithResponse(ctx context.Context, body PostCertificateauthorityJSONRequestBody) (*PostCertificateauthorityResponse, error)

	// PostCertificateauthorityCaSignCsr request  with any body
	PostCertificateauthorityCaSignCsrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCertificateauthorityCaSignCsrResponse, error)

	PostCertificateauthorityCaSignCsrWithResponse(ctx context.Context, body PostCertificateauthorityCaSignCsrJSONRequestBody) (*PostCertificateauthorityCaSignCsrResponse, error)

	// DeleteCertificateauthorityIdId request
	DeleteCertificateauthorityIdIdWithResponse(ctx context.Context, id int) (*DeleteCertificateauthorityIdIdResponse, error)

	// GetCertificateauthorityIdId request
	GetCertificateauthorityIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCertificateauthorityIdIdParams) (*GetCertificateauthorityIdIdResponse, error)

	// PutCertificateauthorityIdId request  with any body
	PutCertificateauthorityIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCertificateauthorityIdIdResponse, error)

	PutCertificateauthorityIdIdWithResponse(ctx context.Context, id int, body PutCertificateauthorityIdIdJSONRequestBody) (*PutCertificateauthorityIdIdResponse, error)

	// GetCloudsync request
	GetCloudsyncWithResponse(ctx context.Context, params *GetCloudsyncParams) (*GetCloudsyncResponse, error)

	// PostCloudsync request  with any body
	PostCloudsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncResponse, error)

	PostCloudsyncWithResponse(ctx context.Context, body PostCloudsyncJSONRequestBody) (*PostCloudsyncResponse, error)

	// GetCloudsyncCommonTaskSchema request
	GetCloudsyncCommonTaskSchemaWithResponse(ctx context.Context) (*GetCloudsyncCommonTaskSchemaResponse, error)

	// GetCloudsyncCredentials request
	GetCloudsyncCredentialsWithResponse(ctx context.Context, params *GetCloudsyncCredentialsParams) (*GetCloudsyncCredentialsResponse, error)

	// PostCloudsyncCredentials request  with any body
	PostCloudsyncCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncCredentialsResponse, error)

	PostCloudsyncCredentialsWithResponse(ctx context.Context, body PostCloudsyncCredentialsJSONRequestBody) (*PostCloudsyncCredentialsResponse, error)

	// DeleteCloudsyncCredentialsIdId request
	DeleteCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int) (*DeleteCloudsyncCredentialsIdIdResponse, error)

	// GetCloudsyncCredentialsIdId request
	GetCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCloudsyncCredentialsIdIdParams) (*GetCloudsyncCredentialsIdIdResponse, error)

	// PutCloudsyncCredentialsIdId request  with any body
	PutCloudsyncCredentialsIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCloudsyncCredentialsIdIdResponse, error)

	PutCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody) (*PutCloudsyncCredentialsIdIdResponse, error)

	// PostCloudsyncCredentialsVerify request  with any body
	PostCloudsyncCredentialsVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncCredentialsVerifyResponse, error)

	PostCloudsyncCredentialsVerifyWithResponse(ctx context.Context, body PostCloudsyncCredentialsVerifyJSONRequestBody) (*PostCloudsyncCredentialsVerifyResponse, error)

	// DeleteCloudsyncIdId request
	DeleteCloudsyncIdIdWithResponse(ctx context.Context, id int) (*DeleteCloudsyncIdIdResponse, error)

	// GetCloudsyncIdId request
	GetCloudsyncIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCloudsyncIdIdParams) (*GetCloudsyncIdIdResponse, error)

	// PutCloudsyncIdId request  with any body
	PutCloudsyncIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCloudsyncIdIdResponse, error)

	PutCloudsyncIdIdWithResponse(ctx context.Context, id int, body PutCloudsyncIdIdJSONRequestBody) (*PutCloudsyncIdIdResponse, error)

	// PostCloudsyncIdIdAbort request  with any body
	PostCloudsyncIdIdAbortWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostCloudsyncIdIdAbortResponse, error)

	PostCloudsyncIdIdAbortWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdAbortJSONRequestBody) (*PostCloudsyncIdIdAbortResponse, error)

	// PostCloudsyncIdIdSync request  with any body
	PostCloudsyncIdIdSyncWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostCloudsyncIdIdSyncResponse, error)

	PostCloudsyncIdIdSyncWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdSyncJSONRequestBody) (*PostCloudsyncIdIdSyncResponse, error)

	// PostCloudsyncListBuckets request  with any body
	PostCloudsyncListBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncListBucketsResponse, error)

	PostCloudsyncListBucketsWithResponse(ctx context.Context, body PostCloudsyncListBucketsJSONRequestBody) (*PostCloudsyncListBucketsResponse, error)

	// PostCloudsyncListDirectory request  with any body
	PostCloudsyncListDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncListDirectoryResponse, error)

	PostCloudsyncListDirectoryWithResponse(ctx context.Context, body PostCloudsyncListDirectoryJSONRequestBody) (*PostCloudsyncListDirectoryResponse, error)

	// PostCloudsyncOnedriveListDrives request  with any body
	PostCloudsyncOnedriveListDrivesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncOnedriveListDrivesResponse, error)

	PostCloudsyncOnedriveListDrivesWithResponse(ctx context.Context, body PostCloudsyncOnedriveListDrivesJSONRequestBody) (*PostCloudsyncOnedriveListDrivesResponse, error)

	// GetCloudsyncProviders request
	GetCloudsyncProvidersWithResponse(ctx context.Context) (*GetCloudsyncProvidersResponse, error)

	// PostConfigReset request  with any body
	PostConfigResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConfigResetResponse, error)

	PostConfigResetWithResponse(ctx context.Context, body PostConfigResetJSONRequestBody) (*PostConfigResetResponse, error)

	// PostCoreBulk request  with any body
	PostCoreBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreBulkResponse, error)

	PostCoreBulkWithResponse(ctx context.Context, body PostCoreBulkJSONRequestBody) (*PostCoreBulkResponse, error)

	// PostCoreDebug request  with any body
	PostCoreDebugWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreDebugResponse, error)

	PostCoreDebugWithResponse(ctx context.Context, body PostCoreDebugJSONRequestBody) (*PostCoreDebugResponse, error)

	// PostCoreDownload request  with any body
	PostCoreDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreDownloadResponse, error)

	PostCoreDownloadWithResponse(ctx context.Context, body PostCoreDownloadJSONRequestBody) (*PostCoreDownloadResponse, error)

	// GetCoreGetEvents request
	GetCoreGetEventsWithResponse(ctx context.Context) (*GetCoreGetEventsResponse, error)

	// GetCoreGetJobs request
	GetCoreGetJobsWithResponse(ctx context.Context, params *GetCoreGetJobsParams) (*GetCoreGetJobsResponse, error)

	// PostCoreGetMethods request  with any body
	PostCoreGetMethodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreGetMethodsResponse, error)

	PostCoreGetMethodsWithResponse(ctx context.Context, body PostCoreGetMethodsJSONRequestBody) (*PostCoreGetMethodsResponse, error)

	// GetCoreGetServices request
	GetCoreGetServicesWithResponse(ctx context.Context) (*GetCoreGetServicesResponse, error)

	// PostCoreJobAbort request  with any body
	PostCoreJobAbortWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreJobAbortResponse, error)

	PostCoreJobAbortWithResponse(ctx context.Context, body PostCoreJobAbortJSONRequestBody) (*PostCoreJobAbortResponse, error)

	// PostCoreJobUpdate request  with any body
	PostCoreJobUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreJobUpdateResponse, error)

	PostCoreJobUpdateWithResponse(ctx context.Context, body PostCoreJobUpdateJSONRequestBody) (*PostCoreJobUpdateResponse, error)

	// PostCoreJobWait request  with any body
	PostCoreJobWaitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreJobWaitResponse, error)

	PostCoreJobWaitWithResponse(ctx context.Context, body PostCoreJobWaitJSONRequestBody) (*PostCoreJobWaitResponse, error)

	// GetCorePing request
	GetCorePingWithResponse(ctx context.Context) (*GetCorePingResponse, error)

	// GetCoreSessions request
	GetCoreSessionsWithResponse(ctx context.Context, params *GetCoreSessionsParams) (*GetCoreSessionsResponse, error)

	// GetCronjob request
	GetCronjobWithResponse(ctx context.Context, params *GetCronjobParams) (*GetCronjobResponse, error)

	// PostCronjob request  with any body
	PostCronjobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCronjobResponse, error)

	PostCronjobWithResponse(ctx context.Context, body PostCronjobJSONRequestBody) (*PostCronjobResponse, error)

	// DeleteCronjobIdId request
	DeleteCronjobIdIdWithResponse(ctx context.Context, id int) (*DeleteCronjobIdIdResponse, error)

	// GetCronjobIdId request
	GetCronjobIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCronjobIdIdParams) (*GetCronjobIdIdResponse, error)

	// PutCronjobIdId request  with any body
	PutCronjobIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCronjobIdIdResponse, error)

	PutCronjobIdIdWithResponse(ctx context.Context, id int, body PutCronjobIdIdJSONRequestBody) (*PutCronjobIdIdResponse, error)

	// PostCronjobRun request  with any body
	PostCronjobRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCronjobRunResponse, error)

	PostCronjobRunWithResponse(ctx context.Context, body PostCronjobRunJSONRequestBody) (*PostCronjobRunResponse, error)

	// PostDeviceGetInfo request  with any body
	PostDeviceGetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDeviceGetInfoResponse, error)

	PostDeviceGetInfoWithResponse(ctx context.Context, body PostDeviceGetInfoJSONRequestBody) (*PostDeviceGetInfoResponse, error)

	// GetDirectoryservicesGetState request
	GetDirectoryservicesGetStateWithResponse(ctx context.Context) (*GetDirectoryservicesGetStateResponse, error)

	// GetDisk request
	GetDiskWithResponse(ctx context.Context, params *GetDiskParams) (*GetDiskResponse, error)

	// PostDiskGetEncrypted request  with any body
	PostDiskGetEncryptedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDiskGetEncryptedResponse, error)

	PostDiskGetEncryptedWithResponse(ctx context.Context, body PostDiskGetEncryptedJSONRequestBody) (*PostDiskGetEncryptedResponse, error)

	// PostDiskGetUnused request  with any body
	PostDiskGetUnusedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDiskGetUnusedResponse, error)

	PostDiskGetUnusedWithResponse(ctx context.Context, body PostDiskGetUnusedJSONRequestBody) (*PostDiskGetUnusedResponse, error)

	// GetDiskIdId request
	GetDiskIdIdWithResponse(ctx context.Context, id []interface{}, params *GetDiskIdIdParams) (*GetDiskIdIdResponse, error)

	// PutDiskIdId request  with any body
	PutDiskIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutDiskIdIdResponse, error)

	PutDiskIdIdWithResponse(ctx context.Context, id string, body PutDiskIdIdJSONRequestBody) (*PutDiskIdIdResponse, error)

	// PostDiskTemperatures request  with any body
	PostDiskTemperaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDiskTemperaturesResponse, error)

	PostDiskTemperaturesWithResponse(ctx context.Context, body PostDiskTemperaturesJSONRequestBody) (*PostDiskTemperaturesResponse, error)

	// PostDiskWipe request  with any body
	PostDiskWipeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDiskWipeResponse, error)

	PostDiskWipeWithResponse(ctx context.Context, body PostDiskWipeJSONRequestBody) (*PostDiskWipeResponse, error)

	// GetDnsQuery request
	GetDnsQueryWithResponse(ctx context.Context, params *GetDnsQueryParams) (*GetDnsQueryResponse, error)

	// GetDyndns request
	GetDyndnsWithResponse(ctx context.Context) (*GetDyndnsResponse, error)

	// PutDyndns request  with any body
	PutDyndnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutDyndnsResponse, error)

	PutDyndnsWithResponse(ctx context.Context, body PutDyndnsJSONRequestBody) (*PutDyndnsResponse, error)

	// GetDyndnsProviderChoices request
	GetDyndnsProviderChoicesWithResponse(ctx context.Context) (*GetDyndnsProviderChoicesResponse, error)

	// PostFilesystemAclIsTrivial request  with any body
	PostFilesystemAclIsTrivialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemAclIsTrivialResponse, error)

	PostFilesystemAclIsTrivialWithResponse(ctx context.Context, body PostFilesystemAclIsTrivialJSONRequestBody) (*PostFilesystemAclIsTrivialResponse, error)

	// PostFilesystemChown request  with any body
	PostFilesystemChownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemChownResponse, error)

	PostFilesystemChownWithResponse(ctx context.Context, body PostFilesystemChownJSONRequestBody) (*PostFilesystemChownResponse, error)

	// GetFilesystemDefaultAclChoices request
	GetFilesystemDefaultAclChoicesWithResponse(ctx context.Context) (*GetFilesystemDefaultAclChoicesResponse, error)

	// PostFilesystemGetDefaultAcl request  with any body
	PostFilesystemGetDefaultAclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemGetDefaultAclResponse, error)

	PostFilesystemGetDefaultAclWithResponse(ctx context.Context, body PostFilesystemGetDefaultAclJSONRequestBody) (*PostFilesystemGetDefaultAclResponse, error)

	// PostFilesystemGetacl request  with any body
	PostFilesystemGetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemGetaclResponse, error)

	PostFilesystemGetaclWithResponse(ctx context.Context, body PostFilesystemGetaclJSONRequestBody) (*PostFilesystemGetaclResponse, error)

	// PostFilesystemListdir request  with any body
	PostFilesystemListdirWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemListdirResponse, error)

	PostFilesystemListdirWithResponse(ctx context.Context, body PostFilesystemListdirJSONRequestBody) (*PostFilesystemListdirResponse, error)

	// PostFilesystemSetacl request  with any body
	PostFilesystemSetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemSetaclResponse, error)

	PostFilesystemSetaclWithResponse(ctx context.Context, body PostFilesystemSetaclJSONRequestBody) (*PostFilesystemSetaclResponse, error)

	// PostFilesystemSetperm request  with any body
	PostFilesystemSetpermWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemSetpermResponse, error)

	PostFilesystemSetpermWithResponse(ctx context.Context, body PostFilesystemSetpermJSONRequestBody) (*PostFilesystemSetpermResponse, error)

	// PostFilesystemStat request  with any body
	PostFilesystemStatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemStatResponse, error)

	PostFilesystemStatWithResponse(ctx context.Context, body PostFilesystemStatJSONRequestBody) (*PostFilesystemStatResponse, error)

	// PostFilesystemStatfs request  with any body
	PostFilesystemStatfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemStatfsResponse, error)

	PostFilesystemStatfsWithResponse(ctx context.Context, body PostFilesystemStatfsJSONRequestBody) (*PostFilesystemStatfsResponse, error)

	// GetFtp request
	GetFtpWithResponse(ctx context.Context) (*GetFtpResponse, error)

	// PutFtp request  with any body
	PutFtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutFtpResponse, error)

	PutFtpWithResponse(ctx context.Context, body PutFtpJSONRequestBody) (*PutFtpResponse, error)

	// GetGroup request
	GetGroupWithResponse(ctx context.Context, params *GetGroupParams) (*GetGroupResponse, error)

	// PostGroup request  with any body
	PostGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostGroupResponse, error)

	PostGroupWithResponse(ctx context.Context, body PostGroupJSONRequestBody) (*PostGroupResponse, error)

	// PostGroupGetGroupObj request  with any body
	PostGroupGetGroupObjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostGroupGetGroupObjResponse, error)

	PostGroupGetGroupObjWithResponse(ctx context.Context, body PostGroupGetGroupObjJSONRequestBody) (*PostGroupGetGroupObjResponse, error)

	// GetGroupGetNextGid request
	GetGroupGetNextGidWithResponse(ctx context.Context) (*GetGroupGetNextGidResponse, error)

	// DeleteGroupIdId request  with any body
	DeleteGroupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteGroupIdIdResponse, error)

	DeleteGroupIdIdWithResponse(ctx context.Context, id int, body DeleteGroupIdIdJSONRequestBody) (*DeleteGroupIdIdResponse, error)

	// GetGroupIdId request
	GetGroupIdIdWithResponse(ctx context.Context, id []interface{}, params *GetGroupIdIdParams) (*GetGroupIdIdResponse, error)

	// PutGroupIdId request  with any body
	PutGroupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutGroupIdIdResponse, error)

	PutGroupIdIdWithResponse(ctx context.Context, id int, body PutGroupIdIdJSONRequestBody) (*PutGroupIdIdResponse, error)

	// GetIdmapAd request
	GetIdmapAdWithResponse(ctx context.Context, params *GetIdmapAdParams) (*GetIdmapAdResponse, error)

	// PostIdmapAd request  with any body
	PostIdmapAdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapAdResponse, error)

	PostIdmapAdWithResponse(ctx context.Context, body PostIdmapAdJSONRequestBody) (*PostIdmapAdResponse, error)

	// DeleteIdmapAdIdId request
	DeleteIdmapAdIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapAdIdIdResponse, error)

	// GetIdmapAdIdId request
	GetIdmapAdIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapAdIdIdParams) (*GetIdmapAdIdIdResponse, error)

	// PutIdmapAdIdId request  with any body
	PutIdmapAdIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapAdIdIdResponse, error)

	PutIdmapAdIdIdWithResponse(ctx context.Context, id int, body PutIdmapAdIdIdJSONRequestBody) (*PutIdmapAdIdIdResponse, error)

	// GetIdmapAutorid request
	GetIdmapAutoridWithResponse(ctx context.Context, params *GetIdmapAutoridParams) (*GetIdmapAutoridResponse, error)

	// PostIdmapAutorid request  with any body
	PostIdmapAutoridWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapAutoridResponse, error)

	PostIdmapAutoridWithResponse(ctx context.Context, body PostIdmapAutoridJSONRequestBody) (*PostIdmapAutoridResponse, error)

	// DeleteIdmapAutoridIdId request
	DeleteIdmapAutoridIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapAutoridIdIdResponse, error)

	// GetIdmapAutoridIdId request
	GetIdmapAutoridIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapAutoridIdIdParams) (*GetIdmapAutoridIdIdResponse, error)

	// PutIdmapAutoridIdId request  with any body
	PutIdmapAutoridIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapAutoridIdIdResponse, error)

	PutIdmapAutoridIdIdWithResponse(ctx context.Context, id int, body PutIdmapAutoridIdIdJSONRequestBody) (*PutIdmapAutoridIdIdResponse, error)

	// GetIdmapClearIdmapCache request
	GetIdmapClearIdmapCacheWithResponse(ctx context.Context) (*GetIdmapClearIdmapCacheResponse, error)

	// GetIdmapDomain request
	GetIdmapDomainWithResponse(ctx context.Context, params *GetIdmapDomainParams) (*GetIdmapDomainResponse, error)

	// PostIdmapDomain request  with any body
	PostIdmapDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapDomainResponse, error)

	PostIdmapDomainWithResponse(ctx context.Context, body PostIdmapDomainJSONRequestBody) (*PostIdmapDomainResponse, error)

	// DeleteIdmapDomainIdId request
	DeleteIdmapDomainIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapDomainIdIdResponse, error)

	// GetIdmapDomainIdId request
	GetIdmapDomainIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapDomainIdIdParams) (*GetIdmapDomainIdIdResponse, error)

	// PutIdmapDomainIdId request  with any body
	PutIdmapDomainIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapDomainIdIdResponse, error)

	PutIdmapDomainIdIdWithResponse(ctx context.Context, id int, body PutIdmapDomainIdIdJSONRequestBody) (*PutIdmapDomainIdIdResponse, error)

	// GetIdmapDomaintobackend request
	GetIdmapDomaintobackendWithResponse(ctx context.Context, params *GetIdmapDomaintobackendParams) (*GetIdmapDomaintobackendResponse, error)

	// PostIdmapDomaintobackend request  with any body
	PostIdmapDomaintobackendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapDomaintobackendResponse, error)

	PostIdmapDomaintobackendWithResponse(ctx context.Context, body PostIdmapDomaintobackendJSONRequestBody) (*PostIdmapDomaintobackendResponse, error)

	// DeleteIdmapDomaintobackendIdId request
	DeleteIdmapDomaintobackendIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapDomaintobackendIdIdResponse, error)

	// GetIdmapDomaintobackendIdId request
	GetIdmapDomaintobackendIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapDomaintobackendIdIdParams) (*GetIdmapDomaintobackendIdIdResponse, error)

	// PutIdmapDomaintobackendIdId request  with any body
	PutIdmapDomaintobackendIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapDomaintobackendIdIdResponse, error)

	PutIdmapDomaintobackendIdIdWithResponse(ctx context.Context, id int, body PutIdmapDomaintobackendIdIdJSONRequestBody) (*PutIdmapDomaintobackendIdIdResponse, error)

	// GetIdmapGetConfiguredIdmapDomains request
	GetIdmapGetConfiguredIdmapDomainsWithResponse(ctx context.Context) (*GetIdmapGetConfiguredIdmapDomainsResponse, error)

	// PostIdmapGetOrCreateIdmapByDomain request  with any body
	PostIdmapGetOrCreateIdmapByDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapGetOrCreateIdmapByDomainResponse, error)

	PostIdmapGetOrCreateIdmapByDomainWithResponse(ctx context.Context, body PostIdmapGetOrCreateIdmapByDomainJSONRequestBody) (*PostIdmapGetOrCreateIdmapByDomainResponse, error)

	// GetIdmapLdap request
	GetIdmapLdapWithResponse(ctx context.Context, params *GetIdmapLdapParams) (*GetIdmapLdapResponse, error)

	// PostIdmapLdap request  with any body
	PostIdmapLdapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapLdapResponse, error)

	PostIdmapLdapWithResponse(ctx context.Context, body PostIdmapLdapJSONRequestBody) (*PostIdmapLdapResponse, error)

	// DeleteIdmapLdapIdId request
	DeleteIdmapLdapIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapLdapIdIdResponse, error)

	// GetIdmapLdapIdId request
	GetIdmapLdapIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapLdapIdIdParams) (*GetIdmapLdapIdIdResponse, error)

	// PutIdmapLdapIdId request  with any body
	PutIdmapLdapIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapLdapIdIdResponse, error)

	PutIdmapLdapIdIdWithResponse(ctx context.Context, id int, body PutIdmapLdapIdIdJSONRequestBody) (*PutIdmapLdapIdIdResponse, error)

	// GetIdmapNss request
	GetIdmapNssWithResponse(ctx context.Context, params *GetIdmapNssParams) (*GetIdmapNssResponse, error)

	// PostIdmapNss request  with any body
	PostIdmapNssWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapNssResponse, error)

	PostIdmapNssWithResponse(ctx context.Context, body PostIdmapNssJSONRequestBody) (*PostIdmapNssResponse, error)

	// DeleteIdmapNssIdId request
	DeleteIdmapNssIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapNssIdIdResponse, error)

	// GetIdmapNssIdId request
	GetIdmapNssIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapNssIdIdParams) (*GetIdmapNssIdIdResponse, error)

	// PutIdmapNssIdId request  with any body
	PutIdmapNssIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapNssIdIdResponse, error)

	PutIdmapNssIdIdWithResponse(ctx context.Context, id int, body PutIdmapNssIdIdJSONRequestBody) (*PutIdmapNssIdIdResponse, error)

	// GetIdmapRfc2307 request
	GetIdmapRfc2307WithResponse(ctx context.Context, params *GetIdmapRfc2307Params) (*GetIdmapRfc2307Response, error)

	// PostIdmapRfc2307 request  with any body
	PostIdmapRfc2307WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapRfc2307Response, error)

	PostIdmapRfc2307WithResponse(ctx context.Context, body PostIdmapRfc2307JSONRequestBody) (*PostIdmapRfc2307Response, error)

	// DeleteIdmapRfc2307IdId request
	DeleteIdmapRfc2307IdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapRfc2307IdIdResponse, error)

	// GetIdmapRfc2307IdId request
	GetIdmapRfc2307IdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapRfc2307IdIdParams) (*GetIdmapRfc2307IdIdResponse, error)

	// PutIdmapRfc2307IdId request  with any body
	PutIdmapRfc2307IdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapRfc2307IdIdResponse, error)

	PutIdmapRfc2307IdIdWithResponse(ctx context.Context, id int, body PutIdmapRfc2307IdIdJSONRequestBody) (*PutIdmapRfc2307IdIdResponse, error)

	// GetIdmapRid request
	GetIdmapRidWithResponse(ctx context.Context, params *GetIdmapRidParams) (*GetIdmapRidResponse, error)

	// PostIdmapRid request  with any body
	PostIdmapRidWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapRidResponse, error)

	PostIdmapRidWithResponse(ctx context.Context, body PostIdmapRidJSONRequestBody) (*PostIdmapRidResponse, error)

	// DeleteIdmapRidIdId request
	DeleteIdmapRidIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapRidIdIdResponse, error)

	// GetIdmapRidIdId request
	GetIdmapRidIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapRidIdIdParams) (*GetIdmapRidIdIdResponse, error)

	// PutIdmapRidIdId request  with any body
	PutIdmapRidIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapRidIdIdResponse, error)

	PutIdmapRidIdIdWithResponse(ctx context.Context, id int, body PutIdmapRidIdIdJSONRequestBody) (*PutIdmapRidIdIdResponse, error)

	// GetIdmapScript request
	GetIdmapScriptWithResponse(ctx context.Context, params *GetIdmapScriptParams) (*GetIdmapScriptResponse, error)

	// PostIdmapScript request  with any body
	PostIdmapScriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapScriptResponse, error)

	PostIdmapScriptWithResponse(ctx context.Context, body PostIdmapScriptJSONRequestBody) (*PostIdmapScriptResponse, error)

	// DeleteIdmapScriptIdId request
	DeleteIdmapScriptIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapScriptIdIdResponse, error)

	// GetIdmapScriptIdId request
	GetIdmapScriptIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapScriptIdIdParams) (*GetIdmapScriptIdIdResponse, error)

	// PutIdmapScriptIdId request  with any body
	PutIdmapScriptIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapScriptIdIdResponse, error)

	PutIdmapScriptIdIdWithResponse(ctx context.Context, id int, body PutIdmapScriptIdIdJSONRequestBody) (*PutIdmapScriptIdIdResponse, error)

	// GetIdmapTdb request
	GetIdmapTdbWithResponse(ctx context.Context, params *GetIdmapTdbParams) (*GetIdmapTdbResponse, error)

	// PostIdmapTdb request  with any body
	PostIdmapTdbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapTdbResponse, error)

	PostIdmapTdbWithResponse(ctx context.Context, body PostIdmapTdbJSONRequestBody) (*PostIdmapTdbResponse, error)

	// DeleteIdmapTdbIdId request
	DeleteIdmapTdbIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapTdbIdIdResponse, error)

	// GetIdmapTdbIdId request
	GetIdmapTdbIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapTdbIdIdParams) (*GetIdmapTdbIdIdResponse, error)

	// PutIdmapTdbIdId request  with any body
	PutIdmapTdbIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapTdbIdIdResponse, error)

	PutIdmapTdbIdIdWithResponse(ctx context.Context, id int, body PutIdmapTdbIdIdJSONRequestBody) (*PutIdmapTdbIdIdResponse, error)

	// GetInitshutdownscript request
	GetInitshutdownscriptWithResponse(ctx context.Context, params *GetInitshutdownscriptParams) (*GetInitshutdownscriptResponse, error)

	// PostInitshutdownscript request  with any body
	PostInitshutdownscriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInitshutdownscriptResponse, error)

	PostInitshutdownscriptWithResponse(ctx context.Context, body PostInitshutdownscriptJSONRequestBody) (*PostInitshutdownscriptResponse, error)

	// DeleteInitshutdownscriptIdId request
	DeleteInitshutdownscriptIdIdWithResponse(ctx context.Context, id int) (*DeleteInitshutdownscriptIdIdResponse, error)

	// GetInitshutdownscriptIdId request
	GetInitshutdownscriptIdIdWithResponse(ctx context.Context, id []interface{}, params *GetInitshutdownscriptIdIdParams) (*GetInitshutdownscriptIdIdResponse, error)

	// PutInitshutdownscriptIdId request  with any body
	PutInitshutdownscriptIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutInitshutdownscriptIdIdResponse, error)

	PutInitshutdownscriptIdIdWithResponse(ctx context.Context, id int, body PutInitshutdownscriptIdIdJSONRequestBody) (*PutInitshutdownscriptIdIdResponse, error)

	// GetInterface request
	GetInterfaceWithResponse(ctx context.Context, params *GetInterfaceParams) (*GetInterfaceResponse, error)

	// PostInterface request  with any body
	PostInterfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceResponse, error)

	PostInterfaceWithResponse(ctx context.Context, body PostInterfaceJSONRequestBody) (*PostInterfaceResponse, error)

	// PostInterfaceBridgeMembersChoices request  with any body
	PostInterfaceBridgeMembersChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceBridgeMembersChoicesResponse, error)

	PostInterfaceBridgeMembersChoicesWithResponse(ctx context.Context, body PostInterfaceBridgeMembersChoicesJSONRequestBody) (*PostInterfaceBridgeMembersChoicesResponse, error)

	// GetInterfaceCheckin request
	GetInterfaceCheckinWithResponse(ctx context.Context) (*GetInterfaceCheckinResponse, error)

	// GetInterfaceCheckinWaiting request
	GetInterfaceCheckinWaitingWithResponse(ctx context.Context) (*GetInterfaceCheckinWaitingResponse, error)

	// PostInterfaceChoices request  with any body
	PostInterfaceChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceChoicesResponse, error)

	PostInterfaceChoicesWithResponse(ctx context.Context, body PostInterfaceChoicesJSONRequestBody) (*PostInterfaceChoicesResponse, error)

	// PostInterfaceCommit request  with any body
	PostInterfaceCommitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceCommitResponse, error)

	PostInterfaceCommitWithResponse(ctx context.Context, body PostInterfaceCommitJSONRequestBody) (*PostInterfaceCommitResponse, error)

	// GetInterfaceHasPendingChanges request
	GetInterfaceHasPendingChangesWithResponse(ctx context.Context) (*GetInterfaceHasPendingChangesResponse, error)

	// DeleteInterfaceIdId request
	DeleteInterfaceIdIdWithResponse(ctx context.Context, id string) (*DeleteInterfaceIdIdResponse, error)

	// GetInterfaceIdId request
	GetInterfaceIdIdWithResponse(ctx context.Context, id []interface{}, params *GetInterfaceIdIdParams) (*GetInterfaceIdIdResponse, error)

	// PutInterfaceIdId request  with any body
	PutInterfaceIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutInterfaceIdIdResponse, error)

	PutInterfaceIdIdWithResponse(ctx context.Context, id string, body PutInterfaceIdIdJSONRequestBody) (*PutInterfaceIdIdResponse, error)

	// PostInterfaceIpInUse request  with any body
	PostInterfaceIpInUseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceIpInUseResponse, error)

	PostInterfaceIpInUseWithResponse(ctx context.Context, body PostInterfaceIpInUseJSONRequestBody) (*PostInterfaceIpInUseResponse, error)

	// PostInterfaceLagPortsChoices request  with any body
	PostInterfaceLagPortsChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceLagPortsChoicesResponse, error)

	PostInterfaceLagPortsChoicesWithResponse(ctx context.Context, body PostInterfaceLagPortsChoicesJSONRequestBody) (*PostInterfaceLagPortsChoicesResponse, error)

	// GetInterfaceRollback request
	GetInterfaceRollbackWithResponse(ctx context.Context) (*GetInterfaceRollbackResponse, error)

	// GetInterfaceVlanParentInterfaceChoices request
	GetInterfaceVlanParentInterfaceChoicesWithResponse(ctx context.Context) (*GetInterfaceVlanParentInterfaceChoicesResponse, error)

	// GetIpmi request
	GetIpmiWithResponse(ctx context.Context, params *GetIpmiParams) (*GetIpmiResponse, error)

	// GetIpmiChannels request
	GetIpmiChannelsWithResponse(ctx context.Context) (*GetIpmiChannelsResponse, error)

	// GetIpmiIdId request
	GetIpmiIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIpmiIdIdParams) (*GetIpmiIdIdResponse, error)

	// PutIpmiIdId request  with any body
	PutIpmiIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIpmiIdIdResponse, error)

	PutIpmiIdIdWithResponse(ctx context.Context, id int, body PutIpmiIdIdJSONRequestBody) (*PutIpmiIdIdResponse, error)

	// PostIpmiIdentify request  with any body
	PostIpmiIdentifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIpmiIdentifyResponse, error)

	PostIpmiIdentifyWithResponse(ctx context.Context, body PostIpmiIdentifyJSONRequestBody) (*PostIpmiIdentifyResponse, error)

	// GetIpmiIsLoaded request
	GetIpmiIsLoadedWithResponse(ctx context.Context) (*GetIpmiIsLoadedResponse, error)

	// GetIscsiAuth request
	GetIscsiAuthWithResponse(ctx context.Context, params *GetIscsiAuthParams) (*GetIscsiAuthResponse, error)

	// PostIscsiAuth request  with any body
	PostIscsiAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiAuthResponse, error)

	PostIscsiAuthWithResponse(ctx context.Context, body PostIscsiAuthJSONRequestBody) (*PostIscsiAuthResponse, error)

	// DeleteIscsiAuthIdId request
	DeleteIscsiAuthIdIdWithResponse(ctx context.Context, id int) (*DeleteIscsiAuthIdIdResponse, error)

	// GetIscsiAuthIdId request
	GetIscsiAuthIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiAuthIdIdParams) (*GetIscsiAuthIdIdResponse, error)

	// PutIscsiAuthIdId request  with any body
	PutIscsiAuthIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiAuthIdIdResponse, error)

	PutIscsiAuthIdIdWithResponse(ctx context.Context, id int, body PutIscsiAuthIdIdJSONRequestBody) (*PutIscsiAuthIdIdResponse, error)

	// GetIscsiExtent request
	GetIscsiExtentWithResponse(ctx context.Context, params *GetIscsiExtentParams) (*GetIscsiExtentResponse, error)

	// PostIscsiExtent request  with any body
	PostIscsiExtentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiExtentResponse, error)

	PostIscsiExtentWithResponse(ctx context.Context, body PostIscsiExtentJSONRequestBody) (*PostIscsiExtentResponse, error)

	// PostIscsiExtentDiskChoices request  with any body
	PostIscsiExtentDiskChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiExtentDiskChoicesResponse, error)

	PostIscsiExtentDiskChoicesWithResponse(ctx context.Context, body PostIscsiExtentDiskChoicesJSONRequestBody) (*PostIscsiExtentDiskChoicesResponse, error)

	// DeleteIscsiExtentIdId request  with any body
	DeleteIscsiExtentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteIscsiExtentIdIdResponse, error)

	DeleteIscsiExtentIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiExtentIdIdJSONRequestBody) (*DeleteIscsiExtentIdIdResponse, error)

	// GetIscsiExtentIdId request
	GetIscsiExtentIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiExtentIdIdParams) (*GetIscsiExtentIdIdResponse, error)

	// PutIscsiExtentIdId request  with any body
	PutIscsiExtentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiExtentIdIdResponse, error)

	PutIscsiExtentIdIdWithResponse(ctx context.Context, id int, body PutIscsiExtentIdIdJSONRequestBody) (*PutIscsiExtentIdIdResponse, error)

	// GetIscsiGlobal request
	GetIscsiGlobalWithResponse(ctx context.Context) (*GetIscsiGlobalResponse, error)

	// PutIscsiGlobal request  with any body
	PutIscsiGlobalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutIscsiGlobalResponse, error)

	PutIscsiGlobalWithResponse(ctx context.Context, body PutIscsiGlobalJSONRequestBody) (*PutIscsiGlobalResponse, error)

	// GetIscsiGlobalSessions request
	GetIscsiGlobalSessionsWithResponse(ctx context.Context, params *GetIscsiGlobalSessionsParams) (*GetIscsiGlobalSessionsResponse, error)

	// GetIscsiInitiator request
	GetIscsiInitiatorWithResponse(ctx context.Context, params *GetIscsiInitiatorParams) (*GetIscsiInitiatorResponse, error)

	// PostIscsiInitiator request  with any body
	PostIscsiInitiatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiInitiatorResponse, error)

	PostIscsiInitiatorWithResponse(ctx context.Context, body PostIscsiInitiatorJSONRequestBody) (*PostIscsiInitiatorResponse, error)

	// DeleteIscsiInitiatorIdId request
	DeleteIscsiInitiatorIdIdWithResponse(ctx context.Context, id int) (*DeleteIscsiInitiatorIdIdResponse, error)

	// GetIscsiInitiatorIdId request
	GetIscsiInitiatorIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiInitiatorIdIdParams) (*GetIscsiInitiatorIdIdResponse, error)

	// PutIscsiInitiatorIdId request  with any body
	PutIscsiInitiatorIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiInitiatorIdIdResponse, error)

	PutIscsiInitiatorIdIdWithResponse(ctx context.Context, id int, body PutIscsiInitiatorIdIdJSONRequestBody) (*PutIscsiInitiatorIdIdResponse, error)

	// GetIscsiPortal request
	GetIscsiPortalWithResponse(ctx context.Context, params *GetIscsiPortalParams) (*GetIscsiPortalResponse, error)

	// PostIscsiPortal request  with any body
	PostIscsiPortalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiPortalResponse, error)

	PostIscsiPortalWithResponse(ctx context.Context, body PostIscsiPortalJSONRequestBody) (*PostIscsiPortalResponse, error)

	// DeleteIscsiPortalIdId request
	DeleteIscsiPortalIdIdWithResponse(ctx context.Context, id int) (*DeleteIscsiPortalIdIdResponse, error)

	// GetIscsiPortalIdId request
	GetIscsiPortalIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiPortalIdIdParams) (*GetIscsiPortalIdIdResponse, error)

	// PutIscsiPortalIdId request  with any body
	PutIscsiPortalIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiPortalIdIdResponse, error)

	PutIscsiPortalIdIdWithResponse(ctx context.Context, id int, body PutIscsiPortalIdIdJSONRequestBody) (*PutIscsiPortalIdIdResponse, error)

	// GetIscsiPortalListenIpChoices request
	GetIscsiPortalListenIpChoicesWithResponse(ctx context.Context) (*GetIscsiPortalListenIpChoicesResponse, error)

	// GetIscsiTarget request
	GetIscsiTargetWithResponse(ctx context.Context, params *GetIscsiTargetParams) (*GetIscsiTargetResponse, error)

	// PostIscsiTarget request  with any body
	PostIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiTargetResponse, error)

	PostIscsiTargetWithResponse(ctx context.Context, body PostIscsiTargetJSONRequestBody) (*PostIscsiTargetResponse, error)

	// DeleteIscsiTargetIdId request  with any body
	DeleteIscsiTargetIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteIscsiTargetIdIdResponse, error)

	DeleteIscsiTargetIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiTargetIdIdJSONRequestBody) (*DeleteIscsiTargetIdIdResponse, error)

	// GetIscsiTargetIdId request
	GetIscsiTargetIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiTargetIdIdParams) (*GetIscsiTargetIdIdResponse, error)

	// PutIscsiTargetIdId request  with any body
	PutIscsiTargetIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiTargetIdIdResponse, error)

	PutIscsiTargetIdIdWithResponse(ctx context.Context, id int, body PutIscsiTargetIdIdJSONRequestBody) (*PutIscsiTargetIdIdResponse, error)

	// GetIscsiTargetextent request
	GetIscsiTargetextentWithResponse(ctx context.Context, params *GetIscsiTargetextentParams) (*GetIscsiTargetextentResponse, error)

	// PostIscsiTargetextent request  with any body
	PostIscsiTargetextentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiTargetextentResponse, error)

	PostIscsiTargetextentWithResponse(ctx context.Context, body PostIscsiTargetextentJSONRequestBody) (*PostIscsiTargetextentResponse, error)

	// DeleteIscsiTargetextentIdId request  with any body
	DeleteIscsiTargetextentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteIscsiTargetextentIdIdResponse, error)

	DeleteIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody) (*DeleteIscsiTargetextentIdIdResponse, error)

	// GetIscsiTargetextentIdId request
	GetIscsiTargetextentIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiTargetextentIdIdParams) (*GetIscsiTargetextentIdIdResponse, error)

	// PutIscsiTargetextentIdId request  with any body
	PutIscsiTargetextentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiTargetextentIdIdResponse, error)

	PutIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, body PutIscsiTargetextentIdIdJSONRequestBody) (*PutIscsiTargetextentIdIdResponse, error)

	// GetJail request
	GetJailWithResponse(ctx context.Context, params *GetJailParams) (*GetJailResponse, error)

	// PostJail request  with any body
	PostJailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailResponse, error)

	PostJailWithResponse(ctx context.Context, body PostJailJSONRequestBody) (*PostJailResponse, error)

	// PostJailActivate request  with any body
	PostJailActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailActivateResponse, error)

	PostJailActivateWithResponse(ctx context.Context, body PostJailActivateJSONRequestBody) (*PostJailActivateResponse, error)

	// PostJailClean request  with any body
	PostJailCleanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailCleanResponse, error)

	PostJailCleanWithResponse(ctx context.Context, body PostJailCleanJSONRequestBody) (*PostJailCleanResponse, error)

	// GetJailDefaultConfiguration request
	GetJailDefaultConfigurationWithResponse(ctx context.Context) (*GetJailDefaultConfigurationResponse, error)

	// PostJailExec request  with any body
	PostJailExecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailExecResponse, error)

	PostJailExecWithResponse(ctx context.Context, body PostJailExecJSONRequestBody) (*PostJailExecResponse, error)

	// PostJailExport request  with any body
	PostJailExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailExportResponse, error)

	PostJailExportWithResponse(ctx context.Context, body PostJailExportJSONRequestBody) (*PostJailExportResponse, error)

	// PostJailFetch request  with any body
	PostJailFetchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailFetchResponse, error)

	PostJailFetchWithResponse(ctx context.Context, body PostJailFetchJSONRequestBody) (*PostJailFetchResponse, error)

	// PostJailFstab request  with any body
	PostJailFstabWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailFstabResponse, error)

	PostJailFstabWithResponse(ctx context.Context, body PostJailFstabJSONRequestBody) (*PostJailFstabResponse, error)

	// GetJailGetActivatedPool request
	GetJailGetActivatedPoolWithResponse(ctx context.Context) (*GetJailGetActivatedPoolResponse, error)

	// DeleteJailIdId request  with any body
	DeleteJailIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*DeleteJailIdIdResponse, error)

	DeleteJailIdIdWithResponse(ctx context.Context, id string, body DeleteJailIdIdJSONRequestBody) (*DeleteJailIdIdResponse, error)

	// GetJailIdId request
	GetJailIdIdWithResponse(ctx context.Context, id []interface{}, params *GetJailIdIdParams) (*GetJailIdIdResponse, error)

	// PutJailIdId request  with any body
	PutJailIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutJailIdIdResponse, error)

	PutJailIdIdWithResponse(ctx context.Context, id string, body PutJailIdIdJSONRequestBody) (*PutJailIdIdResponse, error)

	// PostJailIdIdClone request  with any body
	PostJailIdIdCloneWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostJailIdIdCloneResponse, error)

	PostJailIdIdCloneWithResponse(ctx context.Context, id string, body PostJailIdIdCloneJSONRequestBody) (*PostJailIdIdCloneResponse, error)

	// PostJailImportImage request  with any body
	PostJailImportImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailImportImageResponse, error)

	PostJailImportImageWithResponse(ctx context.Context, body PostJailImportImageJSONRequestBody) (*PostJailImportImageResponse, error)

	// GetJailInterfaceChoices request
	GetJailInterfaceChoicesWithResponse(ctx context.Context) (*GetJailInterfaceChoicesResponse, error)

	// PostJailRcAction request  with any body
	PostJailRcActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailRcActionResponse, error)

	PostJailRcActionWithResponse(ctx context.Context, body PostJailRcActionJSONRequestBody) (*PostJailRcActionResponse, error)

	// PostJailReleasesChoices request  with any body
	PostJailReleasesChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailReleasesChoicesResponse, error)

	PostJailReleasesChoicesWithResponse(ctx context.Context, body PostJailReleasesChoicesJSONRequestBody) (*PostJailReleasesChoicesResponse, error)

	// PostJailRestart request  with any body
	PostJailRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailRestartResponse, error)

	PostJailRestartWithResponse(ctx context.Context, body PostJailRestartJSONRequestBody) (*PostJailRestartResponse, error)

	// PostJailStart request  with any body
	PostJailStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailStartResponse, error)

	PostJailStartWithResponse(ctx context.Context, body PostJailStartJSONRequestBody) (*PostJailStartResponse, error)

	// PostJailStop request  with any body
	PostJailStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailStopResponse, error)

	PostJailStopWithResponse(ctx context.Context, body PostJailStopJSONRequestBody) (*PostJailStopResponse, error)

	// PostJailUpdateDefaults request  with any body
	PostJailUpdateDefaultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailUpdateDefaultsResponse, error)

	PostJailUpdateDefaultsWithResponse(ctx context.Context, body PostJailUpdateDefaultsJSONRequestBody) (*PostJailUpdateDefaultsResponse, error)

	// PostJailUpdateToLatestPatch request  with any body
	PostJailUpdateToLatestPatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailUpdateToLatestPatchResponse, error)

	PostJailUpdateToLatestPatchWithResponse(ctx context.Context, body PostJailUpdateToLatestPatchJSONRequestBody) (*PostJailUpdateToLatestPatchResponse, error)

	// GetKerberos request
	GetKerberosWithResponse(ctx context.Context) (*GetKerberosResponse, error)

	// PutKerberos request  with any body
	PutKerberosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutKerberosResponse, error)

	PutKerberosWithResponse(ctx context.Context, body PutKerberosJSONRequestBody) (*PutKerberosResponse, error)

	// GetKerberosKeytab request
	GetKerberosKeytabWithResponse(ctx context.Context, params *GetKerberosKeytabParams) (*GetKerberosKeytabResponse, error)

	// PostKerberosKeytab request  with any body
	PostKerberosKeytabWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKerberosKeytabResponse, error)

	PostKerberosKeytabWithResponse(ctx context.Context, body PostKerberosKeytabJSONRequestBody) (*PostKerberosKeytabResponse, error)

	// DeleteKerberosKeytabIdId request
	DeleteKerberosKeytabIdIdWithResponse(ctx context.Context, id int) (*DeleteKerberosKeytabIdIdResponse, error)

	// GetKerberosKeytabIdId request
	GetKerberosKeytabIdIdWithResponse(ctx context.Context, id []interface{}, params *GetKerberosKeytabIdIdParams) (*GetKerberosKeytabIdIdResponse, error)

	// PutKerberosKeytabIdId request  with any body
	PutKerberosKeytabIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutKerberosKeytabIdIdResponse, error)

	PutKerberosKeytabIdIdWithResponse(ctx context.Context, id int, body PutKerberosKeytabIdIdJSONRequestBody) (*PutKerberosKeytabIdIdResponse, error)

	// GetKerberosKeytabSystemKeytabList request
	GetKerberosKeytabSystemKeytabListWithResponse(ctx context.Context) (*GetKerberosKeytabSystemKeytabListResponse, error)

	// GetKerberosRealm request
	GetKerberosRealmWithResponse(ctx context.Context, params *GetKerberosRealmParams) (*GetKerberosRealmResponse, error)

	// PostKerberosRealm request  with any body
	PostKerberosRealmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKerberosRealmResponse, error)

	PostKerberosRealmWithResponse(ctx context.Context, body PostKerberosRealmJSONRequestBody) (*PostKerberosRealmResponse, error)

	// DeleteKerberosRealmIdId request
	DeleteKerberosRealmIdIdWithResponse(ctx context.Context, id int) (*DeleteKerberosRealmIdIdResponse, error)

	// GetKerberosRealmIdId request
	GetKerberosRealmIdIdWithResponse(ctx context.Context, id []interface{}, params *GetKerberosRealmIdIdParams) (*GetKerberosRealmIdIdResponse, error)

	// PutKerberosRealmIdId request  with any body
	PutKerberosRealmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutKerberosRealmIdIdResponse, error)

	PutKerberosRealmIdIdWithResponse(ctx context.Context, id int, body PutKerberosRealmIdIdJSONRequestBody) (*PutKerberosRealmIdIdResponse, error)

	// GetKeychaincredential request
	GetKeychaincredentialWithResponse(ctx context.Context, params *GetKeychaincredentialParams) (*GetKeychaincredentialResponse, error)

	// PostKeychaincredential request  with any body
	PostKeychaincredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKeychaincredentialResponse, error)

	PostKeychaincredentialWithResponse(ctx context.Context, body PostKeychaincredentialJSONRequestBody) (*PostKeychaincredentialResponse, error)

	// GetKeychaincredentialGenerateSshKeyPair request
	GetKeychaincredentialGenerateSshKeyPairWithResponse(ctx context.Context) (*GetKeychaincredentialGenerateSshKeyPairResponse, error)

	// DeleteKeychaincredentialIdId request  with any body
	DeleteKeychaincredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteKeychaincredentialIdIdResponse, error)

	DeleteKeychaincredentialIdIdWithResponse(ctx context.Context, id int, body DeleteKeychaincredentialIdIdJSONRequestBody) (*DeleteKeychaincredentialIdIdResponse, error)

	// GetKeychaincredentialIdId request
	GetKeychaincredentialIdIdWithResponse(ctx context.Context, id []interface{}, params *GetKeychaincredentialIdIdParams) (*GetKeychaincredentialIdIdResponse, error)

	// PutKeychaincredentialIdId request  with any body
	PutKeychaincredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutKeychaincredentialIdIdResponse, error)

	PutKeychaincredentialIdIdWithResponse(ctx context.Context, id int, body PutKeychaincredentialIdIdJSONRequestBody) (*PutKeychaincredentialIdIdResponse, error)

	// PostKeychaincredentialRemoteSshHostKeyScan request  with any body
	PostKeychaincredentialRemoteSshHostKeyScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error)

	PostKeychaincredentialRemoteSshHostKeyScanWithResponse(ctx context.Context, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error)

	// PostKeychaincredentialRemoteSshSemiautomaticSetup request  with any body
	PostKeychaincredentialRemoteSshSemiautomaticSetupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error)

	PostKeychaincredentialRemoteSshSemiautomaticSetupWithResponse(ctx context.Context, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error)

	// PostKeychaincredentialUsedBy request  with any body
	PostKeychaincredentialUsedByWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKeychaincredentialUsedByResponse, error)

	PostKeychaincredentialUsedByWithResponse(ctx context.Context, body PostKeychaincredentialUsedByJSONRequestBody) (*PostKeychaincredentialUsedByResponse, error)

	// GetLdap request
	GetLdapWithResponse(ctx context.Context) (*GetLdapResponse, error)

	// PutLdap request  with any body
	PutLdapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutLdapResponse, error)

	PutLdapWithResponse(ctx context.Context, body PutLdapJSONRequestBody) (*PutLdapResponse, error)

	// GetLdapGetState request
	GetLdapGetStateWithResponse(ctx context.Context) (*GetLdapGetStateResponse, error)

	// GetLdapIdmapBackendChoices request
	GetLdapIdmapBackendChoicesWithResponse(ctx context.Context) (*GetLdapIdmapBackendChoicesResponse, error)

	// GetLdapSchemaChoices request
	GetLdapSchemaChoicesWithResponse(ctx context.Context) (*GetLdapSchemaChoicesResponse, error)

	// GetLdapSslChoices request
	GetLdapSslChoicesWithResponse(ctx context.Context) (*GetLdapSslChoicesResponse, error)

	// GetLldp request
	GetLldpWithResponse(ctx context.Context) (*GetLldpResponse, error)

	// PutLldp request  with any body
	PutLldpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutLldpResponse, error)

	PutLldpWithResponse(ctx context.Context, body PutLldpJSONRequestBody) (*PutLldpResponse, error)

	// GetMail request
	GetMailWithResponse(ctx context.Context) (*GetMailResponse, error)

	// PutMail request  with any body
	PutMailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutMailResponse, error)

	PutMailWithResponse(ctx context.Context, body PutMailJSONRequestBody) (*PutMailResponse, error)

	// PostMailSend request  with any body
	PostMailSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostMailSendResponse, error)

	PostMailSendWithResponse(ctx context.Context, body PostMailSendJSONRequestBody) (*PostMailSendResponse, error)

	// GetMultipath request
	GetMultipathWithResponse(ctx context.Context, params *GetMultipathParams) (*GetMultipathResponse, error)

	// GetMultipathIdId request
	GetMultipathIdIdWithResponse(ctx context.Context, id []interface{}, params *GetMultipathIdIdParams) (*GetMultipathIdIdResponse, error)

	// GetNetworkConfiguration request
	GetNetworkConfigurationWithResponse(ctx context.Context) (*GetNetworkConfigurationResponse, error)

	// PutNetworkConfiguration request  with any body
	PutNetworkConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutNetworkConfigurationResponse, error)

	PutNetworkConfigurationWithResponse(ctx context.Context, body PutNetworkConfigurationJSONRequestBody) (*PutNetworkConfigurationResponse, error)

	// GetNetworkGeneralSummary request
	GetNetworkGeneralSummaryWithResponse(ctx context.Context) (*GetNetworkGeneralSummaryResponse, error)

	// GetNfs request
	GetNfsWithResponse(ctx context.Context) (*GetNfsResponse, error)

	// PutNfs request  with any body
	PutNfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutNfsResponse, error)

	PutNfsWithResponse(ctx context.Context, body PutNfsJSONRequestBody) (*PutNfsResponse, error)

	// GetNis request
	GetNisWithResponse(ctx context.Context) (*GetNisResponse, error)

	// PutNis request  with any body
	PutNisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutNisResponse, error)

	PutNisWithResponse(ctx context.Context, body PutNisJSONRequestBody) (*PutNisResponse, error)

	// GetNisGetState request
	GetNisGetStateWithResponse(ctx context.Context) (*GetNisGetStateResponse, error)

	// GetPlugin request
	GetPluginWithResponse(ctx context.Context, params *GetPluginParams) (*GetPluginResponse, error)

	// PostPlugin request  with any body
	PostPluginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPluginResponse, error)

	PostPluginWithResponse(ctx context.Context, body PostPluginJSONRequestBody) (*PostPluginResponse, error)

	// PostPluginAvailable request  with any body
	PostPluginAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPluginAvailableResponse, error)

	PostPluginAvailableWithResponse(ctx context.Context, body PostPluginAvailableJSONRequestBody) (*PostPluginAvailableResponse, error)

	// PostPluginBranchesChoices request  with any body
	PostPluginBranchesChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPluginBranchesChoicesResponse, error)

	PostPluginBranchesChoicesWithResponse(ctx context.Context, body PostPluginBranchesChoicesJSONRequestBody) (*PostPluginBranchesChoicesResponse, error)

	// PostPluginDefaults request  with any body
	PostPluginDefaultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPluginDefaultsResponse, error)

	PostPluginDefaultsWithResponse(ctx context.Context, body PostPluginDefaultsJSONRequestBody) (*PostPluginDefaultsResponse, error)

	// DeletePluginIdId request
	DeletePluginIdIdWithResponse(ctx context.Context, id string) (*DeletePluginIdIdResponse, error)

	// GetPluginIdId request
	GetPluginIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPluginIdIdParams) (*GetPluginIdIdResponse, error)

	// PutPluginIdId request  with any body
	PutPluginIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPluginIdIdResponse, error)

	PutPluginIdIdWithResponse(ctx context.Context, id string, body PutPluginIdIdJSONRequestBody) (*PutPluginIdIdResponse, error)

	// GetPluginOfficialRepositories request
	GetPluginOfficialRepositoriesWithResponse(ctx context.Context) (*GetPluginOfficialRepositoriesResponse, error)

	// GetPluginRetrieveVersionsForRepos request
	GetPluginRetrieveVersionsForReposWithResponse(ctx context.Context) (*GetPluginRetrieveVersionsForReposResponse, error)

	// GetPool request
	GetPoolWithResponse(ctx context.Context, params *GetPoolParams) (*GetPoolResponse, error)

	// PostPool request  with any body
	PostPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolResponse, error)

	PostPoolWithResponse(ctx context.Context, body PostPoolJSONRequestBody) (*PostPoolResponse, error)

	// GetPoolDataset request
	GetPoolDatasetWithResponse(ctx context.Context, params *GetPoolDatasetParams) (*GetPoolDatasetResponse, error)

	// PostPoolDataset request  with any body
	PostPoolDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolDatasetResponse, error)

	PostPoolDatasetWithResponse(ctx context.Context, body PostPoolDatasetJSONRequestBody) (*PostPoolDatasetResponse, error)

	// DeletePoolDatasetIdId request  with any body
	DeletePoolDatasetIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*DeletePoolDatasetIdIdResponse, error)

	DeletePoolDatasetIdIdWithResponse(ctx context.Context, id string, body DeletePoolDatasetIdIdJSONRequestBody) (*DeletePoolDatasetIdIdResponse, error)

	// GetPoolDatasetIdId request
	GetPoolDatasetIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPoolDatasetIdIdParams) (*GetPoolDatasetIdIdResponse, error)

	// PutPoolDatasetIdId request  with any body
	PutPoolDatasetIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPoolDatasetIdIdResponse, error)

	PutPoolDatasetIdIdWithResponse(ctx context.Context, id string, body PutPoolDatasetIdIdJSONRequestBody) (*PutPoolDatasetIdIdResponse, error)

	// PostPoolDatasetIdIdAttachments request  with any body
	PostPoolDatasetIdIdAttachmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostPoolDatasetIdIdAttachmentsResponse, error)

	PostPoolDatasetIdIdAttachmentsWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody) (*PostPoolDatasetIdIdAttachmentsResponse, error)

	// PostPoolDatasetIdIdPermission request  with any body
	PostPoolDatasetIdIdPermissionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostPoolDatasetIdIdPermissionResponse, error)

	PostPoolDatasetIdIdPermissionWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody) (*PostPoolDatasetIdIdPermissionResponse, error)

	// PostPoolDatasetIdIdProcesses request  with any body
	PostPoolDatasetIdIdProcessesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostPoolDatasetIdIdProcessesResponse, error)

	PostPoolDatasetIdIdProcessesWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody) (*PostPoolDatasetIdIdProcessesResponse, error)

	// PostPoolDatasetIdIdPromote request  with any body
	PostPoolDatasetIdIdPromoteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostPoolDatasetIdIdPromoteResponse, error)

	PostPoolDatasetIdIdPromoteWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody) (*PostPoolDatasetIdIdPromoteResponse, error)

	// PostPoolDatasetRecommendedZvolBlocksize request  with any body
	PostPoolDatasetRecommendedZvolBlocksizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error)

	PostPoolDatasetRecommendedZvolBlocksizeWithResponse(ctx context.Context, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error)

	// PostPoolFilesystemChoices request  with any body
	PostPoolFilesystemChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolFilesystemChoicesResponse, error)

	PostPoolFilesystemChoicesWithResponse(ctx context.Context, body PostPoolFilesystemChoicesJSONRequestBody) (*PostPoolFilesystemChoicesResponse, error)

	// GetPoolIdId request
	GetPoolIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPoolIdIdParams) (*GetPoolIdIdResponse, error)

	// PutPoolIdId request  with any body
	PutPoolIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutPoolIdIdResponse, error)

	PutPoolIdIdWithResponse(ctx context.Context, id int, body PutPoolIdIdJSONRequestBody) (*PutPoolIdIdResponse, error)

	// PostPoolIdIdAttachments request  with any body
	PostPoolIdIdAttachmentsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdAttachmentsResponse, error)

	PostPoolIdIdAttachmentsWithResponse(ctx context.Context, id int, body PostPoolIdIdAttachmentsJSONRequestBody) (*PostPoolIdIdAttachmentsResponse, error)

	// PostPoolIdIdDetach request  with any body
	PostPoolIdIdDetachWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdDetachResponse, error)

	PostPoolIdIdDetachWithResponse(ctx context.Context, id int, body PostPoolIdIdDetachJSONRequestBody) (*PostPoolIdIdDetachResponse, error)

	// PostPoolIdIdDownloadEncryptionKey request  with any body
	PostPoolIdIdDownloadEncryptionKeyWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdDownloadEncryptionKeyResponse, error)

	PostPoolIdIdDownloadEncryptionKeyWithResponse(ctx context.Context, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody) (*PostPoolIdIdDownloadEncryptionKeyResponse, error)

	// PostPoolIdIdExport request  with any body
	PostPoolIdIdExportWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdExportResponse, error)

	PostPoolIdIdExportWithResponse(ctx context.Context, id int, body PostPoolIdIdExportJSONRequestBody) (*PostPoolIdIdExportResponse, error)

	// PostPoolIdIdGetDisks request  with any body
	PostPoolIdIdGetDisksWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdGetDisksResponse, error)

	PostPoolIdIdGetDisksWithResponse(ctx context.Context, id int, body PostPoolIdIdGetDisksJSONRequestBody) (*PostPoolIdIdGetDisksResponse, error)

	// PostPoolIdIdIsUpgraded request  with any body
	PostPoolIdIdIsUpgradedWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdIsUpgradedResponse, error)

	PostPoolIdIdIsUpgradedWithResponse(ctx context.Context, id int, body PostPoolIdIdIsUpgradedJSONRequestBody) (*PostPoolIdIdIsUpgradedResponse, error)

	// PostPoolIdIdLock request  with any body
	PostPoolIdIdLockWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdLockResponse, error)

	PostPoolIdIdLockWithResponse(ctx context.Context, id int, body PostPoolIdIdLockJSONRequestBody) (*PostPoolIdIdLockResponse, error)

	// PostPoolIdIdOffline request  with any body
	PostPoolIdIdOfflineWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdOfflineResponse, error)

	PostPoolIdIdOfflineWithResponse(ctx context.Context, id int, body PostPoolIdIdOfflineJSONRequestBody) (*PostPoolIdIdOfflineResponse, error)

	// PostPoolIdIdOnline request  with any body
	PostPoolIdIdOnlineWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdOnlineResponse, error)

	PostPoolIdIdOnlineWithResponse(ctx context.Context, id int, body PostPoolIdIdOnlineJSONRequestBody) (*PostPoolIdIdOnlineResponse, error)

	// PostPoolIdIdPassphrase request  with any body
	PostPoolIdIdPassphraseWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdPassphraseResponse, error)

	PostPoolIdIdPassphraseWithResponse(ctx context.Context, id int, body PostPoolIdIdPassphraseJSONRequestBody) (*PostPoolIdIdPassphraseResponse, error)

	// PostPoolIdIdProcesses request  with any body
	PostPoolIdIdProcessesWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdProcessesResponse, error)

	PostPoolIdIdProcessesWithResponse(ctx context.Context, id int, body PostPoolIdIdProcessesJSONRequestBody) (*PostPoolIdIdProcessesResponse, error)

	// PostPoolIdIdRecoverykeyRm request  with any body
	PostPoolIdIdRecoverykeyRmWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdRecoverykeyRmResponse, error)

	PostPoolIdIdRecoverykeyRmWithResponse(ctx context.Context, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody) (*PostPoolIdIdRecoverykeyRmResponse, error)

	// PostPoolIdIdRekey request  with any body
	PostPoolIdIdRekeyWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdRekeyResponse, error)

	PostPoolIdIdRekeyWithResponse(ctx context.Context, id int, body PostPoolIdIdRekeyJSONRequestBody) (*PostPoolIdIdRekeyResponse, error)

	// PostPoolIdIdRemove request  with any body
	PostPoolIdIdRemoveWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdRemoveResponse, error)

	PostPoolIdIdRemoveWithResponse(ctx context.Context, id int, body PostPoolIdIdRemoveJSONRequestBody) (*PostPoolIdIdRemoveResponse, error)

	// PostPoolIdIdReplace request  with any body
	PostPoolIdIdReplaceWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdReplaceResponse, error)

	PostPoolIdIdReplaceWithResponse(ctx context.Context, id int, body PostPoolIdIdReplaceJSONRequestBody) (*PostPoolIdIdReplaceResponse, error)

	// PostPoolIdIdScrub request  with any body
	PostPoolIdIdScrubWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdScrubResponse, error)

	PostPoolIdIdScrubWithResponse(ctx context.Context, id int, body PostPoolIdIdScrubJSONRequestBody) (*PostPoolIdIdScrubResponse, error)

	// PostPoolIdIdUnlock request  with any body
	PostPoolIdIdUnlockWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdUnlockResponse, error)

	PostPoolIdIdUnlockWithResponse(ctx context.Context, id int, body PostPoolIdIdUnlockJSONRequestBody) (*PostPoolIdIdUnlockResponse, error)

	// PostPoolIdIdUpgrade request  with any body
	PostPoolIdIdUpgradeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdUpgradeResponse, error)

	PostPoolIdIdUpgradeWithResponse(ctx context.Context, id int, body PostPoolIdIdUpgradeJSONRequestBody) (*PostPoolIdIdUpgradeResponse, error)

	// PostPoolImportDisk request  with any body
	PostPoolImportDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolImportDiskResponse, error)

	PostPoolImportDiskWithResponse(ctx context.Context, body PostPoolImportDiskJSONRequestBody) (*PostPoolImportDiskResponse, error)

	// PostPoolImportDiskAutodetectFsType request  with any body
	PostPoolImportDiskAutodetectFsTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolImportDiskAutodetectFsTypeResponse, error)

	PostPoolImportDiskAutodetectFsTypeWithResponse(ctx context.Context, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody) (*PostPoolImportDiskAutodetectFsTypeResponse, error)

	// GetPoolImportDiskMsdosfsLocales request
	GetPoolImportDiskMsdosfsLocalesWithResponse(ctx context.Context) (*GetPoolImportDiskMsdosfsLocalesResponse, error)

	// GetPoolImportFind request
	GetPoolImportFindWithResponse(ctx context.Context) (*GetPoolImportFindResponse, error)

	// PostPoolImportPool request  with any body
	PostPoolImportPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolImportPoolResponse, error)

	PostPoolImportPoolWithResponse(ctx context.Context, body PostPoolImportPoolJSONRequestBody) (*PostPoolImportPoolResponse, error)

	// GetPoolResilver request
	GetPoolResilverWithResponse(ctx context.Context) (*GetPoolResilverResponse, error)

	// PutPoolResilver request  with any body
	PutPoolResilverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutPoolResilverResponse, error)

	PutPoolResilverWithResponse(ctx context.Context, body PutPoolResilverJSONRequestBody) (*PutPoolResilverResponse, error)

	// GetPoolScrub request
	GetPoolScrubWithResponse(ctx context.Context, params *GetPoolScrubParams) (*GetPoolScrubResponse, error)

	// PostPoolScrub request  with any body
	PostPoolScrubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolScrubResponse, error)

	PostPoolScrubWithResponse(ctx context.Context, body PostPoolScrubJSONRequestBody) (*PostPoolScrubResponse, error)

	// DeletePoolScrubIdId request
	DeletePoolScrubIdIdWithResponse(ctx context.Context, id int) (*DeletePoolScrubIdIdResponse, error)

	// GetPoolScrubIdId request
	GetPoolScrubIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPoolScrubIdIdParams) (*GetPoolScrubIdIdResponse, error)

	// PutPoolScrubIdId request  with any body
	PutPoolScrubIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutPoolScrubIdIdResponse, error)

	PutPoolScrubIdIdWithResponse(ctx context.Context, id int, body PutPoolScrubIdIdJSONRequestBody) (*PutPoolScrubIdIdResponse, error)

	// PostPoolScrubRun request  with any body
	PostPoolScrubRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolScrubRunResponse, error)

	PostPoolScrubRunWithResponse(ctx context.Context, body PostPoolScrubRunJSONRequestBody) (*PostPoolScrubRunResponse, error)

	// GetPoolSnapshottask request
	GetPoolSnapshottaskWithResponse(ctx context.Context, params *GetPoolSnapshottaskParams) (*GetPoolSnapshottaskResponse, error)

	// PostPoolSnapshottask request  with any body
	PostPoolSnapshottaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolSnapshottaskResponse, error)

	PostPoolSnapshottaskWithResponse(ctx context.Context, body PostPoolSnapshottaskJSONRequestBody) (*PostPoolSnapshottaskResponse, error)

	// DeletePoolSnapshottaskIdId request
	DeletePoolSnapshottaskIdIdWithResponse(ctx context.Context, id int) (*DeletePoolSnapshottaskIdIdResponse, error)

	// GetPoolSnapshottaskIdId request
	GetPoolSnapshottaskIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPoolSnapshottaskIdIdParams) (*GetPoolSnapshottaskIdIdResponse, error)

	// PutPoolSnapshottaskIdId request  with any body
	PutPoolSnapshottaskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutPoolSnapshottaskIdIdResponse, error)

	PutPoolSnapshottaskIdIdWithResponse(ctx context.Context, id int, body PutPoolSnapshottaskIdIdJSONRequestBody) (*PutPoolSnapshottaskIdIdResponse, error)

	// PostPoolSnapshottaskIdIdRun request  with any body
	PostPoolSnapshottaskIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolSnapshottaskIdIdRunResponse, error)

	PostPoolSnapshottaskIdIdRunWithResponse(ctx context.Context, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody) (*PostPoolSnapshottaskIdIdRunResponse, error)

	// PostPoolUnlockServicesRestartChoices request  with any body
	PostPoolUnlockServicesRestartChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolUnlockServicesRestartChoicesResponse, error)

	PostPoolUnlockServicesRestartChoicesWithResponse(ctx context.Context, body PostPoolUnlockServicesRestartChoicesJSONRequestBody) (*PostPoolUnlockServicesRestartChoicesResponse, error)

	// GetReplication request
	GetReplicationWithResponse(ctx context.Context, params *GetReplicationParams) (*GetReplicationResponse, error)

	// PostReplication request  with any body
	PostReplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationResponse, error)

	PostReplicationWithResponse(ctx context.Context, body PostReplicationJSONRequestBody) (*PostReplicationResponse, error)

	// PostReplicationCountEligibleManualSnapshots request  with any body
	PostReplicationCountEligibleManualSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationCountEligibleManualSnapshotsResponse, error)

	PostReplicationCountEligibleManualSnapshotsWithResponse(ctx context.Context, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody) (*PostReplicationCountEligibleManualSnapshotsResponse, error)

	// PostReplicationCreateDataset request  with any body
	PostReplicationCreateDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationCreateDatasetResponse, error)

	PostReplicationCreateDatasetWithResponse(ctx context.Context, body PostReplicationCreateDatasetJSONRequestBody) (*PostReplicationCreateDatasetResponse, error)

	// DeleteReplicationIdId request
	DeleteReplicationIdIdWithResponse(ctx context.Context, id int) (*DeleteReplicationIdIdResponse, error)

	// GetReplicationIdId request
	GetReplicationIdIdWithResponse(ctx context.Context, id []interface{}, params *GetReplicationIdIdParams) (*GetReplicationIdIdResponse, error)

	// PutReplicationIdId request  with any body
	PutReplicationIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutReplicationIdIdResponse, error)

	PutReplicationIdIdWithResponse(ctx context.Context, id int, body PutReplicationIdIdJSONRequestBody) (*PutReplicationIdIdResponse, error)

	// PostReplicationIdIdRun request  with any body
	PostReplicationIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostReplicationIdIdRunResponse, error)

	PostReplicationIdIdRunWithResponse(ctx context.Context, id int, body PostReplicationIdIdRunJSONRequestBody) (*PostReplicationIdIdRunResponse, error)

	// PostReplicationListDatasets request  with any body
	PostReplicationListDatasetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationListDatasetsResponse, error)

	PostReplicationListDatasetsWithResponse(ctx context.Context, body PostReplicationListDatasetsJSONRequestBody) (*PostReplicationListDatasetsResponse, error)

	// GetReplicationListNamingSchemas request
	GetReplicationListNamingSchemasWithResponse(ctx context.Context) (*GetReplicationListNamingSchemasResponse, error)

	// PostReplicationTargetUnmatchedSnapshots request  with any body
	PostReplicationTargetUnmatchedSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationTargetUnmatchedSnapshotsResponse, error)

	PostReplicationTargetUnmatchedSnapshotsWithResponse(ctx context.Context, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody) (*PostReplicationTargetUnmatchedSnapshotsResponse, error)

	// GetReporting request
	GetReportingWithResponse(ctx context.Context) (*GetReportingResponse, error)

	// PutReporting request  with any body
	PutReportingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutReportingResponse, error)

	PutReportingWithResponse(ctx context.Context, body PutReportingJSONRequestBody) (*PutReportingResponse, error)

	// PostReportingGetData request  with any body
	PostReportingGetDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReportingGetDataResponse, error)

	PostReportingGetDataWithResponse(ctx context.Context, body PostReportingGetDataJSONRequestBody) (*PostReportingGetDataResponse, error)

	// GetReportingGraphs request
	GetReportingGraphsWithResponse(ctx context.Context, params *GetReportingGraphsParams) (*GetReportingGraphsResponse, error)

	// PostRouteIpv4gwReachable request  with any body
	PostRouteIpv4gwReachableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostRouteIpv4gwReachableResponse, error)

	PostRouteIpv4gwReachableWithResponse(ctx context.Context, body PostRouteIpv4gwReachableJSONRequestBody) (*PostRouteIpv4gwReachableResponse, error)

	// GetRouteSystemRoutes request
	GetRouteSystemRoutesWithResponse(ctx context.Context, params *GetRouteSystemRoutesParams) (*GetRouteSystemRoutesResponse, error)

	// GetRsyncd request
	GetRsyncdWithResponse(ctx context.Context) (*GetRsyncdResponse, error)

	// PutRsyncd request  with any body
	PutRsyncdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutRsyncdResponse, error)

	PutRsyncdWithResponse(ctx context.Context, body PutRsyncdJSONRequestBody) (*PutRsyncdResponse, error)

	// GetRsyncmod request
	GetRsyncmodWithResponse(ctx context.Context, params *GetRsyncmodParams) (*GetRsyncmodResponse, error)

	// PostRsyncmod request  with any body
	PostRsyncmodWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostRsyncmodResponse, error)

	PostRsyncmodWithResponse(ctx context.Context, body PostRsyncmodJSONRequestBody) (*PostRsyncmodResponse, error)

	// DeleteRsyncmodIdId request
	DeleteRsyncmodIdIdWithResponse(ctx context.Context, id int) (*DeleteRsyncmodIdIdResponse, error)

	// GetRsyncmodIdId request
	GetRsyncmodIdIdWithResponse(ctx context.Context, id []interface{}, params *GetRsyncmodIdIdParams) (*GetRsyncmodIdIdResponse, error)

	// PutRsyncmodIdId request  with any body
	PutRsyncmodIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutRsyncmodIdIdResponse, error)

	PutRsyncmodIdIdWithResponse(ctx context.Context, id int, body PutRsyncmodIdIdJSONRequestBody) (*PutRsyncmodIdIdResponse, error)

	// GetRsynctask request
	GetRsynctaskWithResponse(ctx context.Context, params *GetRsynctaskParams) (*GetRsynctaskResponse, error)

	// PostRsynctask request  with any body
	PostRsynctaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostRsynctaskResponse, error)

	PostRsynctaskWithResponse(ctx context.Context, body PostRsynctaskJSONRequestBody) (*PostRsynctaskResponse, error)

	// DeleteRsynctaskIdId request
	DeleteRsynctaskIdIdWithResponse(ctx context.Context, id int) (*DeleteRsynctaskIdIdResponse, error)

	// GetRsynctaskIdId request
	GetRsynctaskIdIdWithResponse(ctx context.Context, id []interface{}, params *GetRsynctaskIdIdParams) (*GetRsynctaskIdIdResponse, error)

	// PutRsynctaskIdId request  with any body
	PutRsynctaskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutRsynctaskIdIdResponse, error)

	PutRsynctaskIdIdWithResponse(ctx context.Context, id int, body PutRsynctaskIdIdJSONRequestBody) (*PutRsynctaskIdIdResponse, error)

	// PostRsynctaskIdIdRun request  with any body
	PostRsynctaskIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostRsynctaskIdIdRunResponse, error)

	PostRsynctaskIdIdRunWithResponse(ctx context.Context, id int, body PostRsynctaskIdIdRunJSONRequestBody) (*PostRsynctaskIdIdRunResponse, error)

	// GetS3 request
	GetS3WithResponse(ctx context.Context) (*GetS3Response, error)

	// PutS3 request  with any body
	PutS3WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutS3Response, error)

	PutS3WithResponse(ctx context.Context, body PutS3JSONRequestBody) (*PutS3Response, error)

	// GetService request
	GetServiceWithResponse(ctx context.Context, params *GetServiceParams) (*GetServiceResponse, error)

	// GetServiceIdId request
	GetServiceIdIdWithResponse(ctx context.Context, id []interface{}, params *GetServiceIdIdParams) (*GetServiceIdIdResponse, error)

	// PutServiceIdId request  with any body
	PutServiceIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutServiceIdIdResponse, error)

	PutServiceIdIdWithResponse(ctx context.Context, id string, body PutServiceIdIdJSONRequestBody) (*PutServiceIdIdResponse, error)

	// PostServiceReload request  with any body
	PostServiceReloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceReloadResponse, error)

	PostServiceReloadWithResponse(ctx context.Context, body PostServiceReloadJSONRequestBody) (*PostServiceReloadResponse, error)

	// PostServiceRestart request  with any body
	PostServiceRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceRestartResponse, error)

	PostServiceRestartWithResponse(ctx context.Context, body PostServiceRestartJSONRequestBody) (*PostServiceRestartResponse, error)

	// PostServiceStart request  with any body
	PostServiceStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceStartResponse, error)

	PostServiceStartWithResponse(ctx context.Context, body PostServiceStartJSONRequestBody) (*PostServiceStartResponse, error)

	// GetServiceStarted request
	GetServiceStartedWithResponse(ctx context.Context) (*GetServiceStartedResponse, error)

	// PostServiceStop request  with any body
	PostServiceStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceStopResponse, error)

	PostServiceStopWithResponse(ctx context.Context, body PostServiceStopJSONRequestBody) (*PostServiceStopResponse, error)

	// PostServiceTerminateProcess request  with any body
	PostServiceTerminateProcessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceTerminateProcessResponse, error)

	PostServiceTerminateProcessWithResponse(ctx context.Context, body PostServiceTerminateProcessJSONRequestBody) (*PostServiceTerminateProcessResponse, error)

	// GetSharingAfp request
	GetSharingAfpWithResponse(ctx context.Context, params *GetSharingAfpParams) (*GetSharingAfpResponse, error)

	// PostSharingAfp request  with any body
	PostSharingAfpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSharingAfpResponse, error)

	PostSharingAfpWithResponse(ctx context.Context, body PostSharingAfpJSONRequestBody) (*PostSharingAfpResponse, error)

	// DeleteSharingAfpIdId request
	DeleteSharingAfpIdIdWithResponse(ctx context.Context, id int) (*DeleteSharingAfpIdIdResponse, error)

	// GetSharingAfpIdId request
	GetSharingAfpIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSharingAfpIdIdParams) (*GetSharingAfpIdIdResponse, error)

	// PutSharingAfpIdId request  with any body
	PutSharingAfpIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSharingAfpIdIdResponse, error)

	PutSharingAfpIdIdWithResponse(ctx context.Context, id int, body PutSharingAfpIdIdJSONRequestBody) (*PutSharingAfpIdIdResponse, error)

	// GetSharingNfs request
	GetSharingNfsWithResponse(ctx context.Context, params *GetSharingNfsParams) (*GetSharingNfsResponse, error)

	// PostSharingNfs request  with any body
	PostSharingNfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSharingNfsResponse, error)

	PostSharingNfsWithResponse(ctx context.Context, body PostSharingNfsJSONRequestBody) (*PostSharingNfsResponse, error)

	// DeleteSharingNfsIdId request
	DeleteSharingNfsIdIdWithResponse(ctx context.Context, id int) (*DeleteSharingNfsIdIdResponse, error)

	// GetSharingNfsIdId request
	GetSharingNfsIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSharingNfsIdIdParams) (*GetSharingNfsIdIdResponse, error)

	// PutSharingNfsIdId request  with any body
	PutSharingNfsIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSharingNfsIdIdResponse, error)

	PutSharingNfsIdIdWithResponse(ctx context.Context, id int, body PutSharingNfsIdIdJSONRequestBody) (*PutSharingNfsIdIdResponse, error)

	// GetSharingSmb request
	GetSharingSmbWithResponse(ctx context.Context, params *GetSharingSmbParams) (*GetSharingSmbResponse, error)

	// PostSharingSmb request  with any body
	PostSharingSmbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSharingSmbResponse, error)

	PostSharingSmbWithResponse(ctx context.Context, body PostSharingSmbJSONRequestBody) (*PostSharingSmbResponse, error)

	// DeleteSharingSmbIdId request
	DeleteSharingSmbIdIdWithResponse(ctx context.Context, id int) (*DeleteSharingSmbIdIdResponse, error)

	// GetSharingSmbIdId request
	GetSharingSmbIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSharingSmbIdIdParams) (*GetSharingSmbIdIdResponse, error)

	// PutSharingSmbIdId request  with any body
	PutSharingSmbIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSharingSmbIdIdResponse, error)

	PutSharingSmbIdIdWithResponse(ctx context.Context, id int, body PutSharingSmbIdIdJSONRequestBody) (*PutSharingSmbIdIdResponse, error)

	// GetSharingSmbVfsobjectsChoices request
	GetSharingSmbVfsobjectsChoicesWithResponse(ctx context.Context) (*GetSharingSmbVfsobjectsChoicesResponse, error)

	// GetSharingWebdav request
	GetSharingWebdavWithResponse(ctx context.Context, params *GetSharingWebdavParams) (*GetSharingWebdavResponse, error)

	// PostSharingWebdav request  with any body
	PostSharingWebdavWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSharingWebdavResponse, error)

	PostSharingWebdavWithResponse(ctx context.Context, body PostSharingWebdavJSONRequestBody) (*PostSharingWebdavResponse, error)

	// DeleteSharingWebdavIdId request
	DeleteSharingWebdavIdIdWithResponse(ctx context.Context, id int) (*DeleteSharingWebdavIdIdResponse, error)

	// GetSharingWebdavIdId request
	GetSharingWebdavIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSharingWebdavIdIdParams) (*GetSharingWebdavIdIdResponse, error)

	// PutSharingWebdavIdId request  with any body
	PutSharingWebdavIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSharingWebdavIdIdResponse, error)

	PutSharingWebdavIdIdWithResponse(ctx context.Context, id int, body PutSharingWebdavIdIdJSONRequestBody) (*PutSharingWebdavIdIdResponse, error)

	// GetSmart request
	GetSmartWithResponse(ctx context.Context) (*GetSmartResponse, error)

	// PutSmart request  with any body
	PutSmartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSmartResponse, error)

	PutSmartWithResponse(ctx context.Context, body PutSmartJSONRequestBody) (*PutSmartResponse, error)

	// GetSmartTest request
	GetSmartTestWithResponse(ctx context.Context, params *GetSmartTestParams) (*GetSmartTestResponse, error)

	// PostSmartTest request  with any body
	PostSmartTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSmartTestResponse, error)

	PostSmartTestWithResponse(ctx context.Context, body PostSmartTestJSONRequestBody) (*PostSmartTestResponse, error)

	// DeleteSmartTestIdId request
	DeleteSmartTestIdIdWithResponse(ctx context.Context, id int) (*DeleteSmartTestIdIdResponse, error)

	// GetSmartTestIdId request
	GetSmartTestIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSmartTestIdIdParams) (*GetSmartTestIdIdResponse, error)

	// PutSmartTestIdId request  with any body
	PutSmartTestIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSmartTestIdIdResponse, error)

	PutSmartTestIdIdWithResponse(ctx context.Context, id int, body PutSmartTestIdIdJSONRequestBody) (*PutSmartTestIdIdResponse, error)

	// GetSmartTestResults request
	GetSmartTestResultsWithResponse(ctx context.Context, params *GetSmartTestResultsParams) (*GetSmartTestResultsResponse, error)

	// GetSmb request
	GetSmbWithResponse(ctx context.Context) (*GetSmbResponse, error)

	// PutSmb request  with any body
	PutSmbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSmbResponse, error)

	PutSmbWithResponse(ctx context.Context, body PutSmbJSONRequestBody) (*PutSmbResponse, error)

	// GetSmbBindipChoices request
	GetSmbBindipChoicesWithResponse(ctx context.Context) (*GetSmbBindipChoicesResponse, error)

	// GetSmbDomainChoices request
	GetSmbDomainChoicesWithResponse(ctx context.Context) (*GetSmbDomainChoicesResponse, error)

	// GetSmbSharesec request
	GetSmbSharesecWithResponse(ctx context.Context, params *GetSmbSharesecParams) (*GetSmbSharesecResponse, error)

	// PostSmbSharesec request  with any body
	PostSmbSharesecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSmbSharesecResponse, error)

	PostSmbSharesecWithResponse(ctx context.Context, body PostSmbSharesecJSONRequestBody) (*PostSmbSharesecResponse, error)

	// PostSmbSharesecGetacl request  with any body
	PostSmbSharesecGetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSmbSharesecGetaclResponse, error)

	PostSmbSharesecGetaclWithResponse(ctx context.Context, body PostSmbSharesecGetaclJSONRequestBody) (*PostSmbSharesecGetaclResponse, error)

	// DeleteSmbSharesecIdId request
	DeleteSmbSharesecIdIdWithResponse(ctx context.Context, id string) (*DeleteSmbSharesecIdIdResponse, error)

	// GetSmbSharesecIdId request
	GetSmbSharesecIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSmbSharesecIdIdParams) (*GetSmbSharesecIdIdResponse, error)

	// PutSmbSharesecIdId request  with any body
	PutSmbSharesecIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSmbSharesecIdIdResponse, error)

	PutSmbSharesecIdIdWithResponse(ctx context.Context, id int, body PutSmbSharesecIdIdJSONRequestBody) (*PutSmbSharesecIdIdResponse, error)

	// GetSmbSharesecSynchronizeAcls request
	GetSmbSharesecSynchronizeAclsWithResponse(ctx context.Context) (*GetSmbSharesecSynchronizeAclsResponse, error)

	// GetSmbUnixcharsetChoices request
	GetSmbUnixcharsetChoicesWithResponse(ctx context.Context) (*GetSmbUnixcharsetChoicesResponse, error)

	// GetSnmp request
	GetSnmpWithResponse(ctx context.Context) (*GetSnmpResponse, error)

	// PutSnmp request  with any body
	PutSnmpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSnmpResponse, error)

	PutSnmpWithResponse(ctx context.Context, body PutSnmpJSONRequestBody) (*PutSnmpResponse, error)

	// GetSsh request
	GetSshWithResponse(ctx context.Context) (*GetSshResponse, error)

	// PutSsh request  with any body
	PutSshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSshResponse, error)

	PutSshWithResponse(ctx context.Context, body PutSshJSONRequestBody) (*PutSshResponse, error)

	// GetSshBindifaceChoices request
	GetSshBindifaceChoicesWithResponse(ctx context.Context) (*GetSshBindifaceChoicesResponse, error)

	// GetStaticroute request
	GetStaticrouteWithResponse(ctx context.Context, params *GetStaticrouteParams) (*GetStaticrouteResponse, error)

	// PostStaticroute request  with any body
	PostStaticrouteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostStaticrouteResponse, error)

	PostStaticrouteWithResponse(ctx context.Context, body PostStaticrouteJSONRequestBody) (*PostStaticrouteResponse, error)

	// DeleteStaticrouteIdId request
	DeleteStaticrouteIdIdWithResponse(ctx context.Context, id int) (*DeleteStaticrouteIdIdResponse, error)

	// GetStaticrouteIdId request
	GetStaticrouteIdIdWithResponse(ctx context.Context, id []interface{}, params *GetStaticrouteIdIdParams) (*GetStaticrouteIdIdResponse, error)

	// PutStaticrouteIdId request  with any body
	PutStaticrouteIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutStaticrouteIdIdResponse, error)

	PutStaticrouteIdIdWithResponse(ctx context.Context, id int, body PutStaticrouteIdIdJSONRequestBody) (*PutStaticrouteIdIdResponse, error)

	// PostStatsGetData request  with any body
	PostStatsGetDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostStatsGetDataResponse, error)

	PostStatsGetDataWithResponse(ctx context.Context, body PostStatsGetDataJSONRequestBody) (*PostStatsGetDataResponse, error)

	// PostStatsGetDatasetInfo request  with any body
	PostStatsGetDatasetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostStatsGetDatasetInfoResponse, error)

	PostStatsGetDatasetInfoWithResponse(ctx context.Context, body PostStatsGetDatasetInfoJSONRequestBody) (*PostStatsGetDatasetInfoResponse, error)

	// GetStatsGetSources request
	GetStatsGetSourcesWithResponse(ctx context.Context) (*GetStatsGetSourcesResponse, error)

	// GetSupport request
	GetSupportWithResponse(ctx context.Context) (*GetSupportResponse, error)

	// PutSupport request  with any body
	PutSupportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSupportResponse, error)

	PutSupportWithResponse(ctx context.Context, body PutSupportJSONRequestBody) (*PutSupportResponse, error)

	// PostSupportFetchCategories request  with any body
	PostSupportFetchCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSupportFetchCategoriesResponse, error)

	PostSupportFetchCategoriesWithResponse(ctx context.Context, body PostSupportFetchCategoriesJSONRequestBody) (*PostSupportFetchCategoriesResponse, error)

	// GetSupportFields request
	GetSupportFieldsWithResponse(ctx context.Context) (*GetSupportFieldsResponse, error)

	// GetSupportIsAvailable request
	GetSupportIsAvailableWithResponse(ctx context.Context) (*GetSupportIsAvailableResponse, error)

	// GetSupportIsAvailableAndEnabled request
	GetSupportIsAvailableAndEnabledWithResponse(ctx context.Context) (*GetSupportIsAvailableAndEnabledResponse, error)

	// PostSupportNewTicket request  with any body
	PostSupportNewTicketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSupportNewTicketResponse, error)

	PostSupportNewTicketWithResponse(ctx context.Context, body PostSupportNewTicketJSONRequestBody) (*PostSupportNewTicketResponse, error)

	// GetSystemAdvanced request
	GetSystemAdvancedWithResponse(ctx context.Context) (*GetSystemAdvancedResponse, error)

	// PutSystemAdvanced request  with any body
	PutSystemAdvancedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSystemAdvancedResponse, error)

	PutSystemAdvancedWithResponse(ctx context.Context, body PutSystemAdvancedJSONRequestBody) (*PutSystemAdvancedResponse, error)

	// GetSystemAdvancedSerialPortChoices request
	GetSystemAdvancedSerialPortChoicesWithResponse(ctx context.Context) (*GetSystemAdvancedSerialPortChoicesResponse, error)

	// GetSystemBootId request
	GetSystemBootIdWithResponse(ctx context.Context) (*GetSystemBootIdResponse, error)

	// PostSystemFeatureEnabled request  with any body
	PostSystemFeatureEnabledWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemFeatureEnabledResponse, error)

	PostSystemFeatureEnabledWithResponse(ctx context.Context, body PostSystemFeatureEnabledJSONRequestBody) (*PostSystemFeatureEnabledResponse, error)

	// GetSystemGeneral request
	GetSystemGeneralWithResponse(ctx context.Context) (*GetSystemGeneralResponse, error)

	// PutSystemGeneral request  with any body
	PutSystemGeneralWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSystemGeneralResponse, error)

	PutSystemGeneralWithResponse(ctx context.Context, body PutSystemGeneralJSONRequestBody) (*PutSystemGeneralResponse, error)

	// GetSystemGeneralCountryChoices request
	GetSystemGeneralCountryChoicesWithResponse(ctx context.Context) (*GetSystemGeneralCountryChoicesResponse, error)

	// GetSystemGeneralKbdmapChoices request
	GetSystemGeneralKbdmapChoicesWithResponse(ctx context.Context) (*GetSystemGeneralKbdmapChoicesResponse, error)

	// GetSystemGeneralLanguageChoices request
	GetSystemGeneralLanguageChoicesWithResponse(ctx context.Context) (*GetSystemGeneralLanguageChoicesResponse, error)

	// GetSystemGeneralLocalUrl request
	GetSystemGeneralLocalUrlWithResponse(ctx context.Context) (*GetSystemGeneralLocalUrlResponse, error)

	// GetSystemGeneralTimezoneChoices request
	GetSystemGeneralTimezoneChoicesWithResponse(ctx context.Context) (*GetSystemGeneralTimezoneChoicesResponse, error)

	// GetSystemGeneralUiAddressChoices request
	GetSystemGeneralUiAddressChoicesWithResponse(ctx context.Context) (*GetSystemGeneralUiAddressChoicesResponse, error)

	// GetSystemGeneralUiCertificateChoices request
	GetSystemGeneralUiCertificateChoicesWithResponse(ctx context.Context) (*GetSystemGeneralUiCertificateChoicesResponse, error)

	// GetSystemGeneralUiRestart request
	GetSystemGeneralUiRestartWithResponse(ctx context.Context) (*GetSystemGeneralUiRestartResponse, error)

	// GetSystemGeneralUiV6addressChoices request
	GetSystemGeneralUiV6addressChoicesWithResponse(ctx context.Context) (*GetSystemGeneralUiV6addressChoicesResponse, error)

	// GetSystemInfo request
	GetSystemInfoWithResponse(ctx context.Context) (*GetSystemInfoResponse, error)

	// GetSystemIsFreenas request
	GetSystemIsFreenasWithResponse(ctx context.Context) (*GetSystemIsFreenasResponse, error)

	// GetSystemLegacyUiEnabled request
	GetSystemLegacyUiEnabledWithResponse(ctx context.Context) (*GetSystemLegacyUiEnabledResponse, error)

	// PostSystemLicenseUpdate request  with any body
	PostSystemLicenseUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemLicenseUpdateResponse, error)

	PostSystemLicenseUpdateWithResponse(ctx context.Context, body PostSystemLicenseUpdateJSONRequestBody) (*PostSystemLicenseUpdateResponse, error)

	// GetSystemNtpserver request
	GetSystemNtpserverWithResponse(ctx context.Context, params *GetSystemNtpserverParams) (*GetSystemNtpserverResponse, error)

	// PostSystemNtpserver request  with any body
	PostSystemNtpserverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemNtpserverResponse, error)

	PostSystemNtpserverWithResponse(ctx context.Context, body PostSystemNtpserverJSONRequestBody) (*PostSystemNtpserverResponse, error)

	// DeleteSystemNtpserverIdId request
	DeleteSystemNtpserverIdIdWithResponse(ctx context.Context, id int) (*DeleteSystemNtpserverIdIdResponse, error)

	// GetSystemNtpserverIdId request
	GetSystemNtpserverIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSystemNtpserverIdIdParams) (*GetSystemNtpserverIdIdResponse, error)

	// PutSystemNtpserverIdId request  with any body
	PutSystemNtpserverIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSystemNtpserverIdIdResponse, error)

	PutSystemNtpserverIdIdWithResponse(ctx context.Context, id int, body PutSystemNtpserverIdIdJSONRequestBody) (*PutSystemNtpserverIdIdResponse, error)

	// GetSystemNtpserverTestNtpServer request
	GetSystemNtpserverTestNtpServerWithResponse(ctx context.Context) (*GetSystemNtpserverTestNtpServerResponse, error)

	// GetSystemProductName request
	GetSystemProductNameWithResponse(ctx context.Context) (*GetSystemProductNameResponse, error)

	// GetSystemReady request
	GetSystemReadyWithResponse(ctx context.Context) (*GetSystemReadyResponse, error)

	// PostSystemReboot request  with any body
	PostSystemRebootWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemRebootResponse, error)

	PostSystemRebootWithResponse(ctx context.Context, body PostSystemRebootJSONRequestBody) (*PostSystemRebootResponse, error)

	// PostSystemShutdown request  with any body
	PostSystemShutdownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemShutdownResponse, error)

	PostSystemShutdownWithResponse(ctx context.Context, body PostSystemShutdownJSONRequestBody) (*PostSystemShutdownResponse, error)

	// GetSystemState request
	GetSystemStateWithResponse(ctx context.Context) (*GetSystemStateResponse, error)

	// GetSystemVersion request
	GetSystemVersionWithResponse(ctx context.Context) (*GetSystemVersionResponse, error)

	// GetSystemdataset request
	GetSystemdatasetWithResponse(ctx context.Context) (*GetSystemdatasetResponse, error)

	// PutSystemdataset request  with any body
	PutSystemdatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSystemdatasetResponse, error)

	PutSystemdatasetWithResponse(ctx context.Context, body PutSystemdatasetJSONRequestBody) (*PutSystemdatasetResponse, error)

	// GetTftp request
	GetTftpWithResponse(ctx context.Context) (*GetTftpResponse, error)

	// PutTftp request  with any body
	PutTftpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutTftpResponse, error)

	PutTftpWithResponse(ctx context.Context, body PutTftpJSONRequestBody) (*PutTftpResponse, error)

	// GetTunable request
	GetTunableWithResponse(ctx context.Context, params *GetTunableParams) (*GetTunableResponse, error)

	// PostTunable request  with any body
	PostTunableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostTunableResponse, error)

	PostTunableWithResponse(ctx context.Context, body PostTunableJSONRequestBody) (*PostTunableResponse, error)

	// DeleteTunableIdId request
	DeleteTunableIdIdWithResponse(ctx context.Context, id int) (*DeleteTunableIdIdResponse, error)

	// GetTunableIdId request
	GetTunableIdIdWithResponse(ctx context.Context, id []interface{}, params *GetTunableIdIdParams) (*GetTunableIdIdResponse, error)

	// PutTunableIdId request  with any body
	PutTunableIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutTunableIdIdResponse, error)

	PutTunableIdIdWithResponse(ctx context.Context, id int, body PutTunableIdIdJSONRequestBody) (*PutTunableIdIdResponse, error)

	// PostUpdateCheckAvailable request  with any body
	PostUpdateCheckAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateCheckAvailableResponse, error)

	PostUpdateCheckAvailableWithResponse(ctx context.Context, body PostUpdateCheckAvailableJSONRequestBody) (*PostUpdateCheckAvailableResponse, error)

	// GetUpdateDownload request
	GetUpdateDownloadWithResponse(ctx context.Context) (*GetUpdateDownloadResponse, error)

	// PostUpdateGetPending request  with any body
	PostUpdateGetPendingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateGetPendingResponse, error)

	PostUpdateGetPendingWithResponse(ctx context.Context, body PostUpdateGetPendingJSONRequestBody) (*PostUpdateGetPendingResponse, error)

	// GetUpdateGetTrains request
	GetUpdateGetTrainsWithResponse(ctx context.Context) (*GetUpdateGetTrainsResponse, error)

	// PostUpdateManual request  with any body
	PostUpdateManualWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateManualResponse, error)

	PostUpdateManualWithResponse(ctx context.Context, body PostUpdateManualJSONRequestBody) (*PostUpdateManualResponse, error)

	// PostUpdateSetTrain request  with any body
	PostUpdateSetTrainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateSetTrainResponse, error)

	PostUpdateSetTrainWithResponse(ctx context.Context, body PostUpdateSetTrainJSONRequestBody) (*PostUpdateSetTrainResponse, error)

	// PostUpdateUpdate request  with any body
	PostUpdateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateUpdateResponse, error)

	PostUpdateUpdateWithResponse(ctx context.Context, body PostUpdateUpdateJSONRequestBody) (*PostUpdateUpdateResponse, error)

	// GetUps request
	GetUpsWithResponse(ctx context.Context) (*GetUpsResponse, error)

	// PutUps request  with any body
	PutUpsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutUpsResponse, error)

	PutUpsWithResponse(ctx context.Context, body PutUpsJSONRequestBody) (*PutUpsResponse, error)

	// GetUpsDriverChoices request
	GetUpsDriverChoicesWithResponse(ctx context.Context) (*GetUpsDriverChoicesResponse, error)

	// GetUpsPortChoices request
	GetUpsPortChoicesWithResponse(ctx context.Context) (*GetUpsPortChoicesResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, params *GetUserParams) (*GetUserResponse, error)

	// PostUser request  with any body
	PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUserResponse, error)

	PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody) (*PostUserResponse, error)

	// GetUserGetNextUid request
	GetUserGetNextUidWithResponse(ctx context.Context) (*GetUserGetNextUidResponse, error)

	// PostUserGetUserObj request  with any body
	PostUserGetUserObjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUserGetUserObjResponse, error)

	PostUserGetUserObjWithResponse(ctx context.Context, body PostUserGetUserObjJSONRequestBody) (*PostUserGetUserObjResponse, error)

	// GetUserHasRootPassword request
	GetUserHasRootPasswordWithResponse(ctx context.Context) (*GetUserHasRootPasswordResponse, error)

	// DeleteUserIdId request  with any body
	DeleteUserIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteUserIdIdResponse, error)

	DeleteUserIdIdWithResponse(ctx context.Context, id int, body DeleteUserIdIdJSONRequestBody) (*DeleteUserIdIdResponse, error)

	// GetUserIdId request
	GetUserIdIdWithResponse(ctx context.Context, id []interface{}, params *GetUserIdIdParams) (*GetUserIdIdResponse, error)

	// PutUserIdId request  with any body
	PutUserIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutUserIdIdResponse, error)

	PutUserIdIdWithResponse(ctx context.Context, id int, body PutUserIdIdJSONRequestBody) (*PutUserIdIdResponse, error)

	// PostUserIdIdPopAttribute request  with any body
	PostUserIdIdPopAttributeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostUserIdIdPopAttributeResponse, error)

	PostUserIdIdPopAttributeWithResponse(ctx context.Context, id int, body PostUserIdIdPopAttributeJSONRequestBody) (*PostUserIdIdPopAttributeResponse, error)

	// PostUserIdIdSetAttribute request  with any body
	PostUserIdIdSetAttributeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostUserIdIdSetAttributeResponse, error)

	PostUserIdIdSetAttributeWithResponse(ctx context.Context, id int, body PostUserIdIdSetAttributeJSONRequestBody) (*PostUserIdIdSetAttributeResponse, error)

	// GetUserShellChoices request
	GetUserShellChoicesWithResponse(ctx context.Context) (*GetUserShellChoicesResponse, error)

	// GetVm request
	GetVmWithResponse(ctx context.Context, params *GetVmParams) (*GetVmResponse, error)

	// PostVm request  with any body
	PostVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmResponse, error)

	PostVmWithResponse(ctx context.Context, body PostVmJSONRequestBody) (*PostVmResponse, error)

	// GetVmDevice request
	GetVmDeviceWithResponse(ctx context.Context, params *GetVmDeviceParams) (*GetVmDeviceResponse, error)

	// PostVmDevice request  with any body
	PostVmDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmDeviceResponse, error)

	PostVmDeviceWithResponse(ctx context.Context, body PostVmDeviceJSONRequestBody) (*PostVmDeviceResponse, error)

	// DeleteVmDeviceIdId request  with any body
	DeleteVmDeviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteVmDeviceIdIdResponse, error)

	DeleteVmDeviceIdIdWithResponse(ctx context.Context, id int, body DeleteVmDeviceIdIdJSONRequestBody) (*DeleteVmDeviceIdIdResponse, error)

	// GetVmDeviceIdId request
	GetVmDeviceIdIdWithResponse(ctx context.Context, id []interface{}, params *GetVmDeviceIdIdParams) (*GetVmDeviceIdIdResponse, error)

	// PutVmDeviceIdId request  with any body
	PutVmDeviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutVmDeviceIdIdResponse, error)

	PutVmDeviceIdIdWithResponse(ctx context.Context, id int, body PutVmDeviceIdIdJSONRequestBody) (*PutVmDeviceIdIdResponse, error)

	// GetVmDeviceNicAttachChoices request
	GetVmDeviceNicAttachChoicesWithResponse(ctx context.Context) (*GetVmDeviceNicAttachChoicesResponse, error)

	// GetVmDeviceVncBindChoices request
	GetVmDeviceVncBindChoicesWithResponse(ctx context.Context) (*GetVmDeviceVncBindChoicesResponse, error)

	// GetVmFlags request
	GetVmFlagsWithResponse(ctx context.Context) (*GetVmFlagsResponse, error)

	// PostVmGetAttachedIface request  with any body
	PostVmGetAttachedIfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmGetAttachedIfaceResponse, error)

	PostVmGetAttachedIfaceWithResponse(ctx context.Context, body PostVmGetAttachedIfaceJSONRequestBody) (*PostVmGetAttachedIfaceResponse, error)

	// PostVmGetAvailableMemory request  with any body
	PostVmGetAvailableMemoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmGetAvailableMemoryResponse, error)

	PostVmGetAvailableMemoryWithResponse(ctx context.Context, body PostVmGetAvailableMemoryJSONRequestBody) (*PostVmGetAvailableMemoryResponse, error)

	// PostVmGetConsole request  with any body
	PostVmGetConsoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmGetConsoleResponse, error)

	PostVmGetConsoleWithResponse(ctx context.Context, body PostVmGetConsoleJSONRequestBody) (*PostVmGetConsoleResponse, error)

	// GetVmGetVmemoryInUse request
	GetVmGetVmemoryInUseWithResponse(ctx context.Context) (*GetVmGetVmemoryInUseResponse, error)

	// PostVmGetVnc request  with any body
	PostVmGetVncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmGetVncResponse, error)

	PostVmGetVncWithResponse(ctx context.Context, body PostVmGetVncJSONRequestBody) (*PostVmGetVncResponse, error)

	// GetVmGetVncIpv4 request
	GetVmGetVncIpv4WithResponse(ctx context.Context) (*GetVmGetVncIpv4Response, error)

	// DeleteVmIdId request
	DeleteVmIdIdWithResponse(ctx context.Context, id int) (*DeleteVmIdIdResponse, error)

	// GetVmIdId request
	GetVmIdIdWithResponse(ctx context.Context, id []interface{}, params *GetVmIdIdParams) (*GetVmIdIdResponse, error)

	// PutVmIdId request  with any body
	PutVmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutVmIdIdResponse, error)

	PutVmIdIdWithResponse(ctx context.Context, id int, body PutVmIdIdJSONRequestBody) (*PutVmIdIdResponse, error)

	// PostVmIdIdClone request  with any body
	PostVmIdIdCloneWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdCloneResponse, error)

	PostVmIdIdCloneWithResponse(ctx context.Context, id int, body PostVmIdIdCloneJSONRequestBody) (*PostVmIdIdCloneResponse, error)

	// PostVmIdIdRestart request  with any body
	PostVmIdIdRestartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdRestartResponse, error)

	PostVmIdIdRestartWithResponse(ctx context.Context, id int, body PostVmIdIdRestartJSONRequestBody) (*PostVmIdIdRestartResponse, error)

	// PostVmIdIdStart request  with any body
	PostVmIdIdStartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdStartResponse, error)

	PostVmIdIdStartWithResponse(ctx context.Context, id int, body PostVmIdIdStartJSONRequestBody) (*PostVmIdIdStartResponse, error)

	// PostVmIdIdStatus request  with any body
	PostVmIdIdStatusWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdStatusResponse, error)

	PostVmIdIdStatusWithResponse(ctx context.Context, id int, body PostVmIdIdStatusJSONRequestBody) (*PostVmIdIdStatusResponse, error)

	// PostVmIdIdStop request  with any body
	PostVmIdIdStopWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdStopResponse, error)

	PostVmIdIdStopWithResponse(ctx context.Context, id int, body PostVmIdIdStopJSONRequestBody) (*PostVmIdIdStopResponse, error)

	// GetVmIdentifyHypervisor request
	GetVmIdentifyHypervisorWithResponse(ctx context.Context) (*GetVmIdentifyHypervisorResponse, error)

	// GetVmRandomMac request
	GetVmRandomMacWithResponse(ctx context.Context) (*GetVmRandomMacResponse, error)

	// GetVmVncPortWizard request
	GetVmVncPortWizardWithResponse(ctx context.Context) (*GetVmVncPortWizardResponse, error)

	// GetVmware request
	GetVmwareWithResponse(ctx context.Context, params *GetVmwareParams) (*GetVmwareResponse, error)

	// PostVmware request  with any body
	PostVmwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareResponse, error)

	PostVmwareWithResponse(ctx context.Context, body PostVmwareJSONRequestBody) (*PostVmwareResponse, error)

	// PostVmwareDatasetHasVms request  with any body
	PostVmwareDatasetHasVmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareDatasetHasVmsResponse, error)

	PostVmwareDatasetHasVmsWithResponse(ctx context.Context, body PostVmwareDatasetHasVmsJSONRequestBody) (*PostVmwareDatasetHasVmsResponse, error)

	// PostVmwareGetDatastores request  with any body
	PostVmwareGetDatastoresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareGetDatastoresResponse, error)

	PostVmwareGetDatastoresWithResponse(ctx context.Context, body PostVmwareGetDatastoresJSONRequestBody) (*PostVmwareGetDatastoresResponse, error)

	// PostVmwareGetVirtualMachines request  with any body
	PostVmwareGetVirtualMachinesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareGetVirtualMachinesResponse, error)

	PostVmwareGetVirtualMachinesWithResponse(ctx context.Context, body PostVmwareGetVirtualMachinesJSONRequestBody) (*PostVmwareGetVirtualMachinesResponse, error)

	// DeleteVmwareIdId request
	DeleteVmwareIdIdWithResponse(ctx context.Context, id int) (*DeleteVmwareIdIdResponse, error)

	// GetVmwareIdId request
	GetVmwareIdIdWithResponse(ctx context.Context, id []interface{}, params *GetVmwareIdIdParams) (*GetVmwareIdIdResponse, error)

	// PutVmwareIdId request  with any body
	PutVmwareIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutVmwareIdIdResponse, error)

	PutVmwareIdIdWithResponse(ctx context.Context, id int, body PutVmwareIdIdJSONRequestBody) (*PutVmwareIdIdResponse, error)

	// PostVmwareMatchDatastoresWithDatasets request  with any body
	PostVmwareMatchDatastoresWithDatasetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareMatchDatastoresWithDatasetsResponse, error)

	PostVmwareMatchDatastoresWithDatasetsWithResponse(ctx context.Context, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody) (*PostVmwareMatchDatastoresWithDatasetsResponse, error)

	// GetWebdav request
	GetWebdavWithResponse(ctx context.Context) (*GetWebdavResponse, error)

	// PutWebdav request  with any body
	PutWebdavWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutWebdavResponse, error)

	PutWebdavWithResponse(ctx context.Context, body PutWebdavJSONRequestBody) (*PutWebdavResponse, error)

	// GetWebuiImage request
	GetWebuiImageWithResponse(ctx context.Context, params *GetWebuiImageParams) (*GetWebuiImageResponse, error)

	// DeleteWebuiImageIdId request
	DeleteWebuiImageIdIdWithResponse(ctx context.Context, id int) (*DeleteWebuiImageIdIdResponse, error)

	// GetWebuiImageIdId request
	GetWebuiImageIdIdWithResponse(ctx context.Context, id []interface{}, params *GetWebuiImageIdIdParams) (*GetWebuiImageIdIdResponse, error)

	// GetZfsSnapshot request
	GetZfsSnapshotWithResponse(ctx context.Context, params *GetZfsSnapshotParams) (*GetZfsSnapshotResponse, error)

	// PostZfsSnapshot request  with any body
	PostZfsSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostZfsSnapshotResponse, error)

	PostZfsSnapshotWithResponse(ctx context.Context, body PostZfsSnapshotJSONRequestBody) (*PostZfsSnapshotResponse, error)

	// PostZfsSnapshotClone request  with any body
	PostZfsSnapshotCloneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostZfsSnapshotCloneResponse, error)

	PostZfsSnapshotCloneWithResponse(ctx context.Context, body PostZfsSnapshotCloneJSONRequestBody) (*PostZfsSnapshotCloneResponse, error)

	// DeleteZfsSnapshotIdId request  with any body
	DeleteZfsSnapshotIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*DeleteZfsSnapshotIdIdResponse, error)

	DeleteZfsSnapshotIdIdWithResponse(ctx context.Context, id string, body DeleteZfsSnapshotIdIdJSONRequestBody) (*DeleteZfsSnapshotIdIdResponse, error)

	// GetZfsSnapshotIdId request
	GetZfsSnapshotIdIdWithResponse(ctx context.Context, id []interface{}, params *GetZfsSnapshotIdIdParams) (*GetZfsSnapshotIdIdResponse, error)

	// PostZfsSnapshotRemove request  with any body
	PostZfsSnapshotRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostZfsSnapshotRemoveResponse, error)

	PostZfsSnapshotRemoveWithResponse(ctx context.Context, body PostZfsSnapshotRemoveJSONRequestBody) (*PostZfsSnapshotRemoveResponse, error)

	// PostZfsSnapshotRollback request  with any body
	PostZfsSnapshotRollbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostZfsSnapshotRollbackResponse, error)

	PostZfsSnapshotRollbackWithResponse(ctx context.Context, body PostZfsSnapshotRollbackJSONRequestBody) (*PostZfsSnapshotRollbackResponse, error)
}

type GetAcmeDnsAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAcmeDnsAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAcmeDnsAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAcmeDnsAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAcmeDnsAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAcmeDnsAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAcmeDnsAuthenticatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAcmeDnsAuthenticatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAcmeDnsAuthenticatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAcmeDnsAuthenticatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAcmeDnsAuthenticatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAcmeDnsAuthenticatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAcmeDnsAuthenticatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAcmeDnsAuthenticatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAcmeDnsAuthenticatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutActivedirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutActivedirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutActivedirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryChangeTrustAccountPwResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryChangeTrustAccountPwResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryChangeTrustAccountPwResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryDomainInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryDomainInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryDomainInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryGetSpnListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryGetSpnListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryGetSpnListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryIdmapBackendChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryIdmapBackendChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryIdmapBackendChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActivedirectoryLeaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostActivedirectoryLeaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActivedirectoryLeaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryNssInfoChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryNssInfoChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryNssInfoChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectorySaslWrappingChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectorySaslWrappingChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectorySaslWrappingChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectorySslChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectorySslChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectorySslChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivedirectoryStartedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetActivedirectoryStartedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivedirectoryStartedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAfpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAfpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAfpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAfpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAfpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAfpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAfpBindipChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAfpBindipChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAfpBindipChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertDismissResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertDismissResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertDismissResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertListCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertListCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertListCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertListPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertListPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertListPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertclassesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertclassesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertclassesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAlertclassesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAlertclassesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAlertclassesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertserviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertserviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertserviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertserviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertserviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertserviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertserviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAlertserviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertserviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertserviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertserviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertserviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAlertserviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAlertserviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAlertserviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertserviceListTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertserviceListTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertserviceListTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertserviceTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertserviceTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertserviceTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthCheckUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthCheckUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthCheckUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthGenerateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthGenerateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthGenerateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackupAzureGetBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackupAzureGetBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackupAzureGetBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackupB2GetBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackupB2GetBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackupB2GetBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackupCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBackupCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackupCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackupCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackupCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackupCredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBackupCredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackupCredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackupCredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBackupCredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupCredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBackupCredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutBackupCredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBackupCredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackupGcsGetBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackupGcsGetBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackupGcsGetBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBackupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBackupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBackupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutBackupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBackupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackupS3GetBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackupS3GetBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackupS3GetBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootAttachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootAttachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootAttachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootDetachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootDetachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootDetachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootGetDisksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootGetDisksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootGetDisksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootGetScrubIntervalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootGetScrubIntervalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootGetScrubIntervalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootSetScrubIntervalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootSetScrubIntervalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootSetScrubIntervalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootenvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootenvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootenvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootenvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootenvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootenvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBootenvIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBootenvIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBootenvIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBootenvIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBootenvIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBootenvIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBootenvIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutBootenvIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBootenvIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootenvIdIdActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootenvIdIdActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootenvIdIdActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBootenvIdIdSetAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBootenvIdIdSetAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBootenvIdIdSetAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateAcmeServerChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateAcmeServerChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateAcmeServerChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateEcCurveChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateEcCurveChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateEcCurveChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCertificateIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCertificateIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCertificateIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCertificateIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCertificateIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCertificateIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateKeyTypeChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateKeyTypeChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateKeyTypeChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateauthorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateauthorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateauthorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCertificateauthorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCertificateauthorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCertificateauthorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCertificateauthorityCaSignCsrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCertificateauthorityCaSignCsrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCertificateauthorityCaSignCsrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCertificateauthorityIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCertificateauthorityIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCertificateauthorityIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateauthorityIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificateauthorityIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateauthorityIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCertificateauthorityIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCertificateauthorityIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCertificateauthorityIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncCommonTaskSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncCommonTaskSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncCommonTaskSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCloudsyncCredentialsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCloudsyncCredentialsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCloudsyncCredentialsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncCredentialsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncCredentialsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncCredentialsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCloudsyncCredentialsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCloudsyncCredentialsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCloudsyncCredentialsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncCredentialsVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncCredentialsVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncCredentialsVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCloudsyncIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCloudsyncIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCloudsyncIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCloudsyncIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCloudsyncIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCloudsyncIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncIdIdAbortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncIdIdAbortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncIdIdAbortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncIdIdSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncIdIdSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncIdIdSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncListBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncListBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncListBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncListDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncListDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncListDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudsyncOnedriveListDrivesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCloudsyncOnedriveListDrivesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudsyncOnedriveListDrivesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudsyncProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCloudsyncProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudsyncProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConfigResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreDebugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreDebugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreDebugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreGetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCoreGetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreGetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreGetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCoreGetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreGetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreGetMethodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreGetMethodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreGetMethodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreGetServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCoreGetServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreGetServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreJobAbortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreJobAbortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreJobAbortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreJobUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreJobUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreJobUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCoreJobWaitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreJobWaitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreJobWaitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorePingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCorePingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorePingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCoreSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCronjobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCronjobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCronjobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCronjobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCronjobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCronjobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCronjobIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCronjobIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCronjobIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCronjobIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCronjobIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCronjobIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCronjobIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCronjobIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCronjobIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCronjobRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCronjobRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCronjobRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeviceGetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDeviceGetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeviceGetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDirectoryservicesGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDirectoryservicesGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDirectoryservicesGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskGetEncryptedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskGetEncryptedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskGetEncryptedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskGetUnusedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskGetUnusedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskGetUnusedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDiskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDiskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDiskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDiskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskTemperaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskTemperaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskTemperaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDiskWipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDiskWipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDiskWipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDnsQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDnsQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDnsQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDyndnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDyndnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDyndnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDyndnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDyndnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDyndnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDyndnsProviderChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDyndnsProviderChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDyndnsProviderChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemAclIsTrivialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemAclIsTrivialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemAclIsTrivialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemChownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemChownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemChownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilesystemDefaultAclChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFilesystemDefaultAclChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilesystemDefaultAclChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemGetDefaultAclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemGetDefaultAclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemGetDefaultAclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemGetaclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemGetaclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemGetaclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemListdirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemListdirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemListdirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemSetaclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemSetaclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemSetaclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemSetpermResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemSetpermResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemSetpermResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemStatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemStatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemStatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemStatfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilesystemStatfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemStatfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutFtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupGetGroupObjResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupGetGroupObjResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupGetGroupObjResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupGetNextGidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGroupGetNextGidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupGetNextGidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGroupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutGroupIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapAdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapAdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapAdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapAdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapAdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapAdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapAdIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapAdIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapAdIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapAdIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapAdIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapAdIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapAdIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapAdIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapAdIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapAutoridResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapAutoridResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapAutoridResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapAutoridResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapAutoridResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapAutoridResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapAutoridIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapAutoridIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapAutoridIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapAutoridIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapAutoridIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapAutoridIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapAutoridIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapAutoridIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapAutoridIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapClearIdmapCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapClearIdmapCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapClearIdmapCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapDomainIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapDomainIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapDomainIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapDomainIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapDomainIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapDomainIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapDomainIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapDomainIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapDomainIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapDomaintobackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapDomaintobackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapDomaintobackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapDomaintobackendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapDomaintobackendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapDomaintobackendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapDomaintobackendIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapDomaintobackendIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapDomaintobackendIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapDomaintobackendIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapDomaintobackendIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapDomaintobackendIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapDomaintobackendIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapDomaintobackendIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapDomaintobackendIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapGetConfiguredIdmapDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapGetConfiguredIdmapDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapGetConfiguredIdmapDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapGetOrCreateIdmapByDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapGetOrCreateIdmapByDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapGetOrCreateIdmapByDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapLdapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapLdapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapLdapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapLdapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapLdapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapLdapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapLdapIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapLdapIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapLdapIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapLdapIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapLdapIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapLdapIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapLdapIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapLdapIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapLdapIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapNssResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapNssResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapNssResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapNssResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapNssResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapNssResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapNssIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapNssIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapNssIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapNssIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapNssIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapNssIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapNssIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapNssIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapNssIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapRfc2307Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapRfc2307Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapRfc2307Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapRfc2307Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapRfc2307Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapRfc2307Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapRfc2307IdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapRfc2307IdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapRfc2307IdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapRfc2307IdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapRfc2307IdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapRfc2307IdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapRfc2307IdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapRfc2307IdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapRfc2307IdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapRidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapRidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapRidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapRidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapRidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapRidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapRidIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapRidIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapRidIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapRidIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapRidIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapRidIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapRidIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapRidIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapRidIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapScriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapScriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapScriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapScriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapScriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapScriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapScriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapScriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapScriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapTdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapTdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapTdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdmapTdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdmapTdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdmapTdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdmapTdbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdmapTdbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdmapTdbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdmapTdbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdmapTdbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdmapTdbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdmapTdbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIdmapTdbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdmapTdbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInitshutdownscriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInitshutdownscriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInitshutdownscriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInitshutdownscriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInitshutdownscriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInitshutdownscriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInitshutdownscriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInitshutdownscriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInitshutdownscriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInitshutdownscriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInitshutdownscriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInitshutdownscriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInitshutdownscriptIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutInitshutdownscriptIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInitshutdownscriptIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceBridgeMembersChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceBridgeMembersChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceBridgeMembersChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceCheckinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceCheckinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceCheckinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceCheckinWaitingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceCheckinWaitingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceCheckinWaitingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceCommitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceCommitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceCommitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceHasPendingChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceHasPendingChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceHasPendingChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInterfaceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInterfaceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInterfaceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInterfaceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutInterfaceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInterfaceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceIpInUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceIpInUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceIpInUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInterfaceLagPortsChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInterfaceLagPortsChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInterfaceLagPortsChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceRollbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceRollbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceRollbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterfaceVlanParentInterfaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInterfaceVlanParentInterfaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterfaceVlanParentInterfaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpmiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmiChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpmiChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmiChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmiIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpmiIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmiIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIpmiIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIpmiIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIpmiIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIpmiIdentifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIpmiIdentifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIpmiIdentifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpmiIsLoadedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpmiIsLoadedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpmiIsLoadedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiAuthIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiAuthIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiAuthIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiAuthIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiAuthIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiAuthIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiAuthIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiAuthIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiAuthIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiExtentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiExtentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiExtentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiExtentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiExtentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiExtentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiExtentDiskChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiExtentDiskChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiExtentDiskChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiExtentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiExtentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiExtentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiExtentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiExtentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiExtentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiExtentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiExtentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiExtentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiGlobalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiGlobalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiGlobalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiGlobalSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiGlobalSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiGlobalSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiInitiatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiInitiatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiInitiatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiInitiatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiInitiatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiInitiatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiInitiatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiInitiatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiInitiatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiInitiatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiInitiatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiInitiatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiInitiatorIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiInitiatorIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiInitiatorIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiPortalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiPortalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiPortalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiPortalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiPortalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiPortalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiPortalIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiPortalIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiPortalIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiPortalIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiPortalIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiPortalIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiPortalIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiPortalIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiPortalIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiPortalListenIpChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiPortalListenIpChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiPortalListenIpChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiTargetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiTargetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiTargetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiTargetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiTargetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiTargetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetextentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetextentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetextentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIscsiTargetextentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIscsiTargetextentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIscsiTargetextentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIscsiTargetextentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIscsiTargetextentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIscsiTargetextentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIscsiTargetextentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIscsiTargetextentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIscsiTargetextentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIscsiTargetextentIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutIscsiTargetextentIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIscsiTargetextentIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailCleanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailCleanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailCleanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailDefaultConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailDefaultConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailDefaultConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailExecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailExecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailExecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailFetchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailFetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailFetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailFstabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailFstabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailFstabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailGetActivatedPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailGetActivatedPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailGetActivatedPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJailIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteJailIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJailIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJailIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutJailIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJailIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailIdIdCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailIdIdCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailIdIdCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailImportImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailImportImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailImportImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJailInterfaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJailInterfaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJailInterfaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailRcActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailRcActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailRcActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailReleasesChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailReleasesChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailReleasesChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailUpdateDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailUpdateDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailUpdateDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJailUpdateToLatestPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostJailUpdateToLatestPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJailUpdateToLatestPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKerberosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKerberosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKerberosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosKeytabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosKeytabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosKeytabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKerberosKeytabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKerberosKeytabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKerberosKeytabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKerberosKeytabIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKerberosKeytabIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKerberosKeytabIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosKeytabIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosKeytabIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosKeytabIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKerberosKeytabIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKerberosKeytabIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKerberosKeytabIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosKeytabSystemKeytabListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosKeytabSystemKeytabListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosKeytabSystemKeytabListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKerberosRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKerberosRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKerberosRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKerberosRealmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKerberosRealmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKerberosRealmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKerberosRealmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKerberosRealmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKerberosRealmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKerberosRealmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKerberosRealmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKerberosRealmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeychaincredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKeychaincredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeychaincredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeychaincredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeychaincredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeychaincredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeychaincredentialGenerateSshKeyPairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKeychaincredentialGenerateSshKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeychaincredentialGenerateSshKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeychaincredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKeychaincredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeychaincredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeychaincredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetKeychaincredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeychaincredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutKeychaincredentialIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutKeychaincredentialIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutKeychaincredentialIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeychaincredentialRemoteSshHostKeyScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeychaincredentialRemoteSshHostKeyScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeychaincredentialRemoteSshHostKeyScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeychaincredentialRemoteSshSemiautomaticSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeychaincredentialRemoteSshSemiautomaticSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeychaincredentialRemoteSshSemiautomaticSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKeychaincredentialUsedByResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostKeychaincredentialUsedByResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKeychaincredentialUsedByResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLdapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLdapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLdapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapIdmapBackendChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapIdmapBackendChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapIdmapBackendChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapSchemaChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapSchemaChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapSchemaChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapSslChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLdapSslChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapSslChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLldpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLldpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLldpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLldpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutLldpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLldpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMailSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMailSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMailSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMultipathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMultipathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMultipathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMultipathIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMultipathIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMultipathIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNetworkConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNetworkConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutNetworkConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNetworkConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkGeneralSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNetworkGeneralSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkGeneralSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutNfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutNisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNisGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNisGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNisGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginBranchesChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginBranchesChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginBranchesChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPluginDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPluginDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPluginDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePluginIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePluginIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePluginIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPluginIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPluginIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPluginIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginOfficialRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginOfficialRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginOfficialRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPluginRetrieveVersionsForReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPluginRetrieveVersionsForReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPluginRetrieveVersionsForReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePoolDatasetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePoolDatasetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePoolDatasetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolDatasetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolDatasetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolDatasetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolDatasetIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolDatasetIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolDatasetIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdProcessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdProcessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdProcessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetIdIdPromoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetIdIdPromoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetIdIdPromoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolDatasetRecommendedZvolBlocksizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolDatasetRecommendedZvolBlocksizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolDatasetRecommendedZvolBlocksizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolFilesystemChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolFilesystemChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolFilesystemChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdDetachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdDetachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdDetachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdDownloadEncryptionKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdDownloadEncryptionKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdDownloadEncryptionKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdGetDisksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdGetDisksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdGetDisksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdIsUpgradedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdIsUpgradedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdIsUpgradedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdLockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdLockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdLockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdOfflineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdOfflineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdOfflineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdOnlineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdOnlineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdOnlineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdPassphraseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdPassphraseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdPassphraseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdProcessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdProcessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdProcessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdRecoverykeyRmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdRecoverykeyRmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdRecoverykeyRmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdRekeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdRekeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdRekeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdUnlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdUnlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdUnlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolIdIdUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolIdIdUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolIdIdUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolImportDiskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolImportDiskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolImportDiskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolImportDiskAutodetectFsTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolImportDiskAutodetectFsTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolImportDiskAutodetectFsTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolImportDiskMsdosfsLocalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolImportDiskMsdosfsLocalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolImportDiskMsdosfsLocalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolImportFindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolImportFindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolImportFindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolImportPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolImportPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolImportPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolResilverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolResilverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolResilverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolResilverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolResilverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolResilverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePoolScrubIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePoolScrubIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePoolScrubIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolScrubIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolScrubIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolScrubIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolScrubIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolScrubIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolScrubIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolScrubRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolScrubRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolScrubRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolSnapshottaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolSnapshottaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolSnapshottaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolSnapshottaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolSnapshottaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolSnapshottaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePoolSnapshottaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePoolSnapshottaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePoolSnapshottaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoolSnapshottaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPoolSnapshottaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoolSnapshottaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPoolSnapshottaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPoolSnapshottaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPoolSnapshottaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolSnapshottaskIdIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolSnapshottaskIdIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolSnapshottaskIdIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPoolUnlockServicesRestartChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPoolUnlockServicesRestartChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPoolUnlockServicesRestartChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationCountEligibleManualSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationCountEligibleManualSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationCountEligibleManualSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationCreateDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationCreateDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationCreateDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReplicationIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReplicationIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReplicationIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplicationIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReplicationIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplicationIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutReplicationIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutReplicationIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutReplicationIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationIdIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationIdIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationIdIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationListDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationListDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationListDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplicationListNamingSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReplicationListNamingSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplicationListNamingSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReplicationTargetUnmatchedSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReplicationTargetUnmatchedSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReplicationTargetUnmatchedSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReportingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutReportingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutReportingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutReportingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReportingGetDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostReportingGetDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReportingGetDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportingGraphsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReportingGraphsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportingGraphsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRouteIpv4gwReachableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRouteIpv4gwReachableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRouteIpv4gwReachableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRouteSystemRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRouteSystemRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRouteSystemRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsyncdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsyncdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsyncdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRsyncdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRsyncdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRsyncdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsyncmodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsyncmodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsyncmodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRsyncmodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRsyncmodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRsyncmodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRsyncmodIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRsyncmodIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRsyncmodIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsyncmodIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsyncmodIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsyncmodIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRsyncmodIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRsyncmodIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRsyncmodIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsynctaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsynctaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsynctaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRsynctaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRsynctaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRsynctaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRsynctaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRsynctaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRsynctaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRsynctaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRsynctaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRsynctaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRsynctaskIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRsynctaskIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRsynctaskIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRsynctaskIdIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRsynctaskIdIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRsynctaskIdIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetS3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetS3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetS3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutS3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutS3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutS3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutServiceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceReloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceReloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceReloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceStartedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceStartedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceStartedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceTerminateProcessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceTerminateProcessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceTerminateProcessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingAfpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingAfpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingAfpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharingAfpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSharingAfpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharingAfpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSharingAfpIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSharingAfpIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSharingAfpIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingAfpIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingAfpIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingAfpIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSharingAfpIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSharingAfpIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSharingAfpIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingNfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingNfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingNfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharingNfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSharingNfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharingNfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSharingNfsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSharingNfsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSharingNfsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingNfsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingNfsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingNfsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSharingNfsIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSharingNfsIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSharingNfsIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingSmbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingSmbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingSmbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharingSmbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSharingSmbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharingSmbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSharingSmbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSharingSmbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSharingSmbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingSmbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingSmbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingSmbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSharingSmbIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSharingSmbIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSharingSmbIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingSmbVfsobjectsChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingSmbVfsobjectsChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingSmbVfsobjectsChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingWebdavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingWebdavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingWebdavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharingWebdavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSharingWebdavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharingWebdavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSharingWebdavIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSharingWebdavIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSharingWebdavIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharingWebdavIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSharingWebdavIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharingWebdavIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSharingWebdavIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSharingWebdavIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSharingWebdavIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSmartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmartTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmartTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmartTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmartTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmartTestIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSmartTestIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmartTestIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartTestIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmartTestIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartTestIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmartTestIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSmartTestIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmartTestIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartTestResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmartTestResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartTestResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSmbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbBindipChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbBindipChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbBindipChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbDomainChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbDomainChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbDomainChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbSharesecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbSharesecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbSharesecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmbSharesecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmbSharesecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmbSharesecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmbSharesecGetaclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSmbSharesecGetaclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmbSharesecGetaclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmbSharesecIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSmbSharesecIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmbSharesecIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbSharesecIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbSharesecIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbSharesecIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSmbSharesecIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSmbSharesecIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSmbSharesecIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbSharesecSynchronizeAclsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbSharesecSynchronizeAclsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbSharesecSynchronizeAclsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmbUnixcharsetChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSmbUnixcharsetChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmbUnixcharsetChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnmpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSnmpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnmpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSnmpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSnmpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSnmpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSshBindifaceChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSshBindifaceChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSshBindifaceChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaticrouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStaticrouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaticrouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStaticrouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostStaticrouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStaticrouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStaticrouteIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStaticrouteIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStaticrouteIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaticrouteIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStaticrouteIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaticrouteIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStaticrouteIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutStaticrouteIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStaticrouteIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatsGetDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostStatsGetDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatsGetDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatsGetDatasetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostStatsGetDatasetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatsGetDatasetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsGetSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatsGetSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsGetSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSupportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSupportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSupportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSupportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSupportFetchCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSupportFetchCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSupportFetchCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSupportFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportIsAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSupportIsAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportIsAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportIsAvailableAndEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSupportIsAvailableAndEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportIsAvailableAndEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSupportNewTicketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSupportNewTicketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSupportNewTicketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemAdvancedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemAdvancedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemAdvancedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemAdvancedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemAdvancedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemAdvancedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemAdvancedSerialPortChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemAdvancedSerialPortChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemAdvancedSerialPortChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemBootIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemBootIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemBootIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemFeatureEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemFeatureEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemFeatureEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemGeneralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemGeneralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemGeneralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralCountryChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralCountryChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralCountryChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralKbdmapChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralKbdmapChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralKbdmapChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralLanguageChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralLanguageChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralLanguageChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralLocalUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralLocalUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralLocalUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralTimezoneChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralTimezoneChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralTimezoneChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiAddressChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiAddressChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiAddressChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiCertificateChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiCertificateChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiCertificateChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemGeneralUiV6addressChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemGeneralUiV6addressChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemGeneralUiV6addressChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemIsFreenasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemIsFreenasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemIsFreenasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemLegacyUiEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemLegacyUiEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemLegacyUiEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemLicenseUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemLicenseUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemLicenseUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemNtpserverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemNtpserverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemNtpserverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemNtpserverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemNtpserverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemNtpserverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSystemNtpserverIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSystemNtpserverIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSystemNtpserverIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemNtpserverIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemNtpserverIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemNtpserverIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemNtpserverIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemNtpserverIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemNtpserverIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemNtpserverTestNtpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemNtpserverTestNtpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemNtpserverTestNtpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemProductNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemProductNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemProductNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemReadyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemReadyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemReadyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemRebootResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemRebootResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemRebootResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemdatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSystemdatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemdatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSystemdatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSystemdatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSystemdatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTftpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTftpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTftpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTftpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTftpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTftpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTunableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTunableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTunableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTunableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTunableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTunableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTunableIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTunableIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTunableIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTunableIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTunableIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTunableIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTunableIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutTunableIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTunableIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateCheckAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateCheckAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateCheckAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpdateDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateGetPendingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateGetPendingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateGetPendingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateGetTrainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpdateGetTrainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateGetTrainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateManualResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateManualResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateManualResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateSetTrainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateSetTrainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateSetTrainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUpdateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpsDriverChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpsDriverChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpsDriverChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpsPortChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUpsPortChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpsPortChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGetNextUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserGetNextUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGetNextUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserGetUserObjResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserGetUserObjResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserGetUserObjResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserHasRootPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserHasRootPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserHasRootPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserIdIdPopAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserIdIdPopAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserIdIdPopAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserIdIdSetAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserIdIdSetAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserIdIdSetAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserShellChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserShellChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserShellChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmDeviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVmDeviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmDeviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDeviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDeviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDeviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmDeviceIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmDeviceIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmDeviceIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDeviceNicAttachChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDeviceNicAttachChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDeviceNicAttachChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmDeviceVncBindChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmDeviceVncBindChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmDeviceVncBindChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmGetAttachedIfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmGetAttachedIfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmGetAttachedIfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmGetAvailableMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmGetAvailableMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmGetAvailableMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmGetConsoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmGetConsoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmGetConsoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmGetVmemoryInUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmGetVmemoryInUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmGetVmemoryInUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmGetVncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmGetVncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmGetVncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmGetVncIpv4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmGetVncIpv4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmGetVncIpv4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmIdIdStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmIdIdStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmIdIdStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmIdentifyHypervisorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmIdentifyHypervisorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmIdentifyHypervisorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmRandomMacResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmRandomMacResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmRandomMacResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmVncPortWizardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmVncPortWizardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmVncPortWizardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareDatasetHasVmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareDatasetHasVmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareDatasetHasVmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareGetDatastoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareGetDatastoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareGetDatastoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareGetVirtualMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareGetVirtualMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareGetVirtualMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmwareIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVmwareIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmwareIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmwareIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVmwareIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmwareIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVmwareIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutVmwareIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVmwareIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVmwareMatchDatastoresWithDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVmwareMatchDatastoresWithDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVmwareMatchDatastoresWithDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebdavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebdavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebdavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWebdavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutWebdavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWebdavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebuiImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebuiImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebuiImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebuiImageIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWebuiImageIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebuiImageIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebuiImageIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebuiImageIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebuiImageIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZfsSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetZfsSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZfsSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZfsSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostZfsSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZfsSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZfsSnapshotCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostZfsSnapshotCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZfsSnapshotCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteZfsSnapshotIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteZfsSnapshotIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteZfsSnapshotIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZfsSnapshotIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetZfsSnapshotIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZfsSnapshotIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZfsSnapshotRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostZfsSnapshotRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZfsSnapshotRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZfsSnapshotRollbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostZfsSnapshotRollbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZfsSnapshotRollbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAcmeDnsAuthenticatorWithResponse request returning *GetAcmeDnsAuthenticatorResponse
func (c *ClientWithResponses) GetAcmeDnsAuthenticatorWithResponse(ctx context.Context, params *GetAcmeDnsAuthenticatorParams) (*GetAcmeDnsAuthenticatorResponse, error) {
	rsp, err := c.GetAcmeDnsAuthenticator(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAcmeDnsAuthenticatorResponse(rsp)
}

// PostAcmeDnsAuthenticatorWithBodyWithResponse request with arbitrary body returning *PostAcmeDnsAuthenticatorResponse
func (c *ClientWithResponses) PostAcmeDnsAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAcmeDnsAuthenticatorResponse, error) {
	rsp, err := c.PostAcmeDnsAuthenticatorWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAcmeDnsAuthenticatorResponse(rsp)
}

func (c *ClientWithResponses) PostAcmeDnsAuthenticatorWithResponse(ctx context.Context, body PostAcmeDnsAuthenticatorJSONRequestBody) (*PostAcmeDnsAuthenticatorResponse, error) {
	rsp, err := c.PostAcmeDnsAuthenticator(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAcmeDnsAuthenticatorResponse(rsp)
}

// GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse request returning *GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse
func (c *ClientWithResponses) GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse(ctx context.Context) (*GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse, error) {
	rsp, err := c.GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAcmeDnsAuthenticatorAuthenticatorSchemasResponse(rsp)
}

// DeleteAcmeDnsAuthenticatorIdIdWithResponse request returning *DeleteAcmeDnsAuthenticatorIdIdResponse
func (c *ClientWithResponses) DeleteAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int) (*DeleteAcmeDnsAuthenticatorIdIdResponse, error) {
	rsp, err := c.DeleteAcmeDnsAuthenticatorIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAcmeDnsAuthenticatorIdIdResponse(rsp)
}

// GetAcmeDnsAuthenticatorIdIdWithResponse request returning *GetAcmeDnsAuthenticatorIdIdResponse
func (c *ClientWithResponses) GetAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id []interface{}, params *GetAcmeDnsAuthenticatorIdIdParams) (*GetAcmeDnsAuthenticatorIdIdResponse, error) {
	rsp, err := c.GetAcmeDnsAuthenticatorIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAcmeDnsAuthenticatorIdIdResponse(rsp)
}

// PutAcmeDnsAuthenticatorIdIdWithBodyWithResponse request with arbitrary body returning *PutAcmeDnsAuthenticatorIdIdResponse
func (c *ClientWithResponses) PutAcmeDnsAuthenticatorIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutAcmeDnsAuthenticatorIdIdResponse, error) {
	rsp, err := c.PutAcmeDnsAuthenticatorIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutAcmeDnsAuthenticatorIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutAcmeDnsAuthenticatorIdIdWithResponse(ctx context.Context, id int, body PutAcmeDnsAuthenticatorIdIdJSONRequestBody) (*PutAcmeDnsAuthenticatorIdIdResponse, error) {
	rsp, err := c.PutAcmeDnsAuthenticatorIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutAcmeDnsAuthenticatorIdIdResponse(rsp)
}

// GetActivedirectoryWithResponse request returning *GetActivedirectoryResponse
func (c *ClientWithResponses) GetActivedirectoryWithResponse(ctx context.Context) (*GetActivedirectoryResponse, error) {
	rsp, err := c.GetActivedirectory(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryResponse(rsp)
}

// PutActivedirectoryWithBodyWithResponse request with arbitrary body returning *PutActivedirectoryResponse
func (c *ClientWithResponses) PutActivedirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutActivedirectoryResponse, error) {
	rsp, err := c.PutActivedirectoryWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutActivedirectoryResponse(rsp)
}

func (c *ClientWithResponses) PutActivedirectoryWithResponse(ctx context.Context, body PutActivedirectoryJSONRequestBody) (*PutActivedirectoryResponse, error) {
	rsp, err := c.PutActivedirectory(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutActivedirectoryResponse(rsp)
}

// GetActivedirectoryChangeTrustAccountPwWithResponse request returning *GetActivedirectoryChangeTrustAccountPwResponse
func (c *ClientWithResponses) GetActivedirectoryChangeTrustAccountPwWithResponse(ctx context.Context) (*GetActivedirectoryChangeTrustAccountPwResponse, error) {
	rsp, err := c.GetActivedirectoryChangeTrustAccountPw(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryChangeTrustAccountPwResponse(rsp)
}

// GetActivedirectoryDomainInfoWithResponse request returning *GetActivedirectoryDomainInfoResponse
func (c *ClientWithResponses) GetActivedirectoryDomainInfoWithResponse(ctx context.Context) (*GetActivedirectoryDomainInfoResponse, error) {
	rsp, err := c.GetActivedirectoryDomainInfo(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryDomainInfoResponse(rsp)
}

// GetActivedirectoryGetSpnListWithResponse request returning *GetActivedirectoryGetSpnListResponse
func (c *ClientWithResponses) GetActivedirectoryGetSpnListWithResponse(ctx context.Context) (*GetActivedirectoryGetSpnListResponse, error) {
	rsp, err := c.GetActivedirectoryGetSpnList(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryGetSpnListResponse(rsp)
}

// GetActivedirectoryGetStateWithResponse request returning *GetActivedirectoryGetStateResponse
func (c *ClientWithResponses) GetActivedirectoryGetStateWithResponse(ctx context.Context) (*GetActivedirectoryGetStateResponse, error) {
	rsp, err := c.GetActivedirectoryGetState(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryGetStateResponse(rsp)
}

// GetActivedirectoryIdmapBackendChoicesWithResponse request returning *GetActivedirectoryIdmapBackendChoicesResponse
func (c *ClientWithResponses) GetActivedirectoryIdmapBackendChoicesWithResponse(ctx context.Context) (*GetActivedirectoryIdmapBackendChoicesResponse, error) {
	rsp, err := c.GetActivedirectoryIdmapBackendChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryIdmapBackendChoicesResponse(rsp)
}

// PostActivedirectoryLeaveWithBodyWithResponse request with arbitrary body returning *PostActivedirectoryLeaveResponse
func (c *ClientWithResponses) PostActivedirectoryLeaveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostActivedirectoryLeaveResponse, error) {
	rsp, err := c.PostActivedirectoryLeaveWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostActivedirectoryLeaveResponse(rsp)
}

func (c *ClientWithResponses) PostActivedirectoryLeaveWithResponse(ctx context.Context, body PostActivedirectoryLeaveJSONRequestBody) (*PostActivedirectoryLeaveResponse, error) {
	rsp, err := c.PostActivedirectoryLeave(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostActivedirectoryLeaveResponse(rsp)
}

// GetActivedirectoryNssInfoChoicesWithResponse request returning *GetActivedirectoryNssInfoChoicesResponse
func (c *ClientWithResponses) GetActivedirectoryNssInfoChoicesWithResponse(ctx context.Context) (*GetActivedirectoryNssInfoChoicesResponse, error) {
	rsp, err := c.GetActivedirectoryNssInfoChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryNssInfoChoicesResponse(rsp)
}

// GetActivedirectorySaslWrappingChoicesWithResponse request returning *GetActivedirectorySaslWrappingChoicesResponse
func (c *ClientWithResponses) GetActivedirectorySaslWrappingChoicesWithResponse(ctx context.Context) (*GetActivedirectorySaslWrappingChoicesResponse, error) {
	rsp, err := c.GetActivedirectorySaslWrappingChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectorySaslWrappingChoicesResponse(rsp)
}

// GetActivedirectorySslChoicesWithResponse request returning *GetActivedirectorySslChoicesResponse
func (c *ClientWithResponses) GetActivedirectorySslChoicesWithResponse(ctx context.Context) (*GetActivedirectorySslChoicesResponse, error) {
	rsp, err := c.GetActivedirectorySslChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectorySslChoicesResponse(rsp)
}

// GetActivedirectoryStartedWithResponse request returning *GetActivedirectoryStartedResponse
func (c *ClientWithResponses) GetActivedirectoryStartedWithResponse(ctx context.Context) (*GetActivedirectoryStartedResponse, error) {
	rsp, err := c.GetActivedirectoryStarted(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetActivedirectoryStartedResponse(rsp)
}

// GetAfpWithResponse request returning *GetAfpResponse
func (c *ClientWithResponses) GetAfpWithResponse(ctx context.Context) (*GetAfpResponse, error) {
	rsp, err := c.GetAfp(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAfpResponse(rsp)
}

// PutAfpWithBodyWithResponse request with arbitrary body returning *PutAfpResponse
func (c *ClientWithResponses) PutAfpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutAfpResponse, error) {
	rsp, err := c.PutAfpWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutAfpResponse(rsp)
}

func (c *ClientWithResponses) PutAfpWithResponse(ctx context.Context, body PutAfpJSONRequestBody) (*PutAfpResponse, error) {
	rsp, err := c.PutAfp(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutAfpResponse(rsp)
}

// GetAfpBindipChoicesWithResponse request returning *GetAfpBindipChoicesResponse
func (c *ClientWithResponses) GetAfpBindipChoicesWithResponse(ctx context.Context) (*GetAfpBindipChoicesResponse, error) {
	rsp, err := c.GetAfpBindipChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAfpBindipChoicesResponse(rsp)
}

// PostAlertDismissWithBodyWithResponse request with arbitrary body returning *PostAlertDismissResponse
func (c *ClientWithResponses) PostAlertDismissWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAlertDismissResponse, error) {
	rsp, err := c.PostAlertDismissWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertDismissResponse(rsp)
}

func (c *ClientWithResponses) PostAlertDismissWithResponse(ctx context.Context, body PostAlertDismissJSONRequestBody) (*PostAlertDismissResponse, error) {
	rsp, err := c.PostAlertDismiss(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertDismissResponse(rsp)
}

// GetAlertListWithResponse request returning *GetAlertListResponse
func (c *ClientWithResponses) GetAlertListWithResponse(ctx context.Context) (*GetAlertListResponse, error) {
	rsp, err := c.GetAlertList(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertListResponse(rsp)
}

// GetAlertListCategoriesWithResponse request returning *GetAlertListCategoriesResponse
func (c *ClientWithResponses) GetAlertListCategoriesWithResponse(ctx context.Context) (*GetAlertListCategoriesResponse, error) {
	rsp, err := c.GetAlertListCategories(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertListCategoriesResponse(rsp)
}

// GetAlertListPoliciesWithResponse request returning *GetAlertListPoliciesResponse
func (c *ClientWithResponses) GetAlertListPoliciesWithResponse(ctx context.Context) (*GetAlertListPoliciesResponse, error) {
	rsp, err := c.GetAlertListPolicies(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertListPoliciesResponse(rsp)
}

// PostAlertRestoreWithBodyWithResponse request with arbitrary body returning *PostAlertRestoreResponse
func (c *ClientWithResponses) PostAlertRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAlertRestoreResponse, error) {
	rsp, err := c.PostAlertRestoreWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostAlertRestoreWithResponse(ctx context.Context, body PostAlertRestoreJSONRequestBody) (*PostAlertRestoreResponse, error) {
	rsp, err := c.PostAlertRestore(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertRestoreResponse(rsp)
}

// GetAlertclassesWithResponse request returning *GetAlertclassesResponse
func (c *ClientWithResponses) GetAlertclassesWithResponse(ctx context.Context) (*GetAlertclassesResponse, error) {
	rsp, err := c.GetAlertclasses(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertclassesResponse(rsp)
}

// PutAlertclassesWithBodyWithResponse request with arbitrary body returning *PutAlertclassesResponse
func (c *ClientWithResponses) PutAlertclassesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutAlertclassesResponse, error) {
	rsp, err := c.PutAlertclassesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertclassesResponse(rsp)
}

func (c *ClientWithResponses) PutAlertclassesWithResponse(ctx context.Context, body PutAlertclassesJSONRequestBody) (*PutAlertclassesResponse, error) {
	rsp, err := c.PutAlertclasses(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertclassesResponse(rsp)
}

// GetAlertserviceWithResponse request returning *GetAlertserviceResponse
func (c *ClientWithResponses) GetAlertserviceWithResponse(ctx context.Context, params *GetAlertserviceParams) (*GetAlertserviceResponse, error) {
	rsp, err := c.GetAlertservice(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertserviceResponse(rsp)
}

// PostAlertserviceWithBodyWithResponse request with arbitrary body returning *PostAlertserviceResponse
func (c *ClientWithResponses) PostAlertserviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAlertserviceResponse, error) {
	rsp, err := c.PostAlertserviceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertserviceResponse(rsp)
}

func (c *ClientWithResponses) PostAlertserviceWithResponse(ctx context.Context, body PostAlertserviceJSONRequestBody) (*PostAlertserviceResponse, error) {
	rsp, err := c.PostAlertservice(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertserviceResponse(rsp)
}

// DeleteAlertserviceIdIdWithResponse request returning *DeleteAlertserviceIdIdResponse
func (c *ClientWithResponses) DeleteAlertserviceIdIdWithResponse(ctx context.Context, id int) (*DeleteAlertserviceIdIdResponse, error) {
	rsp, err := c.DeleteAlertserviceIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertserviceIdIdResponse(rsp)
}

// GetAlertserviceIdIdWithResponse request returning *GetAlertserviceIdIdResponse
func (c *ClientWithResponses) GetAlertserviceIdIdWithResponse(ctx context.Context, id []interface{}, params *GetAlertserviceIdIdParams) (*GetAlertserviceIdIdResponse, error) {
	rsp, err := c.GetAlertserviceIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertserviceIdIdResponse(rsp)
}

// PutAlertserviceIdIdWithBodyWithResponse request with arbitrary body returning *PutAlertserviceIdIdResponse
func (c *ClientWithResponses) PutAlertserviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutAlertserviceIdIdResponse, error) {
	rsp, err := c.PutAlertserviceIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertserviceIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutAlertserviceIdIdWithResponse(ctx context.Context, id int, body PutAlertserviceIdIdJSONRequestBody) (*PutAlertserviceIdIdResponse, error) {
	rsp, err := c.PutAlertserviceIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertserviceIdIdResponse(rsp)
}

// GetAlertserviceListTypesWithResponse request returning *GetAlertserviceListTypesResponse
func (c *ClientWithResponses) GetAlertserviceListTypesWithResponse(ctx context.Context) (*GetAlertserviceListTypesResponse, error) {
	rsp, err := c.GetAlertserviceListTypes(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertserviceListTypesResponse(rsp)
}

// PostAlertserviceTestWithBodyWithResponse request with arbitrary body returning *PostAlertserviceTestResponse
func (c *ClientWithResponses) PostAlertserviceTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAlertserviceTestResponse, error) {
	rsp, err := c.PostAlertserviceTestWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertserviceTestResponse(rsp)
}

func (c *ClientWithResponses) PostAlertserviceTestWithResponse(ctx context.Context, body PostAlertserviceTestJSONRequestBody) (*PostAlertserviceTestResponse, error) {
	rsp, err := c.PostAlertserviceTest(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertserviceTestResponse(rsp)
}

// PostAuthCheckUserWithBodyWithResponse request with arbitrary body returning *PostAuthCheckUserResponse
func (c *ClientWithResponses) PostAuthCheckUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAuthCheckUserResponse, error) {
	rsp, err := c.PostAuthCheckUserWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthCheckUserResponse(rsp)
}

func (c *ClientWithResponses) PostAuthCheckUserWithResponse(ctx context.Context, body PostAuthCheckUserJSONRequestBody) (*PostAuthCheckUserResponse, error) {
	rsp, err := c.PostAuthCheckUser(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthCheckUserResponse(rsp)
}

// PostAuthGenerateTokenWithBodyWithResponse request with arbitrary body returning *PostAuthGenerateTokenResponse
func (c *ClientWithResponses) PostAuthGenerateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostAuthGenerateTokenResponse, error) {
	rsp, err := c.PostAuthGenerateTokenWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthGenerateTokenResponse(rsp)
}

func (c *ClientWithResponses) PostAuthGenerateTokenWithResponse(ctx context.Context, body PostAuthGenerateTokenJSONRequestBody) (*PostAuthGenerateTokenResponse, error) {
	rsp, err := c.PostAuthGenerateToken(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthGenerateTokenResponse(rsp)
}

// GetAuthSessionsWithResponse request returning *GetAuthSessionsResponse
func (c *ClientWithResponses) GetAuthSessionsWithResponse(ctx context.Context, params *GetAuthSessionsParams) (*GetAuthSessionsResponse, error) {
	rsp, err := c.GetAuthSessions(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthSessionsResponse(rsp)
}

// GetBackupWithResponse request returning *GetBackupResponse
func (c *ClientWithResponses) GetBackupWithResponse(ctx context.Context) (*GetBackupResponse, error) {
	rsp, err := c.GetBackup(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupResponse(rsp)
}

// PostBackupWithBodyWithResponse request with arbitrary body returning *PostBackupResponse
func (c *ClientWithResponses) PostBackupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupResponse, error) {
	rsp, err := c.PostBackupWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupResponse(rsp)
}

func (c *ClientWithResponses) PostBackupWithResponse(ctx context.Context, body PostBackupJSONRequestBody) (*PostBackupResponse, error) {
	rsp, err := c.PostBackup(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupResponse(rsp)
}

// PostBackupAzureGetBucketsWithBodyWithResponse request with arbitrary body returning *PostBackupAzureGetBucketsResponse
func (c *ClientWithResponses) PostBackupAzureGetBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupAzureGetBucketsResponse, error) {
	rsp, err := c.PostBackupAzureGetBucketsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupAzureGetBucketsResponse(rsp)
}

func (c *ClientWithResponses) PostBackupAzureGetBucketsWithResponse(ctx context.Context, body PostBackupAzureGetBucketsJSONRequestBody) (*PostBackupAzureGetBucketsResponse, error) {
	rsp, err := c.PostBackupAzureGetBuckets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupAzureGetBucketsResponse(rsp)
}

// PostBackupB2GetBucketsWithBodyWithResponse request with arbitrary body returning *PostBackupB2GetBucketsResponse
func (c *ClientWithResponses) PostBackupB2GetBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupB2GetBucketsResponse, error) {
	rsp, err := c.PostBackupB2GetBucketsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupB2GetBucketsResponse(rsp)
}

func (c *ClientWithResponses) PostBackupB2GetBucketsWithResponse(ctx context.Context, body PostBackupB2GetBucketsJSONRequestBody) (*PostBackupB2GetBucketsResponse, error) {
	rsp, err := c.PostBackupB2GetBuckets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupB2GetBucketsResponse(rsp)
}

// GetBackupCredentialWithResponse request returning *GetBackupCredentialResponse
func (c *ClientWithResponses) GetBackupCredentialWithResponse(ctx context.Context, params *GetBackupCredentialParams) (*GetBackupCredentialResponse, error) {
	rsp, err := c.GetBackupCredential(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupCredentialResponse(rsp)
}

// PostBackupCredentialWithBodyWithResponse request with arbitrary body returning *PostBackupCredentialResponse
func (c *ClientWithResponses) PostBackupCredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupCredentialResponse, error) {
	rsp, err := c.PostBackupCredentialWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupCredentialResponse(rsp)
}

func (c *ClientWithResponses) PostBackupCredentialWithResponse(ctx context.Context, body PostBackupCredentialJSONRequestBody) (*PostBackupCredentialResponse, error) {
	rsp, err := c.PostBackupCredential(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupCredentialResponse(rsp)
}

// DeleteBackupCredentialIdIdWithResponse request returning *DeleteBackupCredentialIdIdResponse
func (c *ClientWithResponses) DeleteBackupCredentialIdIdWithResponse(ctx context.Context, id int) (*DeleteBackupCredentialIdIdResponse, error) {
	rsp, err := c.DeleteBackupCredentialIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackupCredentialIdIdResponse(rsp)
}

// GetBackupCredentialIdIdWithResponse request returning *GetBackupCredentialIdIdResponse
func (c *ClientWithResponses) GetBackupCredentialIdIdWithResponse(ctx context.Context, id []interface{}, params *GetBackupCredentialIdIdParams) (*GetBackupCredentialIdIdResponse, error) {
	rsp, err := c.GetBackupCredentialIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupCredentialIdIdResponse(rsp)
}

// PutBackupCredentialIdIdWithBodyWithResponse request with arbitrary body returning *PutBackupCredentialIdIdResponse
func (c *ClientWithResponses) PutBackupCredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutBackupCredentialIdIdResponse, error) {
	rsp, err := c.PutBackupCredentialIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutBackupCredentialIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutBackupCredentialIdIdWithResponse(ctx context.Context, id int, body PutBackupCredentialIdIdJSONRequestBody) (*PutBackupCredentialIdIdResponse, error) {
	rsp, err := c.PutBackupCredentialIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutBackupCredentialIdIdResponse(rsp)
}

// PostBackupGcsGetBucketsWithBodyWithResponse request with arbitrary body returning *PostBackupGcsGetBucketsResponse
func (c *ClientWithResponses) PostBackupGcsGetBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupGcsGetBucketsResponse, error) {
	rsp, err := c.PostBackupGcsGetBucketsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupGcsGetBucketsResponse(rsp)
}

func (c *ClientWithResponses) PostBackupGcsGetBucketsWithResponse(ctx context.Context, body PostBackupGcsGetBucketsJSONRequestBody) (*PostBackupGcsGetBucketsResponse, error) {
	rsp, err := c.PostBackupGcsGetBuckets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupGcsGetBucketsResponse(rsp)
}

// DeleteBackupIdIdWithResponse request returning *DeleteBackupIdIdResponse
func (c *ClientWithResponses) DeleteBackupIdIdWithResponse(ctx context.Context, id int) (*DeleteBackupIdIdResponse, error) {
	rsp, err := c.DeleteBackupIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackupIdIdResponse(rsp)
}

// GetBackupIdIdWithResponse request returning *GetBackupIdIdResponse
func (c *ClientWithResponses) GetBackupIdIdWithResponse(ctx context.Context, id int) (*GetBackupIdIdResponse, error) {
	rsp, err := c.GetBackupIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupIdIdResponse(rsp)
}

// PutBackupIdIdWithBodyWithResponse request with arbitrary body returning *PutBackupIdIdResponse
func (c *ClientWithResponses) PutBackupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutBackupIdIdResponse, error) {
	rsp, err := c.PutBackupIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutBackupIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutBackupIdIdWithResponse(ctx context.Context, id int, body PutBackupIdIdJSONRequestBody) (*PutBackupIdIdResponse, error) {
	rsp, err := c.PutBackupIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutBackupIdIdResponse(rsp)
}

// PostBackupS3GetBucketsWithBodyWithResponse request with arbitrary body returning *PostBackupS3GetBucketsResponse
func (c *ClientWithResponses) PostBackupS3GetBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBackupS3GetBucketsResponse, error) {
	rsp, err := c.PostBackupS3GetBucketsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupS3GetBucketsResponse(rsp)
}

func (c *ClientWithResponses) PostBackupS3GetBucketsWithResponse(ctx context.Context, body PostBackupS3GetBucketsJSONRequestBody) (*PostBackupS3GetBucketsResponse, error) {
	rsp, err := c.PostBackupS3GetBuckets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBackupS3GetBucketsResponse(rsp)
}

// PostBootAttachWithBodyWithResponse request with arbitrary body returning *PostBootAttachResponse
func (c *ClientWithResponses) PostBootAttachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootAttachResponse, error) {
	rsp, err := c.PostBootAttachWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootAttachResponse(rsp)
}

func (c *ClientWithResponses) PostBootAttachWithResponse(ctx context.Context, body PostBootAttachJSONRequestBody) (*PostBootAttachResponse, error) {
	rsp, err := c.PostBootAttach(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootAttachResponse(rsp)
}

// PostBootDetachWithBodyWithResponse request with arbitrary body returning *PostBootDetachResponse
func (c *ClientWithResponses) PostBootDetachWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootDetachResponse, error) {
	rsp, err := c.PostBootDetachWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootDetachResponse(rsp)
}

func (c *ClientWithResponses) PostBootDetachWithResponse(ctx context.Context, body PostBootDetachJSONRequestBody) (*PostBootDetachResponse, error) {
	rsp, err := c.PostBootDetach(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootDetachResponse(rsp)
}

// GetBootGetDisksWithResponse request returning *GetBootGetDisksResponse
func (c *ClientWithResponses) GetBootGetDisksWithResponse(ctx context.Context) (*GetBootGetDisksResponse, error) {
	rsp, err := c.GetBootGetDisks(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetBootGetDisksResponse(rsp)
}

// GetBootGetScrubIntervalWithResponse request returning *GetBootGetScrubIntervalResponse
func (c *ClientWithResponses) GetBootGetScrubIntervalWithResponse(ctx context.Context) (*GetBootGetScrubIntervalResponse, error) {
	rsp, err := c.GetBootGetScrubInterval(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetBootGetScrubIntervalResponse(rsp)
}

// GetBootGetStateWithResponse request returning *GetBootGetStateResponse
func (c *ClientWithResponses) GetBootGetStateWithResponse(ctx context.Context) (*GetBootGetStateResponse, error) {
	rsp, err := c.GetBootGetState(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetBootGetStateResponse(rsp)
}

// PostBootReplaceWithBodyWithResponse request with arbitrary body returning *PostBootReplaceResponse
func (c *ClientWithResponses) PostBootReplaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootReplaceResponse, error) {
	rsp, err := c.PostBootReplaceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootReplaceResponse(rsp)
}

func (c *ClientWithResponses) PostBootReplaceWithResponse(ctx context.Context, body PostBootReplaceJSONRequestBody) (*PostBootReplaceResponse, error) {
	rsp, err := c.PostBootReplace(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootReplaceResponse(rsp)
}

// GetBootScrubWithResponse request returning *GetBootScrubResponse
func (c *ClientWithResponses) GetBootScrubWithResponse(ctx context.Context) (*GetBootScrubResponse, error) {
	rsp, err := c.GetBootScrub(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetBootScrubResponse(rsp)
}

// PostBootSetScrubIntervalWithBodyWithResponse request with arbitrary body returning *PostBootSetScrubIntervalResponse
func (c *ClientWithResponses) PostBootSetScrubIntervalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootSetScrubIntervalResponse, error) {
	rsp, err := c.PostBootSetScrubIntervalWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootSetScrubIntervalResponse(rsp)
}

func (c *ClientWithResponses) PostBootSetScrubIntervalWithResponse(ctx context.Context, body PostBootSetScrubIntervalJSONRequestBody) (*PostBootSetScrubIntervalResponse, error) {
	rsp, err := c.PostBootSetScrubInterval(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootSetScrubIntervalResponse(rsp)
}

// GetBootenvWithResponse request returning *GetBootenvResponse
func (c *ClientWithResponses) GetBootenvWithResponse(ctx context.Context, params *GetBootenvParams) (*GetBootenvResponse, error) {
	rsp, err := c.GetBootenv(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBootenvResponse(rsp)
}

// PostBootenvWithBodyWithResponse request with arbitrary body returning *PostBootenvResponse
func (c *ClientWithResponses) PostBootenvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostBootenvResponse, error) {
	rsp, err := c.PostBootenvWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvResponse(rsp)
}

func (c *ClientWithResponses) PostBootenvWithResponse(ctx context.Context, body PostBootenvJSONRequestBody) (*PostBootenvResponse, error) {
	rsp, err := c.PostBootenv(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvResponse(rsp)
}

// DeleteBootenvIdIdWithResponse request returning *DeleteBootenvIdIdResponse
func (c *ClientWithResponses) DeleteBootenvIdIdWithResponse(ctx context.Context, id string) (*DeleteBootenvIdIdResponse, error) {
	rsp, err := c.DeleteBootenvIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBootenvIdIdResponse(rsp)
}

// GetBootenvIdIdWithResponse request returning *GetBootenvIdIdResponse
func (c *ClientWithResponses) GetBootenvIdIdWithResponse(ctx context.Context, id []interface{}, params *GetBootenvIdIdParams) (*GetBootenvIdIdResponse, error) {
	rsp, err := c.GetBootenvIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBootenvIdIdResponse(rsp)
}

// PutBootenvIdIdWithBodyWithResponse request with arbitrary body returning *PutBootenvIdIdResponse
func (c *ClientWithResponses) PutBootenvIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutBootenvIdIdResponse, error) {
	rsp, err := c.PutBootenvIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutBootenvIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutBootenvIdIdWithResponse(ctx context.Context, id string, body PutBootenvIdIdJSONRequestBody) (*PutBootenvIdIdResponse, error) {
	rsp, err := c.PutBootenvIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutBootenvIdIdResponse(rsp)
}

// PostBootenvIdIdActivateWithBodyWithResponse request with arbitrary body returning *PostBootenvIdIdActivateResponse
func (c *ClientWithResponses) PostBootenvIdIdActivateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostBootenvIdIdActivateResponse, error) {
	rsp, err := c.PostBootenvIdIdActivateWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvIdIdActivateResponse(rsp)
}

func (c *ClientWithResponses) PostBootenvIdIdActivateWithResponse(ctx context.Context, id string, body PostBootenvIdIdActivateJSONRequestBody) (*PostBootenvIdIdActivateResponse, error) {
	rsp, err := c.PostBootenvIdIdActivate(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvIdIdActivateResponse(rsp)
}

// PostBootenvIdIdSetAttributeWithBodyWithResponse request with arbitrary body returning *PostBootenvIdIdSetAttributeResponse
func (c *ClientWithResponses) PostBootenvIdIdSetAttributeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostBootenvIdIdSetAttributeResponse, error) {
	rsp, err := c.PostBootenvIdIdSetAttributeWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvIdIdSetAttributeResponse(rsp)
}

func (c *ClientWithResponses) PostBootenvIdIdSetAttributeWithResponse(ctx context.Context, id string, body PostBootenvIdIdSetAttributeJSONRequestBody) (*PostBootenvIdIdSetAttributeResponse, error) {
	rsp, err := c.PostBootenvIdIdSetAttribute(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostBootenvIdIdSetAttributeResponse(rsp)
}

// GetCertificateWithResponse request returning *GetCertificateResponse
func (c *ClientWithResponses) GetCertificateWithResponse(ctx context.Context, params *GetCertificateParams) (*GetCertificateResponse, error) {
	rsp, err := c.GetCertificate(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateResponse(rsp)
}

// PostCertificateWithBodyWithResponse request with arbitrary body returning *PostCertificateResponse
func (c *ClientWithResponses) PostCertificateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCertificateResponse, error) {
	rsp, err := c.PostCertificateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateResponse(rsp)
}

func (c *ClientWithResponses) PostCertificateWithResponse(ctx context.Context, body PostCertificateJSONRequestBody) (*PostCertificateResponse, error) {
	rsp, err := c.PostCertificate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateResponse(rsp)
}

// GetCertificateAcmeServerChoicesWithResponse request returning *GetCertificateAcmeServerChoicesResponse
func (c *ClientWithResponses) GetCertificateAcmeServerChoicesWithResponse(ctx context.Context) (*GetCertificateAcmeServerChoicesResponse, error) {
	rsp, err := c.GetCertificateAcmeServerChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateAcmeServerChoicesResponse(rsp)
}

// GetCertificateEcCurveChoicesWithResponse request returning *GetCertificateEcCurveChoicesResponse
func (c *ClientWithResponses) GetCertificateEcCurveChoicesWithResponse(ctx context.Context) (*GetCertificateEcCurveChoicesResponse, error) {
	rsp, err := c.GetCertificateEcCurveChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateEcCurveChoicesResponse(rsp)
}

// DeleteCertificateIdIdWithBodyWithResponse request with arbitrary body returning *DeleteCertificateIdIdResponse
func (c *ClientWithResponses) DeleteCertificateIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteCertificateIdIdResponse, error) {
	rsp, err := c.DeleteCertificateIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertificateIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteCertificateIdIdWithResponse(ctx context.Context, id int, body DeleteCertificateIdIdJSONRequestBody) (*DeleteCertificateIdIdResponse, error) {
	rsp, err := c.DeleteCertificateIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertificateIdIdResponse(rsp)
}

// GetCertificateIdIdWithResponse request returning *GetCertificateIdIdResponse
func (c *ClientWithResponses) GetCertificateIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCertificateIdIdParams) (*GetCertificateIdIdResponse, error) {
	rsp, err := c.GetCertificateIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateIdIdResponse(rsp)
}

// PutCertificateIdIdWithBodyWithResponse request with arbitrary body returning *PutCertificateIdIdResponse
func (c *ClientWithResponses) PutCertificateIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCertificateIdIdResponse, error) {
	rsp, err := c.PutCertificateIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCertificateIdIdWithResponse(ctx context.Context, id int, body PutCertificateIdIdJSONRequestBody) (*PutCertificateIdIdResponse, error) {
	rsp, err := c.PutCertificateIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateIdIdResponse(rsp)
}

// GetCertificateKeyTypeChoicesWithResponse request returning *GetCertificateKeyTypeChoicesResponse
func (c *ClientWithResponses) GetCertificateKeyTypeChoicesWithResponse(ctx context.Context) (*GetCertificateKeyTypeChoicesResponse, error) {
	rsp, err := c.GetCertificateKeyTypeChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateKeyTypeChoicesResponse(rsp)
}

// GetCertificateauthorityWithResponse request returning *GetCertificateauthorityResponse
func (c *ClientWithResponses) GetCertificateauthorityWithResponse(ctx context.Context, params *GetCertificateauthorityParams) (*GetCertificateauthorityResponse, error) {
	rsp, err := c.GetCertificateauthority(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateauthorityResponse(rsp)
}

// PostCertificateauthorityWithBodyWithResponse request with arbitrary body returning *PostCertificateauthorityResponse
func (c *ClientWithResponses) PostCertificateauthorityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCertificateauthorityResponse, error) {
	rsp, err := c.PostCertificateauthorityWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateauthorityResponse(rsp)
}

func (c *ClientWithResponses) PostCertificateauthorityWithResponse(ctx context.Context, body PostCertificateauthorityJSONRequestBody) (*PostCertificateauthorityResponse, error) {
	rsp, err := c.PostCertificateauthority(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateauthorityResponse(rsp)
}

// PostCertificateauthorityCaSignCsrWithBodyWithResponse request with arbitrary body returning *PostCertificateauthorityCaSignCsrResponse
func (c *ClientWithResponses) PostCertificateauthorityCaSignCsrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCertificateauthorityCaSignCsrResponse, error) {
	rsp, err := c.PostCertificateauthorityCaSignCsrWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateauthorityCaSignCsrResponse(rsp)
}

func (c *ClientWithResponses) PostCertificateauthorityCaSignCsrWithResponse(ctx context.Context, body PostCertificateauthorityCaSignCsrJSONRequestBody) (*PostCertificateauthorityCaSignCsrResponse, error) {
	rsp, err := c.PostCertificateauthorityCaSignCsr(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificateauthorityCaSignCsrResponse(rsp)
}

// DeleteCertificateauthorityIdIdWithResponse request returning *DeleteCertificateauthorityIdIdResponse
func (c *ClientWithResponses) DeleteCertificateauthorityIdIdWithResponse(ctx context.Context, id int) (*DeleteCertificateauthorityIdIdResponse, error) {
	rsp, err := c.DeleteCertificateauthorityIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertificateauthorityIdIdResponse(rsp)
}

// GetCertificateauthorityIdIdWithResponse request returning *GetCertificateauthorityIdIdResponse
func (c *ClientWithResponses) GetCertificateauthorityIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCertificateauthorityIdIdParams) (*GetCertificateauthorityIdIdResponse, error) {
	rsp, err := c.GetCertificateauthorityIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateauthorityIdIdResponse(rsp)
}

// PutCertificateauthorityIdIdWithBodyWithResponse request with arbitrary body returning *PutCertificateauthorityIdIdResponse
func (c *ClientWithResponses) PutCertificateauthorityIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCertificateauthorityIdIdResponse, error) {
	rsp, err := c.PutCertificateauthorityIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateauthorityIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCertificateauthorityIdIdWithResponse(ctx context.Context, id int, body PutCertificateauthorityIdIdJSONRequestBody) (*PutCertificateauthorityIdIdResponse, error) {
	rsp, err := c.PutCertificateauthorityIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateauthorityIdIdResponse(rsp)
}

// GetCloudsyncWithResponse request returning *GetCloudsyncResponse
func (c *ClientWithResponses) GetCloudsyncWithResponse(ctx context.Context, params *GetCloudsyncParams) (*GetCloudsyncResponse, error) {
	rsp, err := c.GetCloudsync(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncResponse(rsp)
}

// PostCloudsyncWithBodyWithResponse request with arbitrary body returning *PostCloudsyncResponse
func (c *ClientWithResponses) PostCloudsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncResponse, error) {
	rsp, err := c.PostCloudsyncWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncWithResponse(ctx context.Context, body PostCloudsyncJSONRequestBody) (*PostCloudsyncResponse, error) {
	rsp, err := c.PostCloudsync(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncResponse(rsp)
}

// GetCloudsyncCommonTaskSchemaWithResponse request returning *GetCloudsyncCommonTaskSchemaResponse
func (c *ClientWithResponses) GetCloudsyncCommonTaskSchemaWithResponse(ctx context.Context) (*GetCloudsyncCommonTaskSchemaResponse, error) {
	rsp, err := c.GetCloudsyncCommonTaskSchema(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncCommonTaskSchemaResponse(rsp)
}

// GetCloudsyncCredentialsWithResponse request returning *GetCloudsyncCredentialsResponse
func (c *ClientWithResponses) GetCloudsyncCredentialsWithResponse(ctx context.Context, params *GetCloudsyncCredentialsParams) (*GetCloudsyncCredentialsResponse, error) {
	rsp, err := c.GetCloudsyncCredentials(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncCredentialsResponse(rsp)
}

// PostCloudsyncCredentialsWithBodyWithResponse request with arbitrary body returning *PostCloudsyncCredentialsResponse
func (c *ClientWithResponses) PostCloudsyncCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncCredentialsResponse, error) {
	rsp, err := c.PostCloudsyncCredentialsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncCredentialsResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncCredentialsWithResponse(ctx context.Context, body PostCloudsyncCredentialsJSONRequestBody) (*PostCloudsyncCredentialsResponse, error) {
	rsp, err := c.PostCloudsyncCredentials(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncCredentialsResponse(rsp)
}

// DeleteCloudsyncCredentialsIdIdWithResponse request returning *DeleteCloudsyncCredentialsIdIdResponse
func (c *ClientWithResponses) DeleteCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int) (*DeleteCloudsyncCredentialsIdIdResponse, error) {
	rsp, err := c.DeleteCloudsyncCredentialsIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCloudsyncCredentialsIdIdResponse(rsp)
}

// GetCloudsyncCredentialsIdIdWithResponse request returning *GetCloudsyncCredentialsIdIdResponse
func (c *ClientWithResponses) GetCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCloudsyncCredentialsIdIdParams) (*GetCloudsyncCredentialsIdIdResponse, error) {
	rsp, err := c.GetCloudsyncCredentialsIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncCredentialsIdIdResponse(rsp)
}

// PutCloudsyncCredentialsIdIdWithBodyWithResponse request with arbitrary body returning *PutCloudsyncCredentialsIdIdResponse
func (c *ClientWithResponses) PutCloudsyncCredentialsIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCloudsyncCredentialsIdIdResponse, error) {
	rsp, err := c.PutCloudsyncCredentialsIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudsyncCredentialsIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCloudsyncCredentialsIdIdWithResponse(ctx context.Context, id int, body PutCloudsyncCredentialsIdIdJSONRequestBody) (*PutCloudsyncCredentialsIdIdResponse, error) {
	rsp, err := c.PutCloudsyncCredentialsIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudsyncCredentialsIdIdResponse(rsp)
}

// PostCloudsyncCredentialsVerifyWithBodyWithResponse request with arbitrary body returning *PostCloudsyncCredentialsVerifyResponse
func (c *ClientWithResponses) PostCloudsyncCredentialsVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncCredentialsVerifyResponse, error) {
	rsp, err := c.PostCloudsyncCredentialsVerifyWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncCredentialsVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncCredentialsVerifyWithResponse(ctx context.Context, body PostCloudsyncCredentialsVerifyJSONRequestBody) (*PostCloudsyncCredentialsVerifyResponse, error) {
	rsp, err := c.PostCloudsyncCredentialsVerify(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncCredentialsVerifyResponse(rsp)
}

// DeleteCloudsyncIdIdWithResponse request returning *DeleteCloudsyncIdIdResponse
func (c *ClientWithResponses) DeleteCloudsyncIdIdWithResponse(ctx context.Context, id int) (*DeleteCloudsyncIdIdResponse, error) {
	rsp, err := c.DeleteCloudsyncIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCloudsyncIdIdResponse(rsp)
}

// GetCloudsyncIdIdWithResponse request returning *GetCloudsyncIdIdResponse
func (c *ClientWithResponses) GetCloudsyncIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCloudsyncIdIdParams) (*GetCloudsyncIdIdResponse, error) {
	rsp, err := c.GetCloudsyncIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncIdIdResponse(rsp)
}

// PutCloudsyncIdIdWithBodyWithResponse request with arbitrary body returning *PutCloudsyncIdIdResponse
func (c *ClientWithResponses) PutCloudsyncIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCloudsyncIdIdResponse, error) {
	rsp, err := c.PutCloudsyncIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudsyncIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCloudsyncIdIdWithResponse(ctx context.Context, id int, body PutCloudsyncIdIdJSONRequestBody) (*PutCloudsyncIdIdResponse, error) {
	rsp, err := c.PutCloudsyncIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudsyncIdIdResponse(rsp)
}

// PostCloudsyncIdIdAbortWithBodyWithResponse request with arbitrary body returning *PostCloudsyncIdIdAbortResponse
func (c *ClientWithResponses) PostCloudsyncIdIdAbortWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostCloudsyncIdIdAbortResponse, error) {
	rsp, err := c.PostCloudsyncIdIdAbortWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdAbortResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncIdIdAbortWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdAbortJSONRequestBody) (*PostCloudsyncIdIdAbortResponse, error) {
	rsp, err := c.PostCloudsyncIdIdAbort(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdAbortResponse(rsp)
}

// PostCloudsyncIdIdSyncWithBodyWithResponse request with arbitrary body returning *PostCloudsyncIdIdSyncResponse
func (c *ClientWithResponses) PostCloudsyncIdIdSyncWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostCloudsyncIdIdSyncResponse, error) {
	rsp, err := c.PostCloudsyncIdIdSyncWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdSyncResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncIdIdSyncWithResponse(ctx context.Context, id int, body PostCloudsyncIdIdSyncJSONRequestBody) (*PostCloudsyncIdIdSyncResponse, error) {
	rsp, err := c.PostCloudsyncIdIdSync(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncIdIdSyncResponse(rsp)
}

// PostCloudsyncListBucketsWithBodyWithResponse request with arbitrary body returning *PostCloudsyncListBucketsResponse
func (c *ClientWithResponses) PostCloudsyncListBucketsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncListBucketsResponse, error) {
	rsp, err := c.PostCloudsyncListBucketsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncListBucketsResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncListBucketsWithResponse(ctx context.Context, body PostCloudsyncListBucketsJSONRequestBody) (*PostCloudsyncListBucketsResponse, error) {
	rsp, err := c.PostCloudsyncListBuckets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncListBucketsResponse(rsp)
}

// PostCloudsyncListDirectoryWithBodyWithResponse request with arbitrary body returning *PostCloudsyncListDirectoryResponse
func (c *ClientWithResponses) PostCloudsyncListDirectoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncListDirectoryResponse, error) {
	rsp, err := c.PostCloudsyncListDirectoryWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncListDirectoryResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncListDirectoryWithResponse(ctx context.Context, body PostCloudsyncListDirectoryJSONRequestBody) (*PostCloudsyncListDirectoryResponse, error) {
	rsp, err := c.PostCloudsyncListDirectory(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncListDirectoryResponse(rsp)
}

// PostCloudsyncOnedriveListDrivesWithBodyWithResponse request with arbitrary body returning *PostCloudsyncOnedriveListDrivesResponse
func (c *ClientWithResponses) PostCloudsyncOnedriveListDrivesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCloudsyncOnedriveListDrivesResponse, error) {
	rsp, err := c.PostCloudsyncOnedriveListDrivesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncOnedriveListDrivesResponse(rsp)
}

func (c *ClientWithResponses) PostCloudsyncOnedriveListDrivesWithResponse(ctx context.Context, body PostCloudsyncOnedriveListDrivesJSONRequestBody) (*PostCloudsyncOnedriveListDrivesResponse, error) {
	rsp, err := c.PostCloudsyncOnedriveListDrives(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudsyncOnedriveListDrivesResponse(rsp)
}

// GetCloudsyncProvidersWithResponse request returning *GetCloudsyncProvidersResponse
func (c *ClientWithResponses) GetCloudsyncProvidersWithResponse(ctx context.Context) (*GetCloudsyncProvidersResponse, error) {
	rsp, err := c.GetCloudsyncProviders(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudsyncProvidersResponse(rsp)
}

// PostConfigResetWithBodyWithResponse request with arbitrary body returning *PostConfigResetResponse
func (c *ClientWithResponses) PostConfigResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConfigResetResponse, error) {
	rsp, err := c.PostConfigResetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigResetResponse(rsp)
}

func (c *ClientWithResponses) PostConfigResetWithResponse(ctx context.Context, body PostConfigResetJSONRequestBody) (*PostConfigResetResponse, error) {
	rsp, err := c.PostConfigReset(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigResetResponse(rsp)
}

// PostCoreBulkWithBodyWithResponse request with arbitrary body returning *PostCoreBulkResponse
func (c *ClientWithResponses) PostCoreBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreBulkResponse, error) {
	rsp, err := c.PostCoreBulkWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreBulkResponse(rsp)
}

func (c *ClientWithResponses) PostCoreBulkWithResponse(ctx context.Context, body PostCoreBulkJSONRequestBody) (*PostCoreBulkResponse, error) {
	rsp, err := c.PostCoreBulk(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreBulkResponse(rsp)
}

// PostCoreDebugWithBodyWithResponse request with arbitrary body returning *PostCoreDebugResponse
func (c *ClientWithResponses) PostCoreDebugWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreDebugResponse, error) {
	rsp, err := c.PostCoreDebugWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreDebugResponse(rsp)
}

func (c *ClientWithResponses) PostCoreDebugWithResponse(ctx context.Context, body PostCoreDebugJSONRequestBody) (*PostCoreDebugResponse, error) {
	rsp, err := c.PostCoreDebug(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreDebugResponse(rsp)
}

// PostCoreDownloadWithBodyWithResponse request with arbitrary body returning *PostCoreDownloadResponse
func (c *ClientWithResponses) PostCoreDownloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreDownloadResponse, error) {
	rsp, err := c.PostCoreDownloadWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostCoreDownloadWithResponse(ctx context.Context, body PostCoreDownloadJSONRequestBody) (*PostCoreDownloadResponse, error) {
	rsp, err := c.PostCoreDownload(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreDownloadResponse(rsp)
}

// GetCoreGetEventsWithResponse request returning *GetCoreGetEventsResponse
func (c *ClientWithResponses) GetCoreGetEventsWithResponse(ctx context.Context) (*GetCoreGetEventsResponse, error) {
	rsp, err := c.GetCoreGetEvents(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreGetEventsResponse(rsp)
}

// GetCoreGetJobsWithResponse request returning *GetCoreGetJobsResponse
func (c *ClientWithResponses) GetCoreGetJobsWithResponse(ctx context.Context, params *GetCoreGetJobsParams) (*GetCoreGetJobsResponse, error) {
	rsp, err := c.GetCoreGetJobs(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreGetJobsResponse(rsp)
}

// PostCoreGetMethodsWithBodyWithResponse request with arbitrary body returning *PostCoreGetMethodsResponse
func (c *ClientWithResponses) PostCoreGetMethodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreGetMethodsResponse, error) {
	rsp, err := c.PostCoreGetMethodsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreGetMethodsResponse(rsp)
}

func (c *ClientWithResponses) PostCoreGetMethodsWithResponse(ctx context.Context, body PostCoreGetMethodsJSONRequestBody) (*PostCoreGetMethodsResponse, error) {
	rsp, err := c.PostCoreGetMethods(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreGetMethodsResponse(rsp)
}

// GetCoreGetServicesWithResponse request returning *GetCoreGetServicesResponse
func (c *ClientWithResponses) GetCoreGetServicesWithResponse(ctx context.Context) (*GetCoreGetServicesResponse, error) {
	rsp, err := c.GetCoreGetServices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreGetServicesResponse(rsp)
}

// PostCoreJobAbortWithBodyWithResponse request with arbitrary body returning *PostCoreJobAbortResponse
func (c *ClientWithResponses) PostCoreJobAbortWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreJobAbortResponse, error) {
	rsp, err := c.PostCoreJobAbortWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobAbortResponse(rsp)
}

func (c *ClientWithResponses) PostCoreJobAbortWithResponse(ctx context.Context, body PostCoreJobAbortJSONRequestBody) (*PostCoreJobAbortResponse, error) {
	rsp, err := c.PostCoreJobAbort(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobAbortResponse(rsp)
}

// PostCoreJobUpdateWithBodyWithResponse request with arbitrary body returning *PostCoreJobUpdateResponse
func (c *ClientWithResponses) PostCoreJobUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreJobUpdateResponse, error) {
	rsp, err := c.PostCoreJobUpdateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostCoreJobUpdateWithResponse(ctx context.Context, body PostCoreJobUpdateJSONRequestBody) (*PostCoreJobUpdateResponse, error) {
	rsp, err := c.PostCoreJobUpdate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobUpdateResponse(rsp)
}

// PostCoreJobWaitWithBodyWithResponse request with arbitrary body returning *PostCoreJobWaitResponse
func (c *ClientWithResponses) PostCoreJobWaitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCoreJobWaitResponse, error) {
	rsp, err := c.PostCoreJobWaitWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobWaitResponse(rsp)
}

func (c *ClientWithResponses) PostCoreJobWaitWithResponse(ctx context.Context, body PostCoreJobWaitJSONRequestBody) (*PostCoreJobWaitResponse, error) {
	rsp, err := c.PostCoreJobWait(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreJobWaitResponse(rsp)
}

// GetCorePingWithResponse request returning *GetCorePingResponse
func (c *ClientWithResponses) GetCorePingWithResponse(ctx context.Context) (*GetCorePingResponse, error) {
	rsp, err := c.GetCorePing(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetCorePingResponse(rsp)
}

// GetCoreSessionsWithResponse request returning *GetCoreSessionsResponse
func (c *ClientWithResponses) GetCoreSessionsWithResponse(ctx context.Context, params *GetCoreSessionsParams) (*GetCoreSessionsResponse, error) {
	rsp, err := c.GetCoreSessions(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreSessionsResponse(rsp)
}

// GetCronjobWithResponse request returning *GetCronjobResponse
func (c *ClientWithResponses) GetCronjobWithResponse(ctx context.Context, params *GetCronjobParams) (*GetCronjobResponse, error) {
	rsp, err := c.GetCronjob(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCronjobResponse(rsp)
}

// PostCronjobWithBodyWithResponse request with arbitrary body returning *PostCronjobResponse
func (c *ClientWithResponses) PostCronjobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCronjobResponse, error) {
	rsp, err := c.PostCronjobWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCronjobResponse(rsp)
}

func (c *ClientWithResponses) PostCronjobWithResponse(ctx context.Context, body PostCronjobJSONRequestBody) (*PostCronjobResponse, error) {
	rsp, err := c.PostCronjob(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCronjobResponse(rsp)
}

// DeleteCronjobIdIdWithResponse request returning *DeleteCronjobIdIdResponse
func (c *ClientWithResponses) DeleteCronjobIdIdWithResponse(ctx context.Context, id int) (*DeleteCronjobIdIdResponse, error) {
	rsp, err := c.DeleteCronjobIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCronjobIdIdResponse(rsp)
}

// GetCronjobIdIdWithResponse request returning *GetCronjobIdIdResponse
func (c *ClientWithResponses) GetCronjobIdIdWithResponse(ctx context.Context, id []interface{}, params *GetCronjobIdIdParams) (*GetCronjobIdIdResponse, error) {
	rsp, err := c.GetCronjobIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCronjobIdIdResponse(rsp)
}

// PutCronjobIdIdWithBodyWithResponse request with arbitrary body returning *PutCronjobIdIdResponse
func (c *ClientWithResponses) PutCronjobIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutCronjobIdIdResponse, error) {
	rsp, err := c.PutCronjobIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCronjobIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutCronjobIdIdWithResponse(ctx context.Context, id int, body PutCronjobIdIdJSONRequestBody) (*PutCronjobIdIdResponse, error) {
	rsp, err := c.PutCronjobIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutCronjobIdIdResponse(rsp)
}

// PostCronjobRunWithBodyWithResponse request with arbitrary body returning *PostCronjobRunResponse
func (c *ClientWithResponses) PostCronjobRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostCronjobRunResponse, error) {
	rsp, err := c.PostCronjobRunWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCronjobRunResponse(rsp)
}

func (c *ClientWithResponses) PostCronjobRunWithResponse(ctx context.Context, body PostCronjobRunJSONRequestBody) (*PostCronjobRunResponse, error) {
	rsp, err := c.PostCronjobRun(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostCronjobRunResponse(rsp)
}

// PostDeviceGetInfoWithBodyWithResponse request with arbitrary body returning *PostDeviceGetInfoResponse
func (c *ClientWithResponses) PostDeviceGetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDeviceGetInfoResponse, error) {
	rsp, err := c.PostDeviceGetInfoWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceGetInfoResponse(rsp)
}

func (c *ClientWithResponses) PostDeviceGetInfoWithResponse(ctx context.Context, body PostDeviceGetInfoJSONRequestBody) (*PostDeviceGetInfoResponse, error) {
	rsp, err := c.PostDeviceGetInfo(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceGetInfoResponse(rsp)
}

// GetDirectoryservicesGetStateWithResponse request returning *GetDirectoryservicesGetStateResponse
func (c *ClientWithResponses) GetDirectoryservicesGetStateWithResponse(ctx context.Context) (*GetDirectoryservicesGetStateResponse, error) {
	rsp, err := c.GetDirectoryservicesGetState(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetDirectoryservicesGetStateResponse(rsp)
}

// GetDiskWithResponse request returning *GetDiskResponse
func (c *ClientWithResponses) GetDiskWithResponse(ctx context.Context, params *GetDiskParams) (*GetDiskResponse, error) {
	rsp, err := c.GetDisk(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDiskResponse(rsp)
}

// PostDiskGetEncryptedWithBodyWithResponse request with arbitrary body returning *PostDiskGetEncryptedResponse
func (c *ClientWithResponses) PostDiskGetEncryptedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDiskGetEncryptedResponse, error) {
	rsp, err := c.PostDiskGetEncryptedWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskGetEncryptedResponse(rsp)
}

func (c *ClientWithResponses) PostDiskGetEncryptedWithResponse(ctx context.Context, body PostDiskGetEncryptedJSONRequestBody) (*PostDiskGetEncryptedResponse, error) {
	rsp, err := c.PostDiskGetEncrypted(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskGetEncryptedResponse(rsp)
}

// PostDiskGetUnusedWithBodyWithResponse request with arbitrary body returning *PostDiskGetUnusedResponse
func (c *ClientWithResponses) PostDiskGetUnusedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDiskGetUnusedResponse, error) {
	rsp, err := c.PostDiskGetUnusedWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskGetUnusedResponse(rsp)
}

func (c *ClientWithResponses) PostDiskGetUnusedWithResponse(ctx context.Context, body PostDiskGetUnusedJSONRequestBody) (*PostDiskGetUnusedResponse, error) {
	rsp, err := c.PostDiskGetUnused(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskGetUnusedResponse(rsp)
}

// GetDiskIdIdWithResponse request returning *GetDiskIdIdResponse
func (c *ClientWithResponses) GetDiskIdIdWithResponse(ctx context.Context, id []interface{}, params *GetDiskIdIdParams) (*GetDiskIdIdResponse, error) {
	rsp, err := c.GetDiskIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDiskIdIdResponse(rsp)
}

// PutDiskIdIdWithBodyWithResponse request with arbitrary body returning *PutDiskIdIdResponse
func (c *ClientWithResponses) PutDiskIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutDiskIdIdResponse, error) {
	rsp, err := c.PutDiskIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutDiskIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutDiskIdIdWithResponse(ctx context.Context, id string, body PutDiskIdIdJSONRequestBody) (*PutDiskIdIdResponse, error) {
	rsp, err := c.PutDiskIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutDiskIdIdResponse(rsp)
}

// PostDiskTemperaturesWithBodyWithResponse request with arbitrary body returning *PostDiskTemperaturesResponse
func (c *ClientWithResponses) PostDiskTemperaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDiskTemperaturesResponse, error) {
	rsp, err := c.PostDiskTemperaturesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskTemperaturesResponse(rsp)
}

func (c *ClientWithResponses) PostDiskTemperaturesWithResponse(ctx context.Context, body PostDiskTemperaturesJSONRequestBody) (*PostDiskTemperaturesResponse, error) {
	rsp, err := c.PostDiskTemperatures(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskTemperaturesResponse(rsp)
}

// PostDiskWipeWithBodyWithResponse request with arbitrary body returning *PostDiskWipeResponse
func (c *ClientWithResponses) PostDiskWipeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostDiskWipeResponse, error) {
	rsp, err := c.PostDiskWipeWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskWipeResponse(rsp)
}

func (c *ClientWithResponses) PostDiskWipeWithResponse(ctx context.Context, body PostDiskWipeJSONRequestBody) (*PostDiskWipeResponse, error) {
	rsp, err := c.PostDiskWipe(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDiskWipeResponse(rsp)
}

// GetDnsQueryWithResponse request returning *GetDnsQueryResponse
func (c *ClientWithResponses) GetDnsQueryWithResponse(ctx context.Context, params *GetDnsQueryParams) (*GetDnsQueryResponse, error) {
	rsp, err := c.GetDnsQuery(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDnsQueryResponse(rsp)
}

// GetDyndnsWithResponse request returning *GetDyndnsResponse
func (c *ClientWithResponses) GetDyndnsWithResponse(ctx context.Context) (*GetDyndnsResponse, error) {
	rsp, err := c.GetDyndns(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetDyndnsResponse(rsp)
}

// PutDyndnsWithBodyWithResponse request with arbitrary body returning *PutDyndnsResponse
func (c *ClientWithResponses) PutDyndnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutDyndnsResponse, error) {
	rsp, err := c.PutDyndnsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutDyndnsResponse(rsp)
}

func (c *ClientWithResponses) PutDyndnsWithResponse(ctx context.Context, body PutDyndnsJSONRequestBody) (*PutDyndnsResponse, error) {
	rsp, err := c.PutDyndns(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutDyndnsResponse(rsp)
}

// GetDyndnsProviderChoicesWithResponse request returning *GetDyndnsProviderChoicesResponse
func (c *ClientWithResponses) GetDyndnsProviderChoicesWithResponse(ctx context.Context) (*GetDyndnsProviderChoicesResponse, error) {
	rsp, err := c.GetDyndnsProviderChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetDyndnsProviderChoicesResponse(rsp)
}

// PostFilesystemAclIsTrivialWithBodyWithResponse request with arbitrary body returning *PostFilesystemAclIsTrivialResponse
func (c *ClientWithResponses) PostFilesystemAclIsTrivialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemAclIsTrivialResponse, error) {
	rsp, err := c.PostFilesystemAclIsTrivialWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemAclIsTrivialResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemAclIsTrivialWithResponse(ctx context.Context, body PostFilesystemAclIsTrivialJSONRequestBody) (*PostFilesystemAclIsTrivialResponse, error) {
	rsp, err := c.PostFilesystemAclIsTrivial(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemAclIsTrivialResponse(rsp)
}

// PostFilesystemChownWithBodyWithResponse request with arbitrary body returning *PostFilesystemChownResponse
func (c *ClientWithResponses) PostFilesystemChownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemChownResponse, error) {
	rsp, err := c.PostFilesystemChownWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemChownResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemChownWithResponse(ctx context.Context, body PostFilesystemChownJSONRequestBody) (*PostFilesystemChownResponse, error) {
	rsp, err := c.PostFilesystemChown(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemChownResponse(rsp)
}

// GetFilesystemDefaultAclChoicesWithResponse request returning *GetFilesystemDefaultAclChoicesResponse
func (c *ClientWithResponses) GetFilesystemDefaultAclChoicesWithResponse(ctx context.Context) (*GetFilesystemDefaultAclChoicesResponse, error) {
	rsp, err := c.GetFilesystemDefaultAclChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetFilesystemDefaultAclChoicesResponse(rsp)
}

// PostFilesystemGetDefaultAclWithBodyWithResponse request with arbitrary body returning *PostFilesystemGetDefaultAclResponse
func (c *ClientWithResponses) PostFilesystemGetDefaultAclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemGetDefaultAclResponse, error) {
	rsp, err := c.PostFilesystemGetDefaultAclWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemGetDefaultAclResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemGetDefaultAclWithResponse(ctx context.Context, body PostFilesystemGetDefaultAclJSONRequestBody) (*PostFilesystemGetDefaultAclResponse, error) {
	rsp, err := c.PostFilesystemGetDefaultAcl(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemGetDefaultAclResponse(rsp)
}

// PostFilesystemGetaclWithBodyWithResponse request with arbitrary body returning *PostFilesystemGetaclResponse
func (c *ClientWithResponses) PostFilesystemGetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemGetaclResponse, error) {
	rsp, err := c.PostFilesystemGetaclWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemGetaclResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemGetaclWithResponse(ctx context.Context, body PostFilesystemGetaclJSONRequestBody) (*PostFilesystemGetaclResponse, error) {
	rsp, err := c.PostFilesystemGetacl(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemGetaclResponse(rsp)
}

// PostFilesystemListdirWithBodyWithResponse request with arbitrary body returning *PostFilesystemListdirResponse
func (c *ClientWithResponses) PostFilesystemListdirWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemListdirResponse, error) {
	rsp, err := c.PostFilesystemListdirWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemListdirResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemListdirWithResponse(ctx context.Context, body PostFilesystemListdirJSONRequestBody) (*PostFilesystemListdirResponse, error) {
	rsp, err := c.PostFilesystemListdir(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemListdirResponse(rsp)
}

// PostFilesystemSetaclWithBodyWithResponse request with arbitrary body returning *PostFilesystemSetaclResponse
func (c *ClientWithResponses) PostFilesystemSetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemSetaclResponse, error) {
	rsp, err := c.PostFilesystemSetaclWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemSetaclResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemSetaclWithResponse(ctx context.Context, body PostFilesystemSetaclJSONRequestBody) (*PostFilesystemSetaclResponse, error) {
	rsp, err := c.PostFilesystemSetacl(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemSetaclResponse(rsp)
}

// PostFilesystemSetpermWithBodyWithResponse request with arbitrary body returning *PostFilesystemSetpermResponse
func (c *ClientWithResponses) PostFilesystemSetpermWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemSetpermResponse, error) {
	rsp, err := c.PostFilesystemSetpermWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemSetpermResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemSetpermWithResponse(ctx context.Context, body PostFilesystemSetpermJSONRequestBody) (*PostFilesystemSetpermResponse, error) {
	rsp, err := c.PostFilesystemSetperm(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemSetpermResponse(rsp)
}

// PostFilesystemStatWithBodyWithResponse request with arbitrary body returning *PostFilesystemStatResponse
func (c *ClientWithResponses) PostFilesystemStatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemStatResponse, error) {
	rsp, err := c.PostFilesystemStatWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemStatResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemStatWithResponse(ctx context.Context, body PostFilesystemStatJSONRequestBody) (*PostFilesystemStatResponse, error) {
	rsp, err := c.PostFilesystemStat(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemStatResponse(rsp)
}

// PostFilesystemStatfsWithBodyWithResponse request with arbitrary body returning *PostFilesystemStatfsResponse
func (c *ClientWithResponses) PostFilesystemStatfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFilesystemStatfsResponse, error) {
	rsp, err := c.PostFilesystemStatfsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemStatfsResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemStatfsWithResponse(ctx context.Context, body PostFilesystemStatfsJSONRequestBody) (*PostFilesystemStatfsResponse, error) {
	rsp, err := c.PostFilesystemStatfs(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemStatfsResponse(rsp)
}

// GetFtpWithResponse request returning *GetFtpResponse
func (c *ClientWithResponses) GetFtpWithResponse(ctx context.Context) (*GetFtpResponse, error) {
	rsp, err := c.GetFtp(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetFtpResponse(rsp)
}

// PutFtpWithBodyWithResponse request with arbitrary body returning *PutFtpResponse
func (c *ClientWithResponses) PutFtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutFtpResponse, error) {
	rsp, err := c.PutFtpWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutFtpResponse(rsp)
}

func (c *ClientWithResponses) PutFtpWithResponse(ctx context.Context, body PutFtpJSONRequestBody) (*PutFtpResponse, error) {
	rsp, err := c.PutFtp(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutFtpResponse(rsp)
}

// GetGroupWithResponse request returning *GetGroupResponse
func (c *ClientWithResponses) GetGroupWithResponse(ctx context.Context, params *GetGroupParams) (*GetGroupResponse, error) {
	rsp, err := c.GetGroup(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupResponse(rsp)
}

// PostGroupWithBodyWithResponse request with arbitrary body returning *PostGroupResponse
func (c *ClientWithResponses) PostGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostGroupResponse, error) {
	rsp, err := c.PostGroupWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupResponse(rsp)
}

func (c *ClientWithResponses) PostGroupWithResponse(ctx context.Context, body PostGroupJSONRequestBody) (*PostGroupResponse, error) {
	rsp, err := c.PostGroup(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupResponse(rsp)
}

// PostGroupGetGroupObjWithBodyWithResponse request with arbitrary body returning *PostGroupGetGroupObjResponse
func (c *ClientWithResponses) PostGroupGetGroupObjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostGroupGetGroupObjResponse, error) {
	rsp, err := c.PostGroupGetGroupObjWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupGetGroupObjResponse(rsp)
}

func (c *ClientWithResponses) PostGroupGetGroupObjWithResponse(ctx context.Context, body PostGroupGetGroupObjJSONRequestBody) (*PostGroupGetGroupObjResponse, error) {
	rsp, err := c.PostGroupGetGroupObj(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupGetGroupObjResponse(rsp)
}

// GetGroupGetNextGidWithResponse request returning *GetGroupGetNextGidResponse
func (c *ClientWithResponses) GetGroupGetNextGidWithResponse(ctx context.Context) (*GetGroupGetNextGidResponse, error) {
	rsp, err := c.GetGroupGetNextGid(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupGetNextGidResponse(rsp)
}

// DeleteGroupIdIdWithBodyWithResponse request with arbitrary body returning *DeleteGroupIdIdResponse
func (c *ClientWithResponses) DeleteGroupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteGroupIdIdResponse, error) {
	rsp, err := c.DeleteGroupIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteGroupIdIdWithResponse(ctx context.Context, id int, body DeleteGroupIdIdJSONRequestBody) (*DeleteGroupIdIdResponse, error) {
	rsp, err := c.DeleteGroupIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupIdIdResponse(rsp)
}

// GetGroupIdIdWithResponse request returning *GetGroupIdIdResponse
func (c *ClientWithResponses) GetGroupIdIdWithResponse(ctx context.Context, id []interface{}, params *GetGroupIdIdParams) (*GetGroupIdIdResponse, error) {
	rsp, err := c.GetGroupIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupIdIdResponse(rsp)
}

// PutGroupIdIdWithBodyWithResponse request with arbitrary body returning *PutGroupIdIdResponse
func (c *ClientWithResponses) PutGroupIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutGroupIdIdResponse, error) {
	rsp, err := c.PutGroupIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutGroupIdIdWithResponse(ctx context.Context, id int, body PutGroupIdIdJSONRequestBody) (*PutGroupIdIdResponse, error) {
	rsp, err := c.PutGroupIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupIdIdResponse(rsp)
}

// GetIdmapAdWithResponse request returning *GetIdmapAdResponse
func (c *ClientWithResponses) GetIdmapAdWithResponse(ctx context.Context, params *GetIdmapAdParams) (*GetIdmapAdResponse, error) {
	rsp, err := c.GetIdmapAd(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapAdResponse(rsp)
}

// PostIdmapAdWithBodyWithResponse request with arbitrary body returning *PostIdmapAdResponse
func (c *ClientWithResponses) PostIdmapAdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapAdResponse, error) {
	rsp, err := c.PostIdmapAdWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapAdResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapAdWithResponse(ctx context.Context, body PostIdmapAdJSONRequestBody) (*PostIdmapAdResponse, error) {
	rsp, err := c.PostIdmapAd(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapAdResponse(rsp)
}

// DeleteIdmapAdIdIdWithResponse request returning *DeleteIdmapAdIdIdResponse
func (c *ClientWithResponses) DeleteIdmapAdIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapAdIdIdResponse, error) {
	rsp, err := c.DeleteIdmapAdIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapAdIdIdResponse(rsp)
}

// GetIdmapAdIdIdWithResponse request returning *GetIdmapAdIdIdResponse
func (c *ClientWithResponses) GetIdmapAdIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapAdIdIdParams) (*GetIdmapAdIdIdResponse, error) {
	rsp, err := c.GetIdmapAdIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapAdIdIdResponse(rsp)
}

// PutIdmapAdIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapAdIdIdResponse
func (c *ClientWithResponses) PutIdmapAdIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapAdIdIdResponse, error) {
	rsp, err := c.PutIdmapAdIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapAdIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapAdIdIdWithResponse(ctx context.Context, id int, body PutIdmapAdIdIdJSONRequestBody) (*PutIdmapAdIdIdResponse, error) {
	rsp, err := c.PutIdmapAdIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapAdIdIdResponse(rsp)
}

// GetIdmapAutoridWithResponse request returning *GetIdmapAutoridResponse
func (c *ClientWithResponses) GetIdmapAutoridWithResponse(ctx context.Context, params *GetIdmapAutoridParams) (*GetIdmapAutoridResponse, error) {
	rsp, err := c.GetIdmapAutorid(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapAutoridResponse(rsp)
}

// PostIdmapAutoridWithBodyWithResponse request with arbitrary body returning *PostIdmapAutoridResponse
func (c *ClientWithResponses) PostIdmapAutoridWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapAutoridResponse, error) {
	rsp, err := c.PostIdmapAutoridWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapAutoridResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapAutoridWithResponse(ctx context.Context, body PostIdmapAutoridJSONRequestBody) (*PostIdmapAutoridResponse, error) {
	rsp, err := c.PostIdmapAutorid(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapAutoridResponse(rsp)
}

// DeleteIdmapAutoridIdIdWithResponse request returning *DeleteIdmapAutoridIdIdResponse
func (c *ClientWithResponses) DeleteIdmapAutoridIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapAutoridIdIdResponse, error) {
	rsp, err := c.DeleteIdmapAutoridIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapAutoridIdIdResponse(rsp)
}

// GetIdmapAutoridIdIdWithResponse request returning *GetIdmapAutoridIdIdResponse
func (c *ClientWithResponses) GetIdmapAutoridIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapAutoridIdIdParams) (*GetIdmapAutoridIdIdResponse, error) {
	rsp, err := c.GetIdmapAutoridIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapAutoridIdIdResponse(rsp)
}

// PutIdmapAutoridIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapAutoridIdIdResponse
func (c *ClientWithResponses) PutIdmapAutoridIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapAutoridIdIdResponse, error) {
	rsp, err := c.PutIdmapAutoridIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapAutoridIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapAutoridIdIdWithResponse(ctx context.Context, id int, body PutIdmapAutoridIdIdJSONRequestBody) (*PutIdmapAutoridIdIdResponse, error) {
	rsp, err := c.PutIdmapAutoridIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapAutoridIdIdResponse(rsp)
}

// GetIdmapClearIdmapCacheWithResponse request returning *GetIdmapClearIdmapCacheResponse
func (c *ClientWithResponses) GetIdmapClearIdmapCacheWithResponse(ctx context.Context) (*GetIdmapClearIdmapCacheResponse, error) {
	rsp, err := c.GetIdmapClearIdmapCache(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapClearIdmapCacheResponse(rsp)
}

// GetIdmapDomainWithResponse request returning *GetIdmapDomainResponse
func (c *ClientWithResponses) GetIdmapDomainWithResponse(ctx context.Context, params *GetIdmapDomainParams) (*GetIdmapDomainResponse, error) {
	rsp, err := c.GetIdmapDomain(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapDomainResponse(rsp)
}

// PostIdmapDomainWithBodyWithResponse request with arbitrary body returning *PostIdmapDomainResponse
func (c *ClientWithResponses) PostIdmapDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapDomainResponse, error) {
	rsp, err := c.PostIdmapDomainWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapDomainResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapDomainWithResponse(ctx context.Context, body PostIdmapDomainJSONRequestBody) (*PostIdmapDomainResponse, error) {
	rsp, err := c.PostIdmapDomain(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapDomainResponse(rsp)
}

// DeleteIdmapDomainIdIdWithResponse request returning *DeleteIdmapDomainIdIdResponse
func (c *ClientWithResponses) DeleteIdmapDomainIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapDomainIdIdResponse, error) {
	rsp, err := c.DeleteIdmapDomainIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapDomainIdIdResponse(rsp)
}

// GetIdmapDomainIdIdWithResponse request returning *GetIdmapDomainIdIdResponse
func (c *ClientWithResponses) GetIdmapDomainIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapDomainIdIdParams) (*GetIdmapDomainIdIdResponse, error) {
	rsp, err := c.GetIdmapDomainIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapDomainIdIdResponse(rsp)
}

// PutIdmapDomainIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapDomainIdIdResponse
func (c *ClientWithResponses) PutIdmapDomainIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapDomainIdIdResponse, error) {
	rsp, err := c.PutIdmapDomainIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapDomainIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapDomainIdIdWithResponse(ctx context.Context, id int, body PutIdmapDomainIdIdJSONRequestBody) (*PutIdmapDomainIdIdResponse, error) {
	rsp, err := c.PutIdmapDomainIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapDomainIdIdResponse(rsp)
}

// GetIdmapDomaintobackendWithResponse request returning *GetIdmapDomaintobackendResponse
func (c *ClientWithResponses) GetIdmapDomaintobackendWithResponse(ctx context.Context, params *GetIdmapDomaintobackendParams) (*GetIdmapDomaintobackendResponse, error) {
	rsp, err := c.GetIdmapDomaintobackend(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapDomaintobackendResponse(rsp)
}

// PostIdmapDomaintobackendWithBodyWithResponse request with arbitrary body returning *PostIdmapDomaintobackendResponse
func (c *ClientWithResponses) PostIdmapDomaintobackendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapDomaintobackendResponse, error) {
	rsp, err := c.PostIdmapDomaintobackendWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapDomaintobackendResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapDomaintobackendWithResponse(ctx context.Context, body PostIdmapDomaintobackendJSONRequestBody) (*PostIdmapDomaintobackendResponse, error) {
	rsp, err := c.PostIdmapDomaintobackend(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapDomaintobackendResponse(rsp)
}

// DeleteIdmapDomaintobackendIdIdWithResponse request returning *DeleteIdmapDomaintobackendIdIdResponse
func (c *ClientWithResponses) DeleteIdmapDomaintobackendIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapDomaintobackendIdIdResponse, error) {
	rsp, err := c.DeleteIdmapDomaintobackendIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapDomaintobackendIdIdResponse(rsp)
}

// GetIdmapDomaintobackendIdIdWithResponse request returning *GetIdmapDomaintobackendIdIdResponse
func (c *ClientWithResponses) GetIdmapDomaintobackendIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapDomaintobackendIdIdParams) (*GetIdmapDomaintobackendIdIdResponse, error) {
	rsp, err := c.GetIdmapDomaintobackendIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapDomaintobackendIdIdResponse(rsp)
}

// PutIdmapDomaintobackendIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapDomaintobackendIdIdResponse
func (c *ClientWithResponses) PutIdmapDomaintobackendIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapDomaintobackendIdIdResponse, error) {
	rsp, err := c.PutIdmapDomaintobackendIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapDomaintobackendIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapDomaintobackendIdIdWithResponse(ctx context.Context, id int, body PutIdmapDomaintobackendIdIdJSONRequestBody) (*PutIdmapDomaintobackendIdIdResponse, error) {
	rsp, err := c.PutIdmapDomaintobackendIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapDomaintobackendIdIdResponse(rsp)
}

// GetIdmapGetConfiguredIdmapDomainsWithResponse request returning *GetIdmapGetConfiguredIdmapDomainsResponse
func (c *ClientWithResponses) GetIdmapGetConfiguredIdmapDomainsWithResponse(ctx context.Context) (*GetIdmapGetConfiguredIdmapDomainsResponse, error) {
	rsp, err := c.GetIdmapGetConfiguredIdmapDomains(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapGetConfiguredIdmapDomainsResponse(rsp)
}

// PostIdmapGetOrCreateIdmapByDomainWithBodyWithResponse request with arbitrary body returning *PostIdmapGetOrCreateIdmapByDomainResponse
func (c *ClientWithResponses) PostIdmapGetOrCreateIdmapByDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapGetOrCreateIdmapByDomainResponse, error) {
	rsp, err := c.PostIdmapGetOrCreateIdmapByDomainWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapGetOrCreateIdmapByDomainResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapGetOrCreateIdmapByDomainWithResponse(ctx context.Context, body PostIdmapGetOrCreateIdmapByDomainJSONRequestBody) (*PostIdmapGetOrCreateIdmapByDomainResponse, error) {
	rsp, err := c.PostIdmapGetOrCreateIdmapByDomain(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapGetOrCreateIdmapByDomainResponse(rsp)
}

// GetIdmapLdapWithResponse request returning *GetIdmapLdapResponse
func (c *ClientWithResponses) GetIdmapLdapWithResponse(ctx context.Context, params *GetIdmapLdapParams) (*GetIdmapLdapResponse, error) {
	rsp, err := c.GetIdmapLdap(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapLdapResponse(rsp)
}

// PostIdmapLdapWithBodyWithResponse request with arbitrary body returning *PostIdmapLdapResponse
func (c *ClientWithResponses) PostIdmapLdapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapLdapResponse, error) {
	rsp, err := c.PostIdmapLdapWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapLdapResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapLdapWithResponse(ctx context.Context, body PostIdmapLdapJSONRequestBody) (*PostIdmapLdapResponse, error) {
	rsp, err := c.PostIdmapLdap(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapLdapResponse(rsp)
}

// DeleteIdmapLdapIdIdWithResponse request returning *DeleteIdmapLdapIdIdResponse
func (c *ClientWithResponses) DeleteIdmapLdapIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapLdapIdIdResponse, error) {
	rsp, err := c.DeleteIdmapLdapIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapLdapIdIdResponse(rsp)
}

// GetIdmapLdapIdIdWithResponse request returning *GetIdmapLdapIdIdResponse
func (c *ClientWithResponses) GetIdmapLdapIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapLdapIdIdParams) (*GetIdmapLdapIdIdResponse, error) {
	rsp, err := c.GetIdmapLdapIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapLdapIdIdResponse(rsp)
}

// PutIdmapLdapIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapLdapIdIdResponse
func (c *ClientWithResponses) PutIdmapLdapIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapLdapIdIdResponse, error) {
	rsp, err := c.PutIdmapLdapIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapLdapIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapLdapIdIdWithResponse(ctx context.Context, id int, body PutIdmapLdapIdIdJSONRequestBody) (*PutIdmapLdapIdIdResponse, error) {
	rsp, err := c.PutIdmapLdapIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapLdapIdIdResponse(rsp)
}

// GetIdmapNssWithResponse request returning *GetIdmapNssResponse
func (c *ClientWithResponses) GetIdmapNssWithResponse(ctx context.Context, params *GetIdmapNssParams) (*GetIdmapNssResponse, error) {
	rsp, err := c.GetIdmapNss(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapNssResponse(rsp)
}

// PostIdmapNssWithBodyWithResponse request with arbitrary body returning *PostIdmapNssResponse
func (c *ClientWithResponses) PostIdmapNssWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapNssResponse, error) {
	rsp, err := c.PostIdmapNssWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapNssResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapNssWithResponse(ctx context.Context, body PostIdmapNssJSONRequestBody) (*PostIdmapNssResponse, error) {
	rsp, err := c.PostIdmapNss(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapNssResponse(rsp)
}

// DeleteIdmapNssIdIdWithResponse request returning *DeleteIdmapNssIdIdResponse
func (c *ClientWithResponses) DeleteIdmapNssIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapNssIdIdResponse, error) {
	rsp, err := c.DeleteIdmapNssIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapNssIdIdResponse(rsp)
}

// GetIdmapNssIdIdWithResponse request returning *GetIdmapNssIdIdResponse
func (c *ClientWithResponses) GetIdmapNssIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapNssIdIdParams) (*GetIdmapNssIdIdResponse, error) {
	rsp, err := c.GetIdmapNssIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapNssIdIdResponse(rsp)
}

// PutIdmapNssIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapNssIdIdResponse
func (c *ClientWithResponses) PutIdmapNssIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapNssIdIdResponse, error) {
	rsp, err := c.PutIdmapNssIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapNssIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapNssIdIdWithResponse(ctx context.Context, id int, body PutIdmapNssIdIdJSONRequestBody) (*PutIdmapNssIdIdResponse, error) {
	rsp, err := c.PutIdmapNssIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapNssIdIdResponse(rsp)
}

// GetIdmapRfc2307WithResponse request returning *GetIdmapRfc2307Response
func (c *ClientWithResponses) GetIdmapRfc2307WithResponse(ctx context.Context, params *GetIdmapRfc2307Params) (*GetIdmapRfc2307Response, error) {
	rsp, err := c.GetIdmapRfc2307(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapRfc2307Response(rsp)
}

// PostIdmapRfc2307WithBodyWithResponse request with arbitrary body returning *PostIdmapRfc2307Response
func (c *ClientWithResponses) PostIdmapRfc2307WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapRfc2307Response, error) {
	rsp, err := c.PostIdmapRfc2307WithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapRfc2307Response(rsp)
}

func (c *ClientWithResponses) PostIdmapRfc2307WithResponse(ctx context.Context, body PostIdmapRfc2307JSONRequestBody) (*PostIdmapRfc2307Response, error) {
	rsp, err := c.PostIdmapRfc2307(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapRfc2307Response(rsp)
}

// DeleteIdmapRfc2307IdIdWithResponse request returning *DeleteIdmapRfc2307IdIdResponse
func (c *ClientWithResponses) DeleteIdmapRfc2307IdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapRfc2307IdIdResponse, error) {
	rsp, err := c.DeleteIdmapRfc2307IdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapRfc2307IdIdResponse(rsp)
}

// GetIdmapRfc2307IdIdWithResponse request returning *GetIdmapRfc2307IdIdResponse
func (c *ClientWithResponses) GetIdmapRfc2307IdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapRfc2307IdIdParams) (*GetIdmapRfc2307IdIdResponse, error) {
	rsp, err := c.GetIdmapRfc2307IdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapRfc2307IdIdResponse(rsp)
}

// PutIdmapRfc2307IdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapRfc2307IdIdResponse
func (c *ClientWithResponses) PutIdmapRfc2307IdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapRfc2307IdIdResponse, error) {
	rsp, err := c.PutIdmapRfc2307IdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapRfc2307IdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapRfc2307IdIdWithResponse(ctx context.Context, id int, body PutIdmapRfc2307IdIdJSONRequestBody) (*PutIdmapRfc2307IdIdResponse, error) {
	rsp, err := c.PutIdmapRfc2307IdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapRfc2307IdIdResponse(rsp)
}

// GetIdmapRidWithResponse request returning *GetIdmapRidResponse
func (c *ClientWithResponses) GetIdmapRidWithResponse(ctx context.Context, params *GetIdmapRidParams) (*GetIdmapRidResponse, error) {
	rsp, err := c.GetIdmapRid(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapRidResponse(rsp)
}

// PostIdmapRidWithBodyWithResponse request with arbitrary body returning *PostIdmapRidResponse
func (c *ClientWithResponses) PostIdmapRidWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapRidResponse, error) {
	rsp, err := c.PostIdmapRidWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapRidResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapRidWithResponse(ctx context.Context, body PostIdmapRidJSONRequestBody) (*PostIdmapRidResponse, error) {
	rsp, err := c.PostIdmapRid(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapRidResponse(rsp)
}

// DeleteIdmapRidIdIdWithResponse request returning *DeleteIdmapRidIdIdResponse
func (c *ClientWithResponses) DeleteIdmapRidIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapRidIdIdResponse, error) {
	rsp, err := c.DeleteIdmapRidIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapRidIdIdResponse(rsp)
}

// GetIdmapRidIdIdWithResponse request returning *GetIdmapRidIdIdResponse
func (c *ClientWithResponses) GetIdmapRidIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapRidIdIdParams) (*GetIdmapRidIdIdResponse, error) {
	rsp, err := c.GetIdmapRidIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapRidIdIdResponse(rsp)
}

// PutIdmapRidIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapRidIdIdResponse
func (c *ClientWithResponses) PutIdmapRidIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapRidIdIdResponse, error) {
	rsp, err := c.PutIdmapRidIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapRidIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapRidIdIdWithResponse(ctx context.Context, id int, body PutIdmapRidIdIdJSONRequestBody) (*PutIdmapRidIdIdResponse, error) {
	rsp, err := c.PutIdmapRidIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapRidIdIdResponse(rsp)
}

// GetIdmapScriptWithResponse request returning *GetIdmapScriptResponse
func (c *ClientWithResponses) GetIdmapScriptWithResponse(ctx context.Context, params *GetIdmapScriptParams) (*GetIdmapScriptResponse, error) {
	rsp, err := c.GetIdmapScript(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapScriptResponse(rsp)
}

// PostIdmapScriptWithBodyWithResponse request with arbitrary body returning *PostIdmapScriptResponse
func (c *ClientWithResponses) PostIdmapScriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapScriptResponse, error) {
	rsp, err := c.PostIdmapScriptWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapScriptResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapScriptWithResponse(ctx context.Context, body PostIdmapScriptJSONRequestBody) (*PostIdmapScriptResponse, error) {
	rsp, err := c.PostIdmapScript(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapScriptResponse(rsp)
}

// DeleteIdmapScriptIdIdWithResponse request returning *DeleteIdmapScriptIdIdResponse
func (c *ClientWithResponses) DeleteIdmapScriptIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapScriptIdIdResponse, error) {
	rsp, err := c.DeleteIdmapScriptIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapScriptIdIdResponse(rsp)
}

// GetIdmapScriptIdIdWithResponse request returning *GetIdmapScriptIdIdResponse
func (c *ClientWithResponses) GetIdmapScriptIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapScriptIdIdParams) (*GetIdmapScriptIdIdResponse, error) {
	rsp, err := c.GetIdmapScriptIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapScriptIdIdResponse(rsp)
}

// PutIdmapScriptIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapScriptIdIdResponse
func (c *ClientWithResponses) PutIdmapScriptIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapScriptIdIdResponse, error) {
	rsp, err := c.PutIdmapScriptIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapScriptIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapScriptIdIdWithResponse(ctx context.Context, id int, body PutIdmapScriptIdIdJSONRequestBody) (*PutIdmapScriptIdIdResponse, error) {
	rsp, err := c.PutIdmapScriptIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapScriptIdIdResponse(rsp)
}

// GetIdmapTdbWithResponse request returning *GetIdmapTdbResponse
func (c *ClientWithResponses) GetIdmapTdbWithResponse(ctx context.Context, params *GetIdmapTdbParams) (*GetIdmapTdbResponse, error) {
	rsp, err := c.GetIdmapTdb(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapTdbResponse(rsp)
}

// PostIdmapTdbWithBodyWithResponse request with arbitrary body returning *PostIdmapTdbResponse
func (c *ClientWithResponses) PostIdmapTdbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIdmapTdbResponse, error) {
	rsp, err := c.PostIdmapTdbWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapTdbResponse(rsp)
}

func (c *ClientWithResponses) PostIdmapTdbWithResponse(ctx context.Context, body PostIdmapTdbJSONRequestBody) (*PostIdmapTdbResponse, error) {
	rsp, err := c.PostIdmapTdb(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIdmapTdbResponse(rsp)
}

// DeleteIdmapTdbIdIdWithResponse request returning *DeleteIdmapTdbIdIdResponse
func (c *ClientWithResponses) DeleteIdmapTdbIdIdWithResponse(ctx context.Context, id int) (*DeleteIdmapTdbIdIdResponse, error) {
	rsp, err := c.DeleteIdmapTdbIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdmapTdbIdIdResponse(rsp)
}

// GetIdmapTdbIdIdWithResponse request returning *GetIdmapTdbIdIdResponse
func (c *ClientWithResponses) GetIdmapTdbIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIdmapTdbIdIdParams) (*GetIdmapTdbIdIdResponse, error) {
	rsp, err := c.GetIdmapTdbIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIdmapTdbIdIdResponse(rsp)
}

// PutIdmapTdbIdIdWithBodyWithResponse request with arbitrary body returning *PutIdmapTdbIdIdResponse
func (c *ClientWithResponses) PutIdmapTdbIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIdmapTdbIdIdResponse, error) {
	rsp, err := c.PutIdmapTdbIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapTdbIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIdmapTdbIdIdWithResponse(ctx context.Context, id int, body PutIdmapTdbIdIdJSONRequestBody) (*PutIdmapTdbIdIdResponse, error) {
	rsp, err := c.PutIdmapTdbIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIdmapTdbIdIdResponse(rsp)
}

// GetInitshutdownscriptWithResponse request returning *GetInitshutdownscriptResponse
func (c *ClientWithResponses) GetInitshutdownscriptWithResponse(ctx context.Context, params *GetInitshutdownscriptParams) (*GetInitshutdownscriptResponse, error) {
	rsp, err := c.GetInitshutdownscript(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInitshutdownscriptResponse(rsp)
}

// PostInitshutdownscriptWithBodyWithResponse request with arbitrary body returning *PostInitshutdownscriptResponse
func (c *ClientWithResponses) PostInitshutdownscriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInitshutdownscriptResponse, error) {
	rsp, err := c.PostInitshutdownscriptWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInitshutdownscriptResponse(rsp)
}

func (c *ClientWithResponses) PostInitshutdownscriptWithResponse(ctx context.Context, body PostInitshutdownscriptJSONRequestBody) (*PostInitshutdownscriptResponse, error) {
	rsp, err := c.PostInitshutdownscript(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInitshutdownscriptResponse(rsp)
}

// DeleteInitshutdownscriptIdIdWithResponse request returning *DeleteInitshutdownscriptIdIdResponse
func (c *ClientWithResponses) DeleteInitshutdownscriptIdIdWithResponse(ctx context.Context, id int) (*DeleteInitshutdownscriptIdIdResponse, error) {
	rsp, err := c.DeleteInitshutdownscriptIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInitshutdownscriptIdIdResponse(rsp)
}

// GetInitshutdownscriptIdIdWithResponse request returning *GetInitshutdownscriptIdIdResponse
func (c *ClientWithResponses) GetInitshutdownscriptIdIdWithResponse(ctx context.Context, id []interface{}, params *GetInitshutdownscriptIdIdParams) (*GetInitshutdownscriptIdIdResponse, error) {
	rsp, err := c.GetInitshutdownscriptIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInitshutdownscriptIdIdResponse(rsp)
}

// PutInitshutdownscriptIdIdWithBodyWithResponse request with arbitrary body returning *PutInitshutdownscriptIdIdResponse
func (c *ClientWithResponses) PutInitshutdownscriptIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutInitshutdownscriptIdIdResponse, error) {
	rsp, err := c.PutInitshutdownscriptIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutInitshutdownscriptIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutInitshutdownscriptIdIdWithResponse(ctx context.Context, id int, body PutInitshutdownscriptIdIdJSONRequestBody) (*PutInitshutdownscriptIdIdResponse, error) {
	rsp, err := c.PutInitshutdownscriptIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutInitshutdownscriptIdIdResponse(rsp)
}

// GetInterfaceWithResponse request returning *GetInterfaceResponse
func (c *ClientWithResponses) GetInterfaceWithResponse(ctx context.Context, params *GetInterfaceParams) (*GetInterfaceResponse, error) {
	rsp, err := c.GetInterface(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceResponse(rsp)
}

// PostInterfaceWithBodyWithResponse request with arbitrary body returning *PostInterfaceResponse
func (c *ClientWithResponses) PostInterfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceResponse, error) {
	rsp, err := c.PostInterfaceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceWithResponse(ctx context.Context, body PostInterfaceJSONRequestBody) (*PostInterfaceResponse, error) {
	rsp, err := c.PostInterface(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceResponse(rsp)
}

// PostInterfaceBridgeMembersChoicesWithBodyWithResponse request with arbitrary body returning *PostInterfaceBridgeMembersChoicesResponse
func (c *ClientWithResponses) PostInterfaceBridgeMembersChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceBridgeMembersChoicesResponse, error) {
	rsp, err := c.PostInterfaceBridgeMembersChoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceBridgeMembersChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceBridgeMembersChoicesWithResponse(ctx context.Context, body PostInterfaceBridgeMembersChoicesJSONRequestBody) (*PostInterfaceBridgeMembersChoicesResponse, error) {
	rsp, err := c.PostInterfaceBridgeMembersChoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceBridgeMembersChoicesResponse(rsp)
}

// GetInterfaceCheckinWithResponse request returning *GetInterfaceCheckinResponse
func (c *ClientWithResponses) GetInterfaceCheckinWithResponse(ctx context.Context) (*GetInterfaceCheckinResponse, error) {
	rsp, err := c.GetInterfaceCheckin(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceCheckinResponse(rsp)
}

// GetInterfaceCheckinWaitingWithResponse request returning *GetInterfaceCheckinWaitingResponse
func (c *ClientWithResponses) GetInterfaceCheckinWaitingWithResponse(ctx context.Context) (*GetInterfaceCheckinWaitingResponse, error) {
	rsp, err := c.GetInterfaceCheckinWaiting(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceCheckinWaitingResponse(rsp)
}

// PostInterfaceChoicesWithBodyWithResponse request with arbitrary body returning *PostInterfaceChoicesResponse
func (c *ClientWithResponses) PostInterfaceChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceChoicesResponse, error) {
	rsp, err := c.PostInterfaceChoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceChoicesWithResponse(ctx context.Context, body PostInterfaceChoicesJSONRequestBody) (*PostInterfaceChoicesResponse, error) {
	rsp, err := c.PostInterfaceChoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceChoicesResponse(rsp)
}

// PostInterfaceCommitWithBodyWithResponse request with arbitrary body returning *PostInterfaceCommitResponse
func (c *ClientWithResponses) PostInterfaceCommitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceCommitResponse, error) {
	rsp, err := c.PostInterfaceCommitWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceCommitResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceCommitWithResponse(ctx context.Context, body PostInterfaceCommitJSONRequestBody) (*PostInterfaceCommitResponse, error) {
	rsp, err := c.PostInterfaceCommit(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceCommitResponse(rsp)
}

// GetInterfaceHasPendingChangesWithResponse request returning *GetInterfaceHasPendingChangesResponse
func (c *ClientWithResponses) GetInterfaceHasPendingChangesWithResponse(ctx context.Context) (*GetInterfaceHasPendingChangesResponse, error) {
	rsp, err := c.GetInterfaceHasPendingChanges(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceHasPendingChangesResponse(rsp)
}

// DeleteInterfaceIdIdWithResponse request returning *DeleteInterfaceIdIdResponse
func (c *ClientWithResponses) DeleteInterfaceIdIdWithResponse(ctx context.Context, id string) (*DeleteInterfaceIdIdResponse, error) {
	rsp, err := c.DeleteInterfaceIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInterfaceIdIdResponse(rsp)
}

// GetInterfaceIdIdWithResponse request returning *GetInterfaceIdIdResponse
func (c *ClientWithResponses) GetInterfaceIdIdWithResponse(ctx context.Context, id []interface{}, params *GetInterfaceIdIdParams) (*GetInterfaceIdIdResponse, error) {
	rsp, err := c.GetInterfaceIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceIdIdResponse(rsp)
}

// PutInterfaceIdIdWithBodyWithResponse request with arbitrary body returning *PutInterfaceIdIdResponse
func (c *ClientWithResponses) PutInterfaceIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutInterfaceIdIdResponse, error) {
	rsp, err := c.PutInterfaceIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutInterfaceIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutInterfaceIdIdWithResponse(ctx context.Context, id string, body PutInterfaceIdIdJSONRequestBody) (*PutInterfaceIdIdResponse, error) {
	rsp, err := c.PutInterfaceIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutInterfaceIdIdResponse(rsp)
}

// PostInterfaceIpInUseWithBodyWithResponse request with arbitrary body returning *PostInterfaceIpInUseResponse
func (c *ClientWithResponses) PostInterfaceIpInUseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceIpInUseResponse, error) {
	rsp, err := c.PostInterfaceIpInUseWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceIpInUseResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceIpInUseWithResponse(ctx context.Context, body PostInterfaceIpInUseJSONRequestBody) (*PostInterfaceIpInUseResponse, error) {
	rsp, err := c.PostInterfaceIpInUse(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceIpInUseResponse(rsp)
}

// PostInterfaceLagPortsChoicesWithBodyWithResponse request with arbitrary body returning *PostInterfaceLagPortsChoicesResponse
func (c *ClientWithResponses) PostInterfaceLagPortsChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostInterfaceLagPortsChoicesResponse, error) {
	rsp, err := c.PostInterfaceLagPortsChoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceLagPortsChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInterfaceLagPortsChoicesWithResponse(ctx context.Context, body PostInterfaceLagPortsChoicesJSONRequestBody) (*PostInterfaceLagPortsChoicesResponse, error) {
	rsp, err := c.PostInterfaceLagPortsChoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostInterfaceLagPortsChoicesResponse(rsp)
}

// GetInterfaceRollbackWithResponse request returning *GetInterfaceRollbackResponse
func (c *ClientWithResponses) GetInterfaceRollbackWithResponse(ctx context.Context) (*GetInterfaceRollbackResponse, error) {
	rsp, err := c.GetInterfaceRollback(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceRollbackResponse(rsp)
}

// GetInterfaceVlanParentInterfaceChoicesWithResponse request returning *GetInterfaceVlanParentInterfaceChoicesResponse
func (c *ClientWithResponses) GetInterfaceVlanParentInterfaceChoicesWithResponse(ctx context.Context) (*GetInterfaceVlanParentInterfaceChoicesResponse, error) {
	rsp, err := c.GetInterfaceVlanParentInterfaceChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetInterfaceVlanParentInterfaceChoicesResponse(rsp)
}

// GetIpmiWithResponse request returning *GetIpmiResponse
func (c *ClientWithResponses) GetIpmiWithResponse(ctx context.Context, params *GetIpmiParams) (*GetIpmiResponse, error) {
	rsp, err := c.GetIpmi(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmiResponse(rsp)
}

// GetIpmiChannelsWithResponse request returning *GetIpmiChannelsResponse
func (c *ClientWithResponses) GetIpmiChannelsWithResponse(ctx context.Context) (*GetIpmiChannelsResponse, error) {
	rsp, err := c.GetIpmiChannels(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmiChannelsResponse(rsp)
}

// GetIpmiIdIdWithResponse request returning *GetIpmiIdIdResponse
func (c *ClientWithResponses) GetIpmiIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIpmiIdIdParams) (*GetIpmiIdIdResponse, error) {
	rsp, err := c.GetIpmiIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmiIdIdResponse(rsp)
}

// PutIpmiIdIdWithBodyWithResponse request with arbitrary body returning *PutIpmiIdIdResponse
func (c *ClientWithResponses) PutIpmiIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIpmiIdIdResponse, error) {
	rsp, err := c.PutIpmiIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIpmiIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIpmiIdIdWithResponse(ctx context.Context, id int, body PutIpmiIdIdJSONRequestBody) (*PutIpmiIdIdResponse, error) {
	rsp, err := c.PutIpmiIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIpmiIdIdResponse(rsp)
}

// PostIpmiIdentifyWithBodyWithResponse request with arbitrary body returning *PostIpmiIdentifyResponse
func (c *ClientWithResponses) PostIpmiIdentifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIpmiIdentifyResponse, error) {
	rsp, err := c.PostIpmiIdentifyWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIpmiIdentifyResponse(rsp)
}

func (c *ClientWithResponses) PostIpmiIdentifyWithResponse(ctx context.Context, body PostIpmiIdentifyJSONRequestBody) (*PostIpmiIdentifyResponse, error) {
	rsp, err := c.PostIpmiIdentify(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIpmiIdentifyResponse(rsp)
}

// GetIpmiIsLoadedWithResponse request returning *GetIpmiIsLoadedResponse
func (c *ClientWithResponses) GetIpmiIsLoadedWithResponse(ctx context.Context) (*GetIpmiIsLoadedResponse, error) {
	rsp, err := c.GetIpmiIsLoaded(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetIpmiIsLoadedResponse(rsp)
}

// GetIscsiAuthWithResponse request returning *GetIscsiAuthResponse
func (c *ClientWithResponses) GetIscsiAuthWithResponse(ctx context.Context, params *GetIscsiAuthParams) (*GetIscsiAuthResponse, error) {
	rsp, err := c.GetIscsiAuth(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiAuthResponse(rsp)
}

// PostIscsiAuthWithBodyWithResponse request with arbitrary body returning *PostIscsiAuthResponse
func (c *ClientWithResponses) PostIscsiAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiAuthResponse, error) {
	rsp, err := c.PostIscsiAuthWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiAuthResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiAuthWithResponse(ctx context.Context, body PostIscsiAuthJSONRequestBody) (*PostIscsiAuthResponse, error) {
	rsp, err := c.PostIscsiAuth(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiAuthResponse(rsp)
}

// DeleteIscsiAuthIdIdWithResponse request returning *DeleteIscsiAuthIdIdResponse
func (c *ClientWithResponses) DeleteIscsiAuthIdIdWithResponse(ctx context.Context, id int) (*DeleteIscsiAuthIdIdResponse, error) {
	rsp, err := c.DeleteIscsiAuthIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiAuthIdIdResponse(rsp)
}

// GetIscsiAuthIdIdWithResponse request returning *GetIscsiAuthIdIdResponse
func (c *ClientWithResponses) GetIscsiAuthIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiAuthIdIdParams) (*GetIscsiAuthIdIdResponse, error) {
	rsp, err := c.GetIscsiAuthIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiAuthIdIdResponse(rsp)
}

// PutIscsiAuthIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiAuthIdIdResponse
func (c *ClientWithResponses) PutIscsiAuthIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiAuthIdIdResponse, error) {
	rsp, err := c.PutIscsiAuthIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiAuthIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiAuthIdIdWithResponse(ctx context.Context, id int, body PutIscsiAuthIdIdJSONRequestBody) (*PutIscsiAuthIdIdResponse, error) {
	rsp, err := c.PutIscsiAuthIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiAuthIdIdResponse(rsp)
}

// GetIscsiExtentWithResponse request returning *GetIscsiExtentResponse
func (c *ClientWithResponses) GetIscsiExtentWithResponse(ctx context.Context, params *GetIscsiExtentParams) (*GetIscsiExtentResponse, error) {
	rsp, err := c.GetIscsiExtent(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiExtentResponse(rsp)
}

// PostIscsiExtentWithBodyWithResponse request with arbitrary body returning *PostIscsiExtentResponse
func (c *ClientWithResponses) PostIscsiExtentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiExtentResponse, error) {
	rsp, err := c.PostIscsiExtentWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiExtentResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiExtentWithResponse(ctx context.Context, body PostIscsiExtentJSONRequestBody) (*PostIscsiExtentResponse, error) {
	rsp, err := c.PostIscsiExtent(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiExtentResponse(rsp)
}

// PostIscsiExtentDiskChoicesWithBodyWithResponse request with arbitrary body returning *PostIscsiExtentDiskChoicesResponse
func (c *ClientWithResponses) PostIscsiExtentDiskChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiExtentDiskChoicesResponse, error) {
	rsp, err := c.PostIscsiExtentDiskChoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiExtentDiskChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiExtentDiskChoicesWithResponse(ctx context.Context, body PostIscsiExtentDiskChoicesJSONRequestBody) (*PostIscsiExtentDiskChoicesResponse, error) {
	rsp, err := c.PostIscsiExtentDiskChoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiExtentDiskChoicesResponse(rsp)
}

// DeleteIscsiExtentIdIdWithBodyWithResponse request with arbitrary body returning *DeleteIscsiExtentIdIdResponse
func (c *ClientWithResponses) DeleteIscsiExtentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteIscsiExtentIdIdResponse, error) {
	rsp, err := c.DeleteIscsiExtentIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiExtentIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiExtentIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiExtentIdIdJSONRequestBody) (*DeleteIscsiExtentIdIdResponse, error) {
	rsp, err := c.DeleteIscsiExtentIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiExtentIdIdResponse(rsp)
}

// GetIscsiExtentIdIdWithResponse request returning *GetIscsiExtentIdIdResponse
func (c *ClientWithResponses) GetIscsiExtentIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiExtentIdIdParams) (*GetIscsiExtentIdIdResponse, error) {
	rsp, err := c.GetIscsiExtentIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiExtentIdIdResponse(rsp)
}

// PutIscsiExtentIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiExtentIdIdResponse
func (c *ClientWithResponses) PutIscsiExtentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiExtentIdIdResponse, error) {
	rsp, err := c.PutIscsiExtentIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiExtentIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiExtentIdIdWithResponse(ctx context.Context, id int, body PutIscsiExtentIdIdJSONRequestBody) (*PutIscsiExtentIdIdResponse, error) {
	rsp, err := c.PutIscsiExtentIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiExtentIdIdResponse(rsp)
}

// GetIscsiGlobalWithResponse request returning *GetIscsiGlobalResponse
func (c *ClientWithResponses) GetIscsiGlobalWithResponse(ctx context.Context) (*GetIscsiGlobalResponse, error) {
	rsp, err := c.GetIscsiGlobal(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiGlobalResponse(rsp)
}

// PutIscsiGlobalWithBodyWithResponse request with arbitrary body returning *PutIscsiGlobalResponse
func (c *ClientWithResponses) PutIscsiGlobalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutIscsiGlobalResponse, error) {
	rsp, err := c.PutIscsiGlobalWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiGlobalResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiGlobalWithResponse(ctx context.Context, body PutIscsiGlobalJSONRequestBody) (*PutIscsiGlobalResponse, error) {
	rsp, err := c.PutIscsiGlobal(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiGlobalResponse(rsp)
}

// GetIscsiGlobalSessionsWithResponse request returning *GetIscsiGlobalSessionsResponse
func (c *ClientWithResponses) GetIscsiGlobalSessionsWithResponse(ctx context.Context, params *GetIscsiGlobalSessionsParams) (*GetIscsiGlobalSessionsResponse, error) {
	rsp, err := c.GetIscsiGlobalSessions(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiGlobalSessionsResponse(rsp)
}

// GetIscsiInitiatorWithResponse request returning *GetIscsiInitiatorResponse
func (c *ClientWithResponses) GetIscsiInitiatorWithResponse(ctx context.Context, params *GetIscsiInitiatorParams) (*GetIscsiInitiatorResponse, error) {
	rsp, err := c.GetIscsiInitiator(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiInitiatorResponse(rsp)
}

// PostIscsiInitiatorWithBodyWithResponse request with arbitrary body returning *PostIscsiInitiatorResponse
func (c *ClientWithResponses) PostIscsiInitiatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiInitiatorResponse, error) {
	rsp, err := c.PostIscsiInitiatorWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiInitiatorResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiInitiatorWithResponse(ctx context.Context, body PostIscsiInitiatorJSONRequestBody) (*PostIscsiInitiatorResponse, error) {
	rsp, err := c.PostIscsiInitiator(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiInitiatorResponse(rsp)
}

// DeleteIscsiInitiatorIdIdWithResponse request returning *DeleteIscsiInitiatorIdIdResponse
func (c *ClientWithResponses) DeleteIscsiInitiatorIdIdWithResponse(ctx context.Context, id int) (*DeleteIscsiInitiatorIdIdResponse, error) {
	rsp, err := c.DeleteIscsiInitiatorIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiInitiatorIdIdResponse(rsp)
}

// GetIscsiInitiatorIdIdWithResponse request returning *GetIscsiInitiatorIdIdResponse
func (c *ClientWithResponses) GetIscsiInitiatorIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiInitiatorIdIdParams) (*GetIscsiInitiatorIdIdResponse, error) {
	rsp, err := c.GetIscsiInitiatorIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiInitiatorIdIdResponse(rsp)
}

// PutIscsiInitiatorIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiInitiatorIdIdResponse
func (c *ClientWithResponses) PutIscsiInitiatorIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiInitiatorIdIdResponse, error) {
	rsp, err := c.PutIscsiInitiatorIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiInitiatorIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiInitiatorIdIdWithResponse(ctx context.Context, id int, body PutIscsiInitiatorIdIdJSONRequestBody) (*PutIscsiInitiatorIdIdResponse, error) {
	rsp, err := c.PutIscsiInitiatorIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiInitiatorIdIdResponse(rsp)
}

// GetIscsiPortalWithResponse request returning *GetIscsiPortalResponse
func (c *ClientWithResponses) GetIscsiPortalWithResponse(ctx context.Context, params *GetIscsiPortalParams) (*GetIscsiPortalResponse, error) {
	rsp, err := c.GetIscsiPortal(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiPortalResponse(rsp)
}

// PostIscsiPortalWithBodyWithResponse request with arbitrary body returning *PostIscsiPortalResponse
func (c *ClientWithResponses) PostIscsiPortalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiPortalResponse, error) {
	rsp, err := c.PostIscsiPortalWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiPortalResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiPortalWithResponse(ctx context.Context, body PostIscsiPortalJSONRequestBody) (*PostIscsiPortalResponse, error) {
	rsp, err := c.PostIscsiPortal(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiPortalResponse(rsp)
}

// DeleteIscsiPortalIdIdWithResponse request returning *DeleteIscsiPortalIdIdResponse
func (c *ClientWithResponses) DeleteIscsiPortalIdIdWithResponse(ctx context.Context, id int) (*DeleteIscsiPortalIdIdResponse, error) {
	rsp, err := c.DeleteIscsiPortalIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiPortalIdIdResponse(rsp)
}

// GetIscsiPortalIdIdWithResponse request returning *GetIscsiPortalIdIdResponse
func (c *ClientWithResponses) GetIscsiPortalIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiPortalIdIdParams) (*GetIscsiPortalIdIdResponse, error) {
	rsp, err := c.GetIscsiPortalIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiPortalIdIdResponse(rsp)
}

// PutIscsiPortalIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiPortalIdIdResponse
func (c *ClientWithResponses) PutIscsiPortalIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiPortalIdIdResponse, error) {
	rsp, err := c.PutIscsiPortalIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiPortalIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiPortalIdIdWithResponse(ctx context.Context, id int, body PutIscsiPortalIdIdJSONRequestBody) (*PutIscsiPortalIdIdResponse, error) {
	rsp, err := c.PutIscsiPortalIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiPortalIdIdResponse(rsp)
}

// GetIscsiPortalListenIpChoicesWithResponse request returning *GetIscsiPortalListenIpChoicesResponse
func (c *ClientWithResponses) GetIscsiPortalListenIpChoicesWithResponse(ctx context.Context) (*GetIscsiPortalListenIpChoicesResponse, error) {
	rsp, err := c.GetIscsiPortalListenIpChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiPortalListenIpChoicesResponse(rsp)
}

// GetIscsiTargetWithResponse request returning *GetIscsiTargetResponse
func (c *ClientWithResponses) GetIscsiTargetWithResponse(ctx context.Context, params *GetIscsiTargetParams) (*GetIscsiTargetResponse, error) {
	rsp, err := c.GetIscsiTarget(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetResponse(rsp)
}

// PostIscsiTargetWithBodyWithResponse request with arbitrary body returning *PostIscsiTargetResponse
func (c *ClientWithResponses) PostIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiTargetResponse, error) {
	rsp, err := c.PostIscsiTargetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiTargetResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiTargetWithResponse(ctx context.Context, body PostIscsiTargetJSONRequestBody) (*PostIscsiTargetResponse, error) {
	rsp, err := c.PostIscsiTarget(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiTargetResponse(rsp)
}

// DeleteIscsiTargetIdIdWithBodyWithResponse request with arbitrary body returning *DeleteIscsiTargetIdIdResponse
func (c *ClientWithResponses) DeleteIscsiTargetIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteIscsiTargetIdIdResponse, error) {
	rsp, err := c.DeleteIscsiTargetIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiTargetIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiTargetIdIdJSONRequestBody) (*DeleteIscsiTargetIdIdResponse, error) {
	rsp, err := c.DeleteIscsiTargetIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetIdIdResponse(rsp)
}

// GetIscsiTargetIdIdWithResponse request returning *GetIscsiTargetIdIdResponse
func (c *ClientWithResponses) GetIscsiTargetIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiTargetIdIdParams) (*GetIscsiTargetIdIdResponse, error) {
	rsp, err := c.GetIscsiTargetIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetIdIdResponse(rsp)
}

// PutIscsiTargetIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiTargetIdIdResponse
func (c *ClientWithResponses) PutIscsiTargetIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiTargetIdIdResponse, error) {
	rsp, err := c.PutIscsiTargetIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiTargetIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiTargetIdIdWithResponse(ctx context.Context, id int, body PutIscsiTargetIdIdJSONRequestBody) (*PutIscsiTargetIdIdResponse, error) {
	rsp, err := c.PutIscsiTargetIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiTargetIdIdResponse(rsp)
}

// GetIscsiTargetextentWithResponse request returning *GetIscsiTargetextentResponse
func (c *ClientWithResponses) GetIscsiTargetextentWithResponse(ctx context.Context, params *GetIscsiTargetextentParams) (*GetIscsiTargetextentResponse, error) {
	rsp, err := c.GetIscsiTargetextent(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetextentResponse(rsp)
}

// PostIscsiTargetextentWithBodyWithResponse request with arbitrary body returning *PostIscsiTargetextentResponse
func (c *ClientWithResponses) PostIscsiTargetextentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostIscsiTargetextentResponse, error) {
	rsp, err := c.PostIscsiTargetextentWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiTargetextentResponse(rsp)
}

func (c *ClientWithResponses) PostIscsiTargetextentWithResponse(ctx context.Context, body PostIscsiTargetextentJSONRequestBody) (*PostIscsiTargetextentResponse, error) {
	rsp, err := c.PostIscsiTargetextent(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostIscsiTargetextentResponse(rsp)
}

// DeleteIscsiTargetextentIdIdWithBodyWithResponse request with arbitrary body returning *DeleteIscsiTargetextentIdIdResponse
func (c *ClientWithResponses) DeleteIscsiTargetextentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.DeleteIscsiTargetextentIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetextentIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, body DeleteIscsiTargetextentIdIdJSONRequestBody) (*DeleteIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.DeleteIscsiTargetextentIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIscsiTargetextentIdIdResponse(rsp)
}

// GetIscsiTargetextentIdIdWithResponse request returning *GetIscsiTargetextentIdIdResponse
func (c *ClientWithResponses) GetIscsiTargetextentIdIdWithResponse(ctx context.Context, id []interface{}, params *GetIscsiTargetextentIdIdParams) (*GetIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.GetIscsiTargetextentIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetIscsiTargetextentIdIdResponse(rsp)
}

// PutIscsiTargetextentIdIdWithBodyWithResponse request with arbitrary body returning *PutIscsiTargetextentIdIdResponse
func (c *ClientWithResponses) PutIscsiTargetextentIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.PutIscsiTargetextentIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiTargetextentIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutIscsiTargetextentIdIdWithResponse(ctx context.Context, id int, body PutIscsiTargetextentIdIdJSONRequestBody) (*PutIscsiTargetextentIdIdResponse, error) {
	rsp, err := c.PutIscsiTargetextentIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutIscsiTargetextentIdIdResponse(rsp)
}

// GetJailWithResponse request returning *GetJailResponse
func (c *ClientWithResponses) GetJailWithResponse(ctx context.Context, params *GetJailParams) (*GetJailResponse, error) {
	rsp, err := c.GetJail(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetJailResponse(rsp)
}

// PostJailWithBodyWithResponse request with arbitrary body returning *PostJailResponse
func (c *ClientWithResponses) PostJailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailResponse, error) {
	rsp, err := c.PostJailWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailResponse(rsp)
}

func (c *ClientWithResponses) PostJailWithResponse(ctx context.Context, body PostJailJSONRequestBody) (*PostJailResponse, error) {
	rsp, err := c.PostJail(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailResponse(rsp)
}

// PostJailActivateWithBodyWithResponse request with arbitrary body returning *PostJailActivateResponse
func (c *ClientWithResponses) PostJailActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailActivateResponse, error) {
	rsp, err := c.PostJailActivateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailActivateResponse(rsp)
}

func (c *ClientWithResponses) PostJailActivateWithResponse(ctx context.Context, body PostJailActivateJSONRequestBody) (*PostJailActivateResponse, error) {
	rsp, err := c.PostJailActivate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailActivateResponse(rsp)
}

// PostJailCleanWithBodyWithResponse request with arbitrary body returning *PostJailCleanResponse
func (c *ClientWithResponses) PostJailCleanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailCleanResponse, error) {
	rsp, err := c.PostJailCleanWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailCleanResponse(rsp)
}

func (c *ClientWithResponses) PostJailCleanWithResponse(ctx context.Context, body PostJailCleanJSONRequestBody) (*PostJailCleanResponse, error) {
	rsp, err := c.PostJailClean(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailCleanResponse(rsp)
}

// GetJailDefaultConfigurationWithResponse request returning *GetJailDefaultConfigurationResponse
func (c *ClientWithResponses) GetJailDefaultConfigurationWithResponse(ctx context.Context) (*GetJailDefaultConfigurationResponse, error) {
	rsp, err := c.GetJailDefaultConfiguration(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetJailDefaultConfigurationResponse(rsp)
}

// PostJailExecWithBodyWithResponse request with arbitrary body returning *PostJailExecResponse
func (c *ClientWithResponses) PostJailExecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailExecResponse, error) {
	rsp, err := c.PostJailExecWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailExecResponse(rsp)
}

func (c *ClientWithResponses) PostJailExecWithResponse(ctx context.Context, body PostJailExecJSONRequestBody) (*PostJailExecResponse, error) {
	rsp, err := c.PostJailExec(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailExecResponse(rsp)
}

// PostJailExportWithBodyWithResponse request with arbitrary body returning *PostJailExportResponse
func (c *ClientWithResponses) PostJailExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailExportResponse, error) {
	rsp, err := c.PostJailExportWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailExportResponse(rsp)
}

func (c *ClientWithResponses) PostJailExportWithResponse(ctx context.Context, body PostJailExportJSONRequestBody) (*PostJailExportResponse, error) {
	rsp, err := c.PostJailExport(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailExportResponse(rsp)
}

// PostJailFetchWithBodyWithResponse request with arbitrary body returning *PostJailFetchResponse
func (c *ClientWithResponses) PostJailFetchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailFetchResponse, error) {
	rsp, err := c.PostJailFetchWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailFetchResponse(rsp)
}

func (c *ClientWithResponses) PostJailFetchWithResponse(ctx context.Context, body PostJailFetchJSONRequestBody) (*PostJailFetchResponse, error) {
	rsp, err := c.PostJailFetch(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailFetchResponse(rsp)
}

// PostJailFstabWithBodyWithResponse request with arbitrary body returning *PostJailFstabResponse
func (c *ClientWithResponses) PostJailFstabWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailFstabResponse, error) {
	rsp, err := c.PostJailFstabWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailFstabResponse(rsp)
}

func (c *ClientWithResponses) PostJailFstabWithResponse(ctx context.Context, body PostJailFstabJSONRequestBody) (*PostJailFstabResponse, error) {
	rsp, err := c.PostJailFstab(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailFstabResponse(rsp)
}

// GetJailGetActivatedPoolWithResponse request returning *GetJailGetActivatedPoolResponse
func (c *ClientWithResponses) GetJailGetActivatedPoolWithResponse(ctx context.Context) (*GetJailGetActivatedPoolResponse, error) {
	rsp, err := c.GetJailGetActivatedPool(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetJailGetActivatedPoolResponse(rsp)
}

// DeleteJailIdIdWithBodyWithResponse request with arbitrary body returning *DeleteJailIdIdResponse
func (c *ClientWithResponses) DeleteJailIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*DeleteJailIdIdResponse, error) {
	rsp, err := c.DeleteJailIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJailIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteJailIdIdWithResponse(ctx context.Context, id string, body DeleteJailIdIdJSONRequestBody) (*DeleteJailIdIdResponse, error) {
	rsp, err := c.DeleteJailIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJailIdIdResponse(rsp)
}

// GetJailIdIdWithResponse request returning *GetJailIdIdResponse
func (c *ClientWithResponses) GetJailIdIdWithResponse(ctx context.Context, id []interface{}, params *GetJailIdIdParams) (*GetJailIdIdResponse, error) {
	rsp, err := c.GetJailIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetJailIdIdResponse(rsp)
}

// PutJailIdIdWithBodyWithResponse request with arbitrary body returning *PutJailIdIdResponse
func (c *ClientWithResponses) PutJailIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutJailIdIdResponse, error) {
	rsp, err := c.PutJailIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutJailIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutJailIdIdWithResponse(ctx context.Context, id string, body PutJailIdIdJSONRequestBody) (*PutJailIdIdResponse, error) {
	rsp, err := c.PutJailIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutJailIdIdResponse(rsp)
}

// PostJailIdIdCloneWithBodyWithResponse request with arbitrary body returning *PostJailIdIdCloneResponse
func (c *ClientWithResponses) PostJailIdIdCloneWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostJailIdIdCloneResponse, error) {
	rsp, err := c.PostJailIdIdCloneWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailIdIdCloneResponse(rsp)
}

func (c *ClientWithResponses) PostJailIdIdCloneWithResponse(ctx context.Context, id string, body PostJailIdIdCloneJSONRequestBody) (*PostJailIdIdCloneResponse, error) {
	rsp, err := c.PostJailIdIdClone(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailIdIdCloneResponse(rsp)
}

// PostJailImportImageWithBodyWithResponse request with arbitrary body returning *PostJailImportImageResponse
func (c *ClientWithResponses) PostJailImportImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailImportImageResponse, error) {
	rsp, err := c.PostJailImportImageWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailImportImageResponse(rsp)
}

func (c *ClientWithResponses) PostJailImportImageWithResponse(ctx context.Context, body PostJailImportImageJSONRequestBody) (*PostJailImportImageResponse, error) {
	rsp, err := c.PostJailImportImage(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailImportImageResponse(rsp)
}

// GetJailInterfaceChoicesWithResponse request returning *GetJailInterfaceChoicesResponse
func (c *ClientWithResponses) GetJailInterfaceChoicesWithResponse(ctx context.Context) (*GetJailInterfaceChoicesResponse, error) {
	rsp, err := c.GetJailInterfaceChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetJailInterfaceChoicesResponse(rsp)
}

// PostJailRcActionWithBodyWithResponse request with arbitrary body returning *PostJailRcActionResponse
func (c *ClientWithResponses) PostJailRcActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailRcActionResponse, error) {
	rsp, err := c.PostJailRcActionWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailRcActionResponse(rsp)
}

func (c *ClientWithResponses) PostJailRcActionWithResponse(ctx context.Context, body PostJailRcActionJSONRequestBody) (*PostJailRcActionResponse, error) {
	rsp, err := c.PostJailRcAction(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailRcActionResponse(rsp)
}

// PostJailReleasesChoicesWithBodyWithResponse request with arbitrary body returning *PostJailReleasesChoicesResponse
func (c *ClientWithResponses) PostJailReleasesChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailReleasesChoicesResponse, error) {
	rsp, err := c.PostJailReleasesChoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailReleasesChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostJailReleasesChoicesWithResponse(ctx context.Context, body PostJailReleasesChoicesJSONRequestBody) (*PostJailReleasesChoicesResponse, error) {
	rsp, err := c.PostJailReleasesChoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailReleasesChoicesResponse(rsp)
}

// PostJailRestartWithBodyWithResponse request with arbitrary body returning *PostJailRestartResponse
func (c *ClientWithResponses) PostJailRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailRestartResponse, error) {
	rsp, err := c.PostJailRestartWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailRestartResponse(rsp)
}

func (c *ClientWithResponses) PostJailRestartWithResponse(ctx context.Context, body PostJailRestartJSONRequestBody) (*PostJailRestartResponse, error) {
	rsp, err := c.PostJailRestart(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailRestartResponse(rsp)
}

// PostJailStartWithBodyWithResponse request with arbitrary body returning *PostJailStartResponse
func (c *ClientWithResponses) PostJailStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailStartResponse, error) {
	rsp, err := c.PostJailStartWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailStartResponse(rsp)
}

func (c *ClientWithResponses) PostJailStartWithResponse(ctx context.Context, body PostJailStartJSONRequestBody) (*PostJailStartResponse, error) {
	rsp, err := c.PostJailStart(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailStartResponse(rsp)
}

// PostJailStopWithBodyWithResponse request with arbitrary body returning *PostJailStopResponse
func (c *ClientWithResponses) PostJailStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailStopResponse, error) {
	rsp, err := c.PostJailStopWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailStopResponse(rsp)
}

func (c *ClientWithResponses) PostJailStopWithResponse(ctx context.Context, body PostJailStopJSONRequestBody) (*PostJailStopResponse, error) {
	rsp, err := c.PostJailStop(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailStopResponse(rsp)
}

// PostJailUpdateDefaultsWithBodyWithResponse request with arbitrary body returning *PostJailUpdateDefaultsResponse
func (c *ClientWithResponses) PostJailUpdateDefaultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailUpdateDefaultsResponse, error) {
	rsp, err := c.PostJailUpdateDefaultsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailUpdateDefaultsResponse(rsp)
}

func (c *ClientWithResponses) PostJailUpdateDefaultsWithResponse(ctx context.Context, body PostJailUpdateDefaultsJSONRequestBody) (*PostJailUpdateDefaultsResponse, error) {
	rsp, err := c.PostJailUpdateDefaults(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailUpdateDefaultsResponse(rsp)
}

// PostJailUpdateToLatestPatchWithBodyWithResponse request with arbitrary body returning *PostJailUpdateToLatestPatchResponse
func (c *ClientWithResponses) PostJailUpdateToLatestPatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostJailUpdateToLatestPatchResponse, error) {
	rsp, err := c.PostJailUpdateToLatestPatchWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailUpdateToLatestPatchResponse(rsp)
}

func (c *ClientWithResponses) PostJailUpdateToLatestPatchWithResponse(ctx context.Context, body PostJailUpdateToLatestPatchJSONRequestBody) (*PostJailUpdateToLatestPatchResponse, error) {
	rsp, err := c.PostJailUpdateToLatestPatch(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostJailUpdateToLatestPatchResponse(rsp)
}

// GetKerberosWithResponse request returning *GetKerberosResponse
func (c *ClientWithResponses) GetKerberosWithResponse(ctx context.Context) (*GetKerberosResponse, error) {
	rsp, err := c.GetKerberos(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosResponse(rsp)
}

// PutKerberosWithBodyWithResponse request with arbitrary body returning *PutKerberosResponse
func (c *ClientWithResponses) PutKerberosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutKerberosResponse, error) {
	rsp, err := c.PutKerberosWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosResponse(rsp)
}

func (c *ClientWithResponses) PutKerberosWithResponse(ctx context.Context, body PutKerberosJSONRequestBody) (*PutKerberosResponse, error) {
	rsp, err := c.PutKerberos(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosResponse(rsp)
}

// GetKerberosKeytabWithResponse request returning *GetKerberosKeytabResponse
func (c *ClientWithResponses) GetKerberosKeytabWithResponse(ctx context.Context, params *GetKerberosKeytabParams) (*GetKerberosKeytabResponse, error) {
	rsp, err := c.GetKerberosKeytab(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosKeytabResponse(rsp)
}

// PostKerberosKeytabWithBodyWithResponse request with arbitrary body returning *PostKerberosKeytabResponse
func (c *ClientWithResponses) PostKerberosKeytabWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKerberosKeytabResponse, error) {
	rsp, err := c.PostKerberosKeytabWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKerberosKeytabResponse(rsp)
}

func (c *ClientWithResponses) PostKerberosKeytabWithResponse(ctx context.Context, body PostKerberosKeytabJSONRequestBody) (*PostKerberosKeytabResponse, error) {
	rsp, err := c.PostKerberosKeytab(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKerberosKeytabResponse(rsp)
}

// DeleteKerberosKeytabIdIdWithResponse request returning *DeleteKerberosKeytabIdIdResponse
func (c *ClientWithResponses) DeleteKerberosKeytabIdIdWithResponse(ctx context.Context, id int) (*DeleteKerberosKeytabIdIdResponse, error) {
	rsp, err := c.DeleteKerberosKeytabIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKerberosKeytabIdIdResponse(rsp)
}

// GetKerberosKeytabIdIdWithResponse request returning *GetKerberosKeytabIdIdResponse
func (c *ClientWithResponses) GetKerberosKeytabIdIdWithResponse(ctx context.Context, id []interface{}, params *GetKerberosKeytabIdIdParams) (*GetKerberosKeytabIdIdResponse, error) {
	rsp, err := c.GetKerberosKeytabIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosKeytabIdIdResponse(rsp)
}

// PutKerberosKeytabIdIdWithBodyWithResponse request with arbitrary body returning *PutKerberosKeytabIdIdResponse
func (c *ClientWithResponses) PutKerberosKeytabIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutKerberosKeytabIdIdResponse, error) {
	rsp, err := c.PutKerberosKeytabIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosKeytabIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutKerberosKeytabIdIdWithResponse(ctx context.Context, id int, body PutKerberosKeytabIdIdJSONRequestBody) (*PutKerberosKeytabIdIdResponse, error) {
	rsp, err := c.PutKerberosKeytabIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosKeytabIdIdResponse(rsp)
}

// GetKerberosKeytabSystemKeytabListWithResponse request returning *GetKerberosKeytabSystemKeytabListResponse
func (c *ClientWithResponses) GetKerberosKeytabSystemKeytabListWithResponse(ctx context.Context) (*GetKerberosKeytabSystemKeytabListResponse, error) {
	rsp, err := c.GetKerberosKeytabSystemKeytabList(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosKeytabSystemKeytabListResponse(rsp)
}

// GetKerberosRealmWithResponse request returning *GetKerberosRealmResponse
func (c *ClientWithResponses) GetKerberosRealmWithResponse(ctx context.Context, params *GetKerberosRealmParams) (*GetKerberosRealmResponse, error) {
	rsp, err := c.GetKerberosRealm(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosRealmResponse(rsp)
}

// PostKerberosRealmWithBodyWithResponse request with arbitrary body returning *PostKerberosRealmResponse
func (c *ClientWithResponses) PostKerberosRealmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKerberosRealmResponse, error) {
	rsp, err := c.PostKerberosRealmWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKerberosRealmResponse(rsp)
}

func (c *ClientWithResponses) PostKerberosRealmWithResponse(ctx context.Context, body PostKerberosRealmJSONRequestBody) (*PostKerberosRealmResponse, error) {
	rsp, err := c.PostKerberosRealm(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKerberosRealmResponse(rsp)
}

// DeleteKerberosRealmIdIdWithResponse request returning *DeleteKerberosRealmIdIdResponse
func (c *ClientWithResponses) DeleteKerberosRealmIdIdWithResponse(ctx context.Context, id int) (*DeleteKerberosRealmIdIdResponse, error) {
	rsp, err := c.DeleteKerberosRealmIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKerberosRealmIdIdResponse(rsp)
}

// GetKerberosRealmIdIdWithResponse request returning *GetKerberosRealmIdIdResponse
func (c *ClientWithResponses) GetKerberosRealmIdIdWithResponse(ctx context.Context, id []interface{}, params *GetKerberosRealmIdIdParams) (*GetKerberosRealmIdIdResponse, error) {
	rsp, err := c.GetKerberosRealmIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetKerberosRealmIdIdResponse(rsp)
}

// PutKerberosRealmIdIdWithBodyWithResponse request with arbitrary body returning *PutKerberosRealmIdIdResponse
func (c *ClientWithResponses) PutKerberosRealmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutKerberosRealmIdIdResponse, error) {
	rsp, err := c.PutKerberosRealmIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosRealmIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutKerberosRealmIdIdWithResponse(ctx context.Context, id int, body PutKerberosRealmIdIdJSONRequestBody) (*PutKerberosRealmIdIdResponse, error) {
	rsp, err := c.PutKerberosRealmIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutKerberosRealmIdIdResponse(rsp)
}

// GetKeychaincredentialWithResponse request returning *GetKeychaincredentialResponse
func (c *ClientWithResponses) GetKeychaincredentialWithResponse(ctx context.Context, params *GetKeychaincredentialParams) (*GetKeychaincredentialResponse, error) {
	rsp, err := c.GetKeychaincredential(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetKeychaincredentialResponse(rsp)
}

// PostKeychaincredentialWithBodyWithResponse request with arbitrary body returning *PostKeychaincredentialResponse
func (c *ClientWithResponses) PostKeychaincredentialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKeychaincredentialResponse, error) {
	rsp, err := c.PostKeychaincredentialWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialResponse(rsp)
}

func (c *ClientWithResponses) PostKeychaincredentialWithResponse(ctx context.Context, body PostKeychaincredentialJSONRequestBody) (*PostKeychaincredentialResponse, error) {
	rsp, err := c.PostKeychaincredential(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialResponse(rsp)
}

// GetKeychaincredentialGenerateSshKeyPairWithResponse request returning *GetKeychaincredentialGenerateSshKeyPairResponse
func (c *ClientWithResponses) GetKeychaincredentialGenerateSshKeyPairWithResponse(ctx context.Context) (*GetKeychaincredentialGenerateSshKeyPairResponse, error) {
	rsp, err := c.GetKeychaincredentialGenerateSshKeyPair(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetKeychaincredentialGenerateSshKeyPairResponse(rsp)
}

// DeleteKeychaincredentialIdIdWithBodyWithResponse request with arbitrary body returning *DeleteKeychaincredentialIdIdResponse
func (c *ClientWithResponses) DeleteKeychaincredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteKeychaincredentialIdIdResponse, error) {
	rsp, err := c.DeleteKeychaincredentialIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeychaincredentialIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteKeychaincredentialIdIdWithResponse(ctx context.Context, id int, body DeleteKeychaincredentialIdIdJSONRequestBody) (*DeleteKeychaincredentialIdIdResponse, error) {
	rsp, err := c.DeleteKeychaincredentialIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeychaincredentialIdIdResponse(rsp)
}

// GetKeychaincredentialIdIdWithResponse request returning *GetKeychaincredentialIdIdResponse
func (c *ClientWithResponses) GetKeychaincredentialIdIdWithResponse(ctx context.Context, id []interface{}, params *GetKeychaincredentialIdIdParams) (*GetKeychaincredentialIdIdResponse, error) {
	rsp, err := c.GetKeychaincredentialIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetKeychaincredentialIdIdResponse(rsp)
}

// PutKeychaincredentialIdIdWithBodyWithResponse request with arbitrary body returning *PutKeychaincredentialIdIdResponse
func (c *ClientWithResponses) PutKeychaincredentialIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutKeychaincredentialIdIdResponse, error) {
	rsp, err := c.PutKeychaincredentialIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutKeychaincredentialIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutKeychaincredentialIdIdWithResponse(ctx context.Context, id int, body PutKeychaincredentialIdIdJSONRequestBody) (*PutKeychaincredentialIdIdResponse, error) {
	rsp, err := c.PutKeychaincredentialIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutKeychaincredentialIdIdResponse(rsp)
}

// PostKeychaincredentialRemoteSshHostKeyScanWithBodyWithResponse request with arbitrary body returning *PostKeychaincredentialRemoteSshHostKeyScanResponse
func (c *ClientWithResponses) PostKeychaincredentialRemoteSshHostKeyScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error) {
	rsp, err := c.PostKeychaincredentialRemoteSshHostKeyScanWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialRemoteSshHostKeyScanResponse(rsp)
}

func (c *ClientWithResponses) PostKeychaincredentialRemoteSshHostKeyScanWithResponse(ctx context.Context, body PostKeychaincredentialRemoteSshHostKeyScanJSONRequestBody) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error) {
	rsp, err := c.PostKeychaincredentialRemoteSshHostKeyScan(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialRemoteSshHostKeyScanResponse(rsp)
}

// PostKeychaincredentialRemoteSshSemiautomaticSetupWithBodyWithResponse request with arbitrary body returning *PostKeychaincredentialRemoteSshSemiautomaticSetupResponse
func (c *ClientWithResponses) PostKeychaincredentialRemoteSshSemiautomaticSetupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error) {
	rsp, err := c.PostKeychaincredentialRemoteSshSemiautomaticSetupWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialRemoteSshSemiautomaticSetupResponse(rsp)
}

func (c *ClientWithResponses) PostKeychaincredentialRemoteSshSemiautomaticSetupWithResponse(ctx context.Context, body PostKeychaincredentialRemoteSshSemiautomaticSetupJSONRequestBody) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error) {
	rsp, err := c.PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialRemoteSshSemiautomaticSetupResponse(rsp)
}

// PostKeychaincredentialUsedByWithBodyWithResponse request with arbitrary body returning *PostKeychaincredentialUsedByResponse
func (c *ClientWithResponses) PostKeychaincredentialUsedByWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostKeychaincredentialUsedByResponse, error) {
	rsp, err := c.PostKeychaincredentialUsedByWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialUsedByResponse(rsp)
}

func (c *ClientWithResponses) PostKeychaincredentialUsedByWithResponse(ctx context.Context, body PostKeychaincredentialUsedByJSONRequestBody) (*PostKeychaincredentialUsedByResponse, error) {
	rsp, err := c.PostKeychaincredentialUsedBy(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostKeychaincredentialUsedByResponse(rsp)
}

// GetLdapWithResponse request returning *GetLdapResponse
func (c *ClientWithResponses) GetLdapWithResponse(ctx context.Context) (*GetLdapResponse, error) {
	rsp, err := c.GetLdap(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapResponse(rsp)
}

// PutLdapWithBodyWithResponse request with arbitrary body returning *PutLdapResponse
func (c *ClientWithResponses) PutLdapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutLdapResponse, error) {
	rsp, err := c.PutLdapWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutLdapResponse(rsp)
}

func (c *ClientWithResponses) PutLdapWithResponse(ctx context.Context, body PutLdapJSONRequestBody) (*PutLdapResponse, error) {
	rsp, err := c.PutLdap(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutLdapResponse(rsp)
}

// GetLdapGetStateWithResponse request returning *GetLdapGetStateResponse
func (c *ClientWithResponses) GetLdapGetStateWithResponse(ctx context.Context) (*GetLdapGetStateResponse, error) {
	rsp, err := c.GetLdapGetState(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapGetStateResponse(rsp)
}

// GetLdapIdmapBackendChoicesWithResponse request returning *GetLdapIdmapBackendChoicesResponse
func (c *ClientWithResponses) GetLdapIdmapBackendChoicesWithResponse(ctx context.Context) (*GetLdapIdmapBackendChoicesResponse, error) {
	rsp, err := c.GetLdapIdmapBackendChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapIdmapBackendChoicesResponse(rsp)
}

// GetLdapSchemaChoicesWithResponse request returning *GetLdapSchemaChoicesResponse
func (c *ClientWithResponses) GetLdapSchemaChoicesWithResponse(ctx context.Context) (*GetLdapSchemaChoicesResponse, error) {
	rsp, err := c.GetLdapSchemaChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapSchemaChoicesResponse(rsp)
}

// GetLdapSslChoicesWithResponse request returning *GetLdapSslChoicesResponse
func (c *ClientWithResponses) GetLdapSslChoicesWithResponse(ctx context.Context) (*GetLdapSslChoicesResponse, error) {
	rsp, err := c.GetLdapSslChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapSslChoicesResponse(rsp)
}

// GetLldpWithResponse request returning *GetLldpResponse
func (c *ClientWithResponses) GetLldpWithResponse(ctx context.Context) (*GetLldpResponse, error) {
	rsp, err := c.GetLldp(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetLldpResponse(rsp)
}

// PutLldpWithBodyWithResponse request with arbitrary body returning *PutLldpResponse
func (c *ClientWithResponses) PutLldpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutLldpResponse, error) {
	rsp, err := c.PutLldpWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutLldpResponse(rsp)
}

func (c *ClientWithResponses) PutLldpWithResponse(ctx context.Context, body PutLldpJSONRequestBody) (*PutLldpResponse, error) {
	rsp, err := c.PutLldp(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutLldpResponse(rsp)
}

// GetMailWithResponse request returning *GetMailResponse
func (c *ClientWithResponses) GetMailWithResponse(ctx context.Context) (*GetMailResponse, error) {
	rsp, err := c.GetMail(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMailResponse(rsp)
}

// PutMailWithBodyWithResponse request with arbitrary body returning *PutMailResponse
func (c *ClientWithResponses) PutMailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutMailResponse, error) {
	rsp, err := c.PutMailWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutMailResponse(rsp)
}

func (c *ClientWithResponses) PutMailWithResponse(ctx context.Context, body PutMailJSONRequestBody) (*PutMailResponse, error) {
	rsp, err := c.PutMail(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutMailResponse(rsp)
}

// PostMailSendWithBodyWithResponse request with arbitrary body returning *PostMailSendResponse
func (c *ClientWithResponses) PostMailSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostMailSendResponse, error) {
	rsp, err := c.PostMailSendWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMailSendResponse(rsp)
}

func (c *ClientWithResponses) PostMailSendWithResponse(ctx context.Context, body PostMailSendJSONRequestBody) (*PostMailSendResponse, error) {
	rsp, err := c.PostMailSend(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMailSendResponse(rsp)
}

// GetMultipathWithResponse request returning *GetMultipathResponse
func (c *ClientWithResponses) GetMultipathWithResponse(ctx context.Context, params *GetMultipathParams) (*GetMultipathResponse, error) {
	rsp, err := c.GetMultipath(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMultipathResponse(rsp)
}

// GetMultipathIdIdWithResponse request returning *GetMultipathIdIdResponse
func (c *ClientWithResponses) GetMultipathIdIdWithResponse(ctx context.Context, id []interface{}, params *GetMultipathIdIdParams) (*GetMultipathIdIdResponse, error) {
	rsp, err := c.GetMultipathIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMultipathIdIdResponse(rsp)
}

// GetNetworkConfigurationWithResponse request returning *GetNetworkConfigurationResponse
func (c *ClientWithResponses) GetNetworkConfigurationWithResponse(ctx context.Context) (*GetNetworkConfigurationResponse, error) {
	rsp, err := c.GetNetworkConfiguration(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkConfigurationResponse(rsp)
}

// PutNetworkConfigurationWithBodyWithResponse request with arbitrary body returning *PutNetworkConfigurationResponse
func (c *ClientWithResponses) PutNetworkConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutNetworkConfigurationResponse, error) {
	rsp, err := c.PutNetworkConfigurationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutNetworkConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PutNetworkConfigurationWithResponse(ctx context.Context, body PutNetworkConfigurationJSONRequestBody) (*PutNetworkConfigurationResponse, error) {
	rsp, err := c.PutNetworkConfiguration(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutNetworkConfigurationResponse(rsp)
}

// GetNetworkGeneralSummaryWithResponse request returning *GetNetworkGeneralSummaryResponse
func (c *ClientWithResponses) GetNetworkGeneralSummaryWithResponse(ctx context.Context) (*GetNetworkGeneralSummaryResponse, error) {
	rsp, err := c.GetNetworkGeneralSummary(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkGeneralSummaryResponse(rsp)
}

// GetNfsWithResponse request returning *GetNfsResponse
func (c *ClientWithResponses) GetNfsWithResponse(ctx context.Context) (*GetNfsResponse, error) {
	rsp, err := c.GetNfs(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetNfsResponse(rsp)
}

// PutNfsWithBodyWithResponse request with arbitrary body returning *PutNfsResponse
func (c *ClientWithResponses) PutNfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutNfsResponse, error) {
	rsp, err := c.PutNfsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutNfsResponse(rsp)
}

func (c *ClientWithResponses) PutNfsWithResponse(ctx context.Context, body PutNfsJSONRequestBody) (*PutNfsResponse, error) {
	rsp, err := c.PutNfs(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutNfsResponse(rsp)
}

// GetNisWithResponse request returning *GetNisResponse
func (c *ClientWithResponses) GetNisWithResponse(ctx context.Context) (*GetNisResponse, error) {
	rsp, err := c.GetNis(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetNisResponse(rsp)
}

// PutNisWithBodyWithResponse request with arbitrary body returning *PutNisResponse
func (c *ClientWithResponses) PutNisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutNisResponse, error) {
	rsp, err := c.PutNisWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutNisResponse(rsp)
}

func (c *ClientWithResponses) PutNisWithResponse(ctx context.Context, body PutNisJSONRequestBody) (*PutNisResponse, error) {
	rsp, err := c.PutNis(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutNisResponse(rsp)
}

// GetNisGetStateWithResponse request returning *GetNisGetStateResponse
func (c *ClientWithResponses) GetNisGetStateWithResponse(ctx context.Context) (*GetNisGetStateResponse, error) {
	rsp, err := c.GetNisGetState(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetNisGetStateResponse(rsp)
}

// GetPluginWithResponse request returning *GetPluginResponse
func (c *ClientWithResponses) GetPluginWithResponse(ctx context.Context, params *GetPluginParams) (*GetPluginResponse, error) {
	rsp, err := c.GetPlugin(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginResponse(rsp)
}

// PostPluginWithBodyWithResponse request with arbitrary body returning *PostPluginResponse
func (c *ClientWithResponses) PostPluginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPluginResponse, error) {
	rsp, err := c.PostPluginWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginResponse(rsp)
}

func (c *ClientWithResponses) PostPluginWithResponse(ctx context.Context, body PostPluginJSONRequestBody) (*PostPluginResponse, error) {
	rsp, err := c.PostPlugin(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginResponse(rsp)
}

// PostPluginAvailableWithBodyWithResponse request with arbitrary body returning *PostPluginAvailableResponse
func (c *ClientWithResponses) PostPluginAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPluginAvailableResponse, error) {
	rsp, err := c.PostPluginAvailableWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginAvailableResponse(rsp)
}

func (c *ClientWithResponses) PostPluginAvailableWithResponse(ctx context.Context, body PostPluginAvailableJSONRequestBody) (*PostPluginAvailableResponse, error) {
	rsp, err := c.PostPluginAvailable(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginAvailableResponse(rsp)
}

// PostPluginBranchesChoicesWithBodyWithResponse request with arbitrary body returning *PostPluginBranchesChoicesResponse
func (c *ClientWithResponses) PostPluginBranchesChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPluginBranchesChoicesResponse, error) {
	rsp, err := c.PostPluginBranchesChoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginBranchesChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostPluginBranchesChoicesWithResponse(ctx context.Context, body PostPluginBranchesChoicesJSONRequestBody) (*PostPluginBranchesChoicesResponse, error) {
	rsp, err := c.PostPluginBranchesChoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginBranchesChoicesResponse(rsp)
}

// PostPluginDefaultsWithBodyWithResponse request with arbitrary body returning *PostPluginDefaultsResponse
func (c *ClientWithResponses) PostPluginDefaultsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPluginDefaultsResponse, error) {
	rsp, err := c.PostPluginDefaultsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginDefaultsResponse(rsp)
}

func (c *ClientWithResponses) PostPluginDefaultsWithResponse(ctx context.Context, body PostPluginDefaultsJSONRequestBody) (*PostPluginDefaultsResponse, error) {
	rsp, err := c.PostPluginDefaults(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPluginDefaultsResponse(rsp)
}

// DeletePluginIdIdWithResponse request returning *DeletePluginIdIdResponse
func (c *ClientWithResponses) DeletePluginIdIdWithResponse(ctx context.Context, id string) (*DeletePluginIdIdResponse, error) {
	rsp, err := c.DeletePluginIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePluginIdIdResponse(rsp)
}

// GetPluginIdIdWithResponse request returning *GetPluginIdIdResponse
func (c *ClientWithResponses) GetPluginIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPluginIdIdParams) (*GetPluginIdIdResponse, error) {
	rsp, err := c.GetPluginIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginIdIdResponse(rsp)
}

// PutPluginIdIdWithBodyWithResponse request with arbitrary body returning *PutPluginIdIdResponse
func (c *ClientWithResponses) PutPluginIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPluginIdIdResponse, error) {
	rsp, err := c.PutPluginIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPluginIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPluginIdIdWithResponse(ctx context.Context, id string, body PutPluginIdIdJSONRequestBody) (*PutPluginIdIdResponse, error) {
	rsp, err := c.PutPluginIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPluginIdIdResponse(rsp)
}

// GetPluginOfficialRepositoriesWithResponse request returning *GetPluginOfficialRepositoriesResponse
func (c *ClientWithResponses) GetPluginOfficialRepositoriesWithResponse(ctx context.Context) (*GetPluginOfficialRepositoriesResponse, error) {
	rsp, err := c.GetPluginOfficialRepositories(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginOfficialRepositoriesResponse(rsp)
}

// GetPluginRetrieveVersionsForReposWithResponse request returning *GetPluginRetrieveVersionsForReposResponse
func (c *ClientWithResponses) GetPluginRetrieveVersionsForReposWithResponse(ctx context.Context) (*GetPluginRetrieveVersionsForReposResponse, error) {
	rsp, err := c.GetPluginRetrieveVersionsForRepos(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPluginRetrieveVersionsForReposResponse(rsp)
}

// GetPoolWithResponse request returning *GetPoolResponse
func (c *ClientWithResponses) GetPoolWithResponse(ctx context.Context, params *GetPoolParams) (*GetPoolResponse, error) {
	rsp, err := c.GetPool(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolResponse(rsp)
}

// PostPoolWithBodyWithResponse request with arbitrary body returning *PostPoolResponse
func (c *ClientWithResponses) PostPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolResponse, error) {
	rsp, err := c.PostPoolWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolResponse(rsp)
}

func (c *ClientWithResponses) PostPoolWithResponse(ctx context.Context, body PostPoolJSONRequestBody) (*PostPoolResponse, error) {
	rsp, err := c.PostPool(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolResponse(rsp)
}

// GetPoolDatasetWithResponse request returning *GetPoolDatasetResponse
func (c *ClientWithResponses) GetPoolDatasetWithResponse(ctx context.Context, params *GetPoolDatasetParams) (*GetPoolDatasetResponse, error) {
	rsp, err := c.GetPoolDataset(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolDatasetResponse(rsp)
}

// PostPoolDatasetWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetResponse
func (c *ClientWithResponses) PostPoolDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolDatasetResponse, error) {
	rsp, err := c.PostPoolDatasetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetWithResponse(ctx context.Context, body PostPoolDatasetJSONRequestBody) (*PostPoolDatasetResponse, error) {
	rsp, err := c.PostPoolDataset(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetResponse(rsp)
}

// DeletePoolDatasetIdIdWithBodyWithResponse request with arbitrary body returning *DeletePoolDatasetIdIdResponse
func (c *ClientWithResponses) DeletePoolDatasetIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*DeletePoolDatasetIdIdResponse, error) {
	rsp, err := c.DeletePoolDatasetIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolDatasetIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeletePoolDatasetIdIdWithResponse(ctx context.Context, id string, body DeletePoolDatasetIdIdJSONRequestBody) (*DeletePoolDatasetIdIdResponse, error) {
	rsp, err := c.DeletePoolDatasetIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolDatasetIdIdResponse(rsp)
}

// GetPoolDatasetIdIdWithResponse request returning *GetPoolDatasetIdIdResponse
func (c *ClientWithResponses) GetPoolDatasetIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPoolDatasetIdIdParams) (*GetPoolDatasetIdIdResponse, error) {
	rsp, err := c.GetPoolDatasetIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolDatasetIdIdResponse(rsp)
}

// PutPoolDatasetIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolDatasetIdIdResponse
func (c *ClientWithResponses) PutPoolDatasetIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPoolDatasetIdIdResponse, error) {
	rsp, err := c.PutPoolDatasetIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolDatasetIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolDatasetIdIdWithResponse(ctx context.Context, id string, body PutPoolDatasetIdIdJSONRequestBody) (*PutPoolDatasetIdIdResponse, error) {
	rsp, err := c.PutPoolDatasetIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolDatasetIdIdResponse(rsp)
}

// PostPoolDatasetIdIdAttachmentsWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdAttachmentsResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdAttachmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostPoolDatasetIdIdAttachmentsResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdAttachmentsWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdAttachmentsResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdAttachmentsWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdAttachmentsJSONRequestBody) (*PostPoolDatasetIdIdAttachmentsResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdAttachments(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdAttachmentsResponse(rsp)
}

// PostPoolDatasetIdIdPermissionWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdPermissionResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdPermissionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostPoolDatasetIdIdPermissionResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdPermissionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdPermissionResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdPermissionWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdPermissionJSONRequestBody) (*PostPoolDatasetIdIdPermissionResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdPermission(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdPermissionResponse(rsp)
}

// PostPoolDatasetIdIdProcessesWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdProcessesResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdProcessesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostPoolDatasetIdIdProcessesResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdProcessesWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdProcessesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdProcessesWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdProcessesJSONRequestBody) (*PostPoolDatasetIdIdProcessesResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdProcesses(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdProcessesResponse(rsp)
}

// PostPoolDatasetIdIdPromoteWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetIdIdPromoteResponse
func (c *ClientWithResponses) PostPoolDatasetIdIdPromoteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostPoolDatasetIdIdPromoteResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdPromoteWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdPromoteResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetIdIdPromoteWithResponse(ctx context.Context, id string, body PostPoolDatasetIdIdPromoteJSONRequestBody) (*PostPoolDatasetIdIdPromoteResponse, error) {
	rsp, err := c.PostPoolDatasetIdIdPromote(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetIdIdPromoteResponse(rsp)
}

// PostPoolDatasetRecommendedZvolBlocksizeWithBodyWithResponse request with arbitrary body returning *PostPoolDatasetRecommendedZvolBlocksizeResponse
func (c *ClientWithResponses) PostPoolDatasetRecommendedZvolBlocksizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error) {
	rsp, err := c.PostPoolDatasetRecommendedZvolBlocksizeWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetRecommendedZvolBlocksizeResponse(rsp)
}

func (c *ClientWithResponses) PostPoolDatasetRecommendedZvolBlocksizeWithResponse(ctx context.Context, body PostPoolDatasetRecommendedZvolBlocksizeJSONRequestBody) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error) {
	rsp, err := c.PostPoolDatasetRecommendedZvolBlocksize(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolDatasetRecommendedZvolBlocksizeResponse(rsp)
}

// PostPoolFilesystemChoicesWithBodyWithResponse request with arbitrary body returning *PostPoolFilesystemChoicesResponse
func (c *ClientWithResponses) PostPoolFilesystemChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolFilesystemChoicesResponse, error) {
	rsp, err := c.PostPoolFilesystemChoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolFilesystemChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolFilesystemChoicesWithResponse(ctx context.Context, body PostPoolFilesystemChoicesJSONRequestBody) (*PostPoolFilesystemChoicesResponse, error) {
	rsp, err := c.PostPoolFilesystemChoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolFilesystemChoicesResponse(rsp)
}

// GetPoolIdIdWithResponse request returning *GetPoolIdIdResponse
func (c *ClientWithResponses) GetPoolIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPoolIdIdParams) (*GetPoolIdIdResponse, error) {
	rsp, err := c.GetPoolIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolIdIdResponse(rsp)
}

// PutPoolIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolIdIdResponse
func (c *ClientWithResponses) PutPoolIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutPoolIdIdResponse, error) {
	rsp, err := c.PutPoolIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolIdIdWithResponse(ctx context.Context, id int, body PutPoolIdIdJSONRequestBody) (*PutPoolIdIdResponse, error) {
	rsp, err := c.PutPoolIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolIdIdResponse(rsp)
}

// PostPoolIdIdAttachmentsWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdAttachmentsResponse
func (c *ClientWithResponses) PostPoolIdIdAttachmentsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdAttachmentsResponse, error) {
	rsp, err := c.PostPoolIdIdAttachmentsWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdAttachmentsResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdAttachmentsWithResponse(ctx context.Context, id int, body PostPoolIdIdAttachmentsJSONRequestBody) (*PostPoolIdIdAttachmentsResponse, error) {
	rsp, err := c.PostPoolIdIdAttachments(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdAttachmentsResponse(rsp)
}

// PostPoolIdIdDetachWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdDetachResponse
func (c *ClientWithResponses) PostPoolIdIdDetachWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdDetachResponse, error) {
	rsp, err := c.PostPoolIdIdDetachWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdDetachResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdDetachWithResponse(ctx context.Context, id int, body PostPoolIdIdDetachJSONRequestBody) (*PostPoolIdIdDetachResponse, error) {
	rsp, err := c.PostPoolIdIdDetach(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdDetachResponse(rsp)
}

// PostPoolIdIdDownloadEncryptionKeyWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdDownloadEncryptionKeyResponse
func (c *ClientWithResponses) PostPoolIdIdDownloadEncryptionKeyWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdDownloadEncryptionKeyResponse, error) {
	rsp, err := c.PostPoolIdIdDownloadEncryptionKeyWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdDownloadEncryptionKeyResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdDownloadEncryptionKeyWithResponse(ctx context.Context, id int, body PostPoolIdIdDownloadEncryptionKeyJSONRequestBody) (*PostPoolIdIdDownloadEncryptionKeyResponse, error) {
	rsp, err := c.PostPoolIdIdDownloadEncryptionKey(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdDownloadEncryptionKeyResponse(rsp)
}

// PostPoolIdIdExportWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdExportResponse
func (c *ClientWithResponses) PostPoolIdIdExportWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdExportResponse, error) {
	rsp, err := c.PostPoolIdIdExportWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdExportResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdExportWithResponse(ctx context.Context, id int, body PostPoolIdIdExportJSONRequestBody) (*PostPoolIdIdExportResponse, error) {
	rsp, err := c.PostPoolIdIdExport(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdExportResponse(rsp)
}

// PostPoolIdIdGetDisksWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdGetDisksResponse
func (c *ClientWithResponses) PostPoolIdIdGetDisksWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdGetDisksResponse, error) {
	rsp, err := c.PostPoolIdIdGetDisksWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdGetDisksResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdGetDisksWithResponse(ctx context.Context, id int, body PostPoolIdIdGetDisksJSONRequestBody) (*PostPoolIdIdGetDisksResponse, error) {
	rsp, err := c.PostPoolIdIdGetDisks(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdGetDisksResponse(rsp)
}

// PostPoolIdIdIsUpgradedWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdIsUpgradedResponse
func (c *ClientWithResponses) PostPoolIdIdIsUpgradedWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdIsUpgradedResponse, error) {
	rsp, err := c.PostPoolIdIdIsUpgradedWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdIsUpgradedResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdIsUpgradedWithResponse(ctx context.Context, id int, body PostPoolIdIdIsUpgradedJSONRequestBody) (*PostPoolIdIdIsUpgradedResponse, error) {
	rsp, err := c.PostPoolIdIdIsUpgraded(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdIsUpgradedResponse(rsp)
}

// PostPoolIdIdLockWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdLockResponse
func (c *ClientWithResponses) PostPoolIdIdLockWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdLockResponse, error) {
	rsp, err := c.PostPoolIdIdLockWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdLockResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdLockWithResponse(ctx context.Context, id int, body PostPoolIdIdLockJSONRequestBody) (*PostPoolIdIdLockResponse, error) {
	rsp, err := c.PostPoolIdIdLock(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdLockResponse(rsp)
}

// PostPoolIdIdOfflineWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdOfflineResponse
func (c *ClientWithResponses) PostPoolIdIdOfflineWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdOfflineResponse, error) {
	rsp, err := c.PostPoolIdIdOfflineWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdOfflineResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdOfflineWithResponse(ctx context.Context, id int, body PostPoolIdIdOfflineJSONRequestBody) (*PostPoolIdIdOfflineResponse, error) {
	rsp, err := c.PostPoolIdIdOffline(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdOfflineResponse(rsp)
}

// PostPoolIdIdOnlineWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdOnlineResponse
func (c *ClientWithResponses) PostPoolIdIdOnlineWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdOnlineResponse, error) {
	rsp, err := c.PostPoolIdIdOnlineWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdOnlineResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdOnlineWithResponse(ctx context.Context, id int, body PostPoolIdIdOnlineJSONRequestBody) (*PostPoolIdIdOnlineResponse, error) {
	rsp, err := c.PostPoolIdIdOnline(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdOnlineResponse(rsp)
}

// PostPoolIdIdPassphraseWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdPassphraseResponse
func (c *ClientWithResponses) PostPoolIdIdPassphraseWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdPassphraseResponse, error) {
	rsp, err := c.PostPoolIdIdPassphraseWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdPassphraseResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdPassphraseWithResponse(ctx context.Context, id int, body PostPoolIdIdPassphraseJSONRequestBody) (*PostPoolIdIdPassphraseResponse, error) {
	rsp, err := c.PostPoolIdIdPassphrase(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdPassphraseResponse(rsp)
}

// PostPoolIdIdProcessesWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdProcessesResponse
func (c *ClientWithResponses) PostPoolIdIdProcessesWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdProcessesResponse, error) {
	rsp, err := c.PostPoolIdIdProcessesWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdProcessesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdProcessesWithResponse(ctx context.Context, id int, body PostPoolIdIdProcessesJSONRequestBody) (*PostPoolIdIdProcessesResponse, error) {
	rsp, err := c.PostPoolIdIdProcesses(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdProcessesResponse(rsp)
}

// PostPoolIdIdRecoverykeyRmWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdRecoverykeyRmResponse
func (c *ClientWithResponses) PostPoolIdIdRecoverykeyRmWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdRecoverykeyRmResponse, error) {
	rsp, err := c.PostPoolIdIdRecoverykeyRmWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRecoverykeyRmResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdRecoverykeyRmWithResponse(ctx context.Context, id int, body PostPoolIdIdRecoverykeyRmJSONRequestBody) (*PostPoolIdIdRecoverykeyRmResponse, error) {
	rsp, err := c.PostPoolIdIdRecoverykeyRm(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRecoverykeyRmResponse(rsp)
}

// PostPoolIdIdRekeyWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdRekeyResponse
func (c *ClientWithResponses) PostPoolIdIdRekeyWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdRekeyResponse, error) {
	rsp, err := c.PostPoolIdIdRekeyWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRekeyResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdRekeyWithResponse(ctx context.Context, id int, body PostPoolIdIdRekeyJSONRequestBody) (*PostPoolIdIdRekeyResponse, error) {
	rsp, err := c.PostPoolIdIdRekey(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRekeyResponse(rsp)
}

// PostPoolIdIdRemoveWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdRemoveResponse
func (c *ClientWithResponses) PostPoolIdIdRemoveWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdRemoveResponse, error) {
	rsp, err := c.PostPoolIdIdRemoveWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdRemoveWithResponse(ctx context.Context, id int, body PostPoolIdIdRemoveJSONRequestBody) (*PostPoolIdIdRemoveResponse, error) {
	rsp, err := c.PostPoolIdIdRemove(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdRemoveResponse(rsp)
}

// PostPoolIdIdReplaceWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdReplaceResponse
func (c *ClientWithResponses) PostPoolIdIdReplaceWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdReplaceResponse, error) {
	rsp, err := c.PostPoolIdIdReplaceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdReplaceResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdReplaceWithResponse(ctx context.Context, id int, body PostPoolIdIdReplaceJSONRequestBody) (*PostPoolIdIdReplaceResponse, error) {
	rsp, err := c.PostPoolIdIdReplace(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdReplaceResponse(rsp)
}

// PostPoolIdIdScrubWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdScrubResponse
func (c *ClientWithResponses) PostPoolIdIdScrubWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdScrubResponse, error) {
	rsp, err := c.PostPoolIdIdScrubWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdScrubResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdScrubWithResponse(ctx context.Context, id int, body PostPoolIdIdScrubJSONRequestBody) (*PostPoolIdIdScrubResponse, error) {
	rsp, err := c.PostPoolIdIdScrub(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdScrubResponse(rsp)
}

// PostPoolIdIdUnlockWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdUnlockResponse
func (c *ClientWithResponses) PostPoolIdIdUnlockWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdUnlockResponse, error) {
	rsp, err := c.PostPoolIdIdUnlockWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdUnlockResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdUnlockWithResponse(ctx context.Context, id int, body PostPoolIdIdUnlockJSONRequestBody) (*PostPoolIdIdUnlockResponse, error) {
	rsp, err := c.PostPoolIdIdUnlock(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdUnlockResponse(rsp)
}

// PostPoolIdIdUpgradeWithBodyWithResponse request with arbitrary body returning *PostPoolIdIdUpgradeResponse
func (c *ClientWithResponses) PostPoolIdIdUpgradeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolIdIdUpgradeResponse, error) {
	rsp, err := c.PostPoolIdIdUpgradeWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdUpgradeResponse(rsp)
}

func (c *ClientWithResponses) PostPoolIdIdUpgradeWithResponse(ctx context.Context, id int, body PostPoolIdIdUpgradeJSONRequestBody) (*PostPoolIdIdUpgradeResponse, error) {
	rsp, err := c.PostPoolIdIdUpgrade(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolIdIdUpgradeResponse(rsp)
}

// PostPoolImportDiskWithBodyWithResponse request with arbitrary body returning *PostPoolImportDiskResponse
func (c *ClientWithResponses) PostPoolImportDiskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolImportDiskResponse, error) {
	rsp, err := c.PostPoolImportDiskWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportDiskResponse(rsp)
}

func (c *ClientWithResponses) PostPoolImportDiskWithResponse(ctx context.Context, body PostPoolImportDiskJSONRequestBody) (*PostPoolImportDiskResponse, error) {
	rsp, err := c.PostPoolImportDisk(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportDiskResponse(rsp)
}

// PostPoolImportDiskAutodetectFsTypeWithBodyWithResponse request with arbitrary body returning *PostPoolImportDiskAutodetectFsTypeResponse
func (c *ClientWithResponses) PostPoolImportDiskAutodetectFsTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolImportDiskAutodetectFsTypeResponse, error) {
	rsp, err := c.PostPoolImportDiskAutodetectFsTypeWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportDiskAutodetectFsTypeResponse(rsp)
}

func (c *ClientWithResponses) PostPoolImportDiskAutodetectFsTypeWithResponse(ctx context.Context, body PostPoolImportDiskAutodetectFsTypeJSONRequestBody) (*PostPoolImportDiskAutodetectFsTypeResponse, error) {
	rsp, err := c.PostPoolImportDiskAutodetectFsType(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportDiskAutodetectFsTypeResponse(rsp)
}

// GetPoolImportDiskMsdosfsLocalesWithResponse request returning *GetPoolImportDiskMsdosfsLocalesResponse
func (c *ClientWithResponses) GetPoolImportDiskMsdosfsLocalesWithResponse(ctx context.Context) (*GetPoolImportDiskMsdosfsLocalesResponse, error) {
	rsp, err := c.GetPoolImportDiskMsdosfsLocales(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolImportDiskMsdosfsLocalesResponse(rsp)
}

// GetPoolImportFindWithResponse request returning *GetPoolImportFindResponse
func (c *ClientWithResponses) GetPoolImportFindWithResponse(ctx context.Context) (*GetPoolImportFindResponse, error) {
	rsp, err := c.GetPoolImportFind(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolImportFindResponse(rsp)
}

// PostPoolImportPoolWithBodyWithResponse request with arbitrary body returning *PostPoolImportPoolResponse
func (c *ClientWithResponses) PostPoolImportPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolImportPoolResponse, error) {
	rsp, err := c.PostPoolImportPoolWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportPoolResponse(rsp)
}

func (c *ClientWithResponses) PostPoolImportPoolWithResponse(ctx context.Context, body PostPoolImportPoolJSONRequestBody) (*PostPoolImportPoolResponse, error) {
	rsp, err := c.PostPoolImportPool(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolImportPoolResponse(rsp)
}

// GetPoolResilverWithResponse request returning *GetPoolResilverResponse
func (c *ClientWithResponses) GetPoolResilverWithResponse(ctx context.Context) (*GetPoolResilverResponse, error) {
	rsp, err := c.GetPoolResilver(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolResilverResponse(rsp)
}

// PutPoolResilverWithBodyWithResponse request with arbitrary body returning *PutPoolResilverResponse
func (c *ClientWithResponses) PutPoolResilverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutPoolResilverResponse, error) {
	rsp, err := c.PutPoolResilverWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolResilverResponse(rsp)
}

func (c *ClientWithResponses) PutPoolResilverWithResponse(ctx context.Context, body PutPoolResilverJSONRequestBody) (*PutPoolResilverResponse, error) {
	rsp, err := c.PutPoolResilver(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolResilverResponse(rsp)
}

// GetPoolScrubWithResponse request returning *GetPoolScrubResponse
func (c *ClientWithResponses) GetPoolScrubWithResponse(ctx context.Context, params *GetPoolScrubParams) (*GetPoolScrubResponse, error) {
	rsp, err := c.GetPoolScrub(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolScrubResponse(rsp)
}

// PostPoolScrubWithBodyWithResponse request with arbitrary body returning *PostPoolScrubResponse
func (c *ClientWithResponses) PostPoolScrubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolScrubResponse, error) {
	rsp, err := c.PostPoolScrubWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolScrubResponse(rsp)
}

func (c *ClientWithResponses) PostPoolScrubWithResponse(ctx context.Context, body PostPoolScrubJSONRequestBody) (*PostPoolScrubResponse, error) {
	rsp, err := c.PostPoolScrub(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolScrubResponse(rsp)
}

// DeletePoolScrubIdIdWithResponse request returning *DeletePoolScrubIdIdResponse
func (c *ClientWithResponses) DeletePoolScrubIdIdWithResponse(ctx context.Context, id int) (*DeletePoolScrubIdIdResponse, error) {
	rsp, err := c.DeletePoolScrubIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolScrubIdIdResponse(rsp)
}

// GetPoolScrubIdIdWithResponse request returning *GetPoolScrubIdIdResponse
func (c *ClientWithResponses) GetPoolScrubIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPoolScrubIdIdParams) (*GetPoolScrubIdIdResponse, error) {
	rsp, err := c.GetPoolScrubIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolScrubIdIdResponse(rsp)
}

// PutPoolScrubIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolScrubIdIdResponse
func (c *ClientWithResponses) PutPoolScrubIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutPoolScrubIdIdResponse, error) {
	rsp, err := c.PutPoolScrubIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolScrubIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolScrubIdIdWithResponse(ctx context.Context, id int, body PutPoolScrubIdIdJSONRequestBody) (*PutPoolScrubIdIdResponse, error) {
	rsp, err := c.PutPoolScrubIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolScrubIdIdResponse(rsp)
}

// PostPoolScrubRunWithBodyWithResponse request with arbitrary body returning *PostPoolScrubRunResponse
func (c *ClientWithResponses) PostPoolScrubRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolScrubRunResponse, error) {
	rsp, err := c.PostPoolScrubRunWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolScrubRunResponse(rsp)
}

func (c *ClientWithResponses) PostPoolScrubRunWithResponse(ctx context.Context, body PostPoolScrubRunJSONRequestBody) (*PostPoolScrubRunResponse, error) {
	rsp, err := c.PostPoolScrubRun(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolScrubRunResponse(rsp)
}

// GetPoolSnapshottaskWithResponse request returning *GetPoolSnapshottaskResponse
func (c *ClientWithResponses) GetPoolSnapshottaskWithResponse(ctx context.Context, params *GetPoolSnapshottaskParams) (*GetPoolSnapshottaskResponse, error) {
	rsp, err := c.GetPoolSnapshottask(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolSnapshottaskResponse(rsp)
}

// PostPoolSnapshottaskWithBodyWithResponse request with arbitrary body returning *PostPoolSnapshottaskResponse
func (c *ClientWithResponses) PostPoolSnapshottaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolSnapshottaskResponse, error) {
	rsp, err := c.PostPoolSnapshottaskWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolSnapshottaskResponse(rsp)
}

func (c *ClientWithResponses) PostPoolSnapshottaskWithResponse(ctx context.Context, body PostPoolSnapshottaskJSONRequestBody) (*PostPoolSnapshottaskResponse, error) {
	rsp, err := c.PostPoolSnapshottask(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolSnapshottaskResponse(rsp)
}

// DeletePoolSnapshottaskIdIdWithResponse request returning *DeletePoolSnapshottaskIdIdResponse
func (c *ClientWithResponses) DeletePoolSnapshottaskIdIdWithResponse(ctx context.Context, id int) (*DeletePoolSnapshottaskIdIdResponse, error) {
	rsp, err := c.DeletePoolSnapshottaskIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePoolSnapshottaskIdIdResponse(rsp)
}

// GetPoolSnapshottaskIdIdWithResponse request returning *GetPoolSnapshottaskIdIdResponse
func (c *ClientWithResponses) GetPoolSnapshottaskIdIdWithResponse(ctx context.Context, id []interface{}, params *GetPoolSnapshottaskIdIdParams) (*GetPoolSnapshottaskIdIdResponse, error) {
	rsp, err := c.GetPoolSnapshottaskIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPoolSnapshottaskIdIdResponse(rsp)
}

// PutPoolSnapshottaskIdIdWithBodyWithResponse request with arbitrary body returning *PutPoolSnapshottaskIdIdResponse
func (c *ClientWithResponses) PutPoolSnapshottaskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutPoolSnapshottaskIdIdResponse, error) {
	rsp, err := c.PutPoolSnapshottaskIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolSnapshottaskIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutPoolSnapshottaskIdIdWithResponse(ctx context.Context, id int, body PutPoolSnapshottaskIdIdJSONRequestBody) (*PutPoolSnapshottaskIdIdResponse, error) {
	rsp, err := c.PutPoolSnapshottaskIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPoolSnapshottaskIdIdResponse(rsp)
}

// PostPoolSnapshottaskIdIdRunWithBodyWithResponse request with arbitrary body returning *PostPoolSnapshottaskIdIdRunResponse
func (c *ClientWithResponses) PostPoolSnapshottaskIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostPoolSnapshottaskIdIdRunResponse, error) {
	rsp, err := c.PostPoolSnapshottaskIdIdRunWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolSnapshottaskIdIdRunResponse(rsp)
}

func (c *ClientWithResponses) PostPoolSnapshottaskIdIdRunWithResponse(ctx context.Context, id int, body PostPoolSnapshottaskIdIdRunJSONRequestBody) (*PostPoolSnapshottaskIdIdRunResponse, error) {
	rsp, err := c.PostPoolSnapshottaskIdIdRun(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolSnapshottaskIdIdRunResponse(rsp)
}

// PostPoolUnlockServicesRestartChoicesWithBodyWithResponse request with arbitrary body returning *PostPoolUnlockServicesRestartChoicesResponse
func (c *ClientWithResponses) PostPoolUnlockServicesRestartChoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPoolUnlockServicesRestartChoicesResponse, error) {
	rsp, err := c.PostPoolUnlockServicesRestartChoicesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolUnlockServicesRestartChoicesResponse(rsp)
}

func (c *ClientWithResponses) PostPoolUnlockServicesRestartChoicesWithResponse(ctx context.Context, body PostPoolUnlockServicesRestartChoicesJSONRequestBody) (*PostPoolUnlockServicesRestartChoicesResponse, error) {
	rsp, err := c.PostPoolUnlockServicesRestartChoices(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPoolUnlockServicesRestartChoicesResponse(rsp)
}

// GetReplicationWithResponse request returning *GetReplicationResponse
func (c *ClientWithResponses) GetReplicationWithResponse(ctx context.Context, params *GetReplicationParams) (*GetReplicationResponse, error) {
	rsp, err := c.GetReplication(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetReplicationResponse(rsp)
}

// PostReplicationWithBodyWithResponse request with arbitrary body returning *PostReplicationResponse
func (c *ClientWithResponses) PostReplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationResponse, error) {
	rsp, err := c.PostReplicationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationWithResponse(ctx context.Context, body PostReplicationJSONRequestBody) (*PostReplicationResponse, error) {
	rsp, err := c.PostReplication(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationResponse(rsp)
}

// PostReplicationCountEligibleManualSnapshotsWithBodyWithResponse request with arbitrary body returning *PostReplicationCountEligibleManualSnapshotsResponse
func (c *ClientWithResponses) PostReplicationCountEligibleManualSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationCountEligibleManualSnapshotsResponse, error) {
	rsp, err := c.PostReplicationCountEligibleManualSnapshotsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationCountEligibleManualSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationCountEligibleManualSnapshotsWithResponse(ctx context.Context, body PostReplicationCountEligibleManualSnapshotsJSONRequestBody) (*PostReplicationCountEligibleManualSnapshotsResponse, error) {
	rsp, err := c.PostReplicationCountEligibleManualSnapshots(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationCountEligibleManualSnapshotsResponse(rsp)
}

// PostReplicationCreateDatasetWithBodyWithResponse request with arbitrary body returning *PostReplicationCreateDatasetResponse
func (c *ClientWithResponses) PostReplicationCreateDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationCreateDatasetResponse, error) {
	rsp, err := c.PostReplicationCreateDatasetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationCreateDatasetResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationCreateDatasetWithResponse(ctx context.Context, body PostReplicationCreateDatasetJSONRequestBody) (*PostReplicationCreateDatasetResponse, error) {
	rsp, err := c.PostReplicationCreateDataset(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationCreateDatasetResponse(rsp)
}

// DeleteReplicationIdIdWithResponse request returning *DeleteReplicationIdIdResponse
func (c *ClientWithResponses) DeleteReplicationIdIdWithResponse(ctx context.Context, id int) (*DeleteReplicationIdIdResponse, error) {
	rsp, err := c.DeleteReplicationIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReplicationIdIdResponse(rsp)
}

// GetReplicationIdIdWithResponse request returning *GetReplicationIdIdResponse
func (c *ClientWithResponses) GetReplicationIdIdWithResponse(ctx context.Context, id []interface{}, params *GetReplicationIdIdParams) (*GetReplicationIdIdResponse, error) {
	rsp, err := c.GetReplicationIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetReplicationIdIdResponse(rsp)
}

// PutReplicationIdIdWithBodyWithResponse request with arbitrary body returning *PutReplicationIdIdResponse
func (c *ClientWithResponses) PutReplicationIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutReplicationIdIdResponse, error) {
	rsp, err := c.PutReplicationIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutReplicationIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutReplicationIdIdWithResponse(ctx context.Context, id int, body PutReplicationIdIdJSONRequestBody) (*PutReplicationIdIdResponse, error) {
	rsp, err := c.PutReplicationIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutReplicationIdIdResponse(rsp)
}

// PostReplicationIdIdRunWithBodyWithResponse request with arbitrary body returning *PostReplicationIdIdRunResponse
func (c *ClientWithResponses) PostReplicationIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostReplicationIdIdRunResponse, error) {
	rsp, err := c.PostReplicationIdIdRunWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationIdIdRunResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationIdIdRunWithResponse(ctx context.Context, id int, body PostReplicationIdIdRunJSONRequestBody) (*PostReplicationIdIdRunResponse, error) {
	rsp, err := c.PostReplicationIdIdRun(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationIdIdRunResponse(rsp)
}

// PostReplicationListDatasetsWithBodyWithResponse request with arbitrary body returning *PostReplicationListDatasetsResponse
func (c *ClientWithResponses) PostReplicationListDatasetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationListDatasetsResponse, error) {
	rsp, err := c.PostReplicationListDatasetsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationListDatasetsResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationListDatasetsWithResponse(ctx context.Context, body PostReplicationListDatasetsJSONRequestBody) (*PostReplicationListDatasetsResponse, error) {
	rsp, err := c.PostReplicationListDatasets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationListDatasetsResponse(rsp)
}

// GetReplicationListNamingSchemasWithResponse request returning *GetReplicationListNamingSchemasResponse
func (c *ClientWithResponses) GetReplicationListNamingSchemasWithResponse(ctx context.Context) (*GetReplicationListNamingSchemasResponse, error) {
	rsp, err := c.GetReplicationListNamingSchemas(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetReplicationListNamingSchemasResponse(rsp)
}

// PostReplicationTargetUnmatchedSnapshotsWithBodyWithResponse request with arbitrary body returning *PostReplicationTargetUnmatchedSnapshotsResponse
func (c *ClientWithResponses) PostReplicationTargetUnmatchedSnapshotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReplicationTargetUnmatchedSnapshotsResponse, error) {
	rsp, err := c.PostReplicationTargetUnmatchedSnapshotsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationTargetUnmatchedSnapshotsResponse(rsp)
}

func (c *ClientWithResponses) PostReplicationTargetUnmatchedSnapshotsWithResponse(ctx context.Context, body PostReplicationTargetUnmatchedSnapshotsJSONRequestBody) (*PostReplicationTargetUnmatchedSnapshotsResponse, error) {
	rsp, err := c.PostReplicationTargetUnmatchedSnapshots(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReplicationTargetUnmatchedSnapshotsResponse(rsp)
}

// GetReportingWithResponse request returning *GetReportingResponse
func (c *ClientWithResponses) GetReportingWithResponse(ctx context.Context) (*GetReportingResponse, error) {
	rsp, err := c.GetReporting(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetReportingResponse(rsp)
}

// PutReportingWithBodyWithResponse request with arbitrary body returning *PutReportingResponse
func (c *ClientWithResponses) PutReportingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutReportingResponse, error) {
	rsp, err := c.PutReportingWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutReportingResponse(rsp)
}

func (c *ClientWithResponses) PutReportingWithResponse(ctx context.Context, body PutReportingJSONRequestBody) (*PutReportingResponse, error) {
	rsp, err := c.PutReporting(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutReportingResponse(rsp)
}

// PostReportingGetDataWithBodyWithResponse request with arbitrary body returning *PostReportingGetDataResponse
func (c *ClientWithResponses) PostReportingGetDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostReportingGetDataResponse, error) {
	rsp, err := c.PostReportingGetDataWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReportingGetDataResponse(rsp)
}

func (c *ClientWithResponses) PostReportingGetDataWithResponse(ctx context.Context, body PostReportingGetDataJSONRequestBody) (*PostReportingGetDataResponse, error) {
	rsp, err := c.PostReportingGetData(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostReportingGetDataResponse(rsp)
}

// GetReportingGraphsWithResponse request returning *GetReportingGraphsResponse
func (c *ClientWithResponses) GetReportingGraphsWithResponse(ctx context.Context, params *GetReportingGraphsParams) (*GetReportingGraphsResponse, error) {
	rsp, err := c.GetReportingGraphs(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetReportingGraphsResponse(rsp)
}

// PostRouteIpv4gwReachableWithBodyWithResponse request with arbitrary body returning *PostRouteIpv4gwReachableResponse
func (c *ClientWithResponses) PostRouteIpv4gwReachableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostRouteIpv4gwReachableResponse, error) {
	rsp, err := c.PostRouteIpv4gwReachableWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostRouteIpv4gwReachableResponse(rsp)
}

func (c *ClientWithResponses) PostRouteIpv4gwReachableWithResponse(ctx context.Context, body PostRouteIpv4gwReachableJSONRequestBody) (*PostRouteIpv4gwReachableResponse, error) {
	rsp, err := c.PostRouteIpv4gwReachable(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostRouteIpv4gwReachableResponse(rsp)
}

// GetRouteSystemRoutesWithResponse request returning *GetRouteSystemRoutesResponse
func (c *ClientWithResponses) GetRouteSystemRoutesWithResponse(ctx context.Context, params *GetRouteSystemRoutesParams) (*GetRouteSystemRoutesResponse, error) {
	rsp, err := c.GetRouteSystemRoutes(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRouteSystemRoutesResponse(rsp)
}

// GetRsyncdWithResponse request returning *GetRsyncdResponse
func (c *ClientWithResponses) GetRsyncdWithResponse(ctx context.Context) (*GetRsyncdResponse, error) {
	rsp, err := c.GetRsyncd(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetRsyncdResponse(rsp)
}

// PutRsyncdWithBodyWithResponse request with arbitrary body returning *PutRsyncdResponse
func (c *ClientWithResponses) PutRsyncdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutRsyncdResponse, error) {
	rsp, err := c.PutRsyncdWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutRsyncdResponse(rsp)
}

func (c *ClientWithResponses) PutRsyncdWithResponse(ctx context.Context, body PutRsyncdJSONRequestBody) (*PutRsyncdResponse, error) {
	rsp, err := c.PutRsyncd(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutRsyncdResponse(rsp)
}

// GetRsyncmodWithResponse request returning *GetRsyncmodResponse
func (c *ClientWithResponses) GetRsyncmodWithResponse(ctx context.Context, params *GetRsyncmodParams) (*GetRsyncmodResponse, error) {
	rsp, err := c.GetRsyncmod(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRsyncmodResponse(rsp)
}

// PostRsyncmodWithBodyWithResponse request with arbitrary body returning *PostRsyncmodResponse
func (c *ClientWithResponses) PostRsyncmodWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostRsyncmodResponse, error) {
	rsp, err := c.PostRsyncmodWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostRsyncmodResponse(rsp)
}

func (c *ClientWithResponses) PostRsyncmodWithResponse(ctx context.Context, body PostRsyncmodJSONRequestBody) (*PostRsyncmodResponse, error) {
	rsp, err := c.PostRsyncmod(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostRsyncmodResponse(rsp)
}

// DeleteRsyncmodIdIdWithResponse request returning *DeleteRsyncmodIdIdResponse
func (c *ClientWithResponses) DeleteRsyncmodIdIdWithResponse(ctx context.Context, id int) (*DeleteRsyncmodIdIdResponse, error) {
	rsp, err := c.DeleteRsyncmodIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRsyncmodIdIdResponse(rsp)
}

// GetRsyncmodIdIdWithResponse request returning *GetRsyncmodIdIdResponse
func (c *ClientWithResponses) GetRsyncmodIdIdWithResponse(ctx context.Context, id []interface{}, params *GetRsyncmodIdIdParams) (*GetRsyncmodIdIdResponse, error) {
	rsp, err := c.GetRsyncmodIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRsyncmodIdIdResponse(rsp)
}

// PutRsyncmodIdIdWithBodyWithResponse request with arbitrary body returning *PutRsyncmodIdIdResponse
func (c *ClientWithResponses) PutRsyncmodIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutRsyncmodIdIdResponse, error) {
	rsp, err := c.PutRsyncmodIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutRsyncmodIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutRsyncmodIdIdWithResponse(ctx context.Context, id int, body PutRsyncmodIdIdJSONRequestBody) (*PutRsyncmodIdIdResponse, error) {
	rsp, err := c.PutRsyncmodIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutRsyncmodIdIdResponse(rsp)
}

// GetRsynctaskWithResponse request returning *GetRsynctaskResponse
func (c *ClientWithResponses) GetRsynctaskWithResponse(ctx context.Context, params *GetRsynctaskParams) (*GetRsynctaskResponse, error) {
	rsp, err := c.GetRsynctask(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRsynctaskResponse(rsp)
}

// PostRsynctaskWithBodyWithResponse request with arbitrary body returning *PostRsynctaskResponse
func (c *ClientWithResponses) PostRsynctaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostRsynctaskResponse, error) {
	rsp, err := c.PostRsynctaskWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostRsynctaskResponse(rsp)
}

func (c *ClientWithResponses) PostRsynctaskWithResponse(ctx context.Context, body PostRsynctaskJSONRequestBody) (*PostRsynctaskResponse, error) {
	rsp, err := c.PostRsynctask(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostRsynctaskResponse(rsp)
}

// DeleteRsynctaskIdIdWithResponse request returning *DeleteRsynctaskIdIdResponse
func (c *ClientWithResponses) DeleteRsynctaskIdIdWithResponse(ctx context.Context, id int) (*DeleteRsynctaskIdIdResponse, error) {
	rsp, err := c.DeleteRsynctaskIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRsynctaskIdIdResponse(rsp)
}

// GetRsynctaskIdIdWithResponse request returning *GetRsynctaskIdIdResponse
func (c *ClientWithResponses) GetRsynctaskIdIdWithResponse(ctx context.Context, id []interface{}, params *GetRsynctaskIdIdParams) (*GetRsynctaskIdIdResponse, error) {
	rsp, err := c.GetRsynctaskIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRsynctaskIdIdResponse(rsp)
}

// PutRsynctaskIdIdWithBodyWithResponse request with arbitrary body returning *PutRsynctaskIdIdResponse
func (c *ClientWithResponses) PutRsynctaskIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutRsynctaskIdIdResponse, error) {
	rsp, err := c.PutRsynctaskIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutRsynctaskIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutRsynctaskIdIdWithResponse(ctx context.Context, id int, body PutRsynctaskIdIdJSONRequestBody) (*PutRsynctaskIdIdResponse, error) {
	rsp, err := c.PutRsynctaskIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutRsynctaskIdIdResponse(rsp)
}

// PostRsynctaskIdIdRunWithBodyWithResponse request with arbitrary body returning *PostRsynctaskIdIdRunResponse
func (c *ClientWithResponses) PostRsynctaskIdIdRunWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostRsynctaskIdIdRunResponse, error) {
	rsp, err := c.PostRsynctaskIdIdRunWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostRsynctaskIdIdRunResponse(rsp)
}

func (c *ClientWithResponses) PostRsynctaskIdIdRunWithResponse(ctx context.Context, id int, body PostRsynctaskIdIdRunJSONRequestBody) (*PostRsynctaskIdIdRunResponse, error) {
	rsp, err := c.PostRsynctaskIdIdRun(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostRsynctaskIdIdRunResponse(rsp)
}

// GetS3WithResponse request returning *GetS3Response
func (c *ClientWithResponses) GetS3WithResponse(ctx context.Context) (*GetS3Response, error) {
	rsp, err := c.GetS3(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetS3Response(rsp)
}

// PutS3WithBodyWithResponse request with arbitrary body returning *PutS3Response
func (c *ClientWithResponses) PutS3WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutS3Response, error) {
	rsp, err := c.PutS3WithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutS3Response(rsp)
}

func (c *ClientWithResponses) PutS3WithResponse(ctx context.Context, body PutS3JSONRequestBody) (*PutS3Response, error) {
	rsp, err := c.PutS3(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutS3Response(rsp)
}

// GetServiceWithResponse request returning *GetServiceResponse
func (c *ClientWithResponses) GetServiceWithResponse(ctx context.Context, params *GetServiceParams) (*GetServiceResponse, error) {
	rsp, err := c.GetService(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponse(rsp)
}

// GetServiceIdIdWithResponse request returning *GetServiceIdIdResponse
func (c *ClientWithResponses) GetServiceIdIdWithResponse(ctx context.Context, id []interface{}, params *GetServiceIdIdParams) (*GetServiceIdIdResponse, error) {
	rsp, err := c.GetServiceIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceIdIdResponse(rsp)
}

// PutServiceIdIdWithBodyWithResponse request with arbitrary body returning *PutServiceIdIdResponse
func (c *ClientWithResponses) PutServiceIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutServiceIdIdResponse, error) {
	rsp, err := c.PutServiceIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutServiceIdIdWithResponse(ctx context.Context, id string, body PutServiceIdIdJSONRequestBody) (*PutServiceIdIdResponse, error) {
	rsp, err := c.PutServiceIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceIdIdResponse(rsp)
}

// PostServiceReloadWithBodyWithResponse request with arbitrary body returning *PostServiceReloadResponse
func (c *ClientWithResponses) PostServiceReloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceReloadResponse, error) {
	rsp, err := c.PostServiceReloadWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceReloadResponse(rsp)
}

func (c *ClientWithResponses) PostServiceReloadWithResponse(ctx context.Context, body PostServiceReloadJSONRequestBody) (*PostServiceReloadResponse, error) {
	rsp, err := c.PostServiceReload(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceReloadResponse(rsp)
}

// PostServiceRestartWithBodyWithResponse request with arbitrary body returning *PostServiceRestartResponse
func (c *ClientWithResponses) PostServiceRestartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceRestartResponse, error) {
	rsp, err := c.PostServiceRestartWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceRestartResponse(rsp)
}

func (c *ClientWithResponses) PostServiceRestartWithResponse(ctx context.Context, body PostServiceRestartJSONRequestBody) (*PostServiceRestartResponse, error) {
	rsp, err := c.PostServiceRestart(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceRestartResponse(rsp)
}

// PostServiceStartWithBodyWithResponse request with arbitrary body returning *PostServiceStartResponse
func (c *ClientWithResponses) PostServiceStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceStartResponse, error) {
	rsp, err := c.PostServiceStartWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceStartResponse(rsp)
}

func (c *ClientWithResponses) PostServiceStartWithResponse(ctx context.Context, body PostServiceStartJSONRequestBody) (*PostServiceStartResponse, error) {
	rsp, err := c.PostServiceStart(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceStartResponse(rsp)
}

// GetServiceStartedWithResponse request returning *GetServiceStartedResponse
func (c *ClientWithResponses) GetServiceStartedWithResponse(ctx context.Context) (*GetServiceStartedResponse, error) {
	rsp, err := c.GetServiceStarted(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceStartedResponse(rsp)
}

// PostServiceStopWithBodyWithResponse request with arbitrary body returning *PostServiceStopResponse
func (c *ClientWithResponses) PostServiceStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceStopResponse, error) {
	rsp, err := c.PostServiceStopWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceStopResponse(rsp)
}

func (c *ClientWithResponses) PostServiceStopWithResponse(ctx context.Context, body PostServiceStopJSONRequestBody) (*PostServiceStopResponse, error) {
	rsp, err := c.PostServiceStop(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceStopResponse(rsp)
}

// PostServiceTerminateProcessWithBodyWithResponse request with arbitrary body returning *PostServiceTerminateProcessResponse
func (c *ClientWithResponses) PostServiceTerminateProcessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostServiceTerminateProcessResponse, error) {
	rsp, err := c.PostServiceTerminateProcessWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceTerminateProcessResponse(rsp)
}

func (c *ClientWithResponses) PostServiceTerminateProcessWithResponse(ctx context.Context, body PostServiceTerminateProcessJSONRequestBody) (*PostServiceTerminateProcessResponse, error) {
	rsp, err := c.PostServiceTerminateProcess(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceTerminateProcessResponse(rsp)
}

// GetSharingAfpWithResponse request returning *GetSharingAfpResponse
func (c *ClientWithResponses) GetSharingAfpWithResponse(ctx context.Context, params *GetSharingAfpParams) (*GetSharingAfpResponse, error) {
	rsp, err := c.GetSharingAfp(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingAfpResponse(rsp)
}

// PostSharingAfpWithBodyWithResponse request with arbitrary body returning *PostSharingAfpResponse
func (c *ClientWithResponses) PostSharingAfpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSharingAfpResponse, error) {
	rsp, err := c.PostSharingAfpWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingAfpResponse(rsp)
}

func (c *ClientWithResponses) PostSharingAfpWithResponse(ctx context.Context, body PostSharingAfpJSONRequestBody) (*PostSharingAfpResponse, error) {
	rsp, err := c.PostSharingAfp(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingAfpResponse(rsp)
}

// DeleteSharingAfpIdIdWithResponse request returning *DeleteSharingAfpIdIdResponse
func (c *ClientWithResponses) DeleteSharingAfpIdIdWithResponse(ctx context.Context, id int) (*DeleteSharingAfpIdIdResponse, error) {
	rsp, err := c.DeleteSharingAfpIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSharingAfpIdIdResponse(rsp)
}

// GetSharingAfpIdIdWithResponse request returning *GetSharingAfpIdIdResponse
func (c *ClientWithResponses) GetSharingAfpIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSharingAfpIdIdParams) (*GetSharingAfpIdIdResponse, error) {
	rsp, err := c.GetSharingAfpIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingAfpIdIdResponse(rsp)
}

// PutSharingAfpIdIdWithBodyWithResponse request with arbitrary body returning *PutSharingAfpIdIdResponse
func (c *ClientWithResponses) PutSharingAfpIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSharingAfpIdIdResponse, error) {
	rsp, err := c.PutSharingAfpIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingAfpIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSharingAfpIdIdWithResponse(ctx context.Context, id int, body PutSharingAfpIdIdJSONRequestBody) (*PutSharingAfpIdIdResponse, error) {
	rsp, err := c.PutSharingAfpIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingAfpIdIdResponse(rsp)
}

// GetSharingNfsWithResponse request returning *GetSharingNfsResponse
func (c *ClientWithResponses) GetSharingNfsWithResponse(ctx context.Context, params *GetSharingNfsParams) (*GetSharingNfsResponse, error) {
	rsp, err := c.GetSharingNfs(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingNfsResponse(rsp)
}

// PostSharingNfsWithBodyWithResponse request with arbitrary body returning *PostSharingNfsResponse
func (c *ClientWithResponses) PostSharingNfsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSharingNfsResponse, error) {
	rsp, err := c.PostSharingNfsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingNfsResponse(rsp)
}

func (c *ClientWithResponses) PostSharingNfsWithResponse(ctx context.Context, body PostSharingNfsJSONRequestBody) (*PostSharingNfsResponse, error) {
	rsp, err := c.PostSharingNfs(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingNfsResponse(rsp)
}

// DeleteSharingNfsIdIdWithResponse request returning *DeleteSharingNfsIdIdResponse
func (c *ClientWithResponses) DeleteSharingNfsIdIdWithResponse(ctx context.Context, id int) (*DeleteSharingNfsIdIdResponse, error) {
	rsp, err := c.DeleteSharingNfsIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSharingNfsIdIdResponse(rsp)
}

// GetSharingNfsIdIdWithResponse request returning *GetSharingNfsIdIdResponse
func (c *ClientWithResponses) GetSharingNfsIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSharingNfsIdIdParams) (*GetSharingNfsIdIdResponse, error) {
	rsp, err := c.GetSharingNfsIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingNfsIdIdResponse(rsp)
}

// PutSharingNfsIdIdWithBodyWithResponse request with arbitrary body returning *PutSharingNfsIdIdResponse
func (c *ClientWithResponses) PutSharingNfsIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSharingNfsIdIdResponse, error) {
	rsp, err := c.PutSharingNfsIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingNfsIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSharingNfsIdIdWithResponse(ctx context.Context, id int, body PutSharingNfsIdIdJSONRequestBody) (*PutSharingNfsIdIdResponse, error) {
	rsp, err := c.PutSharingNfsIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingNfsIdIdResponse(rsp)
}

// GetSharingSmbWithResponse request returning *GetSharingSmbResponse
func (c *ClientWithResponses) GetSharingSmbWithResponse(ctx context.Context, params *GetSharingSmbParams) (*GetSharingSmbResponse, error) {
	rsp, err := c.GetSharingSmb(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingSmbResponse(rsp)
}

// PostSharingSmbWithBodyWithResponse request with arbitrary body returning *PostSharingSmbResponse
func (c *ClientWithResponses) PostSharingSmbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSharingSmbResponse, error) {
	rsp, err := c.PostSharingSmbWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingSmbResponse(rsp)
}

func (c *ClientWithResponses) PostSharingSmbWithResponse(ctx context.Context, body PostSharingSmbJSONRequestBody) (*PostSharingSmbResponse, error) {
	rsp, err := c.PostSharingSmb(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingSmbResponse(rsp)
}

// DeleteSharingSmbIdIdWithResponse request returning *DeleteSharingSmbIdIdResponse
func (c *ClientWithResponses) DeleteSharingSmbIdIdWithResponse(ctx context.Context, id int) (*DeleteSharingSmbIdIdResponse, error) {
	rsp, err := c.DeleteSharingSmbIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSharingSmbIdIdResponse(rsp)
}

// GetSharingSmbIdIdWithResponse request returning *GetSharingSmbIdIdResponse
func (c *ClientWithResponses) GetSharingSmbIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSharingSmbIdIdParams) (*GetSharingSmbIdIdResponse, error) {
	rsp, err := c.GetSharingSmbIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingSmbIdIdResponse(rsp)
}

// PutSharingSmbIdIdWithBodyWithResponse request with arbitrary body returning *PutSharingSmbIdIdResponse
func (c *ClientWithResponses) PutSharingSmbIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSharingSmbIdIdResponse, error) {
	rsp, err := c.PutSharingSmbIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingSmbIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSharingSmbIdIdWithResponse(ctx context.Context, id int, body PutSharingSmbIdIdJSONRequestBody) (*PutSharingSmbIdIdResponse, error) {
	rsp, err := c.PutSharingSmbIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingSmbIdIdResponse(rsp)
}

// GetSharingSmbVfsobjectsChoicesWithResponse request returning *GetSharingSmbVfsobjectsChoicesResponse
func (c *ClientWithResponses) GetSharingSmbVfsobjectsChoicesWithResponse(ctx context.Context) (*GetSharingSmbVfsobjectsChoicesResponse, error) {
	rsp, err := c.GetSharingSmbVfsobjectsChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingSmbVfsobjectsChoicesResponse(rsp)
}

// GetSharingWebdavWithResponse request returning *GetSharingWebdavResponse
func (c *ClientWithResponses) GetSharingWebdavWithResponse(ctx context.Context, params *GetSharingWebdavParams) (*GetSharingWebdavResponse, error) {
	rsp, err := c.GetSharingWebdav(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingWebdavResponse(rsp)
}

// PostSharingWebdavWithBodyWithResponse request with arbitrary body returning *PostSharingWebdavResponse
func (c *ClientWithResponses) PostSharingWebdavWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSharingWebdavResponse, error) {
	rsp, err := c.PostSharingWebdavWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingWebdavResponse(rsp)
}

func (c *ClientWithResponses) PostSharingWebdavWithResponse(ctx context.Context, body PostSharingWebdavJSONRequestBody) (*PostSharingWebdavResponse, error) {
	rsp, err := c.PostSharingWebdav(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSharingWebdavResponse(rsp)
}

// DeleteSharingWebdavIdIdWithResponse request returning *DeleteSharingWebdavIdIdResponse
func (c *ClientWithResponses) DeleteSharingWebdavIdIdWithResponse(ctx context.Context, id int) (*DeleteSharingWebdavIdIdResponse, error) {
	rsp, err := c.DeleteSharingWebdavIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSharingWebdavIdIdResponse(rsp)
}

// GetSharingWebdavIdIdWithResponse request returning *GetSharingWebdavIdIdResponse
func (c *ClientWithResponses) GetSharingWebdavIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSharingWebdavIdIdParams) (*GetSharingWebdavIdIdResponse, error) {
	rsp, err := c.GetSharingWebdavIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSharingWebdavIdIdResponse(rsp)
}

// PutSharingWebdavIdIdWithBodyWithResponse request with arbitrary body returning *PutSharingWebdavIdIdResponse
func (c *ClientWithResponses) PutSharingWebdavIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSharingWebdavIdIdResponse, error) {
	rsp, err := c.PutSharingWebdavIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingWebdavIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSharingWebdavIdIdWithResponse(ctx context.Context, id int, body PutSharingWebdavIdIdJSONRequestBody) (*PutSharingWebdavIdIdResponse, error) {
	rsp, err := c.PutSharingWebdavIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSharingWebdavIdIdResponse(rsp)
}

// GetSmartWithResponse request returning *GetSmartResponse
func (c *ClientWithResponses) GetSmartWithResponse(ctx context.Context) (*GetSmartResponse, error) {
	rsp, err := c.GetSmart(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartResponse(rsp)
}

// PutSmartWithBodyWithResponse request with arbitrary body returning *PutSmartResponse
func (c *ClientWithResponses) PutSmartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSmartResponse, error) {
	rsp, err := c.PutSmartWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSmartResponse(rsp)
}

func (c *ClientWithResponses) PutSmartWithResponse(ctx context.Context, body PutSmartJSONRequestBody) (*PutSmartResponse, error) {
	rsp, err := c.PutSmart(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSmartResponse(rsp)
}

// GetSmartTestWithResponse request returning *GetSmartTestResponse
func (c *ClientWithResponses) GetSmartTestWithResponse(ctx context.Context, params *GetSmartTestParams) (*GetSmartTestResponse, error) {
	rsp, err := c.GetSmartTest(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartTestResponse(rsp)
}

// PostSmartTestWithBodyWithResponse request with arbitrary body returning *PostSmartTestResponse
func (c *ClientWithResponses) PostSmartTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSmartTestResponse, error) {
	rsp, err := c.PostSmartTestWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSmartTestResponse(rsp)
}

func (c *ClientWithResponses) PostSmartTestWithResponse(ctx context.Context, body PostSmartTestJSONRequestBody) (*PostSmartTestResponse, error) {
	rsp, err := c.PostSmartTest(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSmartTestResponse(rsp)
}

// DeleteSmartTestIdIdWithResponse request returning *DeleteSmartTestIdIdResponse
func (c *ClientWithResponses) DeleteSmartTestIdIdWithResponse(ctx context.Context, id int) (*DeleteSmartTestIdIdResponse, error) {
	rsp, err := c.DeleteSmartTestIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmartTestIdIdResponse(rsp)
}

// GetSmartTestIdIdWithResponse request returning *GetSmartTestIdIdResponse
func (c *ClientWithResponses) GetSmartTestIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSmartTestIdIdParams) (*GetSmartTestIdIdResponse, error) {
	rsp, err := c.GetSmartTestIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartTestIdIdResponse(rsp)
}

// PutSmartTestIdIdWithBodyWithResponse request with arbitrary body returning *PutSmartTestIdIdResponse
func (c *ClientWithResponses) PutSmartTestIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSmartTestIdIdResponse, error) {
	rsp, err := c.PutSmartTestIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSmartTestIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSmartTestIdIdWithResponse(ctx context.Context, id int, body PutSmartTestIdIdJSONRequestBody) (*PutSmartTestIdIdResponse, error) {
	rsp, err := c.PutSmartTestIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSmartTestIdIdResponse(rsp)
}

// GetSmartTestResultsWithResponse request returning *GetSmartTestResultsResponse
func (c *ClientWithResponses) GetSmartTestResultsWithResponse(ctx context.Context, params *GetSmartTestResultsParams) (*GetSmartTestResultsResponse, error) {
	rsp, err := c.GetSmartTestResults(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartTestResultsResponse(rsp)
}

// GetSmbWithResponse request returning *GetSmbResponse
func (c *ClientWithResponses) GetSmbWithResponse(ctx context.Context) (*GetSmbResponse, error) {
	rsp, err := c.GetSmb(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbResponse(rsp)
}

// PutSmbWithBodyWithResponse request with arbitrary body returning *PutSmbResponse
func (c *ClientWithResponses) PutSmbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSmbResponse, error) {
	rsp, err := c.PutSmbWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSmbResponse(rsp)
}

func (c *ClientWithResponses) PutSmbWithResponse(ctx context.Context, body PutSmbJSONRequestBody) (*PutSmbResponse, error) {
	rsp, err := c.PutSmb(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSmbResponse(rsp)
}

// GetSmbBindipChoicesWithResponse request returning *GetSmbBindipChoicesResponse
func (c *ClientWithResponses) GetSmbBindipChoicesWithResponse(ctx context.Context) (*GetSmbBindipChoicesResponse, error) {
	rsp, err := c.GetSmbBindipChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbBindipChoicesResponse(rsp)
}

// GetSmbDomainChoicesWithResponse request returning *GetSmbDomainChoicesResponse
func (c *ClientWithResponses) GetSmbDomainChoicesWithResponse(ctx context.Context) (*GetSmbDomainChoicesResponse, error) {
	rsp, err := c.GetSmbDomainChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbDomainChoicesResponse(rsp)
}

// GetSmbSharesecWithResponse request returning *GetSmbSharesecResponse
func (c *ClientWithResponses) GetSmbSharesecWithResponse(ctx context.Context, params *GetSmbSharesecParams) (*GetSmbSharesecResponse, error) {
	rsp, err := c.GetSmbSharesec(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbSharesecResponse(rsp)
}

// PostSmbSharesecWithBodyWithResponse request with arbitrary body returning *PostSmbSharesecResponse
func (c *ClientWithResponses) PostSmbSharesecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSmbSharesecResponse, error) {
	rsp, err := c.PostSmbSharesecWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbSharesecResponse(rsp)
}

func (c *ClientWithResponses) PostSmbSharesecWithResponse(ctx context.Context, body PostSmbSharesecJSONRequestBody) (*PostSmbSharesecResponse, error) {
	rsp, err := c.PostSmbSharesec(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbSharesecResponse(rsp)
}

// PostSmbSharesecGetaclWithBodyWithResponse request with arbitrary body returning *PostSmbSharesecGetaclResponse
func (c *ClientWithResponses) PostSmbSharesecGetaclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSmbSharesecGetaclResponse, error) {
	rsp, err := c.PostSmbSharesecGetaclWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbSharesecGetaclResponse(rsp)
}

func (c *ClientWithResponses) PostSmbSharesecGetaclWithResponse(ctx context.Context, body PostSmbSharesecGetaclJSONRequestBody) (*PostSmbSharesecGetaclResponse, error) {
	rsp, err := c.PostSmbSharesecGetacl(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSmbSharesecGetaclResponse(rsp)
}

// DeleteSmbSharesecIdIdWithResponse request returning *DeleteSmbSharesecIdIdResponse
func (c *ClientWithResponses) DeleteSmbSharesecIdIdWithResponse(ctx context.Context, id string) (*DeleteSmbSharesecIdIdResponse, error) {
	rsp, err := c.DeleteSmbSharesecIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmbSharesecIdIdResponse(rsp)
}

// GetSmbSharesecIdIdWithResponse request returning *GetSmbSharesecIdIdResponse
func (c *ClientWithResponses) GetSmbSharesecIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSmbSharesecIdIdParams) (*GetSmbSharesecIdIdResponse, error) {
	rsp, err := c.GetSmbSharesecIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbSharesecIdIdResponse(rsp)
}

// PutSmbSharesecIdIdWithBodyWithResponse request with arbitrary body returning *PutSmbSharesecIdIdResponse
func (c *ClientWithResponses) PutSmbSharesecIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSmbSharesecIdIdResponse, error) {
	rsp, err := c.PutSmbSharesecIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSmbSharesecIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSmbSharesecIdIdWithResponse(ctx context.Context, id int, body PutSmbSharesecIdIdJSONRequestBody) (*PutSmbSharesecIdIdResponse, error) {
	rsp, err := c.PutSmbSharesecIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSmbSharesecIdIdResponse(rsp)
}

// GetSmbSharesecSynchronizeAclsWithResponse request returning *GetSmbSharesecSynchronizeAclsResponse
func (c *ClientWithResponses) GetSmbSharesecSynchronizeAclsWithResponse(ctx context.Context) (*GetSmbSharesecSynchronizeAclsResponse, error) {
	rsp, err := c.GetSmbSharesecSynchronizeAcls(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbSharesecSynchronizeAclsResponse(rsp)
}

// GetSmbUnixcharsetChoicesWithResponse request returning *GetSmbUnixcharsetChoicesResponse
func (c *ClientWithResponses) GetSmbUnixcharsetChoicesWithResponse(ctx context.Context) (*GetSmbUnixcharsetChoicesResponse, error) {
	rsp, err := c.GetSmbUnixcharsetChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSmbUnixcharsetChoicesResponse(rsp)
}

// GetSnmpWithResponse request returning *GetSnmpResponse
func (c *ClientWithResponses) GetSnmpWithResponse(ctx context.Context) (*GetSnmpResponse, error) {
	rsp, err := c.GetSnmp(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSnmpResponse(rsp)
}

// PutSnmpWithBodyWithResponse request with arbitrary body returning *PutSnmpResponse
func (c *ClientWithResponses) PutSnmpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSnmpResponse, error) {
	rsp, err := c.PutSnmpWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSnmpResponse(rsp)
}

func (c *ClientWithResponses) PutSnmpWithResponse(ctx context.Context, body PutSnmpJSONRequestBody) (*PutSnmpResponse, error) {
	rsp, err := c.PutSnmp(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSnmpResponse(rsp)
}

// GetSshWithResponse request returning *GetSshResponse
func (c *ClientWithResponses) GetSshWithResponse(ctx context.Context) (*GetSshResponse, error) {
	rsp, err := c.GetSsh(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSshResponse(rsp)
}

// PutSshWithBodyWithResponse request with arbitrary body returning *PutSshResponse
func (c *ClientWithResponses) PutSshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSshResponse, error) {
	rsp, err := c.PutSshWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSshResponse(rsp)
}

func (c *ClientWithResponses) PutSshWithResponse(ctx context.Context, body PutSshJSONRequestBody) (*PutSshResponse, error) {
	rsp, err := c.PutSsh(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSshResponse(rsp)
}

// GetSshBindifaceChoicesWithResponse request returning *GetSshBindifaceChoicesResponse
func (c *ClientWithResponses) GetSshBindifaceChoicesWithResponse(ctx context.Context) (*GetSshBindifaceChoicesResponse, error) {
	rsp, err := c.GetSshBindifaceChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSshBindifaceChoicesResponse(rsp)
}

// GetStaticrouteWithResponse request returning *GetStaticrouteResponse
func (c *ClientWithResponses) GetStaticrouteWithResponse(ctx context.Context, params *GetStaticrouteParams) (*GetStaticrouteResponse, error) {
	rsp, err := c.GetStaticroute(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStaticrouteResponse(rsp)
}

// PostStaticrouteWithBodyWithResponse request with arbitrary body returning *PostStaticrouteResponse
func (c *ClientWithResponses) PostStaticrouteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostStaticrouteResponse, error) {
	rsp, err := c.PostStaticrouteWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostStaticrouteResponse(rsp)
}

func (c *ClientWithResponses) PostStaticrouteWithResponse(ctx context.Context, body PostStaticrouteJSONRequestBody) (*PostStaticrouteResponse, error) {
	rsp, err := c.PostStaticroute(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostStaticrouteResponse(rsp)
}

// DeleteStaticrouteIdIdWithResponse request returning *DeleteStaticrouteIdIdResponse
func (c *ClientWithResponses) DeleteStaticrouteIdIdWithResponse(ctx context.Context, id int) (*DeleteStaticrouteIdIdResponse, error) {
	rsp, err := c.DeleteStaticrouteIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStaticrouteIdIdResponse(rsp)
}

// GetStaticrouteIdIdWithResponse request returning *GetStaticrouteIdIdResponse
func (c *ClientWithResponses) GetStaticrouteIdIdWithResponse(ctx context.Context, id []interface{}, params *GetStaticrouteIdIdParams) (*GetStaticrouteIdIdResponse, error) {
	rsp, err := c.GetStaticrouteIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStaticrouteIdIdResponse(rsp)
}

// PutStaticrouteIdIdWithBodyWithResponse request with arbitrary body returning *PutStaticrouteIdIdResponse
func (c *ClientWithResponses) PutStaticrouteIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutStaticrouteIdIdResponse, error) {
	rsp, err := c.PutStaticrouteIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutStaticrouteIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutStaticrouteIdIdWithResponse(ctx context.Context, id int, body PutStaticrouteIdIdJSONRequestBody) (*PutStaticrouteIdIdResponse, error) {
	rsp, err := c.PutStaticrouteIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutStaticrouteIdIdResponse(rsp)
}

// PostStatsGetDataWithBodyWithResponse request with arbitrary body returning *PostStatsGetDataResponse
func (c *ClientWithResponses) PostStatsGetDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostStatsGetDataResponse, error) {
	rsp, err := c.PostStatsGetDataWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostStatsGetDataResponse(rsp)
}

func (c *ClientWithResponses) PostStatsGetDataWithResponse(ctx context.Context, body PostStatsGetDataJSONRequestBody) (*PostStatsGetDataResponse, error) {
	rsp, err := c.PostStatsGetData(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostStatsGetDataResponse(rsp)
}

// PostStatsGetDatasetInfoWithBodyWithResponse request with arbitrary body returning *PostStatsGetDatasetInfoResponse
func (c *ClientWithResponses) PostStatsGetDatasetInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostStatsGetDatasetInfoResponse, error) {
	rsp, err := c.PostStatsGetDatasetInfoWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostStatsGetDatasetInfoResponse(rsp)
}

func (c *ClientWithResponses) PostStatsGetDatasetInfoWithResponse(ctx context.Context, body PostStatsGetDatasetInfoJSONRequestBody) (*PostStatsGetDatasetInfoResponse, error) {
	rsp, err := c.PostStatsGetDatasetInfo(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostStatsGetDatasetInfoResponse(rsp)
}

// GetStatsGetSourcesWithResponse request returning *GetStatsGetSourcesResponse
func (c *ClientWithResponses) GetStatsGetSourcesWithResponse(ctx context.Context) (*GetStatsGetSourcesResponse, error) {
	rsp, err := c.GetStatsGetSources(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsGetSourcesResponse(rsp)
}

// GetSupportWithResponse request returning *GetSupportResponse
func (c *ClientWithResponses) GetSupportWithResponse(ctx context.Context) (*GetSupportResponse, error) {
	rsp, err := c.GetSupport(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportResponse(rsp)
}

// PutSupportWithBodyWithResponse request with arbitrary body returning *PutSupportResponse
func (c *ClientWithResponses) PutSupportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSupportResponse, error) {
	rsp, err := c.PutSupportWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSupportResponse(rsp)
}

func (c *ClientWithResponses) PutSupportWithResponse(ctx context.Context, body PutSupportJSONRequestBody) (*PutSupportResponse, error) {
	rsp, err := c.PutSupport(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSupportResponse(rsp)
}

// PostSupportFetchCategoriesWithBodyWithResponse request with arbitrary body returning *PostSupportFetchCategoriesResponse
func (c *ClientWithResponses) PostSupportFetchCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSupportFetchCategoriesResponse, error) {
	rsp, err := c.PostSupportFetchCategoriesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSupportFetchCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostSupportFetchCategoriesWithResponse(ctx context.Context, body PostSupportFetchCategoriesJSONRequestBody) (*PostSupportFetchCategoriesResponse, error) {
	rsp, err := c.PostSupportFetchCategories(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSupportFetchCategoriesResponse(rsp)
}

// GetSupportFieldsWithResponse request returning *GetSupportFieldsResponse
func (c *ClientWithResponses) GetSupportFieldsWithResponse(ctx context.Context) (*GetSupportFieldsResponse, error) {
	rsp, err := c.GetSupportFields(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportFieldsResponse(rsp)
}

// GetSupportIsAvailableWithResponse request returning *GetSupportIsAvailableResponse
func (c *ClientWithResponses) GetSupportIsAvailableWithResponse(ctx context.Context) (*GetSupportIsAvailableResponse, error) {
	rsp, err := c.GetSupportIsAvailable(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportIsAvailableResponse(rsp)
}

// GetSupportIsAvailableAndEnabledWithResponse request returning *GetSupportIsAvailableAndEnabledResponse
func (c *ClientWithResponses) GetSupportIsAvailableAndEnabledWithResponse(ctx context.Context) (*GetSupportIsAvailableAndEnabledResponse, error) {
	rsp, err := c.GetSupportIsAvailableAndEnabled(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportIsAvailableAndEnabledResponse(rsp)
}

// PostSupportNewTicketWithBodyWithResponse request with arbitrary body returning *PostSupportNewTicketResponse
func (c *ClientWithResponses) PostSupportNewTicketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSupportNewTicketResponse, error) {
	rsp, err := c.PostSupportNewTicketWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSupportNewTicketResponse(rsp)
}

func (c *ClientWithResponses) PostSupportNewTicketWithResponse(ctx context.Context, body PostSupportNewTicketJSONRequestBody) (*PostSupportNewTicketResponse, error) {
	rsp, err := c.PostSupportNewTicket(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSupportNewTicketResponse(rsp)
}

// GetSystemAdvancedWithResponse request returning *GetSystemAdvancedResponse
func (c *ClientWithResponses) GetSystemAdvancedWithResponse(ctx context.Context) (*GetSystemAdvancedResponse, error) {
	rsp, err := c.GetSystemAdvanced(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAdvancedResponse(rsp)
}

// PutSystemAdvancedWithBodyWithResponse request with arbitrary body returning *PutSystemAdvancedResponse
func (c *ClientWithResponses) PutSystemAdvancedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSystemAdvancedResponse, error) {
	rsp, err := c.PutSystemAdvancedWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemAdvancedResponse(rsp)
}

func (c *ClientWithResponses) PutSystemAdvancedWithResponse(ctx context.Context, body PutSystemAdvancedJSONRequestBody) (*PutSystemAdvancedResponse, error) {
	rsp, err := c.PutSystemAdvanced(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemAdvancedResponse(rsp)
}

// GetSystemAdvancedSerialPortChoicesWithResponse request returning *GetSystemAdvancedSerialPortChoicesResponse
func (c *ClientWithResponses) GetSystemAdvancedSerialPortChoicesWithResponse(ctx context.Context) (*GetSystemAdvancedSerialPortChoicesResponse, error) {
	rsp, err := c.GetSystemAdvancedSerialPortChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemAdvancedSerialPortChoicesResponse(rsp)
}

// GetSystemBootIdWithResponse request returning *GetSystemBootIdResponse
func (c *ClientWithResponses) GetSystemBootIdWithResponse(ctx context.Context) (*GetSystemBootIdResponse, error) {
	rsp, err := c.GetSystemBootId(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemBootIdResponse(rsp)
}

// PostSystemFeatureEnabledWithBodyWithResponse request with arbitrary body returning *PostSystemFeatureEnabledResponse
func (c *ClientWithResponses) PostSystemFeatureEnabledWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemFeatureEnabledResponse, error) {
	rsp, err := c.PostSystemFeatureEnabledWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemFeatureEnabledResponse(rsp)
}

func (c *ClientWithResponses) PostSystemFeatureEnabledWithResponse(ctx context.Context, body PostSystemFeatureEnabledJSONRequestBody) (*PostSystemFeatureEnabledResponse, error) {
	rsp, err := c.PostSystemFeatureEnabled(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemFeatureEnabledResponse(rsp)
}

// GetSystemGeneralWithResponse request returning *GetSystemGeneralResponse
func (c *ClientWithResponses) GetSystemGeneralWithResponse(ctx context.Context) (*GetSystemGeneralResponse, error) {
	rsp, err := c.GetSystemGeneral(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralResponse(rsp)
}

// PutSystemGeneralWithBodyWithResponse request with arbitrary body returning *PutSystemGeneralResponse
func (c *ClientWithResponses) PutSystemGeneralWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSystemGeneralResponse, error) {
	rsp, err := c.PutSystemGeneralWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemGeneralResponse(rsp)
}

func (c *ClientWithResponses) PutSystemGeneralWithResponse(ctx context.Context, body PutSystemGeneralJSONRequestBody) (*PutSystemGeneralResponse, error) {
	rsp, err := c.PutSystemGeneral(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemGeneralResponse(rsp)
}

// GetSystemGeneralCountryChoicesWithResponse request returning *GetSystemGeneralCountryChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralCountryChoicesWithResponse(ctx context.Context) (*GetSystemGeneralCountryChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralCountryChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralCountryChoicesResponse(rsp)
}

// GetSystemGeneralKbdmapChoicesWithResponse request returning *GetSystemGeneralKbdmapChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralKbdmapChoicesWithResponse(ctx context.Context) (*GetSystemGeneralKbdmapChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralKbdmapChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralKbdmapChoicesResponse(rsp)
}

// GetSystemGeneralLanguageChoicesWithResponse request returning *GetSystemGeneralLanguageChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralLanguageChoicesWithResponse(ctx context.Context) (*GetSystemGeneralLanguageChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralLanguageChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralLanguageChoicesResponse(rsp)
}

// GetSystemGeneralLocalUrlWithResponse request returning *GetSystemGeneralLocalUrlResponse
func (c *ClientWithResponses) GetSystemGeneralLocalUrlWithResponse(ctx context.Context) (*GetSystemGeneralLocalUrlResponse, error) {
	rsp, err := c.GetSystemGeneralLocalUrl(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralLocalUrlResponse(rsp)
}

// GetSystemGeneralTimezoneChoicesWithResponse request returning *GetSystemGeneralTimezoneChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralTimezoneChoicesWithResponse(ctx context.Context) (*GetSystemGeneralTimezoneChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralTimezoneChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralTimezoneChoicesResponse(rsp)
}

// GetSystemGeneralUiAddressChoicesWithResponse request returning *GetSystemGeneralUiAddressChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralUiAddressChoicesWithResponse(ctx context.Context) (*GetSystemGeneralUiAddressChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralUiAddressChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiAddressChoicesResponse(rsp)
}

// GetSystemGeneralUiCertificateChoicesWithResponse request returning *GetSystemGeneralUiCertificateChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralUiCertificateChoicesWithResponse(ctx context.Context) (*GetSystemGeneralUiCertificateChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralUiCertificateChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiCertificateChoicesResponse(rsp)
}

// GetSystemGeneralUiRestartWithResponse request returning *GetSystemGeneralUiRestartResponse
func (c *ClientWithResponses) GetSystemGeneralUiRestartWithResponse(ctx context.Context) (*GetSystemGeneralUiRestartResponse, error) {
	rsp, err := c.GetSystemGeneralUiRestart(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiRestartResponse(rsp)
}

// GetSystemGeneralUiV6addressChoicesWithResponse request returning *GetSystemGeneralUiV6addressChoicesResponse
func (c *ClientWithResponses) GetSystemGeneralUiV6addressChoicesWithResponse(ctx context.Context) (*GetSystemGeneralUiV6addressChoicesResponse, error) {
	rsp, err := c.GetSystemGeneralUiV6addressChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemGeneralUiV6addressChoicesResponse(rsp)
}

// GetSystemInfoWithResponse request returning *GetSystemInfoResponse
func (c *ClientWithResponses) GetSystemInfoWithResponse(ctx context.Context) (*GetSystemInfoResponse, error) {
	rsp, err := c.GetSystemInfo(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemInfoResponse(rsp)
}

// GetSystemIsFreenasWithResponse request returning *GetSystemIsFreenasResponse
func (c *ClientWithResponses) GetSystemIsFreenasWithResponse(ctx context.Context) (*GetSystemIsFreenasResponse, error) {
	rsp, err := c.GetSystemIsFreenas(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemIsFreenasResponse(rsp)
}

// GetSystemLegacyUiEnabledWithResponse request returning *GetSystemLegacyUiEnabledResponse
func (c *ClientWithResponses) GetSystemLegacyUiEnabledWithResponse(ctx context.Context) (*GetSystemLegacyUiEnabledResponse, error) {
	rsp, err := c.GetSystemLegacyUiEnabled(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemLegacyUiEnabledResponse(rsp)
}

// PostSystemLicenseUpdateWithBodyWithResponse request with arbitrary body returning *PostSystemLicenseUpdateResponse
func (c *ClientWithResponses) PostSystemLicenseUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemLicenseUpdateResponse, error) {
	rsp, err := c.PostSystemLicenseUpdateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemLicenseUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostSystemLicenseUpdateWithResponse(ctx context.Context, body PostSystemLicenseUpdateJSONRequestBody) (*PostSystemLicenseUpdateResponse, error) {
	rsp, err := c.PostSystemLicenseUpdate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemLicenseUpdateResponse(rsp)
}

// GetSystemNtpserverWithResponse request returning *GetSystemNtpserverResponse
func (c *ClientWithResponses) GetSystemNtpserverWithResponse(ctx context.Context, params *GetSystemNtpserverParams) (*GetSystemNtpserverResponse, error) {
	rsp, err := c.GetSystemNtpserver(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemNtpserverResponse(rsp)
}

// PostSystemNtpserverWithBodyWithResponse request with arbitrary body returning *PostSystemNtpserverResponse
func (c *ClientWithResponses) PostSystemNtpserverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemNtpserverResponse, error) {
	rsp, err := c.PostSystemNtpserverWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemNtpserverResponse(rsp)
}

func (c *ClientWithResponses) PostSystemNtpserverWithResponse(ctx context.Context, body PostSystemNtpserverJSONRequestBody) (*PostSystemNtpserverResponse, error) {
	rsp, err := c.PostSystemNtpserver(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemNtpserverResponse(rsp)
}

// DeleteSystemNtpserverIdIdWithResponse request returning *DeleteSystemNtpserverIdIdResponse
func (c *ClientWithResponses) DeleteSystemNtpserverIdIdWithResponse(ctx context.Context, id int) (*DeleteSystemNtpserverIdIdResponse, error) {
	rsp, err := c.DeleteSystemNtpserverIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSystemNtpserverIdIdResponse(rsp)
}

// GetSystemNtpserverIdIdWithResponse request returning *GetSystemNtpserverIdIdResponse
func (c *ClientWithResponses) GetSystemNtpserverIdIdWithResponse(ctx context.Context, id []interface{}, params *GetSystemNtpserverIdIdParams) (*GetSystemNtpserverIdIdResponse, error) {
	rsp, err := c.GetSystemNtpserverIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemNtpserverIdIdResponse(rsp)
}

// PutSystemNtpserverIdIdWithBodyWithResponse request with arbitrary body returning *PutSystemNtpserverIdIdResponse
func (c *ClientWithResponses) PutSystemNtpserverIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutSystemNtpserverIdIdResponse, error) {
	rsp, err := c.PutSystemNtpserverIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemNtpserverIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutSystemNtpserverIdIdWithResponse(ctx context.Context, id int, body PutSystemNtpserverIdIdJSONRequestBody) (*PutSystemNtpserverIdIdResponse, error) {
	rsp, err := c.PutSystemNtpserverIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemNtpserverIdIdResponse(rsp)
}

// GetSystemNtpserverTestNtpServerWithResponse request returning *GetSystemNtpserverTestNtpServerResponse
func (c *ClientWithResponses) GetSystemNtpserverTestNtpServerWithResponse(ctx context.Context) (*GetSystemNtpserverTestNtpServerResponse, error) {
	rsp, err := c.GetSystemNtpserverTestNtpServer(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemNtpserverTestNtpServerResponse(rsp)
}

// GetSystemProductNameWithResponse request returning *GetSystemProductNameResponse
func (c *ClientWithResponses) GetSystemProductNameWithResponse(ctx context.Context) (*GetSystemProductNameResponse, error) {
	rsp, err := c.GetSystemProductName(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemProductNameResponse(rsp)
}

// GetSystemReadyWithResponse request returning *GetSystemReadyResponse
func (c *ClientWithResponses) GetSystemReadyWithResponse(ctx context.Context) (*GetSystemReadyResponse, error) {
	rsp, err := c.GetSystemReady(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemReadyResponse(rsp)
}

// PostSystemRebootWithBodyWithResponse request with arbitrary body returning *PostSystemRebootResponse
func (c *ClientWithResponses) PostSystemRebootWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemRebootResponse, error) {
	rsp, err := c.PostSystemRebootWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemRebootResponse(rsp)
}

func (c *ClientWithResponses) PostSystemRebootWithResponse(ctx context.Context, body PostSystemRebootJSONRequestBody) (*PostSystemRebootResponse, error) {
	rsp, err := c.PostSystemReboot(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemRebootResponse(rsp)
}

// PostSystemShutdownWithBodyWithResponse request with arbitrary body returning *PostSystemShutdownResponse
func (c *ClientWithResponses) PostSystemShutdownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostSystemShutdownResponse, error) {
	rsp, err := c.PostSystemShutdownWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemShutdownResponse(rsp)
}

func (c *ClientWithResponses) PostSystemShutdownWithResponse(ctx context.Context, body PostSystemShutdownJSONRequestBody) (*PostSystemShutdownResponse, error) {
	rsp, err := c.PostSystemShutdown(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemShutdownResponse(rsp)
}

// GetSystemStateWithResponse request returning *GetSystemStateResponse
func (c *ClientWithResponses) GetSystemStateWithResponse(ctx context.Context) (*GetSystemStateResponse, error) {
	rsp, err := c.GetSystemState(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemStateResponse(rsp)
}

// GetSystemVersionWithResponse request returning *GetSystemVersionResponse
func (c *ClientWithResponses) GetSystemVersionWithResponse(ctx context.Context) (*GetSystemVersionResponse, error) {
	rsp, err := c.GetSystemVersion(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemVersionResponse(rsp)
}

// GetSystemdatasetWithResponse request returning *GetSystemdatasetResponse
func (c *ClientWithResponses) GetSystemdatasetWithResponse(ctx context.Context) (*GetSystemdatasetResponse, error) {
	rsp, err := c.GetSystemdataset(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemdatasetResponse(rsp)
}

// PutSystemdatasetWithBodyWithResponse request with arbitrary body returning *PutSystemdatasetResponse
func (c *ClientWithResponses) PutSystemdatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutSystemdatasetResponse, error) {
	rsp, err := c.PutSystemdatasetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemdatasetResponse(rsp)
}

func (c *ClientWithResponses) PutSystemdatasetWithResponse(ctx context.Context, body PutSystemdatasetJSONRequestBody) (*PutSystemdatasetResponse, error) {
	rsp, err := c.PutSystemdataset(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutSystemdatasetResponse(rsp)
}

// GetTftpWithResponse request returning *GetTftpResponse
func (c *ClientWithResponses) GetTftpWithResponse(ctx context.Context) (*GetTftpResponse, error) {
	rsp, err := c.GetTftp(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetTftpResponse(rsp)
}

// PutTftpWithBodyWithResponse request with arbitrary body returning *PutTftpResponse
func (c *ClientWithResponses) PutTftpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutTftpResponse, error) {
	rsp, err := c.PutTftpWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutTftpResponse(rsp)
}

func (c *ClientWithResponses) PutTftpWithResponse(ctx context.Context, body PutTftpJSONRequestBody) (*PutTftpResponse, error) {
	rsp, err := c.PutTftp(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutTftpResponse(rsp)
}

// GetTunableWithResponse request returning *GetTunableResponse
func (c *ClientWithResponses) GetTunableWithResponse(ctx context.Context, params *GetTunableParams) (*GetTunableResponse, error) {
	rsp, err := c.GetTunable(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTunableResponse(rsp)
}

// PostTunableWithBodyWithResponse request with arbitrary body returning *PostTunableResponse
func (c *ClientWithResponses) PostTunableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostTunableResponse, error) {
	rsp, err := c.PostTunableWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostTunableResponse(rsp)
}

func (c *ClientWithResponses) PostTunableWithResponse(ctx context.Context, body PostTunableJSONRequestBody) (*PostTunableResponse, error) {
	rsp, err := c.PostTunable(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostTunableResponse(rsp)
}

// DeleteTunableIdIdWithResponse request returning *DeleteTunableIdIdResponse
func (c *ClientWithResponses) DeleteTunableIdIdWithResponse(ctx context.Context, id int) (*DeleteTunableIdIdResponse, error) {
	rsp, err := c.DeleteTunableIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTunableIdIdResponse(rsp)
}

// GetTunableIdIdWithResponse request returning *GetTunableIdIdResponse
func (c *ClientWithResponses) GetTunableIdIdWithResponse(ctx context.Context, id []interface{}, params *GetTunableIdIdParams) (*GetTunableIdIdResponse, error) {
	rsp, err := c.GetTunableIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTunableIdIdResponse(rsp)
}

// PutTunableIdIdWithBodyWithResponse request with arbitrary body returning *PutTunableIdIdResponse
func (c *ClientWithResponses) PutTunableIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutTunableIdIdResponse, error) {
	rsp, err := c.PutTunableIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutTunableIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutTunableIdIdWithResponse(ctx context.Context, id int, body PutTunableIdIdJSONRequestBody) (*PutTunableIdIdResponse, error) {
	rsp, err := c.PutTunableIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutTunableIdIdResponse(rsp)
}

// PostUpdateCheckAvailableWithBodyWithResponse request with arbitrary body returning *PostUpdateCheckAvailableResponse
func (c *ClientWithResponses) PostUpdateCheckAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateCheckAvailableResponse, error) {
	rsp, err := c.PostUpdateCheckAvailableWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateCheckAvailableResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateCheckAvailableWithResponse(ctx context.Context, body PostUpdateCheckAvailableJSONRequestBody) (*PostUpdateCheckAvailableResponse, error) {
	rsp, err := c.PostUpdateCheckAvailable(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateCheckAvailableResponse(rsp)
}

// GetUpdateDownloadWithResponse request returning *GetUpdateDownloadResponse
func (c *ClientWithResponses) GetUpdateDownloadWithResponse(ctx context.Context) (*GetUpdateDownloadResponse, error) {
	rsp, err := c.GetUpdateDownload(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateDownloadResponse(rsp)
}

// PostUpdateGetPendingWithBodyWithResponse request with arbitrary body returning *PostUpdateGetPendingResponse
func (c *ClientWithResponses) PostUpdateGetPendingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateGetPendingResponse, error) {
	rsp, err := c.PostUpdateGetPendingWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateGetPendingResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateGetPendingWithResponse(ctx context.Context, body PostUpdateGetPendingJSONRequestBody) (*PostUpdateGetPendingResponse, error) {
	rsp, err := c.PostUpdateGetPending(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateGetPendingResponse(rsp)
}

// GetUpdateGetTrainsWithResponse request returning *GetUpdateGetTrainsResponse
func (c *ClientWithResponses) GetUpdateGetTrainsWithResponse(ctx context.Context) (*GetUpdateGetTrainsResponse, error) {
	rsp, err := c.GetUpdateGetTrains(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateGetTrainsResponse(rsp)
}

// PostUpdateManualWithBodyWithResponse request with arbitrary body returning *PostUpdateManualResponse
func (c *ClientWithResponses) PostUpdateManualWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateManualResponse, error) {
	rsp, err := c.PostUpdateManualWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateManualResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateManualWithResponse(ctx context.Context, body PostUpdateManualJSONRequestBody) (*PostUpdateManualResponse, error) {
	rsp, err := c.PostUpdateManual(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateManualResponse(rsp)
}

// PostUpdateSetTrainWithBodyWithResponse request with arbitrary body returning *PostUpdateSetTrainResponse
func (c *ClientWithResponses) PostUpdateSetTrainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateSetTrainResponse, error) {
	rsp, err := c.PostUpdateSetTrainWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateSetTrainResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateSetTrainWithResponse(ctx context.Context, body PostUpdateSetTrainJSONRequestBody) (*PostUpdateSetTrainResponse, error) {
	rsp, err := c.PostUpdateSetTrain(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateSetTrainResponse(rsp)
}

// PostUpdateUpdateWithBodyWithResponse request with arbitrary body returning *PostUpdateUpdateResponse
func (c *ClientWithResponses) PostUpdateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUpdateUpdateResponse, error) {
	rsp, err := c.PostUpdateUpdateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateUpdateWithResponse(ctx context.Context, body PostUpdateUpdateJSONRequestBody) (*PostUpdateUpdateResponse, error) {
	rsp, err := c.PostUpdateUpdate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateUpdateResponse(rsp)
}

// GetUpsWithResponse request returning *GetUpsResponse
func (c *ClientWithResponses) GetUpsWithResponse(ctx context.Context) (*GetUpsResponse, error) {
	rsp, err := c.GetUps(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUpsResponse(rsp)
}

// PutUpsWithBodyWithResponse request with arbitrary body returning *PutUpsResponse
func (c *ClientWithResponses) PutUpsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutUpsResponse, error) {
	rsp, err := c.PutUpsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutUpsResponse(rsp)
}

func (c *ClientWithResponses) PutUpsWithResponse(ctx context.Context, body PutUpsJSONRequestBody) (*PutUpsResponse, error) {
	rsp, err := c.PutUps(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutUpsResponse(rsp)
}

// GetUpsDriverChoicesWithResponse request returning *GetUpsDriverChoicesResponse
func (c *ClientWithResponses) GetUpsDriverChoicesWithResponse(ctx context.Context) (*GetUpsDriverChoicesResponse, error) {
	rsp, err := c.GetUpsDriverChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUpsDriverChoicesResponse(rsp)
}

// GetUpsPortChoicesWithResponse request returning *GetUpsPortChoicesResponse
func (c *ClientWithResponses) GetUpsPortChoicesWithResponse(ctx context.Context) (*GetUpsPortChoicesResponse, error) {
	rsp, err := c.GetUpsPortChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUpsPortChoicesResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// PostUserWithBodyWithResponse request with arbitrary body returning *PostUserResponse
func (c *ClientWithResponses) PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUserResponse, error) {
	rsp, err := c.PostUserWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

func (c *ClientWithResponses) PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody) (*PostUserResponse, error) {
	rsp, err := c.PostUser(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

// GetUserGetNextUidWithResponse request returning *GetUserGetNextUidResponse
func (c *ClientWithResponses) GetUserGetNextUidWithResponse(ctx context.Context) (*GetUserGetNextUidResponse, error) {
	rsp, err := c.GetUserGetNextUid(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGetNextUidResponse(rsp)
}

// PostUserGetUserObjWithBodyWithResponse request with arbitrary body returning *PostUserGetUserObjResponse
func (c *ClientWithResponses) PostUserGetUserObjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostUserGetUserObjResponse, error) {
	rsp, err := c.PostUserGetUserObjWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUserGetUserObjResponse(rsp)
}

func (c *ClientWithResponses) PostUserGetUserObjWithResponse(ctx context.Context, body PostUserGetUserObjJSONRequestBody) (*PostUserGetUserObjResponse, error) {
	rsp, err := c.PostUserGetUserObj(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUserGetUserObjResponse(rsp)
}

// GetUserHasRootPasswordWithResponse request returning *GetUserHasRootPasswordResponse
func (c *ClientWithResponses) GetUserHasRootPasswordWithResponse(ctx context.Context) (*GetUserHasRootPasswordResponse, error) {
	rsp, err := c.GetUserHasRootPassword(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUserHasRootPasswordResponse(rsp)
}

// DeleteUserIdIdWithBodyWithResponse request with arbitrary body returning *DeleteUserIdIdResponse
func (c *ClientWithResponses) DeleteUserIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteUserIdIdResponse, error) {
	rsp, err := c.DeleteUserIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserIdIdWithResponse(ctx context.Context, id int, body DeleteUserIdIdJSONRequestBody) (*DeleteUserIdIdResponse, error) {
	rsp, err := c.DeleteUserIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserIdIdResponse(rsp)
}

// GetUserIdIdWithResponse request returning *GetUserIdIdResponse
func (c *ClientWithResponses) GetUserIdIdWithResponse(ctx context.Context, id []interface{}, params *GetUserIdIdParams) (*GetUserIdIdResponse, error) {
	rsp, err := c.GetUserIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUserIdIdResponse(rsp)
}

// PutUserIdIdWithBodyWithResponse request with arbitrary body returning *PutUserIdIdResponse
func (c *ClientWithResponses) PutUserIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutUserIdIdResponse, error) {
	rsp, err := c.PutUserIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutUserIdIdWithResponse(ctx context.Context, id int, body PutUserIdIdJSONRequestBody) (*PutUserIdIdResponse, error) {
	rsp, err := c.PutUserIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdIdResponse(rsp)
}

// PostUserIdIdPopAttributeWithBodyWithResponse request with arbitrary body returning *PostUserIdIdPopAttributeResponse
func (c *ClientWithResponses) PostUserIdIdPopAttributeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostUserIdIdPopAttributeResponse, error) {
	rsp, err := c.PostUserIdIdPopAttributeWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdIdPopAttributeResponse(rsp)
}

func (c *ClientWithResponses) PostUserIdIdPopAttributeWithResponse(ctx context.Context, id int, body PostUserIdIdPopAttributeJSONRequestBody) (*PostUserIdIdPopAttributeResponse, error) {
	rsp, err := c.PostUserIdIdPopAttribute(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdIdPopAttributeResponse(rsp)
}

// PostUserIdIdSetAttributeWithBodyWithResponse request with arbitrary body returning *PostUserIdIdSetAttributeResponse
func (c *ClientWithResponses) PostUserIdIdSetAttributeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostUserIdIdSetAttributeResponse, error) {
	rsp, err := c.PostUserIdIdSetAttributeWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdIdSetAttributeResponse(rsp)
}

func (c *ClientWithResponses) PostUserIdIdSetAttributeWithResponse(ctx context.Context, id int, body PostUserIdIdSetAttributeJSONRequestBody) (*PostUserIdIdSetAttributeResponse, error) {
	rsp, err := c.PostUserIdIdSetAttribute(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdIdSetAttributeResponse(rsp)
}

// GetUserShellChoicesWithResponse request returning *GetUserShellChoicesResponse
func (c *ClientWithResponses) GetUserShellChoicesWithResponse(ctx context.Context) (*GetUserShellChoicesResponse, error) {
	rsp, err := c.GetUserShellChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUserShellChoicesResponse(rsp)
}

// GetVmWithResponse request returning *GetVmResponse
func (c *ClientWithResponses) GetVmWithResponse(ctx context.Context, params *GetVmParams) (*GetVmResponse, error) {
	rsp, err := c.GetVm(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVmResponse(rsp)
}

// PostVmWithBodyWithResponse request with arbitrary body returning *PostVmResponse
func (c *ClientWithResponses) PostVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmResponse, error) {
	rsp, err := c.PostVmWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmResponse(rsp)
}

func (c *ClientWithResponses) PostVmWithResponse(ctx context.Context, body PostVmJSONRequestBody) (*PostVmResponse, error) {
	rsp, err := c.PostVm(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmResponse(rsp)
}

// GetVmDeviceWithResponse request returning *GetVmDeviceResponse
func (c *ClientWithResponses) GetVmDeviceWithResponse(ctx context.Context, params *GetVmDeviceParams) (*GetVmDeviceResponse, error) {
	rsp, err := c.GetVmDevice(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDeviceResponse(rsp)
}

// PostVmDeviceWithBodyWithResponse request with arbitrary body returning *PostVmDeviceResponse
func (c *ClientWithResponses) PostVmDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmDeviceResponse, error) {
	rsp, err := c.PostVmDeviceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmDeviceResponse(rsp)
}

func (c *ClientWithResponses) PostVmDeviceWithResponse(ctx context.Context, body PostVmDeviceJSONRequestBody) (*PostVmDeviceResponse, error) {
	rsp, err := c.PostVmDevice(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmDeviceResponse(rsp)
}

// DeleteVmDeviceIdIdWithBodyWithResponse request with arbitrary body returning *DeleteVmDeviceIdIdResponse
func (c *ClientWithResponses) DeleteVmDeviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*DeleteVmDeviceIdIdResponse, error) {
	rsp, err := c.DeleteVmDeviceIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmDeviceIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteVmDeviceIdIdWithResponse(ctx context.Context, id int, body DeleteVmDeviceIdIdJSONRequestBody) (*DeleteVmDeviceIdIdResponse, error) {
	rsp, err := c.DeleteVmDeviceIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmDeviceIdIdResponse(rsp)
}

// GetVmDeviceIdIdWithResponse request returning *GetVmDeviceIdIdResponse
func (c *ClientWithResponses) GetVmDeviceIdIdWithResponse(ctx context.Context, id []interface{}, params *GetVmDeviceIdIdParams) (*GetVmDeviceIdIdResponse, error) {
	rsp, err := c.GetVmDeviceIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDeviceIdIdResponse(rsp)
}

// PutVmDeviceIdIdWithBodyWithResponse request with arbitrary body returning *PutVmDeviceIdIdResponse
func (c *ClientWithResponses) PutVmDeviceIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutVmDeviceIdIdResponse, error) {
	rsp, err := c.PutVmDeviceIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutVmDeviceIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutVmDeviceIdIdWithResponse(ctx context.Context, id int, body PutVmDeviceIdIdJSONRequestBody) (*PutVmDeviceIdIdResponse, error) {
	rsp, err := c.PutVmDeviceIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutVmDeviceIdIdResponse(rsp)
}

// GetVmDeviceNicAttachChoicesWithResponse request returning *GetVmDeviceNicAttachChoicesResponse
func (c *ClientWithResponses) GetVmDeviceNicAttachChoicesWithResponse(ctx context.Context) (*GetVmDeviceNicAttachChoicesResponse, error) {
	rsp, err := c.GetVmDeviceNicAttachChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDeviceNicAttachChoicesResponse(rsp)
}

// GetVmDeviceVncBindChoicesWithResponse request returning *GetVmDeviceVncBindChoicesResponse
func (c *ClientWithResponses) GetVmDeviceVncBindChoicesWithResponse(ctx context.Context) (*GetVmDeviceVncBindChoicesResponse, error) {
	rsp, err := c.GetVmDeviceVncBindChoices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVmDeviceVncBindChoicesResponse(rsp)
}

// GetVmFlagsWithResponse request returning *GetVmFlagsResponse
func (c *ClientWithResponses) GetVmFlagsWithResponse(ctx context.Context) (*GetVmFlagsResponse, error) {
	rsp, err := c.GetVmFlags(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVmFlagsResponse(rsp)
}

// PostVmGetAttachedIfaceWithBodyWithResponse request with arbitrary body returning *PostVmGetAttachedIfaceResponse
func (c *ClientWithResponses) PostVmGetAttachedIfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmGetAttachedIfaceResponse, error) {
	rsp, err := c.PostVmGetAttachedIfaceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetAttachedIfaceResponse(rsp)
}

func (c *ClientWithResponses) PostVmGetAttachedIfaceWithResponse(ctx context.Context, body PostVmGetAttachedIfaceJSONRequestBody) (*PostVmGetAttachedIfaceResponse, error) {
	rsp, err := c.PostVmGetAttachedIface(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetAttachedIfaceResponse(rsp)
}

// PostVmGetAvailableMemoryWithBodyWithResponse request with arbitrary body returning *PostVmGetAvailableMemoryResponse
func (c *ClientWithResponses) PostVmGetAvailableMemoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmGetAvailableMemoryResponse, error) {
	rsp, err := c.PostVmGetAvailableMemoryWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetAvailableMemoryResponse(rsp)
}

func (c *ClientWithResponses) PostVmGetAvailableMemoryWithResponse(ctx context.Context, body PostVmGetAvailableMemoryJSONRequestBody) (*PostVmGetAvailableMemoryResponse, error) {
	rsp, err := c.PostVmGetAvailableMemory(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetAvailableMemoryResponse(rsp)
}

// PostVmGetConsoleWithBodyWithResponse request with arbitrary body returning *PostVmGetConsoleResponse
func (c *ClientWithResponses) PostVmGetConsoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmGetConsoleResponse, error) {
	rsp, err := c.PostVmGetConsoleWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetConsoleResponse(rsp)
}

func (c *ClientWithResponses) PostVmGetConsoleWithResponse(ctx context.Context, body PostVmGetConsoleJSONRequestBody) (*PostVmGetConsoleResponse, error) {
	rsp, err := c.PostVmGetConsole(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetConsoleResponse(rsp)
}

// GetVmGetVmemoryInUseWithResponse request returning *GetVmGetVmemoryInUseResponse
func (c *ClientWithResponses) GetVmGetVmemoryInUseWithResponse(ctx context.Context) (*GetVmGetVmemoryInUseResponse, error) {
	rsp, err := c.GetVmGetVmemoryInUse(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVmGetVmemoryInUseResponse(rsp)
}

// PostVmGetVncWithBodyWithResponse request with arbitrary body returning *PostVmGetVncResponse
func (c *ClientWithResponses) PostVmGetVncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmGetVncResponse, error) {
	rsp, err := c.PostVmGetVncWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetVncResponse(rsp)
}

func (c *ClientWithResponses) PostVmGetVncWithResponse(ctx context.Context, body PostVmGetVncJSONRequestBody) (*PostVmGetVncResponse, error) {
	rsp, err := c.PostVmGetVnc(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmGetVncResponse(rsp)
}

// GetVmGetVncIpv4WithResponse request returning *GetVmGetVncIpv4Response
func (c *ClientWithResponses) GetVmGetVncIpv4WithResponse(ctx context.Context) (*GetVmGetVncIpv4Response, error) {
	rsp, err := c.GetVmGetVncIpv4(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVmGetVncIpv4Response(rsp)
}

// DeleteVmIdIdWithResponse request returning *DeleteVmIdIdResponse
func (c *ClientWithResponses) DeleteVmIdIdWithResponse(ctx context.Context, id int) (*DeleteVmIdIdResponse, error) {
	rsp, err := c.DeleteVmIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmIdIdResponse(rsp)
}

// GetVmIdIdWithResponse request returning *GetVmIdIdResponse
func (c *ClientWithResponses) GetVmIdIdWithResponse(ctx context.Context, id []interface{}, params *GetVmIdIdParams) (*GetVmIdIdResponse, error) {
	rsp, err := c.GetVmIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVmIdIdResponse(rsp)
}

// PutVmIdIdWithBodyWithResponse request with arbitrary body returning *PutVmIdIdResponse
func (c *ClientWithResponses) PutVmIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutVmIdIdResponse, error) {
	rsp, err := c.PutVmIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutVmIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutVmIdIdWithResponse(ctx context.Context, id int, body PutVmIdIdJSONRequestBody) (*PutVmIdIdResponse, error) {
	rsp, err := c.PutVmIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutVmIdIdResponse(rsp)
}

// PostVmIdIdCloneWithBodyWithResponse request with arbitrary body returning *PostVmIdIdCloneResponse
func (c *ClientWithResponses) PostVmIdIdCloneWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdCloneResponse, error) {
	rsp, err := c.PostVmIdIdCloneWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdCloneResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdCloneWithResponse(ctx context.Context, id int, body PostVmIdIdCloneJSONRequestBody) (*PostVmIdIdCloneResponse, error) {
	rsp, err := c.PostVmIdIdClone(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdCloneResponse(rsp)
}

// PostVmIdIdRestartWithBodyWithResponse request with arbitrary body returning *PostVmIdIdRestartResponse
func (c *ClientWithResponses) PostVmIdIdRestartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdRestartResponse, error) {
	rsp, err := c.PostVmIdIdRestartWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdRestartResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdRestartWithResponse(ctx context.Context, id int, body PostVmIdIdRestartJSONRequestBody) (*PostVmIdIdRestartResponse, error) {
	rsp, err := c.PostVmIdIdRestart(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdRestartResponse(rsp)
}

// PostVmIdIdStartWithBodyWithResponse request with arbitrary body returning *PostVmIdIdStartResponse
func (c *ClientWithResponses) PostVmIdIdStartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdStartResponse, error) {
	rsp, err := c.PostVmIdIdStartWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStartResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdStartWithResponse(ctx context.Context, id int, body PostVmIdIdStartJSONRequestBody) (*PostVmIdIdStartResponse, error) {
	rsp, err := c.PostVmIdIdStart(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStartResponse(rsp)
}

// PostVmIdIdStatusWithBodyWithResponse request with arbitrary body returning *PostVmIdIdStatusResponse
func (c *ClientWithResponses) PostVmIdIdStatusWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdStatusResponse, error) {
	rsp, err := c.PostVmIdIdStatusWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStatusResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdStatusWithResponse(ctx context.Context, id int, body PostVmIdIdStatusJSONRequestBody) (*PostVmIdIdStatusResponse, error) {
	rsp, err := c.PostVmIdIdStatus(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStatusResponse(rsp)
}

// PostVmIdIdStopWithBodyWithResponse request with arbitrary body returning *PostVmIdIdStopResponse
func (c *ClientWithResponses) PostVmIdIdStopWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PostVmIdIdStopResponse, error) {
	rsp, err := c.PostVmIdIdStopWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStopResponse(rsp)
}

func (c *ClientWithResponses) PostVmIdIdStopWithResponse(ctx context.Context, id int, body PostVmIdIdStopJSONRequestBody) (*PostVmIdIdStopResponse, error) {
	rsp, err := c.PostVmIdIdStop(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmIdIdStopResponse(rsp)
}

// GetVmIdentifyHypervisorWithResponse request returning *GetVmIdentifyHypervisorResponse
func (c *ClientWithResponses) GetVmIdentifyHypervisorWithResponse(ctx context.Context) (*GetVmIdentifyHypervisorResponse, error) {
	rsp, err := c.GetVmIdentifyHypervisor(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVmIdentifyHypervisorResponse(rsp)
}

// GetVmRandomMacWithResponse request returning *GetVmRandomMacResponse
func (c *ClientWithResponses) GetVmRandomMacWithResponse(ctx context.Context) (*GetVmRandomMacResponse, error) {
	rsp, err := c.GetVmRandomMac(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVmRandomMacResponse(rsp)
}

// GetVmVncPortWizardWithResponse request returning *GetVmVncPortWizardResponse
func (c *ClientWithResponses) GetVmVncPortWizardWithResponse(ctx context.Context) (*GetVmVncPortWizardResponse, error) {
	rsp, err := c.GetVmVncPortWizard(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetVmVncPortWizardResponse(rsp)
}

// GetVmwareWithResponse request returning *GetVmwareResponse
func (c *ClientWithResponses) GetVmwareWithResponse(ctx context.Context, params *GetVmwareParams) (*GetVmwareResponse, error) {
	rsp, err := c.GetVmware(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVmwareResponse(rsp)
}

// PostVmwareWithBodyWithResponse request with arbitrary body returning *PostVmwareResponse
func (c *ClientWithResponses) PostVmwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareResponse, error) {
	rsp, err := c.PostVmwareWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareWithResponse(ctx context.Context, body PostVmwareJSONRequestBody) (*PostVmwareResponse, error) {
	rsp, err := c.PostVmware(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareResponse(rsp)
}

// PostVmwareDatasetHasVmsWithBodyWithResponse request with arbitrary body returning *PostVmwareDatasetHasVmsResponse
func (c *ClientWithResponses) PostVmwareDatasetHasVmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareDatasetHasVmsResponse, error) {
	rsp, err := c.PostVmwareDatasetHasVmsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareDatasetHasVmsResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareDatasetHasVmsWithResponse(ctx context.Context, body PostVmwareDatasetHasVmsJSONRequestBody) (*PostVmwareDatasetHasVmsResponse, error) {
	rsp, err := c.PostVmwareDatasetHasVms(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareDatasetHasVmsResponse(rsp)
}

// PostVmwareGetDatastoresWithBodyWithResponse request with arbitrary body returning *PostVmwareGetDatastoresResponse
func (c *ClientWithResponses) PostVmwareGetDatastoresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareGetDatastoresResponse, error) {
	rsp, err := c.PostVmwareGetDatastoresWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareGetDatastoresResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareGetDatastoresWithResponse(ctx context.Context, body PostVmwareGetDatastoresJSONRequestBody) (*PostVmwareGetDatastoresResponse, error) {
	rsp, err := c.PostVmwareGetDatastores(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareGetDatastoresResponse(rsp)
}

// PostVmwareGetVirtualMachinesWithBodyWithResponse request with arbitrary body returning *PostVmwareGetVirtualMachinesResponse
func (c *ClientWithResponses) PostVmwareGetVirtualMachinesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareGetVirtualMachinesResponse, error) {
	rsp, err := c.PostVmwareGetVirtualMachinesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareGetVirtualMachinesResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareGetVirtualMachinesWithResponse(ctx context.Context, body PostVmwareGetVirtualMachinesJSONRequestBody) (*PostVmwareGetVirtualMachinesResponse, error) {
	rsp, err := c.PostVmwareGetVirtualMachines(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareGetVirtualMachinesResponse(rsp)
}

// DeleteVmwareIdIdWithResponse request returning *DeleteVmwareIdIdResponse
func (c *ClientWithResponses) DeleteVmwareIdIdWithResponse(ctx context.Context, id int) (*DeleteVmwareIdIdResponse, error) {
	rsp, err := c.DeleteVmwareIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmwareIdIdResponse(rsp)
}

// GetVmwareIdIdWithResponse request returning *GetVmwareIdIdResponse
func (c *ClientWithResponses) GetVmwareIdIdWithResponse(ctx context.Context, id []interface{}, params *GetVmwareIdIdParams) (*GetVmwareIdIdResponse, error) {
	rsp, err := c.GetVmwareIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVmwareIdIdResponse(rsp)
}

// PutVmwareIdIdWithBodyWithResponse request with arbitrary body returning *PutVmwareIdIdResponse
func (c *ClientWithResponses) PutVmwareIdIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader) (*PutVmwareIdIdResponse, error) {
	rsp, err := c.PutVmwareIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutVmwareIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutVmwareIdIdWithResponse(ctx context.Context, id int, body PutVmwareIdIdJSONRequestBody) (*PutVmwareIdIdResponse, error) {
	rsp, err := c.PutVmwareIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutVmwareIdIdResponse(rsp)
}

// PostVmwareMatchDatastoresWithDatasetsWithBodyWithResponse request with arbitrary body returning *PostVmwareMatchDatastoresWithDatasetsResponse
func (c *ClientWithResponses) PostVmwareMatchDatastoresWithDatasetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostVmwareMatchDatastoresWithDatasetsResponse, error) {
	rsp, err := c.PostVmwareMatchDatastoresWithDatasetsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareMatchDatastoresWithDatasetsResponse(rsp)
}

func (c *ClientWithResponses) PostVmwareMatchDatastoresWithDatasetsWithResponse(ctx context.Context, body PostVmwareMatchDatastoresWithDatasetsJSONRequestBody) (*PostVmwareMatchDatastoresWithDatasetsResponse, error) {
	rsp, err := c.PostVmwareMatchDatastoresWithDatasets(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostVmwareMatchDatastoresWithDatasetsResponse(rsp)
}

// GetWebdavWithResponse request returning *GetWebdavResponse
func (c *ClientWithResponses) GetWebdavWithResponse(ctx context.Context) (*GetWebdavResponse, error) {
	rsp, err := c.GetWebdav(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetWebdavResponse(rsp)
}

// PutWebdavWithBodyWithResponse request with arbitrary body returning *PutWebdavResponse
func (c *ClientWithResponses) PutWebdavWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PutWebdavResponse, error) {
	rsp, err := c.PutWebdavWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutWebdavResponse(rsp)
}

func (c *ClientWithResponses) PutWebdavWithResponse(ctx context.Context, body PutWebdavJSONRequestBody) (*PutWebdavResponse, error) {
	rsp, err := c.PutWebdav(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePutWebdavResponse(rsp)
}

// GetWebuiImageWithResponse request returning *GetWebuiImageResponse
func (c *ClientWithResponses) GetWebuiImageWithResponse(ctx context.Context, params *GetWebuiImageParams) (*GetWebuiImageResponse, error) {
	rsp, err := c.GetWebuiImage(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWebuiImageResponse(rsp)
}

// DeleteWebuiImageIdIdWithResponse request returning *DeleteWebuiImageIdIdResponse
func (c *ClientWithResponses) DeleteWebuiImageIdIdWithResponse(ctx context.Context, id int) (*DeleteWebuiImageIdIdResponse, error) {
	rsp, err := c.DeleteWebuiImageIdId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebuiImageIdIdResponse(rsp)
}

// GetWebuiImageIdIdWithResponse request returning *GetWebuiImageIdIdResponse
func (c *ClientWithResponses) GetWebuiImageIdIdWithResponse(ctx context.Context, id []interface{}, params *GetWebuiImageIdIdParams) (*GetWebuiImageIdIdResponse, error) {
	rsp, err := c.GetWebuiImageIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWebuiImageIdIdResponse(rsp)
}

// GetZfsSnapshotWithResponse request returning *GetZfsSnapshotResponse
func (c *ClientWithResponses) GetZfsSnapshotWithResponse(ctx context.Context, params *GetZfsSnapshotParams) (*GetZfsSnapshotResponse, error) {
	rsp, err := c.GetZfsSnapshot(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetZfsSnapshotResponse(rsp)
}

// PostZfsSnapshotWithBodyWithResponse request with arbitrary body returning *PostZfsSnapshotResponse
func (c *ClientWithResponses) PostZfsSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostZfsSnapshotResponse, error) {
	rsp, err := c.PostZfsSnapshotWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotResponse(rsp)
}

func (c *ClientWithResponses) PostZfsSnapshotWithResponse(ctx context.Context, body PostZfsSnapshotJSONRequestBody) (*PostZfsSnapshotResponse, error) {
	rsp, err := c.PostZfsSnapshot(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotResponse(rsp)
}

// PostZfsSnapshotCloneWithBodyWithResponse request with arbitrary body returning *PostZfsSnapshotCloneResponse
func (c *ClientWithResponses) PostZfsSnapshotCloneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostZfsSnapshotCloneResponse, error) {
	rsp, err := c.PostZfsSnapshotCloneWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotCloneResponse(rsp)
}

func (c *ClientWithResponses) PostZfsSnapshotCloneWithResponse(ctx context.Context, body PostZfsSnapshotCloneJSONRequestBody) (*PostZfsSnapshotCloneResponse, error) {
	rsp, err := c.PostZfsSnapshotClone(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotCloneResponse(rsp)
}

// DeleteZfsSnapshotIdIdWithBodyWithResponse request with arbitrary body returning *DeleteZfsSnapshotIdIdResponse
func (c *ClientWithResponses) DeleteZfsSnapshotIdIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*DeleteZfsSnapshotIdIdResponse, error) {
	rsp, err := c.DeleteZfsSnapshotIdIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteZfsSnapshotIdIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteZfsSnapshotIdIdWithResponse(ctx context.Context, id string, body DeleteZfsSnapshotIdIdJSONRequestBody) (*DeleteZfsSnapshotIdIdResponse, error) {
	rsp, err := c.DeleteZfsSnapshotIdId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteZfsSnapshotIdIdResponse(rsp)
}

// GetZfsSnapshotIdIdWithResponse request returning *GetZfsSnapshotIdIdResponse
func (c *ClientWithResponses) GetZfsSnapshotIdIdWithResponse(ctx context.Context, id []interface{}, params *GetZfsSnapshotIdIdParams) (*GetZfsSnapshotIdIdResponse, error) {
	rsp, err := c.GetZfsSnapshotIdId(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetZfsSnapshotIdIdResponse(rsp)
}

// PostZfsSnapshotRemoveWithBodyWithResponse request with arbitrary body returning *PostZfsSnapshotRemoveResponse
func (c *ClientWithResponses) PostZfsSnapshotRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostZfsSnapshotRemoveResponse, error) {
	rsp, err := c.PostZfsSnapshotRemoveWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostZfsSnapshotRemoveWithResponse(ctx context.Context, body PostZfsSnapshotRemoveJSONRequestBody) (*PostZfsSnapshotRemoveResponse, error) {
	rsp, err := c.PostZfsSnapshotRemove(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotRemoveResponse(rsp)
}

// PostZfsSnapshotRollbackWithBodyWithResponse request with arbitrary body returning *PostZfsSnapshotRollbackResponse
func (c *ClientWithResponses) PostZfsSnapshotRollbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostZfsSnapshotRollbackResponse, error) {
	rsp, err := c.PostZfsSnapshotRollbackWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotRollbackResponse(rsp)
}

func (c *ClientWithResponses) PostZfsSnapshotRollbackWithResponse(ctx context.Context, body PostZfsSnapshotRollbackJSONRequestBody) (*PostZfsSnapshotRollbackResponse, error) {
	rsp, err := c.PostZfsSnapshotRollback(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostZfsSnapshotRollbackResponse(rsp)
}

// ParseGetAcmeDnsAuthenticatorResponse parses an HTTP response from a GetAcmeDnsAuthenticatorWithResponse call
func ParseGetAcmeDnsAuthenticatorResponse(rsp *http.Response) (*GetAcmeDnsAuthenticatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAcmeDnsAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAcmeDnsAuthenticatorResponse parses an HTTP response from a PostAcmeDnsAuthenticatorWithResponse call
func ParsePostAcmeDnsAuthenticatorResponse(rsp *http.Response) (*PostAcmeDnsAuthenticatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAcmeDnsAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAcmeDnsAuthenticatorAuthenticatorSchemasResponse parses an HTTP response from a GetAcmeDnsAuthenticatorAuthenticatorSchemasWithResponse call
func ParseGetAcmeDnsAuthenticatorAuthenticatorSchemasResponse(rsp *http.Response) (*GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAcmeDnsAuthenticatorAuthenticatorSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteAcmeDnsAuthenticatorIdIdResponse parses an HTTP response from a DeleteAcmeDnsAuthenticatorIdIdWithResponse call
func ParseDeleteAcmeDnsAuthenticatorIdIdResponse(rsp *http.Response) (*DeleteAcmeDnsAuthenticatorIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAcmeDnsAuthenticatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAcmeDnsAuthenticatorIdIdResponse parses an HTTP response from a GetAcmeDnsAuthenticatorIdIdWithResponse call
func ParseGetAcmeDnsAuthenticatorIdIdResponse(rsp *http.Response) (*GetAcmeDnsAuthenticatorIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAcmeDnsAuthenticatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutAcmeDnsAuthenticatorIdIdResponse parses an HTTP response from a PutAcmeDnsAuthenticatorIdIdWithResponse call
func ParsePutAcmeDnsAuthenticatorIdIdResponse(rsp *http.Response) (*PutAcmeDnsAuthenticatorIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutAcmeDnsAuthenticatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectoryResponse parses an HTTP response from a GetActivedirectoryWithResponse call
func ParseGetActivedirectoryResponse(rsp *http.Response) (*GetActivedirectoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutActivedirectoryResponse parses an HTTP response from a PutActivedirectoryWithResponse call
func ParsePutActivedirectoryResponse(rsp *http.Response) (*PutActivedirectoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutActivedirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectoryChangeTrustAccountPwResponse parses an HTTP response from a GetActivedirectoryChangeTrustAccountPwWithResponse call
func ParseGetActivedirectoryChangeTrustAccountPwResponse(rsp *http.Response) (*GetActivedirectoryChangeTrustAccountPwResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryChangeTrustAccountPwResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectoryDomainInfoResponse parses an HTTP response from a GetActivedirectoryDomainInfoWithResponse call
func ParseGetActivedirectoryDomainInfoResponse(rsp *http.Response) (*GetActivedirectoryDomainInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryDomainInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectoryGetSpnListResponse parses an HTTP response from a GetActivedirectoryGetSpnListWithResponse call
func ParseGetActivedirectoryGetSpnListResponse(rsp *http.Response) (*GetActivedirectoryGetSpnListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryGetSpnListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectoryGetStateResponse parses an HTTP response from a GetActivedirectoryGetStateWithResponse call
func ParseGetActivedirectoryGetStateResponse(rsp *http.Response) (*GetActivedirectoryGetStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectoryIdmapBackendChoicesResponse parses an HTTP response from a GetActivedirectoryIdmapBackendChoicesWithResponse call
func ParseGetActivedirectoryIdmapBackendChoicesResponse(rsp *http.Response) (*GetActivedirectoryIdmapBackendChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryIdmapBackendChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostActivedirectoryLeaveResponse parses an HTTP response from a PostActivedirectoryLeaveWithResponse call
func ParsePostActivedirectoryLeaveResponse(rsp *http.Response) (*PostActivedirectoryLeaveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostActivedirectoryLeaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectoryNssInfoChoicesResponse parses an HTTP response from a GetActivedirectoryNssInfoChoicesWithResponse call
func ParseGetActivedirectoryNssInfoChoicesResponse(rsp *http.Response) (*GetActivedirectoryNssInfoChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryNssInfoChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectorySaslWrappingChoicesResponse parses an HTTP response from a GetActivedirectorySaslWrappingChoicesWithResponse call
func ParseGetActivedirectorySaslWrappingChoicesResponse(rsp *http.Response) (*GetActivedirectorySaslWrappingChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectorySaslWrappingChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectorySslChoicesResponse parses an HTTP response from a GetActivedirectorySslChoicesWithResponse call
func ParseGetActivedirectorySslChoicesResponse(rsp *http.Response) (*GetActivedirectorySslChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectorySslChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetActivedirectoryStartedResponse parses an HTTP response from a GetActivedirectoryStartedWithResponse call
func ParseGetActivedirectoryStartedResponse(rsp *http.Response) (*GetActivedirectoryStartedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivedirectoryStartedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAfpResponse parses an HTTP response from a GetAfpWithResponse call
func ParseGetAfpResponse(rsp *http.Response) (*GetAfpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAfpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutAfpResponse parses an HTTP response from a PutAfpWithResponse call
func ParsePutAfpResponse(rsp *http.Response) (*PutAfpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutAfpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAfpBindipChoicesResponse parses an HTTP response from a GetAfpBindipChoicesWithResponse call
func ParseGetAfpBindipChoicesResponse(rsp *http.Response) (*GetAfpBindipChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAfpBindipChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAlertDismissResponse parses an HTTP response from a PostAlertDismissWithResponse call
func ParsePostAlertDismissResponse(rsp *http.Response) (*PostAlertDismissResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAlertDismissResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertListResponse parses an HTTP response from a GetAlertListWithResponse call
func ParseGetAlertListResponse(rsp *http.Response) (*GetAlertListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertListCategoriesResponse parses an HTTP response from a GetAlertListCategoriesWithResponse call
func ParseGetAlertListCategoriesResponse(rsp *http.Response) (*GetAlertListCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertListCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertListPoliciesResponse parses an HTTP response from a GetAlertListPoliciesWithResponse call
func ParseGetAlertListPoliciesResponse(rsp *http.Response) (*GetAlertListPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertListPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAlertRestoreResponse parses an HTTP response from a PostAlertRestoreWithResponse call
func ParsePostAlertRestoreResponse(rsp *http.Response) (*PostAlertRestoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAlertRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertclassesResponse parses an HTTP response from a GetAlertclassesWithResponse call
func ParseGetAlertclassesResponse(rsp *http.Response) (*GetAlertclassesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertclassesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutAlertclassesResponse parses an HTTP response from a PutAlertclassesWithResponse call
func ParsePutAlertclassesResponse(rsp *http.Response) (*PutAlertclassesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutAlertclassesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertserviceResponse parses an HTTP response from a GetAlertserviceWithResponse call
func ParseGetAlertserviceResponse(rsp *http.Response) (*GetAlertserviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertserviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAlertserviceResponse parses an HTTP response from a PostAlertserviceWithResponse call
func ParsePostAlertserviceResponse(rsp *http.Response) (*PostAlertserviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAlertserviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteAlertserviceIdIdResponse parses an HTTP response from a DeleteAlertserviceIdIdWithResponse call
func ParseDeleteAlertserviceIdIdResponse(rsp *http.Response) (*DeleteAlertserviceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertserviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertserviceIdIdResponse parses an HTTP response from a GetAlertserviceIdIdWithResponse call
func ParseGetAlertserviceIdIdResponse(rsp *http.Response) (*GetAlertserviceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertserviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutAlertserviceIdIdResponse parses an HTTP response from a PutAlertserviceIdIdWithResponse call
func ParsePutAlertserviceIdIdResponse(rsp *http.Response) (*PutAlertserviceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutAlertserviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAlertserviceListTypesResponse parses an HTTP response from a GetAlertserviceListTypesWithResponse call
func ParseGetAlertserviceListTypesResponse(rsp *http.Response) (*GetAlertserviceListTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAlertserviceListTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAlertserviceTestResponse parses an HTTP response from a PostAlertserviceTestWithResponse call
func ParsePostAlertserviceTestResponse(rsp *http.Response) (*PostAlertserviceTestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAlertserviceTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAuthCheckUserResponse parses an HTTP response from a PostAuthCheckUserWithResponse call
func ParsePostAuthCheckUserResponse(rsp *http.Response) (*PostAuthCheckUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAuthCheckUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAuthGenerateTokenResponse parses an HTTP response from a PostAuthGenerateTokenWithResponse call
func ParsePostAuthGenerateTokenResponse(rsp *http.Response) (*PostAuthGenerateTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAuthGenerateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAuthSessionsResponse parses an HTTP response from a GetAuthSessionsWithResponse call
func ParseGetAuthSessionsResponse(rsp *http.Response) (*GetAuthSessionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAuthSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBackupResponse parses an HTTP response from a GetBackupWithResponse call
func ParseGetBackupResponse(rsp *http.Response) (*GetBackupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBackupResponse parses an HTTP response from a PostBackupWithResponse call
func ParsePostBackupResponse(rsp *http.Response) (*PostBackupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBackupAzureGetBucketsResponse parses an HTTP response from a PostBackupAzureGetBucketsWithResponse call
func ParsePostBackupAzureGetBucketsResponse(rsp *http.Response) (*PostBackupAzureGetBucketsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBackupAzureGetBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBackupB2GetBucketsResponse parses an HTTP response from a PostBackupB2GetBucketsWithResponse call
func ParsePostBackupB2GetBucketsResponse(rsp *http.Response) (*PostBackupB2GetBucketsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBackupB2GetBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBackupCredentialResponse parses an HTTP response from a GetBackupCredentialWithResponse call
func ParseGetBackupCredentialResponse(rsp *http.Response) (*GetBackupCredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBackupCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBackupCredentialResponse parses an HTTP response from a PostBackupCredentialWithResponse call
func ParsePostBackupCredentialResponse(rsp *http.Response) (*PostBackupCredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBackupCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteBackupCredentialIdIdResponse parses an HTTP response from a DeleteBackupCredentialIdIdWithResponse call
func ParseDeleteBackupCredentialIdIdResponse(rsp *http.Response) (*DeleteBackupCredentialIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackupCredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBackupCredentialIdIdResponse parses an HTTP response from a GetBackupCredentialIdIdWithResponse call
func ParseGetBackupCredentialIdIdResponse(rsp *http.Response) (*GetBackupCredentialIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBackupCredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutBackupCredentialIdIdResponse parses an HTTP response from a PutBackupCredentialIdIdWithResponse call
func ParsePutBackupCredentialIdIdResponse(rsp *http.Response) (*PutBackupCredentialIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutBackupCredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBackupGcsGetBucketsResponse parses an HTTP response from a PostBackupGcsGetBucketsWithResponse call
func ParsePostBackupGcsGetBucketsResponse(rsp *http.Response) (*PostBackupGcsGetBucketsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBackupGcsGetBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteBackupIdIdResponse parses an HTTP response from a DeleteBackupIdIdWithResponse call
func ParseDeleteBackupIdIdResponse(rsp *http.Response) (*DeleteBackupIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBackupIdIdResponse parses an HTTP response from a GetBackupIdIdWithResponse call
func ParseGetBackupIdIdResponse(rsp *http.Response) (*GetBackupIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBackupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutBackupIdIdResponse parses an HTTP response from a PutBackupIdIdWithResponse call
func ParsePutBackupIdIdResponse(rsp *http.Response) (*PutBackupIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutBackupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBackupS3GetBucketsResponse parses an HTTP response from a PostBackupS3GetBucketsWithResponse call
func ParsePostBackupS3GetBucketsResponse(rsp *http.Response) (*PostBackupS3GetBucketsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBackupS3GetBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBootAttachResponse parses an HTTP response from a PostBootAttachWithResponse call
func ParsePostBootAttachResponse(rsp *http.Response) (*PostBootAttachResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBootAttachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBootDetachResponse parses an HTTP response from a PostBootDetachWithResponse call
func ParsePostBootDetachResponse(rsp *http.Response) (*PostBootDetachResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBootDetachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBootGetDisksResponse parses an HTTP response from a GetBootGetDisksWithResponse call
func ParseGetBootGetDisksResponse(rsp *http.Response) (*GetBootGetDisksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBootGetDisksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBootGetScrubIntervalResponse parses an HTTP response from a GetBootGetScrubIntervalWithResponse call
func ParseGetBootGetScrubIntervalResponse(rsp *http.Response) (*GetBootGetScrubIntervalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBootGetScrubIntervalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBootGetStateResponse parses an HTTP response from a GetBootGetStateWithResponse call
func ParseGetBootGetStateResponse(rsp *http.Response) (*GetBootGetStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBootGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBootReplaceResponse parses an HTTP response from a PostBootReplaceWithResponse call
func ParsePostBootReplaceResponse(rsp *http.Response) (*PostBootReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBootReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBootScrubResponse parses an HTTP response from a GetBootScrubWithResponse call
func ParseGetBootScrubResponse(rsp *http.Response) (*GetBootScrubResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBootScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBootSetScrubIntervalResponse parses an HTTP response from a PostBootSetScrubIntervalWithResponse call
func ParsePostBootSetScrubIntervalResponse(rsp *http.Response) (*PostBootSetScrubIntervalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBootSetScrubIntervalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBootenvResponse parses an HTTP response from a GetBootenvWithResponse call
func ParseGetBootenvResponse(rsp *http.Response) (*GetBootenvResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBootenvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBootenvResponse parses an HTTP response from a PostBootenvWithResponse call
func ParsePostBootenvResponse(rsp *http.Response) (*PostBootenvResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBootenvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteBootenvIdIdResponse parses an HTTP response from a DeleteBootenvIdIdWithResponse call
func ParseDeleteBootenvIdIdResponse(rsp *http.Response) (*DeleteBootenvIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteBootenvIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBootenvIdIdResponse parses an HTTP response from a GetBootenvIdIdWithResponse call
func ParseGetBootenvIdIdResponse(rsp *http.Response) (*GetBootenvIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBootenvIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutBootenvIdIdResponse parses an HTTP response from a PutBootenvIdIdWithResponse call
func ParsePutBootenvIdIdResponse(rsp *http.Response) (*PutBootenvIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutBootenvIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBootenvIdIdActivateResponse parses an HTTP response from a PostBootenvIdIdActivateWithResponse call
func ParsePostBootenvIdIdActivateResponse(rsp *http.Response) (*PostBootenvIdIdActivateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBootenvIdIdActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostBootenvIdIdSetAttributeResponse parses an HTTP response from a PostBootenvIdIdSetAttributeWithResponse call
func ParsePostBootenvIdIdSetAttributeResponse(rsp *http.Response) (*PostBootenvIdIdSetAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBootenvIdIdSetAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCertificateResponse parses an HTTP response from a GetCertificateWithResponse call
func ParseGetCertificateResponse(rsp *http.Response) (*GetCertificateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCertificateResponse parses an HTTP response from a PostCertificateWithResponse call
func ParsePostCertificateResponse(rsp *http.Response) (*PostCertificateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCertificateAcmeServerChoicesResponse parses an HTTP response from a GetCertificateAcmeServerChoicesWithResponse call
func ParseGetCertificateAcmeServerChoicesResponse(rsp *http.Response) (*GetCertificateAcmeServerChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateAcmeServerChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCertificateEcCurveChoicesResponse parses an HTTP response from a GetCertificateEcCurveChoicesWithResponse call
func ParseGetCertificateEcCurveChoicesResponse(rsp *http.Response) (*GetCertificateEcCurveChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateEcCurveChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCertificateIdIdResponse parses an HTTP response from a DeleteCertificateIdIdWithResponse call
func ParseDeleteCertificateIdIdResponse(rsp *http.Response) (*DeleteCertificateIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCertificateIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCertificateIdIdResponse parses an HTTP response from a GetCertificateIdIdWithResponse call
func ParseGetCertificateIdIdResponse(rsp *http.Response) (*GetCertificateIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCertificateIdIdResponse parses an HTTP response from a PutCertificateIdIdWithResponse call
func ParsePutCertificateIdIdResponse(rsp *http.Response) (*PutCertificateIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCertificateIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCertificateKeyTypeChoicesResponse parses an HTTP response from a GetCertificateKeyTypeChoicesWithResponse call
func ParseGetCertificateKeyTypeChoicesResponse(rsp *http.Response) (*GetCertificateKeyTypeChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateKeyTypeChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCertificateauthorityResponse parses an HTTP response from a GetCertificateauthorityWithResponse call
func ParseGetCertificateauthorityResponse(rsp *http.Response) (*GetCertificateauthorityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateauthorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCertificateauthorityResponse parses an HTTP response from a PostCertificateauthorityWithResponse call
func ParsePostCertificateauthorityResponse(rsp *http.Response) (*PostCertificateauthorityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCertificateauthorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCertificateauthorityCaSignCsrResponse parses an HTTP response from a PostCertificateauthorityCaSignCsrWithResponse call
func ParsePostCertificateauthorityCaSignCsrResponse(rsp *http.Response) (*PostCertificateauthorityCaSignCsrResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCertificateauthorityCaSignCsrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCertificateauthorityIdIdResponse parses an HTTP response from a DeleteCertificateauthorityIdIdWithResponse call
func ParseDeleteCertificateauthorityIdIdResponse(rsp *http.Response) (*DeleteCertificateauthorityIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCertificateauthorityIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCertificateauthorityIdIdResponse parses an HTTP response from a GetCertificateauthorityIdIdWithResponse call
func ParseGetCertificateauthorityIdIdResponse(rsp *http.Response) (*GetCertificateauthorityIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateauthorityIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCertificateauthorityIdIdResponse parses an HTTP response from a PutCertificateauthorityIdIdWithResponse call
func ParsePutCertificateauthorityIdIdResponse(rsp *http.Response) (*PutCertificateauthorityIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCertificateauthorityIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCloudsyncResponse parses an HTTP response from a GetCloudsyncWithResponse call
func ParseGetCloudsyncResponse(rsp *http.Response) (*GetCloudsyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCloudsyncResponse parses an HTTP response from a PostCloudsyncWithResponse call
func ParsePostCloudsyncResponse(rsp *http.Response) (*PostCloudsyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCloudsyncCommonTaskSchemaResponse parses an HTTP response from a GetCloudsyncCommonTaskSchemaWithResponse call
func ParseGetCloudsyncCommonTaskSchemaResponse(rsp *http.Response) (*GetCloudsyncCommonTaskSchemaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncCommonTaskSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCloudsyncCredentialsResponse parses an HTTP response from a GetCloudsyncCredentialsWithResponse call
func ParseGetCloudsyncCredentialsResponse(rsp *http.Response) (*GetCloudsyncCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCloudsyncCredentialsResponse parses an HTTP response from a PostCloudsyncCredentialsWithResponse call
func ParsePostCloudsyncCredentialsResponse(rsp *http.Response) (*PostCloudsyncCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCloudsyncCredentialsIdIdResponse parses an HTTP response from a DeleteCloudsyncCredentialsIdIdWithResponse call
func ParseDeleteCloudsyncCredentialsIdIdResponse(rsp *http.Response) (*DeleteCloudsyncCredentialsIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCloudsyncCredentialsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCloudsyncCredentialsIdIdResponse parses an HTTP response from a GetCloudsyncCredentialsIdIdWithResponse call
func ParseGetCloudsyncCredentialsIdIdResponse(rsp *http.Response) (*GetCloudsyncCredentialsIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncCredentialsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCloudsyncCredentialsIdIdResponse parses an HTTP response from a PutCloudsyncCredentialsIdIdWithResponse call
func ParsePutCloudsyncCredentialsIdIdResponse(rsp *http.Response) (*PutCloudsyncCredentialsIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCloudsyncCredentialsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCloudsyncCredentialsVerifyResponse parses an HTTP response from a PostCloudsyncCredentialsVerifyWithResponse call
func ParsePostCloudsyncCredentialsVerifyResponse(rsp *http.Response) (*PostCloudsyncCredentialsVerifyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncCredentialsVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCloudsyncIdIdResponse parses an HTTP response from a DeleteCloudsyncIdIdWithResponse call
func ParseDeleteCloudsyncIdIdResponse(rsp *http.Response) (*DeleteCloudsyncIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCloudsyncIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCloudsyncIdIdResponse parses an HTTP response from a GetCloudsyncIdIdWithResponse call
func ParseGetCloudsyncIdIdResponse(rsp *http.Response) (*GetCloudsyncIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCloudsyncIdIdResponse parses an HTTP response from a PutCloudsyncIdIdWithResponse call
func ParsePutCloudsyncIdIdResponse(rsp *http.Response) (*PutCloudsyncIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCloudsyncIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCloudsyncIdIdAbortResponse parses an HTTP response from a PostCloudsyncIdIdAbortWithResponse call
func ParsePostCloudsyncIdIdAbortResponse(rsp *http.Response) (*PostCloudsyncIdIdAbortResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncIdIdAbortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCloudsyncIdIdSyncResponse parses an HTTP response from a PostCloudsyncIdIdSyncWithResponse call
func ParsePostCloudsyncIdIdSyncResponse(rsp *http.Response) (*PostCloudsyncIdIdSyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncIdIdSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCloudsyncListBucketsResponse parses an HTTP response from a PostCloudsyncListBucketsWithResponse call
func ParsePostCloudsyncListBucketsResponse(rsp *http.Response) (*PostCloudsyncListBucketsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncListBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCloudsyncListDirectoryResponse parses an HTTP response from a PostCloudsyncListDirectoryWithResponse call
func ParsePostCloudsyncListDirectoryResponse(rsp *http.Response) (*PostCloudsyncListDirectoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncListDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCloudsyncOnedriveListDrivesResponse parses an HTTP response from a PostCloudsyncOnedriveListDrivesWithResponse call
func ParsePostCloudsyncOnedriveListDrivesResponse(rsp *http.Response) (*PostCloudsyncOnedriveListDrivesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCloudsyncOnedriveListDrivesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCloudsyncProvidersResponse parses an HTTP response from a GetCloudsyncProvidersWithResponse call
func ParseGetCloudsyncProvidersResponse(rsp *http.Response) (*GetCloudsyncProvidersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudsyncProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostConfigResetResponse parses an HTTP response from a PostConfigResetWithResponse call
func ParsePostConfigResetResponse(rsp *http.Response) (*PostConfigResetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostConfigResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCoreBulkResponse parses an HTTP response from a PostCoreBulkWithResponse call
func ParsePostCoreBulkResponse(rsp *http.Response) (*PostCoreBulkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCoreBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCoreDebugResponse parses an HTTP response from a PostCoreDebugWithResponse call
func ParsePostCoreDebugResponse(rsp *http.Response) (*PostCoreDebugResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCoreDebugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCoreDownloadResponse parses an HTTP response from a PostCoreDownloadWithResponse call
func ParsePostCoreDownloadResponse(rsp *http.Response) (*PostCoreDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCoreDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCoreGetEventsResponse parses an HTTP response from a GetCoreGetEventsWithResponse call
func ParseGetCoreGetEventsResponse(rsp *http.Response) (*GetCoreGetEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCoreGetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCoreGetJobsResponse parses an HTTP response from a GetCoreGetJobsWithResponse call
func ParseGetCoreGetJobsResponse(rsp *http.Response) (*GetCoreGetJobsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCoreGetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCoreGetMethodsResponse parses an HTTP response from a PostCoreGetMethodsWithResponse call
func ParsePostCoreGetMethodsResponse(rsp *http.Response) (*PostCoreGetMethodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCoreGetMethodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCoreGetServicesResponse parses an HTTP response from a GetCoreGetServicesWithResponse call
func ParseGetCoreGetServicesResponse(rsp *http.Response) (*GetCoreGetServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCoreGetServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCoreJobAbortResponse parses an HTTP response from a PostCoreJobAbortWithResponse call
func ParsePostCoreJobAbortResponse(rsp *http.Response) (*PostCoreJobAbortResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCoreJobAbortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCoreJobUpdateResponse parses an HTTP response from a PostCoreJobUpdateWithResponse call
func ParsePostCoreJobUpdateResponse(rsp *http.Response) (*PostCoreJobUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCoreJobUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCoreJobWaitResponse parses an HTTP response from a PostCoreJobWaitWithResponse call
func ParsePostCoreJobWaitResponse(rsp *http.Response) (*PostCoreJobWaitResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCoreJobWaitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCorePingResponse parses an HTTP response from a GetCorePingWithResponse call
func ParseGetCorePingResponse(rsp *http.Response) (*GetCorePingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCorePingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCoreSessionsResponse parses an HTTP response from a GetCoreSessionsWithResponse call
func ParseGetCoreSessionsResponse(rsp *http.Response) (*GetCoreSessionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCoreSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCronjobResponse parses an HTTP response from a GetCronjobWithResponse call
func ParseGetCronjobResponse(rsp *http.Response) (*GetCronjobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCronjobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCronjobResponse parses an HTTP response from a PostCronjobWithResponse call
func ParsePostCronjobResponse(rsp *http.Response) (*PostCronjobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCronjobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCronjobIdIdResponse parses an HTTP response from a DeleteCronjobIdIdWithResponse call
func ParseDeleteCronjobIdIdResponse(rsp *http.Response) (*DeleteCronjobIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCronjobIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCronjobIdIdResponse parses an HTTP response from a GetCronjobIdIdWithResponse call
func ParseGetCronjobIdIdResponse(rsp *http.Response) (*GetCronjobIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCronjobIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCronjobIdIdResponse parses an HTTP response from a PutCronjobIdIdWithResponse call
func ParsePutCronjobIdIdResponse(rsp *http.Response) (*PutCronjobIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCronjobIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCronjobRunResponse parses an HTTP response from a PostCronjobRunWithResponse call
func ParsePostCronjobRunResponse(rsp *http.Response) (*PostCronjobRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCronjobRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostDeviceGetInfoResponse parses an HTTP response from a PostDeviceGetInfoWithResponse call
func ParsePostDeviceGetInfoResponse(rsp *http.Response) (*PostDeviceGetInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDeviceGetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDirectoryservicesGetStateResponse parses an HTTP response from a GetDirectoryservicesGetStateWithResponse call
func ParseGetDirectoryservicesGetStateResponse(rsp *http.Response) (*GetDirectoryservicesGetStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDirectoryservicesGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDiskResponse parses an HTTP response from a GetDiskWithResponse call
func ParseGetDiskResponse(rsp *http.Response) (*GetDiskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostDiskGetEncryptedResponse parses an HTTP response from a PostDiskGetEncryptedWithResponse call
func ParsePostDiskGetEncryptedResponse(rsp *http.Response) (*PostDiskGetEncryptedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDiskGetEncryptedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostDiskGetUnusedResponse parses an HTTP response from a PostDiskGetUnusedWithResponse call
func ParsePostDiskGetUnusedResponse(rsp *http.Response) (*PostDiskGetUnusedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDiskGetUnusedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDiskIdIdResponse parses an HTTP response from a GetDiskIdIdWithResponse call
func ParseGetDiskIdIdResponse(rsp *http.Response) (*GetDiskIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDiskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutDiskIdIdResponse parses an HTTP response from a PutDiskIdIdWithResponse call
func ParsePutDiskIdIdResponse(rsp *http.Response) (*PutDiskIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDiskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostDiskTemperaturesResponse parses an HTTP response from a PostDiskTemperaturesWithResponse call
func ParsePostDiskTemperaturesResponse(rsp *http.Response) (*PostDiskTemperaturesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDiskTemperaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostDiskWipeResponse parses an HTTP response from a PostDiskWipeWithResponse call
func ParsePostDiskWipeResponse(rsp *http.Response) (*PostDiskWipeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDiskWipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDnsQueryResponse parses an HTTP response from a GetDnsQueryWithResponse call
func ParseGetDnsQueryResponse(rsp *http.Response) (*GetDnsQueryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDnsQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDyndnsResponse parses an HTTP response from a GetDyndnsWithResponse call
func ParseGetDyndnsResponse(rsp *http.Response) (*GetDyndnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDyndnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutDyndnsResponse parses an HTTP response from a PutDyndnsWithResponse call
func ParsePutDyndnsResponse(rsp *http.Response) (*PutDyndnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDyndnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDyndnsProviderChoicesResponse parses an HTTP response from a GetDyndnsProviderChoicesWithResponse call
func ParseGetDyndnsProviderChoicesResponse(rsp *http.Response) (*GetDyndnsProviderChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDyndnsProviderChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemAclIsTrivialResponse parses an HTTP response from a PostFilesystemAclIsTrivialWithResponse call
func ParsePostFilesystemAclIsTrivialResponse(rsp *http.Response) (*PostFilesystemAclIsTrivialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemAclIsTrivialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemChownResponse parses an HTTP response from a PostFilesystemChownWithResponse call
func ParsePostFilesystemChownResponse(rsp *http.Response) (*PostFilesystemChownResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemChownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFilesystemDefaultAclChoicesResponse parses an HTTP response from a GetFilesystemDefaultAclChoicesWithResponse call
func ParseGetFilesystemDefaultAclChoicesResponse(rsp *http.Response) (*GetFilesystemDefaultAclChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFilesystemDefaultAclChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemGetDefaultAclResponse parses an HTTP response from a PostFilesystemGetDefaultAclWithResponse call
func ParsePostFilesystemGetDefaultAclResponse(rsp *http.Response) (*PostFilesystemGetDefaultAclResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemGetDefaultAclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemGetaclResponse parses an HTTP response from a PostFilesystemGetaclWithResponse call
func ParsePostFilesystemGetaclResponse(rsp *http.Response) (*PostFilesystemGetaclResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemGetaclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemListdirResponse parses an HTTP response from a PostFilesystemListdirWithResponse call
func ParsePostFilesystemListdirResponse(rsp *http.Response) (*PostFilesystemListdirResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemListdirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemSetaclResponse parses an HTTP response from a PostFilesystemSetaclWithResponse call
func ParsePostFilesystemSetaclResponse(rsp *http.Response) (*PostFilesystemSetaclResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemSetaclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemSetpermResponse parses an HTTP response from a PostFilesystemSetpermWithResponse call
func ParsePostFilesystemSetpermResponse(rsp *http.Response) (*PostFilesystemSetpermResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemSetpermResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemStatResponse parses an HTTP response from a PostFilesystemStatWithResponse call
func ParsePostFilesystemStatResponse(rsp *http.Response) (*PostFilesystemStatResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemStatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostFilesystemStatfsResponse parses an HTTP response from a PostFilesystemStatfsWithResponse call
func ParsePostFilesystemStatfsResponse(rsp *http.Response) (*PostFilesystemStatfsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemStatfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFtpResponse parses an HTTP response from a GetFtpWithResponse call
func ParseGetFtpResponse(rsp *http.Response) (*GetFtpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutFtpResponse parses an HTTP response from a PutFtpWithResponse call
func ParsePutFtpResponse(rsp *http.Response) (*PutFtpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutFtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetGroupResponse parses an HTTP response from a GetGroupWithResponse call
func ParseGetGroupResponse(rsp *http.Response) (*GetGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostGroupResponse parses an HTTP response from a PostGroupWithResponse call
func ParsePostGroupResponse(rsp *http.Response) (*PostGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostGroupGetGroupObjResponse parses an HTTP response from a PostGroupGetGroupObjWithResponse call
func ParsePostGroupGetGroupObjResponse(rsp *http.Response) (*PostGroupGetGroupObjResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostGroupGetGroupObjResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetGroupGetNextGidResponse parses an HTTP response from a GetGroupGetNextGidWithResponse call
func ParseGetGroupGetNextGidResponse(rsp *http.Response) (*GetGroupGetNextGidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGroupGetNextGidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteGroupIdIdResponse parses an HTTP response from a DeleteGroupIdIdWithResponse call
func ParseDeleteGroupIdIdResponse(rsp *http.Response) (*DeleteGroupIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetGroupIdIdResponse parses an HTTP response from a GetGroupIdIdWithResponse call
func ParseGetGroupIdIdResponse(rsp *http.Response) (*GetGroupIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGroupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutGroupIdIdResponse parses an HTTP response from a PutGroupIdIdWithResponse call
func ParsePutGroupIdIdResponse(rsp *http.Response) (*PutGroupIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutGroupIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapAdResponse parses an HTTP response from a GetIdmapAdWithResponse call
func ParseGetIdmapAdResponse(rsp *http.Response) (*GetIdmapAdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapAdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapAdResponse parses an HTTP response from a PostIdmapAdWithResponse call
func ParsePostIdmapAdResponse(rsp *http.Response) (*PostIdmapAdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapAdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapAdIdIdResponse parses an HTTP response from a DeleteIdmapAdIdIdWithResponse call
func ParseDeleteIdmapAdIdIdResponse(rsp *http.Response) (*DeleteIdmapAdIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapAdIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapAdIdIdResponse parses an HTTP response from a GetIdmapAdIdIdWithResponse call
func ParseGetIdmapAdIdIdResponse(rsp *http.Response) (*GetIdmapAdIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapAdIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapAdIdIdResponse parses an HTTP response from a PutIdmapAdIdIdWithResponse call
func ParsePutIdmapAdIdIdResponse(rsp *http.Response) (*PutIdmapAdIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapAdIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapAutoridResponse parses an HTTP response from a GetIdmapAutoridWithResponse call
func ParseGetIdmapAutoridResponse(rsp *http.Response) (*GetIdmapAutoridResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapAutoridResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapAutoridResponse parses an HTTP response from a PostIdmapAutoridWithResponse call
func ParsePostIdmapAutoridResponse(rsp *http.Response) (*PostIdmapAutoridResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapAutoridResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapAutoridIdIdResponse parses an HTTP response from a DeleteIdmapAutoridIdIdWithResponse call
func ParseDeleteIdmapAutoridIdIdResponse(rsp *http.Response) (*DeleteIdmapAutoridIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapAutoridIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapAutoridIdIdResponse parses an HTTP response from a GetIdmapAutoridIdIdWithResponse call
func ParseGetIdmapAutoridIdIdResponse(rsp *http.Response) (*GetIdmapAutoridIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapAutoridIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapAutoridIdIdResponse parses an HTTP response from a PutIdmapAutoridIdIdWithResponse call
func ParsePutIdmapAutoridIdIdResponse(rsp *http.Response) (*PutIdmapAutoridIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapAutoridIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapClearIdmapCacheResponse parses an HTTP response from a GetIdmapClearIdmapCacheWithResponse call
func ParseGetIdmapClearIdmapCacheResponse(rsp *http.Response) (*GetIdmapClearIdmapCacheResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapClearIdmapCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapDomainResponse parses an HTTP response from a GetIdmapDomainWithResponse call
func ParseGetIdmapDomainResponse(rsp *http.Response) (*GetIdmapDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapDomainResponse parses an HTTP response from a PostIdmapDomainWithResponse call
func ParsePostIdmapDomainResponse(rsp *http.Response) (*PostIdmapDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapDomainIdIdResponse parses an HTTP response from a DeleteIdmapDomainIdIdWithResponse call
func ParseDeleteIdmapDomainIdIdResponse(rsp *http.Response) (*DeleteIdmapDomainIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapDomainIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapDomainIdIdResponse parses an HTTP response from a GetIdmapDomainIdIdWithResponse call
func ParseGetIdmapDomainIdIdResponse(rsp *http.Response) (*GetIdmapDomainIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapDomainIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapDomainIdIdResponse parses an HTTP response from a PutIdmapDomainIdIdWithResponse call
func ParsePutIdmapDomainIdIdResponse(rsp *http.Response) (*PutIdmapDomainIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapDomainIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapDomaintobackendResponse parses an HTTP response from a GetIdmapDomaintobackendWithResponse call
func ParseGetIdmapDomaintobackendResponse(rsp *http.Response) (*GetIdmapDomaintobackendResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapDomaintobackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapDomaintobackendResponse parses an HTTP response from a PostIdmapDomaintobackendWithResponse call
func ParsePostIdmapDomaintobackendResponse(rsp *http.Response) (*PostIdmapDomaintobackendResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapDomaintobackendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapDomaintobackendIdIdResponse parses an HTTP response from a DeleteIdmapDomaintobackendIdIdWithResponse call
func ParseDeleteIdmapDomaintobackendIdIdResponse(rsp *http.Response) (*DeleteIdmapDomaintobackendIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapDomaintobackendIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapDomaintobackendIdIdResponse parses an HTTP response from a GetIdmapDomaintobackendIdIdWithResponse call
func ParseGetIdmapDomaintobackendIdIdResponse(rsp *http.Response) (*GetIdmapDomaintobackendIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapDomaintobackendIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapDomaintobackendIdIdResponse parses an HTTP response from a PutIdmapDomaintobackendIdIdWithResponse call
func ParsePutIdmapDomaintobackendIdIdResponse(rsp *http.Response) (*PutIdmapDomaintobackendIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapDomaintobackendIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapGetConfiguredIdmapDomainsResponse parses an HTTP response from a GetIdmapGetConfiguredIdmapDomainsWithResponse call
func ParseGetIdmapGetConfiguredIdmapDomainsResponse(rsp *http.Response) (*GetIdmapGetConfiguredIdmapDomainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapGetConfiguredIdmapDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapGetOrCreateIdmapByDomainResponse parses an HTTP response from a PostIdmapGetOrCreateIdmapByDomainWithResponse call
func ParsePostIdmapGetOrCreateIdmapByDomainResponse(rsp *http.Response) (*PostIdmapGetOrCreateIdmapByDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapGetOrCreateIdmapByDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapLdapResponse parses an HTTP response from a GetIdmapLdapWithResponse call
func ParseGetIdmapLdapResponse(rsp *http.Response) (*GetIdmapLdapResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapLdapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapLdapResponse parses an HTTP response from a PostIdmapLdapWithResponse call
func ParsePostIdmapLdapResponse(rsp *http.Response) (*PostIdmapLdapResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapLdapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapLdapIdIdResponse parses an HTTP response from a DeleteIdmapLdapIdIdWithResponse call
func ParseDeleteIdmapLdapIdIdResponse(rsp *http.Response) (*DeleteIdmapLdapIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapLdapIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapLdapIdIdResponse parses an HTTP response from a GetIdmapLdapIdIdWithResponse call
func ParseGetIdmapLdapIdIdResponse(rsp *http.Response) (*GetIdmapLdapIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapLdapIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapLdapIdIdResponse parses an HTTP response from a PutIdmapLdapIdIdWithResponse call
func ParsePutIdmapLdapIdIdResponse(rsp *http.Response) (*PutIdmapLdapIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapLdapIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapNssResponse parses an HTTP response from a GetIdmapNssWithResponse call
func ParseGetIdmapNssResponse(rsp *http.Response) (*GetIdmapNssResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapNssResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapNssResponse parses an HTTP response from a PostIdmapNssWithResponse call
func ParsePostIdmapNssResponse(rsp *http.Response) (*PostIdmapNssResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapNssResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapNssIdIdResponse parses an HTTP response from a DeleteIdmapNssIdIdWithResponse call
func ParseDeleteIdmapNssIdIdResponse(rsp *http.Response) (*DeleteIdmapNssIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapNssIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapNssIdIdResponse parses an HTTP response from a GetIdmapNssIdIdWithResponse call
func ParseGetIdmapNssIdIdResponse(rsp *http.Response) (*GetIdmapNssIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapNssIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapNssIdIdResponse parses an HTTP response from a PutIdmapNssIdIdWithResponse call
func ParsePutIdmapNssIdIdResponse(rsp *http.Response) (*PutIdmapNssIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapNssIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapRfc2307Response parses an HTTP response from a GetIdmapRfc2307WithResponse call
func ParseGetIdmapRfc2307Response(rsp *http.Response) (*GetIdmapRfc2307Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapRfc2307Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapRfc2307Response parses an HTTP response from a PostIdmapRfc2307WithResponse call
func ParsePostIdmapRfc2307Response(rsp *http.Response) (*PostIdmapRfc2307Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapRfc2307Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapRfc2307IdIdResponse parses an HTTP response from a DeleteIdmapRfc2307IdIdWithResponse call
func ParseDeleteIdmapRfc2307IdIdResponse(rsp *http.Response) (*DeleteIdmapRfc2307IdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapRfc2307IdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapRfc2307IdIdResponse parses an HTTP response from a GetIdmapRfc2307IdIdWithResponse call
func ParseGetIdmapRfc2307IdIdResponse(rsp *http.Response) (*GetIdmapRfc2307IdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapRfc2307IdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapRfc2307IdIdResponse parses an HTTP response from a PutIdmapRfc2307IdIdWithResponse call
func ParsePutIdmapRfc2307IdIdResponse(rsp *http.Response) (*PutIdmapRfc2307IdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapRfc2307IdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapRidResponse parses an HTTP response from a GetIdmapRidWithResponse call
func ParseGetIdmapRidResponse(rsp *http.Response) (*GetIdmapRidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapRidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapRidResponse parses an HTTP response from a PostIdmapRidWithResponse call
func ParsePostIdmapRidResponse(rsp *http.Response) (*PostIdmapRidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapRidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapRidIdIdResponse parses an HTTP response from a DeleteIdmapRidIdIdWithResponse call
func ParseDeleteIdmapRidIdIdResponse(rsp *http.Response) (*DeleteIdmapRidIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapRidIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapRidIdIdResponse parses an HTTP response from a GetIdmapRidIdIdWithResponse call
func ParseGetIdmapRidIdIdResponse(rsp *http.Response) (*GetIdmapRidIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapRidIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapRidIdIdResponse parses an HTTP response from a PutIdmapRidIdIdWithResponse call
func ParsePutIdmapRidIdIdResponse(rsp *http.Response) (*PutIdmapRidIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapRidIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapScriptResponse parses an HTTP response from a GetIdmapScriptWithResponse call
func ParseGetIdmapScriptResponse(rsp *http.Response) (*GetIdmapScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapScriptResponse parses an HTTP response from a PostIdmapScriptWithResponse call
func ParsePostIdmapScriptResponse(rsp *http.Response) (*PostIdmapScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapScriptIdIdResponse parses an HTTP response from a DeleteIdmapScriptIdIdWithResponse call
func ParseDeleteIdmapScriptIdIdResponse(rsp *http.Response) (*DeleteIdmapScriptIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapScriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapScriptIdIdResponse parses an HTTP response from a GetIdmapScriptIdIdWithResponse call
func ParseGetIdmapScriptIdIdResponse(rsp *http.Response) (*GetIdmapScriptIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapScriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapScriptIdIdResponse parses an HTTP response from a PutIdmapScriptIdIdWithResponse call
func ParsePutIdmapScriptIdIdResponse(rsp *http.Response) (*PutIdmapScriptIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapScriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapTdbResponse parses an HTTP response from a GetIdmapTdbWithResponse call
func ParseGetIdmapTdbResponse(rsp *http.Response) (*GetIdmapTdbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapTdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIdmapTdbResponse parses an HTTP response from a PostIdmapTdbWithResponse call
func ParsePostIdmapTdbResponse(rsp *http.Response) (*PostIdmapTdbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdmapTdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdmapTdbIdIdResponse parses an HTTP response from a DeleteIdmapTdbIdIdWithResponse call
func ParseDeleteIdmapTdbIdIdResponse(rsp *http.Response) (*DeleteIdmapTdbIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdmapTdbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdmapTdbIdIdResponse parses an HTTP response from a GetIdmapTdbIdIdWithResponse call
func ParseGetIdmapTdbIdIdResponse(rsp *http.Response) (*GetIdmapTdbIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdmapTdbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIdmapTdbIdIdResponse parses an HTTP response from a PutIdmapTdbIdIdWithResponse call
func ParsePutIdmapTdbIdIdResponse(rsp *http.Response) (*PutIdmapTdbIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIdmapTdbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInitshutdownscriptResponse parses an HTTP response from a GetInitshutdownscriptWithResponse call
func ParseGetInitshutdownscriptResponse(rsp *http.Response) (*GetInitshutdownscriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInitshutdownscriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostInitshutdownscriptResponse parses an HTTP response from a PostInitshutdownscriptWithResponse call
func ParsePostInitshutdownscriptResponse(rsp *http.Response) (*PostInitshutdownscriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInitshutdownscriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteInitshutdownscriptIdIdResponse parses an HTTP response from a DeleteInitshutdownscriptIdIdWithResponse call
func ParseDeleteInitshutdownscriptIdIdResponse(rsp *http.Response) (*DeleteInitshutdownscriptIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteInitshutdownscriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInitshutdownscriptIdIdResponse parses an HTTP response from a GetInitshutdownscriptIdIdWithResponse call
func ParseGetInitshutdownscriptIdIdResponse(rsp *http.Response) (*GetInitshutdownscriptIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInitshutdownscriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutInitshutdownscriptIdIdResponse parses an HTTP response from a PutInitshutdownscriptIdIdWithResponse call
func ParsePutInitshutdownscriptIdIdResponse(rsp *http.Response) (*PutInitshutdownscriptIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutInitshutdownscriptIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInterfaceResponse parses an HTTP response from a GetInterfaceWithResponse call
func ParseGetInterfaceResponse(rsp *http.Response) (*GetInterfaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostInterfaceResponse parses an HTTP response from a PostInterfaceWithResponse call
func ParsePostInterfaceResponse(rsp *http.Response) (*PostInterfaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostInterfaceBridgeMembersChoicesResponse parses an HTTP response from a PostInterfaceBridgeMembersChoicesWithResponse call
func ParsePostInterfaceBridgeMembersChoicesResponse(rsp *http.Response) (*PostInterfaceBridgeMembersChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceBridgeMembersChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInterfaceCheckinResponse parses an HTTP response from a GetInterfaceCheckinWithResponse call
func ParseGetInterfaceCheckinResponse(rsp *http.Response) (*GetInterfaceCheckinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceCheckinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInterfaceCheckinWaitingResponse parses an HTTP response from a GetInterfaceCheckinWaitingWithResponse call
func ParseGetInterfaceCheckinWaitingResponse(rsp *http.Response) (*GetInterfaceCheckinWaitingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceCheckinWaitingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostInterfaceChoicesResponse parses an HTTP response from a PostInterfaceChoicesWithResponse call
func ParsePostInterfaceChoicesResponse(rsp *http.Response) (*PostInterfaceChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostInterfaceCommitResponse parses an HTTP response from a PostInterfaceCommitWithResponse call
func ParsePostInterfaceCommitResponse(rsp *http.Response) (*PostInterfaceCommitResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceCommitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInterfaceHasPendingChangesResponse parses an HTTP response from a GetInterfaceHasPendingChangesWithResponse call
func ParseGetInterfaceHasPendingChangesResponse(rsp *http.Response) (*GetInterfaceHasPendingChangesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceHasPendingChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteInterfaceIdIdResponse parses an HTTP response from a DeleteInterfaceIdIdWithResponse call
func ParseDeleteInterfaceIdIdResponse(rsp *http.Response) (*DeleteInterfaceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteInterfaceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInterfaceIdIdResponse parses an HTTP response from a GetInterfaceIdIdWithResponse call
func ParseGetInterfaceIdIdResponse(rsp *http.Response) (*GetInterfaceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutInterfaceIdIdResponse parses an HTTP response from a PutInterfaceIdIdWithResponse call
func ParsePutInterfaceIdIdResponse(rsp *http.Response) (*PutInterfaceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutInterfaceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostInterfaceIpInUseResponse parses an HTTP response from a PostInterfaceIpInUseWithResponse call
func ParsePostInterfaceIpInUseResponse(rsp *http.Response) (*PostInterfaceIpInUseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceIpInUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostInterfaceLagPortsChoicesResponse parses an HTTP response from a PostInterfaceLagPortsChoicesWithResponse call
func ParsePostInterfaceLagPortsChoicesResponse(rsp *http.Response) (*PostInterfaceLagPortsChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInterfaceLagPortsChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInterfaceRollbackResponse parses an HTTP response from a GetInterfaceRollbackWithResponse call
func ParseGetInterfaceRollbackResponse(rsp *http.Response) (*GetInterfaceRollbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceRollbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInterfaceVlanParentInterfaceChoicesResponse parses an HTTP response from a GetInterfaceVlanParentInterfaceChoicesWithResponse call
func ParseGetInterfaceVlanParentInterfaceChoicesResponse(rsp *http.Response) (*GetInterfaceVlanParentInterfaceChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInterfaceVlanParentInterfaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIpmiResponse parses an HTTP response from a GetIpmiWithResponse call
func ParseGetIpmiResponse(rsp *http.Response) (*GetIpmiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIpmiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIpmiChannelsResponse parses an HTTP response from a GetIpmiChannelsWithResponse call
func ParseGetIpmiChannelsResponse(rsp *http.Response) (*GetIpmiChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIpmiChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIpmiIdIdResponse parses an HTTP response from a GetIpmiIdIdWithResponse call
func ParseGetIpmiIdIdResponse(rsp *http.Response) (*GetIpmiIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIpmiIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIpmiIdIdResponse parses an HTTP response from a PutIpmiIdIdWithResponse call
func ParsePutIpmiIdIdResponse(rsp *http.Response) (*PutIpmiIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIpmiIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIpmiIdentifyResponse parses an HTTP response from a PostIpmiIdentifyWithResponse call
func ParsePostIpmiIdentifyResponse(rsp *http.Response) (*PostIpmiIdentifyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIpmiIdentifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIpmiIsLoadedResponse parses an HTTP response from a GetIpmiIsLoadedWithResponse call
func ParseGetIpmiIsLoadedResponse(rsp *http.Response) (*GetIpmiIsLoadedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIpmiIsLoadedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiAuthResponse parses an HTTP response from a GetIscsiAuthWithResponse call
func ParseGetIscsiAuthResponse(rsp *http.Response) (*GetIscsiAuthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIscsiAuthResponse parses an HTTP response from a PostIscsiAuthWithResponse call
func ParsePostIscsiAuthResponse(rsp *http.Response) (*PostIscsiAuthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIscsiAuthIdIdResponse parses an HTTP response from a DeleteIscsiAuthIdIdWithResponse call
func ParseDeleteIscsiAuthIdIdResponse(rsp *http.Response) (*DeleteIscsiAuthIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiAuthIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiAuthIdIdResponse parses an HTTP response from a GetIscsiAuthIdIdWithResponse call
func ParseGetIscsiAuthIdIdResponse(rsp *http.Response) (*GetIscsiAuthIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiAuthIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIscsiAuthIdIdResponse parses an HTTP response from a PutIscsiAuthIdIdWithResponse call
func ParsePutIscsiAuthIdIdResponse(rsp *http.Response) (*PutIscsiAuthIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiAuthIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiExtentResponse parses an HTTP response from a GetIscsiExtentWithResponse call
func ParseGetIscsiExtentResponse(rsp *http.Response) (*GetIscsiExtentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiExtentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIscsiExtentResponse parses an HTTP response from a PostIscsiExtentWithResponse call
func ParsePostIscsiExtentResponse(rsp *http.Response) (*PostIscsiExtentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiExtentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIscsiExtentDiskChoicesResponse parses an HTTP response from a PostIscsiExtentDiskChoicesWithResponse call
func ParsePostIscsiExtentDiskChoicesResponse(rsp *http.Response) (*PostIscsiExtentDiskChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiExtentDiskChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIscsiExtentIdIdResponse parses an HTTP response from a DeleteIscsiExtentIdIdWithResponse call
func ParseDeleteIscsiExtentIdIdResponse(rsp *http.Response) (*DeleteIscsiExtentIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiExtentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiExtentIdIdResponse parses an HTTP response from a GetIscsiExtentIdIdWithResponse call
func ParseGetIscsiExtentIdIdResponse(rsp *http.Response) (*GetIscsiExtentIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiExtentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIscsiExtentIdIdResponse parses an HTTP response from a PutIscsiExtentIdIdWithResponse call
func ParsePutIscsiExtentIdIdResponse(rsp *http.Response) (*PutIscsiExtentIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiExtentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiGlobalResponse parses an HTTP response from a GetIscsiGlobalWithResponse call
func ParseGetIscsiGlobalResponse(rsp *http.Response) (*GetIscsiGlobalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIscsiGlobalResponse parses an HTTP response from a PutIscsiGlobalWithResponse call
func ParsePutIscsiGlobalResponse(rsp *http.Response) (*PutIscsiGlobalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiGlobalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiGlobalSessionsResponse parses an HTTP response from a GetIscsiGlobalSessionsWithResponse call
func ParseGetIscsiGlobalSessionsResponse(rsp *http.Response) (*GetIscsiGlobalSessionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiGlobalSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiInitiatorResponse parses an HTTP response from a GetIscsiInitiatorWithResponse call
func ParseGetIscsiInitiatorResponse(rsp *http.Response) (*GetIscsiInitiatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiInitiatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIscsiInitiatorResponse parses an HTTP response from a PostIscsiInitiatorWithResponse call
func ParsePostIscsiInitiatorResponse(rsp *http.Response) (*PostIscsiInitiatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiInitiatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIscsiInitiatorIdIdResponse parses an HTTP response from a DeleteIscsiInitiatorIdIdWithResponse call
func ParseDeleteIscsiInitiatorIdIdResponse(rsp *http.Response) (*DeleteIscsiInitiatorIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiInitiatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiInitiatorIdIdResponse parses an HTTP response from a GetIscsiInitiatorIdIdWithResponse call
func ParseGetIscsiInitiatorIdIdResponse(rsp *http.Response) (*GetIscsiInitiatorIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiInitiatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIscsiInitiatorIdIdResponse parses an HTTP response from a PutIscsiInitiatorIdIdWithResponse call
func ParsePutIscsiInitiatorIdIdResponse(rsp *http.Response) (*PutIscsiInitiatorIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiInitiatorIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiPortalResponse parses an HTTP response from a GetIscsiPortalWithResponse call
func ParseGetIscsiPortalResponse(rsp *http.Response) (*GetIscsiPortalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiPortalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIscsiPortalResponse parses an HTTP response from a PostIscsiPortalWithResponse call
func ParsePostIscsiPortalResponse(rsp *http.Response) (*PostIscsiPortalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiPortalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIscsiPortalIdIdResponse parses an HTTP response from a DeleteIscsiPortalIdIdWithResponse call
func ParseDeleteIscsiPortalIdIdResponse(rsp *http.Response) (*DeleteIscsiPortalIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiPortalIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiPortalIdIdResponse parses an HTTP response from a GetIscsiPortalIdIdWithResponse call
func ParseGetIscsiPortalIdIdResponse(rsp *http.Response) (*GetIscsiPortalIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiPortalIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIscsiPortalIdIdResponse parses an HTTP response from a PutIscsiPortalIdIdWithResponse call
func ParsePutIscsiPortalIdIdResponse(rsp *http.Response) (*PutIscsiPortalIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiPortalIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiPortalListenIpChoicesResponse parses an HTTP response from a GetIscsiPortalListenIpChoicesWithResponse call
func ParseGetIscsiPortalListenIpChoicesResponse(rsp *http.Response) (*GetIscsiPortalListenIpChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiPortalListenIpChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiTargetResponse parses an HTTP response from a GetIscsiTargetWithResponse call
func ParseGetIscsiTargetResponse(rsp *http.Response) (*GetIscsiTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIscsiTargetResponse parses an HTTP response from a PostIscsiTargetWithResponse call
func ParsePostIscsiTargetResponse(rsp *http.Response) (*PostIscsiTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIscsiTargetIdIdResponse parses an HTTP response from a DeleteIscsiTargetIdIdWithResponse call
func ParseDeleteIscsiTargetIdIdResponse(rsp *http.Response) (*DeleteIscsiTargetIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiTargetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiTargetIdIdResponse parses an HTTP response from a GetIscsiTargetIdIdWithResponse call
func ParseGetIscsiTargetIdIdResponse(rsp *http.Response) (*GetIscsiTargetIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIscsiTargetIdIdResponse parses an HTTP response from a PutIscsiTargetIdIdWithResponse call
func ParsePutIscsiTargetIdIdResponse(rsp *http.Response) (*PutIscsiTargetIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiTargetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiTargetextentResponse parses an HTTP response from a GetIscsiTargetextentWithResponse call
func ParseGetIscsiTargetextentResponse(rsp *http.Response) (*GetIscsiTargetextentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetextentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostIscsiTargetextentResponse parses an HTTP response from a PostIscsiTargetextentWithResponse call
func ParsePostIscsiTargetextentResponse(rsp *http.Response) (*PostIscsiTargetextentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIscsiTargetextentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIscsiTargetextentIdIdResponse parses an HTTP response from a DeleteIscsiTargetextentIdIdWithResponse call
func ParseDeleteIscsiTargetextentIdIdResponse(rsp *http.Response) (*DeleteIscsiTargetextentIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIscsiTargetextentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIscsiTargetextentIdIdResponse parses an HTTP response from a GetIscsiTargetextentIdIdWithResponse call
func ParseGetIscsiTargetextentIdIdResponse(rsp *http.Response) (*GetIscsiTargetextentIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIscsiTargetextentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutIscsiTargetextentIdIdResponse parses an HTTP response from a PutIscsiTargetextentIdIdWithResponse call
func ParsePutIscsiTargetextentIdIdResponse(rsp *http.Response) (*PutIscsiTargetextentIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutIscsiTargetextentIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetJailResponse parses an HTTP response from a GetJailWithResponse call
func ParseGetJailResponse(rsp *http.Response) (*GetJailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailResponse parses an HTTP response from a PostJailWithResponse call
func ParsePostJailResponse(rsp *http.Response) (*PostJailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailActivateResponse parses an HTTP response from a PostJailActivateWithResponse call
func ParsePostJailActivateResponse(rsp *http.Response) (*PostJailActivateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailCleanResponse parses an HTTP response from a PostJailCleanWithResponse call
func ParsePostJailCleanResponse(rsp *http.Response) (*PostJailCleanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailCleanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetJailDefaultConfigurationResponse parses an HTTP response from a GetJailDefaultConfigurationWithResponse call
func ParseGetJailDefaultConfigurationResponse(rsp *http.Response) (*GetJailDefaultConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJailDefaultConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailExecResponse parses an HTTP response from a PostJailExecWithResponse call
func ParsePostJailExecResponse(rsp *http.Response) (*PostJailExecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailExecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailExportResponse parses an HTTP response from a PostJailExportWithResponse call
func ParsePostJailExportResponse(rsp *http.Response) (*PostJailExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailFetchResponse parses an HTTP response from a PostJailFetchWithResponse call
func ParsePostJailFetchResponse(rsp *http.Response) (*PostJailFetchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailFetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailFstabResponse parses an HTTP response from a PostJailFstabWithResponse call
func ParsePostJailFstabResponse(rsp *http.Response) (*PostJailFstabResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailFstabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetJailGetActivatedPoolResponse parses an HTTP response from a GetJailGetActivatedPoolWithResponse call
func ParseGetJailGetActivatedPoolResponse(rsp *http.Response) (*GetJailGetActivatedPoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJailGetActivatedPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteJailIdIdResponse parses an HTTP response from a DeleteJailIdIdWithResponse call
func ParseDeleteJailIdIdResponse(rsp *http.Response) (*DeleteJailIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteJailIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetJailIdIdResponse parses an HTTP response from a GetJailIdIdWithResponse call
func ParseGetJailIdIdResponse(rsp *http.Response) (*GetJailIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJailIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutJailIdIdResponse parses an HTTP response from a PutJailIdIdWithResponse call
func ParsePutJailIdIdResponse(rsp *http.Response) (*PutJailIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutJailIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailIdIdCloneResponse parses an HTTP response from a PostJailIdIdCloneWithResponse call
func ParsePostJailIdIdCloneResponse(rsp *http.Response) (*PostJailIdIdCloneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailIdIdCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailImportImageResponse parses an HTTP response from a PostJailImportImageWithResponse call
func ParsePostJailImportImageResponse(rsp *http.Response) (*PostJailImportImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailImportImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetJailInterfaceChoicesResponse parses an HTTP response from a GetJailInterfaceChoicesWithResponse call
func ParseGetJailInterfaceChoicesResponse(rsp *http.Response) (*GetJailInterfaceChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJailInterfaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailRcActionResponse parses an HTTP response from a PostJailRcActionWithResponse call
func ParsePostJailRcActionResponse(rsp *http.Response) (*PostJailRcActionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailRcActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailReleasesChoicesResponse parses an HTTP response from a PostJailReleasesChoicesWithResponse call
func ParsePostJailReleasesChoicesResponse(rsp *http.Response) (*PostJailReleasesChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailReleasesChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailRestartResponse parses an HTTP response from a PostJailRestartWithResponse call
func ParsePostJailRestartResponse(rsp *http.Response) (*PostJailRestartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailStartResponse parses an HTTP response from a PostJailStartWithResponse call
func ParsePostJailStartResponse(rsp *http.Response) (*PostJailStartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailStopResponse parses an HTTP response from a PostJailStopWithResponse call
func ParsePostJailStopResponse(rsp *http.Response) (*PostJailStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailUpdateDefaultsResponse parses an HTTP response from a PostJailUpdateDefaultsWithResponse call
func ParsePostJailUpdateDefaultsResponse(rsp *http.Response) (*PostJailUpdateDefaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailUpdateDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostJailUpdateToLatestPatchResponse parses an HTTP response from a PostJailUpdateToLatestPatchWithResponse call
func ParsePostJailUpdateToLatestPatchResponse(rsp *http.Response) (*PostJailUpdateToLatestPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostJailUpdateToLatestPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKerberosResponse parses an HTTP response from a GetKerberosWithResponse call
func ParseGetKerberosResponse(rsp *http.Response) (*GetKerberosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutKerberosResponse parses an HTTP response from a PutKerberosWithResponse call
func ParsePutKerberosResponse(rsp *http.Response) (*PutKerberosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutKerberosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKerberosKeytabResponse parses an HTTP response from a GetKerberosKeytabWithResponse call
func ParseGetKerberosKeytabResponse(rsp *http.Response) (*GetKerberosKeytabResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosKeytabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostKerberosKeytabResponse parses an HTTP response from a PostKerberosKeytabWithResponse call
func ParsePostKerberosKeytabResponse(rsp *http.Response) (*PostKerberosKeytabResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostKerberosKeytabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteKerberosKeytabIdIdResponse parses an HTTP response from a DeleteKerberosKeytabIdIdWithResponse call
func ParseDeleteKerberosKeytabIdIdResponse(rsp *http.Response) (*DeleteKerberosKeytabIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteKerberosKeytabIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKerberosKeytabIdIdResponse parses an HTTP response from a GetKerberosKeytabIdIdWithResponse call
func ParseGetKerberosKeytabIdIdResponse(rsp *http.Response) (*GetKerberosKeytabIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosKeytabIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutKerberosKeytabIdIdResponse parses an HTTP response from a PutKerberosKeytabIdIdWithResponse call
func ParsePutKerberosKeytabIdIdResponse(rsp *http.Response) (*PutKerberosKeytabIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutKerberosKeytabIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKerberosKeytabSystemKeytabListResponse parses an HTTP response from a GetKerberosKeytabSystemKeytabListWithResponse call
func ParseGetKerberosKeytabSystemKeytabListResponse(rsp *http.Response) (*GetKerberosKeytabSystemKeytabListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosKeytabSystemKeytabListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKerberosRealmResponse parses an HTTP response from a GetKerberosRealmWithResponse call
func ParseGetKerberosRealmResponse(rsp *http.Response) (*GetKerberosRealmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostKerberosRealmResponse parses an HTTP response from a PostKerberosRealmWithResponse call
func ParsePostKerberosRealmResponse(rsp *http.Response) (*PostKerberosRealmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostKerberosRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteKerberosRealmIdIdResponse parses an HTTP response from a DeleteKerberosRealmIdIdWithResponse call
func ParseDeleteKerberosRealmIdIdResponse(rsp *http.Response) (*DeleteKerberosRealmIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteKerberosRealmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKerberosRealmIdIdResponse parses an HTTP response from a GetKerberosRealmIdIdWithResponse call
func ParseGetKerberosRealmIdIdResponse(rsp *http.Response) (*GetKerberosRealmIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKerberosRealmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutKerberosRealmIdIdResponse parses an HTTP response from a PutKerberosRealmIdIdWithResponse call
func ParsePutKerberosRealmIdIdResponse(rsp *http.Response) (*PutKerberosRealmIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutKerberosRealmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKeychaincredentialResponse parses an HTTP response from a GetKeychaincredentialWithResponse call
func ParseGetKeychaincredentialResponse(rsp *http.Response) (*GetKeychaincredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKeychaincredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostKeychaincredentialResponse parses an HTTP response from a PostKeychaincredentialWithResponse call
func ParsePostKeychaincredentialResponse(rsp *http.Response) (*PostKeychaincredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostKeychaincredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKeychaincredentialGenerateSshKeyPairResponse parses an HTTP response from a GetKeychaincredentialGenerateSshKeyPairWithResponse call
func ParseGetKeychaincredentialGenerateSshKeyPairResponse(rsp *http.Response) (*GetKeychaincredentialGenerateSshKeyPairResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKeychaincredentialGenerateSshKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteKeychaincredentialIdIdResponse parses an HTTP response from a DeleteKeychaincredentialIdIdWithResponse call
func ParseDeleteKeychaincredentialIdIdResponse(rsp *http.Response) (*DeleteKeychaincredentialIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeychaincredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetKeychaincredentialIdIdResponse parses an HTTP response from a GetKeychaincredentialIdIdWithResponse call
func ParseGetKeychaincredentialIdIdResponse(rsp *http.Response) (*GetKeychaincredentialIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetKeychaincredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutKeychaincredentialIdIdResponse parses an HTTP response from a PutKeychaincredentialIdIdWithResponse call
func ParsePutKeychaincredentialIdIdResponse(rsp *http.Response) (*PutKeychaincredentialIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutKeychaincredentialIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostKeychaincredentialRemoteSshHostKeyScanResponse parses an HTTP response from a PostKeychaincredentialRemoteSshHostKeyScanWithResponse call
func ParsePostKeychaincredentialRemoteSshHostKeyScanResponse(rsp *http.Response) (*PostKeychaincredentialRemoteSshHostKeyScanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostKeychaincredentialRemoteSshHostKeyScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostKeychaincredentialRemoteSshSemiautomaticSetupResponse parses an HTTP response from a PostKeychaincredentialRemoteSshSemiautomaticSetupWithResponse call
func ParsePostKeychaincredentialRemoteSshSemiautomaticSetupResponse(rsp *http.Response) (*PostKeychaincredentialRemoteSshSemiautomaticSetupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostKeychaincredentialRemoteSshSemiautomaticSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostKeychaincredentialUsedByResponse parses an HTTP response from a PostKeychaincredentialUsedByWithResponse call
func ParsePostKeychaincredentialUsedByResponse(rsp *http.Response) (*PostKeychaincredentialUsedByResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostKeychaincredentialUsedByResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLdapResponse parses an HTTP response from a GetLdapWithResponse call
func ParseGetLdapResponse(rsp *http.Response) (*GetLdapResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLdapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutLdapResponse parses an HTTP response from a PutLdapWithResponse call
func ParsePutLdapResponse(rsp *http.Response) (*PutLdapResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutLdapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLdapGetStateResponse parses an HTTP response from a GetLdapGetStateWithResponse call
func ParseGetLdapGetStateResponse(rsp *http.Response) (*GetLdapGetStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLdapGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLdapIdmapBackendChoicesResponse parses an HTTP response from a GetLdapIdmapBackendChoicesWithResponse call
func ParseGetLdapIdmapBackendChoicesResponse(rsp *http.Response) (*GetLdapIdmapBackendChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLdapIdmapBackendChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLdapSchemaChoicesResponse parses an HTTP response from a GetLdapSchemaChoicesWithResponse call
func ParseGetLdapSchemaChoicesResponse(rsp *http.Response) (*GetLdapSchemaChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLdapSchemaChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLdapSslChoicesResponse parses an HTTP response from a GetLdapSslChoicesWithResponse call
func ParseGetLdapSslChoicesResponse(rsp *http.Response) (*GetLdapSslChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLdapSslChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLldpResponse parses an HTTP response from a GetLldpWithResponse call
func ParseGetLldpResponse(rsp *http.Response) (*GetLldpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLldpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutLldpResponse parses an HTTP response from a PutLldpWithResponse call
func ParsePutLldpResponse(rsp *http.Response) (*PutLldpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutLldpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMailResponse parses an HTTP response from a GetMailWithResponse call
func ParseGetMailResponse(rsp *http.Response) (*GetMailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutMailResponse parses an HTTP response from a PutMailWithResponse call
func ParsePutMailResponse(rsp *http.Response) (*PutMailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostMailSendResponse parses an HTTP response from a PostMailSendWithResponse call
func ParsePostMailSendResponse(rsp *http.Response) (*PostMailSendResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostMailSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMultipathResponse parses an HTTP response from a GetMultipathWithResponse call
func ParseGetMultipathResponse(rsp *http.Response) (*GetMultipathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMultipathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMultipathIdIdResponse parses an HTTP response from a GetMultipathIdIdWithResponse call
func ParseGetMultipathIdIdResponse(rsp *http.Response) (*GetMultipathIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMultipathIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNetworkConfigurationResponse parses an HTTP response from a GetNetworkConfigurationWithResponse call
func ParseGetNetworkConfigurationResponse(rsp *http.Response) (*GetNetworkConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutNetworkConfigurationResponse parses an HTTP response from a PutNetworkConfigurationWithResponse call
func ParsePutNetworkConfigurationResponse(rsp *http.Response) (*PutNetworkConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutNetworkConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNetworkGeneralSummaryResponse parses an HTTP response from a GetNetworkGeneralSummaryWithResponse call
func ParseGetNetworkGeneralSummaryResponse(rsp *http.Response) (*GetNetworkGeneralSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkGeneralSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNfsResponse parses an HTTP response from a GetNfsWithResponse call
func ParseGetNfsResponse(rsp *http.Response) (*GetNfsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutNfsResponse parses an HTTP response from a PutNfsWithResponse call
func ParsePutNfsResponse(rsp *http.Response) (*PutNfsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutNfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNisResponse parses an HTTP response from a GetNisWithResponse call
func ParseGetNisResponse(rsp *http.Response) (*GetNisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutNisResponse parses an HTTP response from a PutNisWithResponse call
func ParsePutNisResponse(rsp *http.Response) (*PutNisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutNisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNisGetStateResponse parses an HTTP response from a GetNisGetStateWithResponse call
func ParseGetNisGetStateResponse(rsp *http.Response) (*GetNisGetStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNisGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPluginResponse parses an HTTP response from a GetPluginWithResponse call
func ParseGetPluginResponse(rsp *http.Response) (*GetPluginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPluginResponse parses an HTTP response from a PostPluginWithResponse call
func ParsePostPluginResponse(rsp *http.Response) (*PostPluginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPluginAvailableResponse parses an HTTP response from a PostPluginAvailableWithResponse call
func ParsePostPluginAvailableResponse(rsp *http.Response) (*PostPluginAvailableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPluginAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPluginBranchesChoicesResponse parses an HTTP response from a PostPluginBranchesChoicesWithResponse call
func ParsePostPluginBranchesChoicesResponse(rsp *http.Response) (*PostPluginBranchesChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPluginBranchesChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPluginDefaultsResponse parses an HTTP response from a PostPluginDefaultsWithResponse call
func ParsePostPluginDefaultsResponse(rsp *http.Response) (*PostPluginDefaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPluginDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePluginIdIdResponse parses an HTTP response from a DeletePluginIdIdWithResponse call
func ParseDeletePluginIdIdResponse(rsp *http.Response) (*DeletePluginIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePluginIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPluginIdIdResponse parses an HTTP response from a GetPluginIdIdWithResponse call
func ParseGetPluginIdIdResponse(rsp *http.Response) (*GetPluginIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPluginIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutPluginIdIdResponse parses an HTTP response from a PutPluginIdIdWithResponse call
func ParsePutPluginIdIdResponse(rsp *http.Response) (*PutPluginIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPluginIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPluginOfficialRepositoriesResponse parses an HTTP response from a GetPluginOfficialRepositoriesWithResponse call
func ParseGetPluginOfficialRepositoriesResponse(rsp *http.Response) (*GetPluginOfficialRepositoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPluginOfficialRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPluginRetrieveVersionsForReposResponse parses an HTTP response from a GetPluginRetrieveVersionsForReposWithResponse call
func ParseGetPluginRetrieveVersionsForReposResponse(rsp *http.Response) (*GetPluginRetrieveVersionsForReposResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPluginRetrieveVersionsForReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolResponse parses an HTTP response from a GetPoolWithResponse call
func ParseGetPoolResponse(rsp *http.Response) (*GetPoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolResponse parses an HTTP response from a PostPoolWithResponse call
func ParsePostPoolResponse(rsp *http.Response) (*PostPoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolDatasetResponse parses an HTTP response from a GetPoolDatasetWithResponse call
func ParseGetPoolDatasetResponse(rsp *http.Response) (*GetPoolDatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolDatasetResponse parses an HTTP response from a PostPoolDatasetWithResponse call
func ParsePostPoolDatasetResponse(rsp *http.Response) (*PostPoolDatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePoolDatasetIdIdResponse parses an HTTP response from a DeletePoolDatasetIdIdWithResponse call
func ParseDeletePoolDatasetIdIdResponse(rsp *http.Response) (*DeletePoolDatasetIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePoolDatasetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolDatasetIdIdResponse parses an HTTP response from a GetPoolDatasetIdIdWithResponse call
func ParseGetPoolDatasetIdIdResponse(rsp *http.Response) (*GetPoolDatasetIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolDatasetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutPoolDatasetIdIdResponse parses an HTTP response from a PutPoolDatasetIdIdWithResponse call
func ParsePutPoolDatasetIdIdResponse(rsp *http.Response) (*PutPoolDatasetIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPoolDatasetIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdAttachmentsResponse parses an HTTP response from a PostPoolDatasetIdIdAttachmentsWithResponse call
func ParsePostPoolDatasetIdIdAttachmentsResponse(rsp *http.Response) (*PostPoolDatasetIdIdAttachmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdPermissionResponse parses an HTTP response from a PostPoolDatasetIdIdPermissionWithResponse call
func ParsePostPoolDatasetIdIdPermissionResponse(rsp *http.Response) (*PostPoolDatasetIdIdPermissionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdProcessesResponse parses an HTTP response from a PostPoolDatasetIdIdProcessesWithResponse call
func ParsePostPoolDatasetIdIdProcessesResponse(rsp *http.Response) (*PostPoolDatasetIdIdProcessesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdProcessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolDatasetIdIdPromoteResponse parses an HTTP response from a PostPoolDatasetIdIdPromoteWithResponse call
func ParsePostPoolDatasetIdIdPromoteResponse(rsp *http.Response) (*PostPoolDatasetIdIdPromoteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetIdIdPromoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolDatasetRecommendedZvolBlocksizeResponse parses an HTTP response from a PostPoolDatasetRecommendedZvolBlocksizeWithResponse call
func ParsePostPoolDatasetRecommendedZvolBlocksizeResponse(rsp *http.Response) (*PostPoolDatasetRecommendedZvolBlocksizeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolDatasetRecommendedZvolBlocksizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolFilesystemChoicesResponse parses an HTTP response from a PostPoolFilesystemChoicesWithResponse call
func ParsePostPoolFilesystemChoicesResponse(rsp *http.Response) (*PostPoolFilesystemChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolFilesystemChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolIdIdResponse parses an HTTP response from a GetPoolIdIdWithResponse call
func ParseGetPoolIdIdResponse(rsp *http.Response) (*GetPoolIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutPoolIdIdResponse parses an HTTP response from a PutPoolIdIdWithResponse call
func ParsePutPoolIdIdResponse(rsp *http.Response) (*PutPoolIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPoolIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdAttachmentsResponse parses an HTTP response from a PostPoolIdIdAttachmentsWithResponse call
func ParsePostPoolIdIdAttachmentsResponse(rsp *http.Response) (*PostPoolIdIdAttachmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdDetachResponse parses an HTTP response from a PostPoolIdIdDetachWithResponse call
func ParsePostPoolIdIdDetachResponse(rsp *http.Response) (*PostPoolIdIdDetachResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdDetachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdDownloadEncryptionKeyResponse parses an HTTP response from a PostPoolIdIdDownloadEncryptionKeyWithResponse call
func ParsePostPoolIdIdDownloadEncryptionKeyResponse(rsp *http.Response) (*PostPoolIdIdDownloadEncryptionKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdDownloadEncryptionKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdExportResponse parses an HTTP response from a PostPoolIdIdExportWithResponse call
func ParsePostPoolIdIdExportResponse(rsp *http.Response) (*PostPoolIdIdExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdGetDisksResponse parses an HTTP response from a PostPoolIdIdGetDisksWithResponse call
func ParsePostPoolIdIdGetDisksResponse(rsp *http.Response) (*PostPoolIdIdGetDisksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdGetDisksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdIsUpgradedResponse parses an HTTP response from a PostPoolIdIdIsUpgradedWithResponse call
func ParsePostPoolIdIdIsUpgradedResponse(rsp *http.Response) (*PostPoolIdIdIsUpgradedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdIsUpgradedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdLockResponse parses an HTTP response from a PostPoolIdIdLockWithResponse call
func ParsePostPoolIdIdLockResponse(rsp *http.Response) (*PostPoolIdIdLockResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdLockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdOfflineResponse parses an HTTP response from a PostPoolIdIdOfflineWithResponse call
func ParsePostPoolIdIdOfflineResponse(rsp *http.Response) (*PostPoolIdIdOfflineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdOfflineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdOnlineResponse parses an HTTP response from a PostPoolIdIdOnlineWithResponse call
func ParsePostPoolIdIdOnlineResponse(rsp *http.Response) (*PostPoolIdIdOnlineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdOnlineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdPassphraseResponse parses an HTTP response from a PostPoolIdIdPassphraseWithResponse call
func ParsePostPoolIdIdPassphraseResponse(rsp *http.Response) (*PostPoolIdIdPassphraseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdPassphraseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdProcessesResponse parses an HTTP response from a PostPoolIdIdProcessesWithResponse call
func ParsePostPoolIdIdProcessesResponse(rsp *http.Response) (*PostPoolIdIdProcessesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdProcessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdRecoverykeyRmResponse parses an HTTP response from a PostPoolIdIdRecoverykeyRmWithResponse call
func ParsePostPoolIdIdRecoverykeyRmResponse(rsp *http.Response) (*PostPoolIdIdRecoverykeyRmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdRecoverykeyRmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdRekeyResponse parses an HTTP response from a PostPoolIdIdRekeyWithResponse call
func ParsePostPoolIdIdRekeyResponse(rsp *http.Response) (*PostPoolIdIdRekeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdRekeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdRemoveResponse parses an HTTP response from a PostPoolIdIdRemoveWithResponse call
func ParsePostPoolIdIdRemoveResponse(rsp *http.Response) (*PostPoolIdIdRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdReplaceResponse parses an HTTP response from a PostPoolIdIdReplaceWithResponse call
func ParsePostPoolIdIdReplaceResponse(rsp *http.Response) (*PostPoolIdIdReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdScrubResponse parses an HTTP response from a PostPoolIdIdScrubWithResponse call
func ParsePostPoolIdIdScrubResponse(rsp *http.Response) (*PostPoolIdIdScrubResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdUnlockResponse parses an HTTP response from a PostPoolIdIdUnlockWithResponse call
func ParsePostPoolIdIdUnlockResponse(rsp *http.Response) (*PostPoolIdIdUnlockResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdUnlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolIdIdUpgradeResponse parses an HTTP response from a PostPoolIdIdUpgradeWithResponse call
func ParsePostPoolIdIdUpgradeResponse(rsp *http.Response) (*PostPoolIdIdUpgradeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolIdIdUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolImportDiskResponse parses an HTTP response from a PostPoolImportDiskWithResponse call
func ParsePostPoolImportDiskResponse(rsp *http.Response) (*PostPoolImportDiskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolImportDiskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolImportDiskAutodetectFsTypeResponse parses an HTTP response from a PostPoolImportDiskAutodetectFsTypeWithResponse call
func ParsePostPoolImportDiskAutodetectFsTypeResponse(rsp *http.Response) (*PostPoolImportDiskAutodetectFsTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolImportDiskAutodetectFsTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolImportDiskMsdosfsLocalesResponse parses an HTTP response from a GetPoolImportDiskMsdosfsLocalesWithResponse call
func ParseGetPoolImportDiskMsdosfsLocalesResponse(rsp *http.Response) (*GetPoolImportDiskMsdosfsLocalesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolImportDiskMsdosfsLocalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolImportFindResponse parses an HTTP response from a GetPoolImportFindWithResponse call
func ParseGetPoolImportFindResponse(rsp *http.Response) (*GetPoolImportFindResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolImportFindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolImportPoolResponse parses an HTTP response from a PostPoolImportPoolWithResponse call
func ParsePostPoolImportPoolResponse(rsp *http.Response) (*PostPoolImportPoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolImportPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolResilverResponse parses an HTTP response from a GetPoolResilverWithResponse call
func ParseGetPoolResilverResponse(rsp *http.Response) (*GetPoolResilverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolResilverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutPoolResilverResponse parses an HTTP response from a PutPoolResilverWithResponse call
func ParsePutPoolResilverResponse(rsp *http.Response) (*PutPoolResilverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPoolResilverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolScrubResponse parses an HTTP response from a GetPoolScrubWithResponse call
func ParseGetPoolScrubResponse(rsp *http.Response) (*GetPoolScrubResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolScrubResponse parses an HTTP response from a PostPoolScrubWithResponse call
func ParsePostPoolScrubResponse(rsp *http.Response) (*PostPoolScrubResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePoolScrubIdIdResponse parses an HTTP response from a DeletePoolScrubIdIdWithResponse call
func ParseDeletePoolScrubIdIdResponse(rsp *http.Response) (*DeletePoolScrubIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePoolScrubIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolScrubIdIdResponse parses an HTTP response from a GetPoolScrubIdIdWithResponse call
func ParseGetPoolScrubIdIdResponse(rsp *http.Response) (*GetPoolScrubIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolScrubIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutPoolScrubIdIdResponse parses an HTTP response from a PutPoolScrubIdIdWithResponse call
func ParsePutPoolScrubIdIdResponse(rsp *http.Response) (*PutPoolScrubIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPoolScrubIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolScrubRunResponse parses an HTTP response from a PostPoolScrubRunWithResponse call
func ParsePostPoolScrubRunResponse(rsp *http.Response) (*PostPoolScrubRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolScrubRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolSnapshottaskResponse parses an HTTP response from a GetPoolSnapshottaskWithResponse call
func ParseGetPoolSnapshottaskResponse(rsp *http.Response) (*GetPoolSnapshottaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolSnapshottaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolSnapshottaskResponse parses an HTTP response from a PostPoolSnapshottaskWithResponse call
func ParsePostPoolSnapshottaskResponse(rsp *http.Response) (*PostPoolSnapshottaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolSnapshottaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePoolSnapshottaskIdIdResponse parses an HTTP response from a DeletePoolSnapshottaskIdIdWithResponse call
func ParseDeletePoolSnapshottaskIdIdResponse(rsp *http.Response) (*DeletePoolSnapshottaskIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePoolSnapshottaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPoolSnapshottaskIdIdResponse parses an HTTP response from a GetPoolSnapshottaskIdIdWithResponse call
func ParseGetPoolSnapshottaskIdIdResponse(rsp *http.Response) (*GetPoolSnapshottaskIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoolSnapshottaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutPoolSnapshottaskIdIdResponse parses an HTTP response from a PutPoolSnapshottaskIdIdWithResponse call
func ParsePutPoolSnapshottaskIdIdResponse(rsp *http.Response) (*PutPoolSnapshottaskIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPoolSnapshottaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolSnapshottaskIdIdRunResponse parses an HTTP response from a PostPoolSnapshottaskIdIdRunWithResponse call
func ParsePostPoolSnapshottaskIdIdRunResponse(rsp *http.Response) (*PostPoolSnapshottaskIdIdRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolSnapshottaskIdIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPoolUnlockServicesRestartChoicesResponse parses an HTTP response from a PostPoolUnlockServicesRestartChoicesWithResponse call
func ParsePostPoolUnlockServicesRestartChoicesResponse(rsp *http.Response) (*PostPoolUnlockServicesRestartChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPoolUnlockServicesRestartChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetReplicationResponse parses an HTTP response from a GetReplicationWithResponse call
func ParseGetReplicationResponse(rsp *http.Response) (*GetReplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostReplicationResponse parses an HTTP response from a PostReplicationWithResponse call
func ParsePostReplicationResponse(rsp *http.Response) (*PostReplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostReplicationCountEligibleManualSnapshotsResponse parses an HTTP response from a PostReplicationCountEligibleManualSnapshotsWithResponse call
func ParsePostReplicationCountEligibleManualSnapshotsResponse(rsp *http.Response) (*PostReplicationCountEligibleManualSnapshotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationCountEligibleManualSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostReplicationCreateDatasetResponse parses an HTTP response from a PostReplicationCreateDatasetWithResponse call
func ParsePostReplicationCreateDatasetResponse(rsp *http.Response) (*PostReplicationCreateDatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationCreateDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteReplicationIdIdResponse parses an HTTP response from a DeleteReplicationIdIdWithResponse call
func ParseDeleteReplicationIdIdResponse(rsp *http.Response) (*DeleteReplicationIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteReplicationIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetReplicationIdIdResponse parses an HTTP response from a GetReplicationIdIdWithResponse call
func ParseGetReplicationIdIdResponse(rsp *http.Response) (*GetReplicationIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReplicationIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutReplicationIdIdResponse parses an HTTP response from a PutReplicationIdIdWithResponse call
func ParsePutReplicationIdIdResponse(rsp *http.Response) (*PutReplicationIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutReplicationIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostReplicationIdIdRunResponse parses an HTTP response from a PostReplicationIdIdRunWithResponse call
func ParsePostReplicationIdIdRunResponse(rsp *http.Response) (*PostReplicationIdIdRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationIdIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostReplicationListDatasetsResponse parses an HTTP response from a PostReplicationListDatasetsWithResponse call
func ParsePostReplicationListDatasetsResponse(rsp *http.Response) (*PostReplicationListDatasetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationListDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetReplicationListNamingSchemasResponse parses an HTTP response from a GetReplicationListNamingSchemasWithResponse call
func ParseGetReplicationListNamingSchemasResponse(rsp *http.Response) (*GetReplicationListNamingSchemasResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReplicationListNamingSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostReplicationTargetUnmatchedSnapshotsResponse parses an HTTP response from a PostReplicationTargetUnmatchedSnapshotsWithResponse call
func ParsePostReplicationTargetUnmatchedSnapshotsResponse(rsp *http.Response) (*PostReplicationTargetUnmatchedSnapshotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostReplicationTargetUnmatchedSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetReportingResponse parses an HTTP response from a GetReportingWithResponse call
func ParseGetReportingResponse(rsp *http.Response) (*GetReportingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReportingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutReportingResponse parses an HTTP response from a PutReportingWithResponse call
func ParsePutReportingResponse(rsp *http.Response) (*PutReportingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutReportingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostReportingGetDataResponse parses an HTTP response from a PostReportingGetDataWithResponse call
func ParsePostReportingGetDataResponse(rsp *http.Response) (*PostReportingGetDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostReportingGetDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetReportingGraphsResponse parses an HTTP response from a GetReportingGraphsWithResponse call
func ParseGetReportingGraphsResponse(rsp *http.Response) (*GetReportingGraphsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReportingGraphsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostRouteIpv4gwReachableResponse parses an HTTP response from a PostRouteIpv4gwReachableWithResponse call
func ParsePostRouteIpv4gwReachableResponse(rsp *http.Response) (*PostRouteIpv4gwReachableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostRouteIpv4gwReachableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetRouteSystemRoutesResponse parses an HTTP response from a GetRouteSystemRoutesWithResponse call
func ParseGetRouteSystemRoutesResponse(rsp *http.Response) (*GetRouteSystemRoutesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRouteSystemRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetRsyncdResponse parses an HTTP response from a GetRsyncdWithResponse call
func ParseGetRsyncdResponse(rsp *http.Response) (*GetRsyncdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRsyncdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutRsyncdResponse parses an HTTP response from a PutRsyncdWithResponse call
func ParsePutRsyncdResponse(rsp *http.Response) (*PutRsyncdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutRsyncdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetRsyncmodResponse parses an HTTP response from a GetRsyncmodWithResponse call
func ParseGetRsyncmodResponse(rsp *http.Response) (*GetRsyncmodResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRsyncmodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostRsyncmodResponse parses an HTTP response from a PostRsyncmodWithResponse call
func ParsePostRsyncmodResponse(rsp *http.Response) (*PostRsyncmodResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostRsyncmodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteRsyncmodIdIdResponse parses an HTTP response from a DeleteRsyncmodIdIdWithResponse call
func ParseDeleteRsyncmodIdIdResponse(rsp *http.Response) (*DeleteRsyncmodIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteRsyncmodIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetRsyncmodIdIdResponse parses an HTTP response from a GetRsyncmodIdIdWithResponse call
func ParseGetRsyncmodIdIdResponse(rsp *http.Response) (*GetRsyncmodIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRsyncmodIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutRsyncmodIdIdResponse parses an HTTP response from a PutRsyncmodIdIdWithResponse call
func ParsePutRsyncmodIdIdResponse(rsp *http.Response) (*PutRsyncmodIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutRsyncmodIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetRsynctaskResponse parses an HTTP response from a GetRsynctaskWithResponse call
func ParseGetRsynctaskResponse(rsp *http.Response) (*GetRsynctaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRsynctaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostRsynctaskResponse parses an HTTP response from a PostRsynctaskWithResponse call
func ParsePostRsynctaskResponse(rsp *http.Response) (*PostRsynctaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostRsynctaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteRsynctaskIdIdResponse parses an HTTP response from a DeleteRsynctaskIdIdWithResponse call
func ParseDeleteRsynctaskIdIdResponse(rsp *http.Response) (*DeleteRsynctaskIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteRsynctaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetRsynctaskIdIdResponse parses an HTTP response from a GetRsynctaskIdIdWithResponse call
func ParseGetRsynctaskIdIdResponse(rsp *http.Response) (*GetRsynctaskIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRsynctaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutRsynctaskIdIdResponse parses an HTTP response from a PutRsynctaskIdIdWithResponse call
func ParsePutRsynctaskIdIdResponse(rsp *http.Response) (*PutRsynctaskIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutRsynctaskIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostRsynctaskIdIdRunResponse parses an HTTP response from a PostRsynctaskIdIdRunWithResponse call
func ParsePostRsynctaskIdIdRunResponse(rsp *http.Response) (*PostRsynctaskIdIdRunResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostRsynctaskIdIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetS3Response parses an HTTP response from a GetS3WithResponse call
func ParseGetS3Response(rsp *http.Response) (*GetS3Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetS3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutS3Response parses an HTTP response from a PutS3WithResponse call
func ParsePutS3Response(rsp *http.Response) (*PutS3Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutS3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServiceResponse parses an HTTP response from a GetServiceWithResponse call
func ParseGetServiceResponse(rsp *http.Response) (*GetServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServiceIdIdResponse parses an HTTP response from a GetServiceIdIdWithResponse call
func ParseGetServiceIdIdResponse(rsp *http.Response) (*GetServiceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutServiceIdIdResponse parses an HTTP response from a PutServiceIdIdWithResponse call
func ParsePutServiceIdIdResponse(rsp *http.Response) (*PutServiceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutServiceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostServiceReloadResponse parses an HTTP response from a PostServiceReloadWithResponse call
func ParsePostServiceReloadResponse(rsp *http.Response) (*PostServiceReloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostServiceReloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostServiceRestartResponse parses an HTTP response from a PostServiceRestartWithResponse call
func ParsePostServiceRestartResponse(rsp *http.Response) (*PostServiceRestartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostServiceRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostServiceStartResponse parses an HTTP response from a PostServiceStartWithResponse call
func ParsePostServiceStartResponse(rsp *http.Response) (*PostServiceStartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostServiceStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServiceStartedResponse parses an HTTP response from a GetServiceStartedWithResponse call
func ParseGetServiceStartedResponse(rsp *http.Response) (*GetServiceStartedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceStartedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostServiceStopResponse parses an HTTP response from a PostServiceStopWithResponse call
func ParsePostServiceStopResponse(rsp *http.Response) (*PostServiceStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostServiceStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostServiceTerminateProcessResponse parses an HTTP response from a PostServiceTerminateProcessWithResponse call
func ParsePostServiceTerminateProcessResponse(rsp *http.Response) (*PostServiceTerminateProcessResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostServiceTerminateProcessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingAfpResponse parses an HTTP response from a GetSharingAfpWithResponse call
func ParseGetSharingAfpResponse(rsp *http.Response) (*GetSharingAfpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingAfpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSharingAfpResponse parses an HTTP response from a PostSharingAfpWithResponse call
func ParsePostSharingAfpResponse(rsp *http.Response) (*PostSharingAfpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSharingAfpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSharingAfpIdIdResponse parses an HTTP response from a DeleteSharingAfpIdIdWithResponse call
func ParseDeleteSharingAfpIdIdResponse(rsp *http.Response) (*DeleteSharingAfpIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSharingAfpIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingAfpIdIdResponse parses an HTTP response from a GetSharingAfpIdIdWithResponse call
func ParseGetSharingAfpIdIdResponse(rsp *http.Response) (*GetSharingAfpIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingAfpIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSharingAfpIdIdResponse parses an HTTP response from a PutSharingAfpIdIdWithResponse call
func ParsePutSharingAfpIdIdResponse(rsp *http.Response) (*PutSharingAfpIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSharingAfpIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingNfsResponse parses an HTTP response from a GetSharingNfsWithResponse call
func ParseGetSharingNfsResponse(rsp *http.Response) (*GetSharingNfsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingNfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSharingNfsResponse parses an HTTP response from a PostSharingNfsWithResponse call
func ParsePostSharingNfsResponse(rsp *http.Response) (*PostSharingNfsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSharingNfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSharingNfsIdIdResponse parses an HTTP response from a DeleteSharingNfsIdIdWithResponse call
func ParseDeleteSharingNfsIdIdResponse(rsp *http.Response) (*DeleteSharingNfsIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSharingNfsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingNfsIdIdResponse parses an HTTP response from a GetSharingNfsIdIdWithResponse call
func ParseGetSharingNfsIdIdResponse(rsp *http.Response) (*GetSharingNfsIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingNfsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSharingNfsIdIdResponse parses an HTTP response from a PutSharingNfsIdIdWithResponse call
func ParsePutSharingNfsIdIdResponse(rsp *http.Response) (*PutSharingNfsIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSharingNfsIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingSmbResponse parses an HTTP response from a GetSharingSmbWithResponse call
func ParseGetSharingSmbResponse(rsp *http.Response) (*GetSharingSmbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingSmbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSharingSmbResponse parses an HTTP response from a PostSharingSmbWithResponse call
func ParsePostSharingSmbResponse(rsp *http.Response) (*PostSharingSmbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSharingSmbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSharingSmbIdIdResponse parses an HTTP response from a DeleteSharingSmbIdIdWithResponse call
func ParseDeleteSharingSmbIdIdResponse(rsp *http.Response) (*DeleteSharingSmbIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSharingSmbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingSmbIdIdResponse parses an HTTP response from a GetSharingSmbIdIdWithResponse call
func ParseGetSharingSmbIdIdResponse(rsp *http.Response) (*GetSharingSmbIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingSmbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSharingSmbIdIdResponse parses an HTTP response from a PutSharingSmbIdIdWithResponse call
func ParsePutSharingSmbIdIdResponse(rsp *http.Response) (*PutSharingSmbIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSharingSmbIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingSmbVfsobjectsChoicesResponse parses an HTTP response from a GetSharingSmbVfsobjectsChoicesWithResponse call
func ParseGetSharingSmbVfsobjectsChoicesResponse(rsp *http.Response) (*GetSharingSmbVfsobjectsChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingSmbVfsobjectsChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingWebdavResponse parses an HTTP response from a GetSharingWebdavWithResponse call
func ParseGetSharingWebdavResponse(rsp *http.Response) (*GetSharingWebdavResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingWebdavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSharingWebdavResponse parses an HTTP response from a PostSharingWebdavWithResponse call
func ParsePostSharingWebdavResponse(rsp *http.Response) (*PostSharingWebdavResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSharingWebdavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSharingWebdavIdIdResponse parses an HTTP response from a DeleteSharingWebdavIdIdWithResponse call
func ParseDeleteSharingWebdavIdIdResponse(rsp *http.Response) (*DeleteSharingWebdavIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSharingWebdavIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSharingWebdavIdIdResponse parses an HTTP response from a GetSharingWebdavIdIdWithResponse call
func ParseGetSharingWebdavIdIdResponse(rsp *http.Response) (*GetSharingWebdavIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSharingWebdavIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSharingWebdavIdIdResponse parses an HTTP response from a PutSharingWebdavIdIdWithResponse call
func ParsePutSharingWebdavIdIdResponse(rsp *http.Response) (*PutSharingWebdavIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSharingWebdavIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmartResponse parses an HTTP response from a GetSmartWithResponse call
func ParseGetSmartResponse(rsp *http.Response) (*GetSmartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSmartResponse parses an HTTP response from a PutSmartWithResponse call
func ParsePutSmartResponse(rsp *http.Response) (*PutSmartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSmartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmartTestResponse parses an HTTP response from a GetSmartTestWithResponse call
func ParseGetSmartTestResponse(rsp *http.Response) (*GetSmartTestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmartTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSmartTestResponse parses an HTTP response from a PostSmartTestWithResponse call
func ParsePostSmartTestResponse(rsp *http.Response) (*PostSmartTestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSmartTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSmartTestIdIdResponse parses an HTTP response from a DeleteSmartTestIdIdWithResponse call
func ParseDeleteSmartTestIdIdResponse(rsp *http.Response) (*DeleteSmartTestIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmartTestIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmartTestIdIdResponse parses an HTTP response from a GetSmartTestIdIdWithResponse call
func ParseGetSmartTestIdIdResponse(rsp *http.Response) (*GetSmartTestIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmartTestIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSmartTestIdIdResponse parses an HTTP response from a PutSmartTestIdIdWithResponse call
func ParsePutSmartTestIdIdResponse(rsp *http.Response) (*PutSmartTestIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSmartTestIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmartTestResultsResponse parses an HTTP response from a GetSmartTestResultsWithResponse call
func ParseGetSmartTestResultsResponse(rsp *http.Response) (*GetSmartTestResultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmartTestResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmbResponse parses an HTTP response from a GetSmbWithResponse call
func ParseGetSmbResponse(rsp *http.Response) (*GetSmbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSmbResponse parses an HTTP response from a PutSmbWithResponse call
func ParsePutSmbResponse(rsp *http.Response) (*PutSmbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSmbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmbBindipChoicesResponse parses an HTTP response from a GetSmbBindipChoicesWithResponse call
func ParseGetSmbBindipChoicesResponse(rsp *http.Response) (*GetSmbBindipChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmbBindipChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmbDomainChoicesResponse parses an HTTP response from a GetSmbDomainChoicesWithResponse call
func ParseGetSmbDomainChoicesResponse(rsp *http.Response) (*GetSmbDomainChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmbDomainChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmbSharesecResponse parses an HTTP response from a GetSmbSharesecWithResponse call
func ParseGetSmbSharesecResponse(rsp *http.Response) (*GetSmbSharesecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmbSharesecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSmbSharesecResponse parses an HTTP response from a PostSmbSharesecWithResponse call
func ParsePostSmbSharesecResponse(rsp *http.Response) (*PostSmbSharesecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSmbSharesecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSmbSharesecGetaclResponse parses an HTTP response from a PostSmbSharesecGetaclWithResponse call
func ParsePostSmbSharesecGetaclResponse(rsp *http.Response) (*PostSmbSharesecGetaclResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSmbSharesecGetaclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSmbSharesecIdIdResponse parses an HTTP response from a DeleteSmbSharesecIdIdWithResponse call
func ParseDeleteSmbSharesecIdIdResponse(rsp *http.Response) (*DeleteSmbSharesecIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmbSharesecIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmbSharesecIdIdResponse parses an HTTP response from a GetSmbSharesecIdIdWithResponse call
func ParseGetSmbSharesecIdIdResponse(rsp *http.Response) (*GetSmbSharesecIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmbSharesecIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSmbSharesecIdIdResponse parses an HTTP response from a PutSmbSharesecIdIdWithResponse call
func ParsePutSmbSharesecIdIdResponse(rsp *http.Response) (*PutSmbSharesecIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSmbSharesecIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmbSharesecSynchronizeAclsResponse parses an HTTP response from a GetSmbSharesecSynchronizeAclsWithResponse call
func ParseGetSmbSharesecSynchronizeAclsResponse(rsp *http.Response) (*GetSmbSharesecSynchronizeAclsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmbSharesecSynchronizeAclsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSmbUnixcharsetChoicesResponse parses an HTTP response from a GetSmbUnixcharsetChoicesWithResponse call
func ParseGetSmbUnixcharsetChoicesResponse(rsp *http.Response) (*GetSmbUnixcharsetChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSmbUnixcharsetChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSnmpResponse parses an HTTP response from a GetSnmpWithResponse call
func ParseGetSnmpResponse(rsp *http.Response) (*GetSnmpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSnmpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSnmpResponse parses an HTTP response from a PutSnmpWithResponse call
func ParsePutSnmpResponse(rsp *http.Response) (*PutSnmpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSnmpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSshResponse parses an HTTP response from a GetSshWithResponse call
func ParseGetSshResponse(rsp *http.Response) (*GetSshResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSshResponse parses an HTTP response from a PutSshWithResponse call
func ParsePutSshResponse(rsp *http.Response) (*PutSshResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSshBindifaceChoicesResponse parses an HTTP response from a GetSshBindifaceChoicesWithResponse call
func ParseGetSshBindifaceChoicesResponse(rsp *http.Response) (*GetSshBindifaceChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSshBindifaceChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStaticrouteResponse parses an HTTP response from a GetStaticrouteWithResponse call
func ParseGetStaticrouteResponse(rsp *http.Response) (*GetStaticrouteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStaticrouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostStaticrouteResponse parses an HTTP response from a PostStaticrouteWithResponse call
func ParsePostStaticrouteResponse(rsp *http.Response) (*PostStaticrouteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostStaticrouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteStaticrouteIdIdResponse parses an HTTP response from a DeleteStaticrouteIdIdWithResponse call
func ParseDeleteStaticrouteIdIdResponse(rsp *http.Response) (*DeleteStaticrouteIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStaticrouteIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStaticrouteIdIdResponse parses an HTTP response from a GetStaticrouteIdIdWithResponse call
func ParseGetStaticrouteIdIdResponse(rsp *http.Response) (*GetStaticrouteIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStaticrouteIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutStaticrouteIdIdResponse parses an HTTP response from a PutStaticrouteIdIdWithResponse call
func ParsePutStaticrouteIdIdResponse(rsp *http.Response) (*PutStaticrouteIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutStaticrouteIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostStatsGetDataResponse parses an HTTP response from a PostStatsGetDataWithResponse call
func ParsePostStatsGetDataResponse(rsp *http.Response) (*PostStatsGetDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostStatsGetDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostStatsGetDatasetInfoResponse parses an HTTP response from a PostStatsGetDatasetInfoWithResponse call
func ParsePostStatsGetDatasetInfoResponse(rsp *http.Response) (*PostStatsGetDatasetInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostStatsGetDatasetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStatsGetSourcesResponse parses an HTTP response from a GetStatsGetSourcesWithResponse call
func ParseGetStatsGetSourcesResponse(rsp *http.Response) (*GetStatsGetSourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatsGetSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSupportResponse parses an HTTP response from a GetSupportWithResponse call
func ParseGetSupportResponse(rsp *http.Response) (*GetSupportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSupportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSupportResponse parses an HTTP response from a PutSupportWithResponse call
func ParsePutSupportResponse(rsp *http.Response) (*PutSupportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSupportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSupportFetchCategoriesResponse parses an HTTP response from a PostSupportFetchCategoriesWithResponse call
func ParsePostSupportFetchCategoriesResponse(rsp *http.Response) (*PostSupportFetchCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSupportFetchCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSupportFieldsResponse parses an HTTP response from a GetSupportFieldsWithResponse call
func ParseGetSupportFieldsResponse(rsp *http.Response) (*GetSupportFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSupportFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSupportIsAvailableResponse parses an HTTP response from a GetSupportIsAvailableWithResponse call
func ParseGetSupportIsAvailableResponse(rsp *http.Response) (*GetSupportIsAvailableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSupportIsAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSupportIsAvailableAndEnabledResponse parses an HTTP response from a GetSupportIsAvailableAndEnabledWithResponse call
func ParseGetSupportIsAvailableAndEnabledResponse(rsp *http.Response) (*GetSupportIsAvailableAndEnabledResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSupportIsAvailableAndEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSupportNewTicketResponse parses an HTTP response from a PostSupportNewTicketWithResponse call
func ParsePostSupportNewTicketResponse(rsp *http.Response) (*PostSupportNewTicketResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSupportNewTicketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemAdvancedResponse parses an HTTP response from a GetSystemAdvancedWithResponse call
func ParseGetSystemAdvancedResponse(rsp *http.Response) (*GetSystemAdvancedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemAdvancedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSystemAdvancedResponse parses an HTTP response from a PutSystemAdvancedWithResponse call
func ParsePutSystemAdvancedResponse(rsp *http.Response) (*PutSystemAdvancedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSystemAdvancedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemAdvancedSerialPortChoicesResponse parses an HTTP response from a GetSystemAdvancedSerialPortChoicesWithResponse call
func ParseGetSystemAdvancedSerialPortChoicesResponse(rsp *http.Response) (*GetSystemAdvancedSerialPortChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemAdvancedSerialPortChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemBootIdResponse parses an HTTP response from a GetSystemBootIdWithResponse call
func ParseGetSystemBootIdResponse(rsp *http.Response) (*GetSystemBootIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemBootIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSystemFeatureEnabledResponse parses an HTTP response from a PostSystemFeatureEnabledWithResponse call
func ParsePostSystemFeatureEnabledResponse(rsp *http.Response) (*PostSystemFeatureEnabledResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSystemFeatureEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralResponse parses an HTTP response from a GetSystemGeneralWithResponse call
func ParseGetSystemGeneralResponse(rsp *http.Response) (*GetSystemGeneralResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSystemGeneralResponse parses an HTTP response from a PutSystemGeneralWithResponse call
func ParsePutSystemGeneralResponse(rsp *http.Response) (*PutSystemGeneralResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSystemGeneralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralCountryChoicesResponse parses an HTTP response from a GetSystemGeneralCountryChoicesWithResponse call
func ParseGetSystemGeneralCountryChoicesResponse(rsp *http.Response) (*GetSystemGeneralCountryChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralCountryChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralKbdmapChoicesResponse parses an HTTP response from a GetSystemGeneralKbdmapChoicesWithResponse call
func ParseGetSystemGeneralKbdmapChoicesResponse(rsp *http.Response) (*GetSystemGeneralKbdmapChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralKbdmapChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralLanguageChoicesResponse parses an HTTP response from a GetSystemGeneralLanguageChoicesWithResponse call
func ParseGetSystemGeneralLanguageChoicesResponse(rsp *http.Response) (*GetSystemGeneralLanguageChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralLanguageChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralLocalUrlResponse parses an HTTP response from a GetSystemGeneralLocalUrlWithResponse call
func ParseGetSystemGeneralLocalUrlResponse(rsp *http.Response) (*GetSystemGeneralLocalUrlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralLocalUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralTimezoneChoicesResponse parses an HTTP response from a GetSystemGeneralTimezoneChoicesWithResponse call
func ParseGetSystemGeneralTimezoneChoicesResponse(rsp *http.Response) (*GetSystemGeneralTimezoneChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralTimezoneChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralUiAddressChoicesResponse parses an HTTP response from a GetSystemGeneralUiAddressChoicesWithResponse call
func ParseGetSystemGeneralUiAddressChoicesResponse(rsp *http.Response) (*GetSystemGeneralUiAddressChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiAddressChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralUiCertificateChoicesResponse parses an HTTP response from a GetSystemGeneralUiCertificateChoicesWithResponse call
func ParseGetSystemGeneralUiCertificateChoicesResponse(rsp *http.Response) (*GetSystemGeneralUiCertificateChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiCertificateChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralUiRestartResponse parses an HTTP response from a GetSystemGeneralUiRestartWithResponse call
func ParseGetSystemGeneralUiRestartResponse(rsp *http.Response) (*GetSystemGeneralUiRestartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemGeneralUiV6addressChoicesResponse parses an HTTP response from a GetSystemGeneralUiV6addressChoicesWithResponse call
func ParseGetSystemGeneralUiV6addressChoicesResponse(rsp *http.Response) (*GetSystemGeneralUiV6addressChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemGeneralUiV6addressChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemInfoResponse parses an HTTP response from a GetSystemInfoWithResponse call
func ParseGetSystemInfoResponse(rsp *http.Response) (*GetSystemInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemIsFreenasResponse parses an HTTP response from a GetSystemIsFreenasWithResponse call
func ParseGetSystemIsFreenasResponse(rsp *http.Response) (*GetSystemIsFreenasResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemIsFreenasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemLegacyUiEnabledResponse parses an HTTP response from a GetSystemLegacyUiEnabledWithResponse call
func ParseGetSystemLegacyUiEnabledResponse(rsp *http.Response) (*GetSystemLegacyUiEnabledResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemLegacyUiEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSystemLicenseUpdateResponse parses an HTTP response from a PostSystemLicenseUpdateWithResponse call
func ParsePostSystemLicenseUpdateResponse(rsp *http.Response) (*PostSystemLicenseUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSystemLicenseUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemNtpserverResponse parses an HTTP response from a GetSystemNtpserverWithResponse call
func ParseGetSystemNtpserverResponse(rsp *http.Response) (*GetSystemNtpserverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemNtpserverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSystemNtpserverResponse parses an HTTP response from a PostSystemNtpserverWithResponse call
func ParsePostSystemNtpserverResponse(rsp *http.Response) (*PostSystemNtpserverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSystemNtpserverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSystemNtpserverIdIdResponse parses an HTTP response from a DeleteSystemNtpserverIdIdWithResponse call
func ParseDeleteSystemNtpserverIdIdResponse(rsp *http.Response) (*DeleteSystemNtpserverIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSystemNtpserverIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemNtpserverIdIdResponse parses an HTTP response from a GetSystemNtpserverIdIdWithResponse call
func ParseGetSystemNtpserverIdIdResponse(rsp *http.Response) (*GetSystemNtpserverIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemNtpserverIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSystemNtpserverIdIdResponse parses an HTTP response from a PutSystemNtpserverIdIdWithResponse call
func ParsePutSystemNtpserverIdIdResponse(rsp *http.Response) (*PutSystemNtpserverIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSystemNtpserverIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemNtpserverTestNtpServerResponse parses an HTTP response from a GetSystemNtpserverTestNtpServerWithResponse call
func ParseGetSystemNtpserverTestNtpServerResponse(rsp *http.Response) (*GetSystemNtpserverTestNtpServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemNtpserverTestNtpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemProductNameResponse parses an HTTP response from a GetSystemProductNameWithResponse call
func ParseGetSystemProductNameResponse(rsp *http.Response) (*GetSystemProductNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemProductNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemReadyResponse parses an HTTP response from a GetSystemReadyWithResponse call
func ParseGetSystemReadyResponse(rsp *http.Response) (*GetSystemReadyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemReadyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSystemRebootResponse parses an HTTP response from a PostSystemRebootWithResponse call
func ParsePostSystemRebootResponse(rsp *http.Response) (*PostSystemRebootResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSystemRebootResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSystemShutdownResponse parses an HTTP response from a PostSystemShutdownWithResponse call
func ParsePostSystemShutdownResponse(rsp *http.Response) (*PostSystemShutdownResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSystemShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemStateResponse parses an HTTP response from a GetSystemStateWithResponse call
func ParseGetSystemStateResponse(rsp *http.Response) (*GetSystemStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemVersionResponse parses an HTTP response from a GetSystemVersionWithResponse call
func ParseGetSystemVersionResponse(rsp *http.Response) (*GetSystemVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSystemdatasetResponse parses an HTTP response from a GetSystemdatasetWithResponse call
func ParseGetSystemdatasetResponse(rsp *http.Response) (*GetSystemdatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemdatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSystemdatasetResponse parses an HTTP response from a PutSystemdatasetWithResponse call
func ParsePutSystemdatasetResponse(rsp *http.Response) (*PutSystemdatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSystemdatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTftpResponse parses an HTTP response from a GetTftpWithResponse call
func ParseGetTftpResponse(rsp *http.Response) (*GetTftpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTftpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutTftpResponse parses an HTTP response from a PutTftpWithResponse call
func ParsePutTftpResponse(rsp *http.Response) (*PutTftpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutTftpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTunableResponse parses an HTTP response from a GetTunableWithResponse call
func ParseGetTunableResponse(rsp *http.Response) (*GetTunableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTunableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostTunableResponse parses an HTTP response from a PostTunableWithResponse call
func ParsePostTunableResponse(rsp *http.Response) (*PostTunableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTunableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteTunableIdIdResponse parses an HTTP response from a DeleteTunableIdIdWithResponse call
func ParseDeleteTunableIdIdResponse(rsp *http.Response) (*DeleteTunableIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTunableIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTunableIdIdResponse parses an HTTP response from a GetTunableIdIdWithResponse call
func ParseGetTunableIdIdResponse(rsp *http.Response) (*GetTunableIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTunableIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutTunableIdIdResponse parses an HTTP response from a PutTunableIdIdWithResponse call
func ParsePutTunableIdIdResponse(rsp *http.Response) (*PutTunableIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutTunableIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUpdateCheckAvailableResponse parses an HTTP response from a PostUpdateCheckAvailableWithResponse call
func ParsePostUpdateCheckAvailableResponse(rsp *http.Response) (*PostUpdateCheckAvailableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateCheckAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUpdateDownloadResponse parses an HTTP response from a GetUpdateDownloadWithResponse call
func ParseGetUpdateDownloadResponse(rsp *http.Response) (*GetUpdateDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUpdateGetPendingResponse parses an HTTP response from a PostUpdateGetPendingWithResponse call
func ParsePostUpdateGetPendingResponse(rsp *http.Response) (*PostUpdateGetPendingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateGetPendingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUpdateGetTrainsResponse parses an HTTP response from a GetUpdateGetTrainsWithResponse call
func ParseGetUpdateGetTrainsResponse(rsp *http.Response) (*GetUpdateGetTrainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateGetTrainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUpdateManualResponse parses an HTTP response from a PostUpdateManualWithResponse call
func ParsePostUpdateManualResponse(rsp *http.Response) (*PostUpdateManualResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateManualResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUpdateSetTrainResponse parses an HTTP response from a PostUpdateSetTrainWithResponse call
func ParsePostUpdateSetTrainResponse(rsp *http.Response) (*PostUpdateSetTrainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateSetTrainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUpdateUpdateResponse parses an HTTP response from a PostUpdateUpdateWithResponse call
func ParsePostUpdateUpdateResponse(rsp *http.Response) (*PostUpdateUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUpsResponse parses an HTTP response from a GetUpsWithResponse call
func ParseGetUpsResponse(rsp *http.Response) (*GetUpsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutUpsResponse parses an HTTP response from a PutUpsWithResponse call
func ParsePutUpsResponse(rsp *http.Response) (*PutUpsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutUpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUpsDriverChoicesResponse parses an HTTP response from a GetUpsDriverChoicesWithResponse call
func ParseGetUpsDriverChoicesResponse(rsp *http.Response) (*GetUpsDriverChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUpsDriverChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUpsPortChoicesResponse parses an HTTP response from a GetUpsPortChoicesWithResponse call
func ParseGetUpsPortChoicesResponse(rsp *http.Response) (*GetUpsPortChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUpsPortChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUserResponse parses an HTTP response from a PostUserWithResponse call
func ParsePostUserResponse(rsp *http.Response) (*PostUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserGetNextUidResponse parses an HTTP response from a GetUserGetNextUidWithResponse call
func ParseGetUserGetNextUidResponse(rsp *http.Response) (*GetUserGetNextUidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserGetNextUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUserGetUserObjResponse parses an HTTP response from a PostUserGetUserObjWithResponse call
func ParsePostUserGetUserObjResponse(rsp *http.Response) (*PostUserGetUserObjResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUserGetUserObjResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserHasRootPasswordResponse parses an HTTP response from a GetUserHasRootPasswordWithResponse call
func ParseGetUserHasRootPasswordResponse(rsp *http.Response) (*GetUserHasRootPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserHasRootPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteUserIdIdResponse parses an HTTP response from a DeleteUserIdIdWithResponse call
func ParseDeleteUserIdIdResponse(rsp *http.Response) (*DeleteUserIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserIdIdResponse parses an HTTP response from a GetUserIdIdWithResponse call
func ParseGetUserIdIdResponse(rsp *http.Response) (*GetUserIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutUserIdIdResponse parses an HTTP response from a PutUserIdIdWithResponse call
func ParsePutUserIdIdResponse(rsp *http.Response) (*PutUserIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUserIdIdPopAttributeResponse parses an HTTP response from a PostUserIdIdPopAttributeWithResponse call
func ParsePostUserIdIdPopAttributeResponse(rsp *http.Response) (*PostUserIdIdPopAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUserIdIdPopAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostUserIdIdSetAttributeResponse parses an HTTP response from a PostUserIdIdSetAttributeWithResponse call
func ParsePostUserIdIdSetAttributeResponse(rsp *http.Response) (*PostUserIdIdSetAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUserIdIdSetAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserShellChoicesResponse parses an HTTP response from a GetUserShellChoicesWithResponse call
func ParseGetUserShellChoicesResponse(rsp *http.Response) (*GetUserShellChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserShellChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmResponse parses an HTTP response from a GetVmWithResponse call
func ParseGetVmResponse(rsp *http.Response) (*GetVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmResponse parses an HTTP response from a PostVmWithResponse call
func ParsePostVmResponse(rsp *http.Response) (*PostVmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmDeviceResponse parses an HTTP response from a GetVmDeviceWithResponse call
func ParseGetVmDeviceResponse(rsp *http.Response) (*GetVmDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmDeviceResponse parses an HTTP response from a PostVmDeviceWithResponse call
func ParsePostVmDeviceResponse(rsp *http.Response) (*PostVmDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteVmDeviceIdIdResponse parses an HTTP response from a DeleteVmDeviceIdIdWithResponse call
func ParseDeleteVmDeviceIdIdResponse(rsp *http.Response) (*DeleteVmDeviceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmDeviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmDeviceIdIdResponse parses an HTTP response from a GetVmDeviceIdIdWithResponse call
func ParseGetVmDeviceIdIdResponse(rsp *http.Response) (*GetVmDeviceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmDeviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutVmDeviceIdIdResponse parses an HTTP response from a PutVmDeviceIdIdWithResponse call
func ParsePutVmDeviceIdIdResponse(rsp *http.Response) (*PutVmDeviceIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutVmDeviceIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmDeviceNicAttachChoicesResponse parses an HTTP response from a GetVmDeviceNicAttachChoicesWithResponse call
func ParseGetVmDeviceNicAttachChoicesResponse(rsp *http.Response) (*GetVmDeviceNicAttachChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmDeviceNicAttachChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmDeviceVncBindChoicesResponse parses an HTTP response from a GetVmDeviceVncBindChoicesWithResponse call
func ParseGetVmDeviceVncBindChoicesResponse(rsp *http.Response) (*GetVmDeviceVncBindChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmDeviceVncBindChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmFlagsResponse parses an HTTP response from a GetVmFlagsWithResponse call
func ParseGetVmFlagsResponse(rsp *http.Response) (*GetVmFlagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmGetAttachedIfaceResponse parses an HTTP response from a PostVmGetAttachedIfaceWithResponse call
func ParsePostVmGetAttachedIfaceResponse(rsp *http.Response) (*PostVmGetAttachedIfaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmGetAttachedIfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmGetAvailableMemoryResponse parses an HTTP response from a PostVmGetAvailableMemoryWithResponse call
func ParsePostVmGetAvailableMemoryResponse(rsp *http.Response) (*PostVmGetAvailableMemoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmGetAvailableMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmGetConsoleResponse parses an HTTP response from a PostVmGetConsoleWithResponse call
func ParsePostVmGetConsoleResponse(rsp *http.Response) (*PostVmGetConsoleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmGetConsoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmGetVmemoryInUseResponse parses an HTTP response from a GetVmGetVmemoryInUseWithResponse call
func ParseGetVmGetVmemoryInUseResponse(rsp *http.Response) (*GetVmGetVmemoryInUseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmGetVmemoryInUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmGetVncResponse parses an HTTP response from a PostVmGetVncWithResponse call
func ParsePostVmGetVncResponse(rsp *http.Response) (*PostVmGetVncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmGetVncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmGetVncIpv4Response parses an HTTP response from a GetVmGetVncIpv4WithResponse call
func ParseGetVmGetVncIpv4Response(rsp *http.Response) (*GetVmGetVncIpv4Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmGetVncIpv4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteVmIdIdResponse parses an HTTP response from a DeleteVmIdIdWithResponse call
func ParseDeleteVmIdIdResponse(rsp *http.Response) (*DeleteVmIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmIdIdResponse parses an HTTP response from a GetVmIdIdWithResponse call
func ParseGetVmIdIdResponse(rsp *http.Response) (*GetVmIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutVmIdIdResponse parses an HTTP response from a PutVmIdIdWithResponse call
func ParsePutVmIdIdResponse(rsp *http.Response) (*PutVmIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutVmIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmIdIdCloneResponse parses an HTTP response from a PostVmIdIdCloneWithResponse call
func ParsePostVmIdIdCloneResponse(rsp *http.Response) (*PostVmIdIdCloneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmIdIdRestartResponse parses an HTTP response from a PostVmIdIdRestartWithResponse call
func ParsePostVmIdIdRestartResponse(rsp *http.Response) (*PostVmIdIdRestartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmIdIdStartResponse parses an HTTP response from a PostVmIdIdStartWithResponse call
func ParsePostVmIdIdStartResponse(rsp *http.Response) (*PostVmIdIdStartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmIdIdStatusResponse parses an HTTP response from a PostVmIdIdStatusWithResponse call
func ParsePostVmIdIdStatusResponse(rsp *http.Response) (*PostVmIdIdStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmIdIdStopResponse parses an HTTP response from a PostVmIdIdStopWithResponse call
func ParsePostVmIdIdStopResponse(rsp *http.Response) (*PostVmIdIdStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmIdIdStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmIdentifyHypervisorResponse parses an HTTP response from a GetVmIdentifyHypervisorWithResponse call
func ParseGetVmIdentifyHypervisorResponse(rsp *http.Response) (*GetVmIdentifyHypervisorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmIdentifyHypervisorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmRandomMacResponse parses an HTTP response from a GetVmRandomMacWithResponse call
func ParseGetVmRandomMacResponse(rsp *http.Response) (*GetVmRandomMacResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmRandomMacResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmVncPortWizardResponse parses an HTTP response from a GetVmVncPortWizardWithResponse call
func ParseGetVmVncPortWizardResponse(rsp *http.Response) (*GetVmVncPortWizardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmVncPortWizardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmwareResponse parses an HTTP response from a GetVmwareWithResponse call
func ParseGetVmwareResponse(rsp *http.Response) (*GetVmwareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmwareResponse parses an HTTP response from a PostVmwareWithResponse call
func ParsePostVmwareResponse(rsp *http.Response) (*PostVmwareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmwareDatasetHasVmsResponse parses an HTTP response from a PostVmwareDatasetHasVmsWithResponse call
func ParsePostVmwareDatasetHasVmsResponse(rsp *http.Response) (*PostVmwareDatasetHasVmsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareDatasetHasVmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmwareGetDatastoresResponse parses an HTTP response from a PostVmwareGetDatastoresWithResponse call
func ParsePostVmwareGetDatastoresResponse(rsp *http.Response) (*PostVmwareGetDatastoresResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareGetDatastoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmwareGetVirtualMachinesResponse parses an HTTP response from a PostVmwareGetVirtualMachinesWithResponse call
func ParsePostVmwareGetVirtualMachinesResponse(rsp *http.Response) (*PostVmwareGetVirtualMachinesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareGetVirtualMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteVmwareIdIdResponse parses an HTTP response from a DeleteVmwareIdIdWithResponse call
func ParseDeleteVmwareIdIdResponse(rsp *http.Response) (*DeleteVmwareIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmwareIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVmwareIdIdResponse parses an HTTP response from a GetVmwareIdIdWithResponse call
func ParseGetVmwareIdIdResponse(rsp *http.Response) (*GetVmwareIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVmwareIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutVmwareIdIdResponse parses an HTTP response from a PutVmwareIdIdWithResponse call
func ParsePutVmwareIdIdResponse(rsp *http.Response) (*PutVmwareIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutVmwareIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostVmwareMatchDatastoresWithDatasetsResponse parses an HTTP response from a PostVmwareMatchDatastoresWithDatasetsWithResponse call
func ParsePostVmwareMatchDatastoresWithDatasetsResponse(rsp *http.Response) (*PostVmwareMatchDatastoresWithDatasetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostVmwareMatchDatastoresWithDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetWebdavResponse parses an HTTP response from a GetWebdavWithResponse call
func ParseGetWebdavResponse(rsp *http.Response) (*GetWebdavResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebdavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutWebdavResponse parses an HTTP response from a PutWebdavWithResponse call
func ParsePutWebdavResponse(rsp *http.Response) (*PutWebdavResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutWebdavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetWebuiImageResponse parses an HTTP response from a GetWebuiImageWithResponse call
func ParseGetWebuiImageResponse(rsp *http.Response) (*GetWebuiImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebuiImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteWebuiImageIdIdResponse parses an HTTP response from a DeleteWebuiImageIdIdWithResponse call
func ParseDeleteWebuiImageIdIdResponse(rsp *http.Response) (*DeleteWebuiImageIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebuiImageIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetWebuiImageIdIdResponse parses an HTTP response from a GetWebuiImageIdIdWithResponse call
func ParseGetWebuiImageIdIdResponse(rsp *http.Response) (*GetWebuiImageIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebuiImageIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetZfsSnapshotResponse parses an HTTP response from a GetZfsSnapshotWithResponse call
func ParseGetZfsSnapshotResponse(rsp *http.Response) (*GetZfsSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetZfsSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostZfsSnapshotResponse parses an HTTP response from a PostZfsSnapshotWithResponse call
func ParsePostZfsSnapshotResponse(rsp *http.Response) (*PostZfsSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostZfsSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostZfsSnapshotCloneResponse parses an HTTP response from a PostZfsSnapshotCloneWithResponse call
func ParsePostZfsSnapshotCloneResponse(rsp *http.Response) (*PostZfsSnapshotCloneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostZfsSnapshotCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteZfsSnapshotIdIdResponse parses an HTTP response from a DeleteZfsSnapshotIdIdWithResponse call
func ParseDeleteZfsSnapshotIdIdResponse(rsp *http.Response) (*DeleteZfsSnapshotIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteZfsSnapshotIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetZfsSnapshotIdIdResponse parses an HTTP response from a GetZfsSnapshotIdIdWithResponse call
func ParseGetZfsSnapshotIdIdResponse(rsp *http.Response) (*GetZfsSnapshotIdIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetZfsSnapshotIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostZfsSnapshotRemoveResponse parses an HTTP response from a PostZfsSnapshotRemoveWithResponse call
func ParsePostZfsSnapshotRemoveResponse(rsp *http.Response) (*PostZfsSnapshotRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostZfsSnapshotRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostZfsSnapshotRollbackResponse parses an HTTP response from a PostZfsSnapshotRollbackWithResponse call
func ParsePostZfsSnapshotRollbackResponse(rsp *http.Response) (*PostZfsSnapshotRollbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostZfsSnapshotRollbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /acme/dns/authenticator)
	GetAcmeDnsAuthenticator(ctx echo.Context, params GetAcmeDnsAuthenticatorParams) error

	// (POST /acme/dns/authenticator)
	PostAcmeDnsAuthenticator(ctx echo.Context) error

	// (GET /acme/dns/authenticator/authenticator_schemas)
	GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx echo.Context) error

	// (DELETE /acme/dns/authenticator/id/{id})
	DeleteAcmeDnsAuthenticatorIdId(ctx echo.Context, id int) error

	// (GET /acme/dns/authenticator/id/{id})
	GetAcmeDnsAuthenticatorIdId(ctx echo.Context, id []interface{}, params GetAcmeDnsAuthenticatorIdIdParams) error

	// (PUT /acme/dns/authenticator/id/{id})
	PutAcmeDnsAuthenticatorIdId(ctx echo.Context, id int) error

	// (GET /activedirectory)
	GetActivedirectory(ctx echo.Context) error

	// (PUT /activedirectory)
	PutActivedirectory(ctx echo.Context) error

	// (GET /activedirectory/change_trust_account_pw)
	GetActivedirectoryChangeTrustAccountPw(ctx echo.Context) error

	// (GET /activedirectory/domain_info)
	GetActivedirectoryDomainInfo(ctx echo.Context) error

	// (GET /activedirectory/get_spn_list)
	GetActivedirectoryGetSpnList(ctx echo.Context) error

	// (GET /activedirectory/get_state)
	GetActivedirectoryGetState(ctx echo.Context) error

	// (GET /activedirectory/idmap_backend_choices)
	GetActivedirectoryIdmapBackendChoices(ctx echo.Context) error

	// (POST /activedirectory/leave)
	PostActivedirectoryLeave(ctx echo.Context) error

	// (GET /activedirectory/nss_info_choices)
	GetActivedirectoryNssInfoChoices(ctx echo.Context) error

	// (GET /activedirectory/sasl_wrapping_choices)
	GetActivedirectorySaslWrappingChoices(ctx echo.Context) error

	// (GET /activedirectory/ssl_choices)
	GetActivedirectorySslChoices(ctx echo.Context) error

	// (GET /activedirectory/started)
	GetActivedirectoryStarted(ctx echo.Context) error

	// (GET /afp)
	GetAfp(ctx echo.Context) error

	// (PUT /afp)
	PutAfp(ctx echo.Context) error

	// (GET /afp/bindip_choices)
	GetAfpBindipChoices(ctx echo.Context) error

	// (POST /alert/dismiss)
	PostAlertDismiss(ctx echo.Context) error

	// (GET /alert/list)
	GetAlertList(ctx echo.Context) error

	// (GET /alert/list_categories)
	GetAlertListCategories(ctx echo.Context) error

	// (GET /alert/list_policies)
	GetAlertListPolicies(ctx echo.Context) error

	// (POST /alert/restore)
	PostAlertRestore(ctx echo.Context) error

	// (GET /alertclasses)
	GetAlertclasses(ctx echo.Context) error

	// (PUT /alertclasses)
	PutAlertclasses(ctx echo.Context) error

	// (GET /alertservice)
	GetAlertservice(ctx echo.Context, params GetAlertserviceParams) error

	// (POST /alertservice)
	PostAlertservice(ctx echo.Context) error

	// (DELETE /alertservice/id/{id})
	DeleteAlertserviceIdId(ctx echo.Context, id int) error

	// (GET /alertservice/id/{id})
	GetAlertserviceIdId(ctx echo.Context, id []interface{}, params GetAlertserviceIdIdParams) error

	// (PUT /alertservice/id/{id})
	PutAlertserviceIdId(ctx echo.Context, id int) error

	// (GET /alertservice/list_types)
	GetAlertserviceListTypes(ctx echo.Context) error

	// (POST /alertservice/test)
	PostAlertserviceTest(ctx echo.Context) error

	// (POST /auth/check_user)
	PostAuthCheckUser(ctx echo.Context) error

	// (POST /auth/generate_token)
	PostAuthGenerateToken(ctx echo.Context) error

	// (GET /auth/sessions)
	GetAuthSessions(ctx echo.Context, params GetAuthSessionsParams) error

	// (GET /backup)
	GetBackup(ctx echo.Context) error

	// (POST /backup)
	PostBackup(ctx echo.Context) error

	// (POST /backup/azure/get_buckets)
	PostBackupAzureGetBuckets(ctx echo.Context) error

	// (POST /backup/b2/get_buckets)
	PostBackupB2GetBuckets(ctx echo.Context) error

	// (GET /backup/credential)
	GetBackupCredential(ctx echo.Context, params GetBackupCredentialParams) error

	// (POST /backup/credential)
	PostBackupCredential(ctx echo.Context) error

	// (DELETE /backup/credential/id/{id})
	DeleteBackupCredentialIdId(ctx echo.Context, id int) error

	// (GET /backup/credential/id/{id})
	GetBackupCredentialIdId(ctx echo.Context, id []interface{}, params GetBackupCredentialIdIdParams) error

	// (PUT /backup/credential/id/{id})
	PutBackupCredentialIdId(ctx echo.Context, id int) error

	// (POST /backup/gcs/get_buckets)
	PostBackupGcsGetBuckets(ctx echo.Context) error

	// (DELETE /backup/id/{id})
	DeleteBackupIdId(ctx echo.Context, id int) error

	// (GET /backup/id/{id})
	GetBackupIdId(ctx echo.Context, id int) error

	// (PUT /backup/id/{id})
	PutBackupIdId(ctx echo.Context, id int) error

	// (POST /backup/s3/get_buckets)
	PostBackupS3GetBuckets(ctx echo.Context) error

	// (POST /boot/attach)
	PostBootAttach(ctx echo.Context) error

	// (POST /boot/detach)
	PostBootDetach(ctx echo.Context) error

	// (GET /boot/get_disks)
	GetBootGetDisks(ctx echo.Context) error

	// (GET /boot/get_scrub_interval)
	GetBootGetScrubInterval(ctx echo.Context) error

	// (GET /boot/get_state)
	GetBootGetState(ctx echo.Context) error

	// (POST /boot/replace)
	PostBootReplace(ctx echo.Context) error

	// (GET /boot/scrub)
	GetBootScrub(ctx echo.Context) error

	// (POST /boot/set_scrub_interval)
	PostBootSetScrubInterval(ctx echo.Context) error

	// (GET /bootenv)
	GetBootenv(ctx echo.Context, params GetBootenvParams) error

	// (POST /bootenv)
	PostBootenv(ctx echo.Context) error

	// (DELETE /bootenv/id/{id})
	DeleteBootenvIdId(ctx echo.Context, id string) error

	// (GET /bootenv/id/{id})
	GetBootenvIdId(ctx echo.Context, id []interface{}, params GetBootenvIdIdParams) error

	// (PUT /bootenv/id/{id})
	PutBootenvIdId(ctx echo.Context, id string) error

	// (POST /bootenv/id/{id}/activate)
	PostBootenvIdIdActivate(ctx echo.Context, id string) error

	// (POST /bootenv/id/{id}/set_attribute)
	PostBootenvIdIdSetAttribute(ctx echo.Context, id string) error

	// (GET /certificate)
	GetCertificate(ctx echo.Context, params GetCertificateParams) error

	// (POST /certificate)
	PostCertificate(ctx echo.Context) error

	// (GET /certificate/acme_server_choices)
	GetCertificateAcmeServerChoices(ctx echo.Context) error

	// (GET /certificate/ec_curve_choices)
	GetCertificateEcCurveChoices(ctx echo.Context) error

	// (DELETE /certificate/id/{id})
	DeleteCertificateIdId(ctx echo.Context, id int) error

	// (GET /certificate/id/{id})
	GetCertificateIdId(ctx echo.Context, id []interface{}, params GetCertificateIdIdParams) error

	// (PUT /certificate/id/{id})
	PutCertificateIdId(ctx echo.Context, id int) error

	// (GET /certificate/key_type_choices)
	GetCertificateKeyTypeChoices(ctx echo.Context) error

	// (GET /certificateauthority)
	GetCertificateauthority(ctx echo.Context, params GetCertificateauthorityParams) error

	// (POST /certificateauthority)
	PostCertificateauthority(ctx echo.Context) error

	// (POST /certificateauthority/ca_sign_csr)
	PostCertificateauthorityCaSignCsr(ctx echo.Context) error

	// (DELETE /certificateauthority/id/{id})
	DeleteCertificateauthorityIdId(ctx echo.Context, id int) error

	// (GET /certificateauthority/id/{id})
	GetCertificateauthorityIdId(ctx echo.Context, id []interface{}, params GetCertificateauthorityIdIdParams) error

	// (PUT /certificateauthority/id/{id})
	PutCertificateauthorityIdId(ctx echo.Context, id int) error

	// (GET /cloudsync)
	GetCloudsync(ctx echo.Context, params GetCloudsyncParams) error

	// (POST /cloudsync)
	PostCloudsync(ctx echo.Context) error

	// (GET /cloudsync/common_task_schema)
	GetCloudsyncCommonTaskSchema(ctx echo.Context) error

	// (GET /cloudsync/credentials)
	GetCloudsyncCredentials(ctx echo.Context, params GetCloudsyncCredentialsParams) error

	// (POST /cloudsync/credentials)
	PostCloudsyncCredentials(ctx echo.Context) error

	// (DELETE /cloudsync/credentials/id/{id})
	DeleteCloudsyncCredentialsIdId(ctx echo.Context, id int) error

	// (GET /cloudsync/credentials/id/{id})
	GetCloudsyncCredentialsIdId(ctx echo.Context, id []interface{}, params GetCloudsyncCredentialsIdIdParams) error

	// (PUT /cloudsync/credentials/id/{id})
	PutCloudsyncCredentialsIdId(ctx echo.Context, id int) error

	// (POST /cloudsync/credentials/verify)
	PostCloudsyncCredentialsVerify(ctx echo.Context) error

	// (DELETE /cloudsync/id/{id})
	DeleteCloudsyncIdId(ctx echo.Context, id int) error

	// (GET /cloudsync/id/{id})
	GetCloudsyncIdId(ctx echo.Context, id []interface{}, params GetCloudsyncIdIdParams) error

	// (PUT /cloudsync/id/{id})
	PutCloudsyncIdId(ctx echo.Context, id int) error

	// (POST /cloudsync/id/{id}/abort)
	PostCloudsyncIdIdAbort(ctx echo.Context, id int) error

	// (POST /cloudsync/id/{id}/sync)
	PostCloudsyncIdIdSync(ctx echo.Context, id int) error

	// (POST /cloudsync/list_buckets)
	PostCloudsyncListBuckets(ctx echo.Context) error

	// (POST /cloudsync/list_directory)
	PostCloudsyncListDirectory(ctx echo.Context) error

	// (POST /cloudsync/onedrive_list_drives)
	PostCloudsyncOnedriveListDrives(ctx echo.Context) error

	// (GET /cloudsync/providers)
	GetCloudsyncProviders(ctx echo.Context) error

	// (POST /config/reset)
	PostConfigReset(ctx echo.Context) error

	// (POST /core/bulk)
	PostCoreBulk(ctx echo.Context) error

	// (POST /core/debug)
	PostCoreDebug(ctx echo.Context) error

	// (POST /core/download)
	PostCoreDownload(ctx echo.Context) error

	// (GET /core/get_events)
	GetCoreGetEvents(ctx echo.Context) error

	// (GET /core/get_jobs)
	GetCoreGetJobs(ctx echo.Context, params GetCoreGetJobsParams) error

	// (POST /core/get_methods)
	PostCoreGetMethods(ctx echo.Context) error

	// (GET /core/get_services)
	GetCoreGetServices(ctx echo.Context) error

	// (POST /core/job_abort)
	PostCoreJobAbort(ctx echo.Context) error

	// (POST /core/job_update)
	PostCoreJobUpdate(ctx echo.Context) error

	// (POST /core/job_wait)
	PostCoreJobWait(ctx echo.Context) error

	// (GET /core/ping)
	GetCorePing(ctx echo.Context) error

	// (GET /core/sessions)
	GetCoreSessions(ctx echo.Context, params GetCoreSessionsParams) error

	// (GET /cronjob)
	GetCronjob(ctx echo.Context, params GetCronjobParams) error

	// (POST /cronjob)
	PostCronjob(ctx echo.Context) error

	// (DELETE /cronjob/id/{id})
	DeleteCronjobIdId(ctx echo.Context, id int) error

	// (GET /cronjob/id/{id})
	GetCronjobIdId(ctx echo.Context, id []interface{}, params GetCronjobIdIdParams) error

	// (PUT /cronjob/id/{id})
	PutCronjobIdId(ctx echo.Context, id int) error

	// (POST /cronjob/run)
	PostCronjobRun(ctx echo.Context) error

	// (POST /device/get_info)
	PostDeviceGetInfo(ctx echo.Context) error

	// (GET /directoryservices/get_state)
	GetDirectoryservicesGetState(ctx echo.Context) error

	// (GET /disk)
	GetDisk(ctx echo.Context, params GetDiskParams) error

	// (POST /disk/get_encrypted)
	PostDiskGetEncrypted(ctx echo.Context) error

	// (POST /disk/get_unused)
	PostDiskGetUnused(ctx echo.Context) error

	// (GET /disk/id/{id})
	GetDiskIdId(ctx echo.Context, id []interface{}, params GetDiskIdIdParams) error

	// (PUT /disk/id/{id})
	PutDiskIdId(ctx echo.Context, id string) error

	// (POST /disk/temperatures)
	PostDiskTemperatures(ctx echo.Context) error

	// (POST /disk/wipe)
	PostDiskWipe(ctx echo.Context) error

	// (GET /dns/query)
	GetDnsQuery(ctx echo.Context, params GetDnsQueryParams) error

	// (GET /dyndns)
	GetDyndns(ctx echo.Context) error

	// (PUT /dyndns)
	PutDyndns(ctx echo.Context) error

	// (GET /dyndns/provider_choices)
	GetDyndnsProviderChoices(ctx echo.Context) error

	// (POST /filesystem/acl_is_trivial)
	PostFilesystemAclIsTrivial(ctx echo.Context) error

	// (POST /filesystem/chown)
	PostFilesystemChown(ctx echo.Context) error

	// (GET /filesystem/default_acl_choices)
	GetFilesystemDefaultAclChoices(ctx echo.Context) error

	// (POST /filesystem/get_default_acl)
	PostFilesystemGetDefaultAcl(ctx echo.Context) error

	// (POST /filesystem/getacl)
	PostFilesystemGetacl(ctx echo.Context) error

	// (POST /filesystem/listdir)
	PostFilesystemListdir(ctx echo.Context) error

	// (POST /filesystem/setacl)
	PostFilesystemSetacl(ctx echo.Context) error

	// (POST /filesystem/setperm)
	PostFilesystemSetperm(ctx echo.Context) error

	// (POST /filesystem/stat)
	PostFilesystemStat(ctx echo.Context) error

	// (POST /filesystem/statfs)
	PostFilesystemStatfs(ctx echo.Context) error

	// (GET /ftp)
	GetFtp(ctx echo.Context) error

	// (PUT /ftp)
	PutFtp(ctx echo.Context) error

	// (GET /group)
	GetGroup(ctx echo.Context, params GetGroupParams) error

	// (POST /group)
	PostGroup(ctx echo.Context) error

	// (POST /group/get_group_obj)
	PostGroupGetGroupObj(ctx echo.Context) error

	// (GET /group/get_next_gid)
	GetGroupGetNextGid(ctx echo.Context) error

	// (DELETE /group/id/{id})
	DeleteGroupIdId(ctx echo.Context, id int) error

	// (GET /group/id/{id})
	GetGroupIdId(ctx echo.Context, id []interface{}, params GetGroupIdIdParams) error

	// (PUT /group/id/{id})
	PutGroupIdId(ctx echo.Context, id int) error

	// (GET /idmap/ad)
	GetIdmapAd(ctx echo.Context, params GetIdmapAdParams) error

	// (POST /idmap/ad)
	PostIdmapAd(ctx echo.Context) error

	// (DELETE /idmap/ad/id/{id})
	DeleteIdmapAdIdId(ctx echo.Context, id int) error

	// (GET /idmap/ad/id/{id})
	GetIdmapAdIdId(ctx echo.Context, id []interface{}, params GetIdmapAdIdIdParams) error

	// (PUT /idmap/ad/id/{id})
	PutIdmapAdIdId(ctx echo.Context, id int) error

	// (GET /idmap/autorid)
	GetIdmapAutorid(ctx echo.Context, params GetIdmapAutoridParams) error

	// (POST /idmap/autorid)
	PostIdmapAutorid(ctx echo.Context) error

	// (DELETE /idmap/autorid/id/{id})
	DeleteIdmapAutoridIdId(ctx echo.Context, id int) error

	// (GET /idmap/autorid/id/{id})
	GetIdmapAutoridIdId(ctx echo.Context, id []interface{}, params GetIdmapAutoridIdIdParams) error

	// (PUT /idmap/autorid/id/{id})
	PutIdmapAutoridIdId(ctx echo.Context, id int) error

	// (GET /idmap/clear_idmap_cache)
	GetIdmapClearIdmapCache(ctx echo.Context) error

	// (GET /idmap/domain)
	GetIdmapDomain(ctx echo.Context, params GetIdmapDomainParams) error

	// (POST /idmap/domain)
	PostIdmapDomain(ctx echo.Context) error

	// (DELETE /idmap/domain/id/{id})
	DeleteIdmapDomainIdId(ctx echo.Context, id int) error

	// (GET /idmap/domain/id/{id})
	GetIdmapDomainIdId(ctx echo.Context, id []interface{}, params GetIdmapDomainIdIdParams) error

	// (PUT /idmap/domain/id/{id})
	PutIdmapDomainIdId(ctx echo.Context, id int) error

	// (GET /idmap/domaintobackend)
	GetIdmapDomaintobackend(ctx echo.Context, params GetIdmapDomaintobackendParams) error

	// (POST /idmap/domaintobackend)
	PostIdmapDomaintobackend(ctx echo.Context) error

	// (DELETE /idmap/domaintobackend/id/{id})
	DeleteIdmapDomaintobackendIdId(ctx echo.Context, id int) error

	// (GET /idmap/domaintobackend/id/{id})
	GetIdmapDomaintobackendIdId(ctx echo.Context, id []interface{}, params GetIdmapDomaintobackendIdIdParams) error

	// (PUT /idmap/domaintobackend/id/{id})
	PutIdmapDomaintobackendIdId(ctx echo.Context, id int) error

	// (GET /idmap/get_configured_idmap_domains)
	GetIdmapGetConfiguredIdmapDomains(ctx echo.Context) error

	// (POST /idmap/get_or_create_idmap_by_domain)
	PostIdmapGetOrCreateIdmapByDomain(ctx echo.Context) error

	// (GET /idmap/ldap)
	GetIdmapLdap(ctx echo.Context, params GetIdmapLdapParams) error

	// (POST /idmap/ldap)
	PostIdmapLdap(ctx echo.Context) error

	// (DELETE /idmap/ldap/id/{id})
	DeleteIdmapLdapIdId(ctx echo.Context, id int) error

	// (GET /idmap/ldap/id/{id})
	GetIdmapLdapIdId(ctx echo.Context, id []interface{}, params GetIdmapLdapIdIdParams) error

	// (PUT /idmap/ldap/id/{id})
	PutIdmapLdapIdId(ctx echo.Context, id int) error

	// (GET /idmap/nss)
	GetIdmapNss(ctx echo.Context, params GetIdmapNssParams) error

	// (POST /idmap/nss)
	PostIdmapNss(ctx echo.Context) error

	// (DELETE /idmap/nss/id/{id})
	DeleteIdmapNssIdId(ctx echo.Context, id int) error

	// (GET /idmap/nss/id/{id})
	GetIdmapNssIdId(ctx echo.Context, id []interface{}, params GetIdmapNssIdIdParams) error

	// (PUT /idmap/nss/id/{id})
	PutIdmapNssIdId(ctx echo.Context, id int) error

	// (GET /idmap/rfc2307)
	GetIdmapRfc2307(ctx echo.Context, params GetIdmapRfc2307Params) error

	// (POST /idmap/rfc2307)
	PostIdmapRfc2307(ctx echo.Context) error

	// (DELETE /idmap/rfc2307/id/{id})
	DeleteIdmapRfc2307IdId(ctx echo.Context, id int) error

	// (GET /idmap/rfc2307/id/{id})
	GetIdmapRfc2307IdId(ctx echo.Context, id []interface{}, params GetIdmapRfc2307IdIdParams) error

	// (PUT /idmap/rfc2307/id/{id})
	PutIdmapRfc2307IdId(ctx echo.Context, id int) error

	// (GET /idmap/rid)
	GetIdmapRid(ctx echo.Context, params GetIdmapRidParams) error

	// (POST /idmap/rid)
	PostIdmapRid(ctx echo.Context) error

	// (DELETE /idmap/rid/id/{id})
	DeleteIdmapRidIdId(ctx echo.Context, id int) error

	// (GET /idmap/rid/id/{id})
	GetIdmapRidIdId(ctx echo.Context, id []interface{}, params GetIdmapRidIdIdParams) error

	// (PUT /idmap/rid/id/{id})
	PutIdmapRidIdId(ctx echo.Context, id int) error

	// (GET /idmap/script)
	GetIdmapScript(ctx echo.Context, params GetIdmapScriptParams) error

	// (POST /idmap/script)
	PostIdmapScript(ctx echo.Context) error

	// (DELETE /idmap/script/id/{id})
	DeleteIdmapScriptIdId(ctx echo.Context, id int) error

	// (GET /idmap/script/id/{id})
	GetIdmapScriptIdId(ctx echo.Context, id []interface{}, params GetIdmapScriptIdIdParams) error

	// (PUT /idmap/script/id/{id})
	PutIdmapScriptIdId(ctx echo.Context, id int) error

	// (GET /idmap/tdb)
	GetIdmapTdb(ctx echo.Context, params GetIdmapTdbParams) error

	// (POST /idmap/tdb)
	PostIdmapTdb(ctx echo.Context) error

	// (DELETE /idmap/tdb/id/{id})
	DeleteIdmapTdbIdId(ctx echo.Context, id int) error

	// (GET /idmap/tdb/id/{id})
	GetIdmapTdbIdId(ctx echo.Context, id []interface{}, params GetIdmapTdbIdIdParams) error

	// (PUT /idmap/tdb/id/{id})
	PutIdmapTdbIdId(ctx echo.Context, id int) error

	// (GET /initshutdownscript)
	GetInitshutdownscript(ctx echo.Context, params GetInitshutdownscriptParams) error

	// (POST /initshutdownscript)
	PostInitshutdownscript(ctx echo.Context) error

	// (DELETE /initshutdownscript/id/{id})
	DeleteInitshutdownscriptIdId(ctx echo.Context, id int) error

	// (GET /initshutdownscript/id/{id})
	GetInitshutdownscriptIdId(ctx echo.Context, id []interface{}, params GetInitshutdownscriptIdIdParams) error

	// (PUT /initshutdownscript/id/{id})
	PutInitshutdownscriptIdId(ctx echo.Context, id int) error

	// (GET /interface)
	GetInterface(ctx echo.Context, params GetInterfaceParams) error

	// (POST /interface)
	PostInterface(ctx echo.Context) error

	// (POST /interface/bridge_members_choices)
	PostInterfaceBridgeMembersChoices(ctx echo.Context) error

	// (GET /interface/checkin)
	GetInterfaceCheckin(ctx echo.Context) error

	// (GET /interface/checkin_waiting)
	GetInterfaceCheckinWaiting(ctx echo.Context) error

	// (POST /interface/choices)
	PostInterfaceChoices(ctx echo.Context) error

	// (POST /interface/commit)
	PostInterfaceCommit(ctx echo.Context) error

	// (GET /interface/has_pending_changes)
	GetInterfaceHasPendingChanges(ctx echo.Context) error

	// (DELETE /interface/id/{id})
	DeleteInterfaceIdId(ctx echo.Context, id string) error

	// (GET /interface/id/{id})
	GetInterfaceIdId(ctx echo.Context, id []interface{}, params GetInterfaceIdIdParams) error

	// (PUT /interface/id/{id})
	PutInterfaceIdId(ctx echo.Context, id string) error

	// (POST /interface/ip_in_use)
	PostInterfaceIpInUse(ctx echo.Context) error

	// (POST /interface/lag_ports_choices)
	PostInterfaceLagPortsChoices(ctx echo.Context) error

	// (GET /interface/rollback)
	GetInterfaceRollback(ctx echo.Context) error

	// (GET /interface/vlan_parent_interface_choices)
	GetInterfaceVlanParentInterfaceChoices(ctx echo.Context) error

	// (GET /ipmi)
	GetIpmi(ctx echo.Context, params GetIpmiParams) error

	// (GET /ipmi/channels)
	GetIpmiChannels(ctx echo.Context) error

	// (GET /ipmi/id/{id})
	GetIpmiIdId(ctx echo.Context, id []interface{}, params GetIpmiIdIdParams) error

	// (PUT /ipmi/id/{id})
	PutIpmiIdId(ctx echo.Context, id int) error

	// (POST /ipmi/identify)
	PostIpmiIdentify(ctx echo.Context) error

	// (GET /ipmi/is_loaded)
	GetIpmiIsLoaded(ctx echo.Context) error

	// (GET /iscsi/auth)
	GetIscsiAuth(ctx echo.Context, params GetIscsiAuthParams) error

	// (POST /iscsi/auth)
	PostIscsiAuth(ctx echo.Context) error

	// (DELETE /iscsi/auth/id/{id})
	DeleteIscsiAuthIdId(ctx echo.Context, id int) error

	// (GET /iscsi/auth/id/{id})
	GetIscsiAuthIdId(ctx echo.Context, id []interface{}, params GetIscsiAuthIdIdParams) error

	// (PUT /iscsi/auth/id/{id})
	PutIscsiAuthIdId(ctx echo.Context, id int) error

	// (GET /iscsi/extent)
	GetIscsiExtent(ctx echo.Context, params GetIscsiExtentParams) error

	// (POST /iscsi/extent)
	PostIscsiExtent(ctx echo.Context) error

	// (POST /iscsi/extent/disk_choices)
	PostIscsiExtentDiskChoices(ctx echo.Context) error

	// (DELETE /iscsi/extent/id/{id})
	DeleteIscsiExtentIdId(ctx echo.Context, id int) error

	// (GET /iscsi/extent/id/{id})
	GetIscsiExtentIdId(ctx echo.Context, id []interface{}, params GetIscsiExtentIdIdParams) error

	// (PUT /iscsi/extent/id/{id})
	PutIscsiExtentIdId(ctx echo.Context, id int) error

	// (GET /iscsi/global)
	GetIscsiGlobal(ctx echo.Context) error

	// (PUT /iscsi/global)
	PutIscsiGlobal(ctx echo.Context) error

	// (GET /iscsi/global/sessions)
	GetIscsiGlobalSessions(ctx echo.Context, params GetIscsiGlobalSessionsParams) error

	// (GET /iscsi/initiator)
	GetIscsiInitiator(ctx echo.Context, params GetIscsiInitiatorParams) error

	// (POST /iscsi/initiator)
	PostIscsiInitiator(ctx echo.Context) error

	// (DELETE /iscsi/initiator/id/{id})
	DeleteIscsiInitiatorIdId(ctx echo.Context, id int) error

	// (GET /iscsi/initiator/id/{id})
	GetIscsiInitiatorIdId(ctx echo.Context, id []interface{}, params GetIscsiInitiatorIdIdParams) error

	// (PUT /iscsi/initiator/id/{id})
	PutIscsiInitiatorIdId(ctx echo.Context, id int) error

	// (GET /iscsi/portal)
	GetIscsiPortal(ctx echo.Context, params GetIscsiPortalParams) error

	// (POST /iscsi/portal)
	PostIscsiPortal(ctx echo.Context) error

	// (DELETE /iscsi/portal/id/{id})
	DeleteIscsiPortalIdId(ctx echo.Context, id int) error

	// (GET /iscsi/portal/id/{id})
	GetIscsiPortalIdId(ctx echo.Context, id []interface{}, params GetIscsiPortalIdIdParams) error

	// (PUT /iscsi/portal/id/{id})
	PutIscsiPortalIdId(ctx echo.Context, id int) error

	// (GET /iscsi/portal/listen_ip_choices)
	GetIscsiPortalListenIpChoices(ctx echo.Context) error

	// (GET /iscsi/target)
	GetIscsiTarget(ctx echo.Context, params GetIscsiTargetParams) error

	// (POST /iscsi/target)
	PostIscsiTarget(ctx echo.Context) error

	// (DELETE /iscsi/target/id/{id})
	DeleteIscsiTargetIdId(ctx echo.Context, id int) error

	// (GET /iscsi/target/id/{id})
	GetIscsiTargetIdId(ctx echo.Context, id []interface{}, params GetIscsiTargetIdIdParams) error

	// (PUT /iscsi/target/id/{id})
	PutIscsiTargetIdId(ctx echo.Context, id int) error

	// (GET /iscsi/targetextent)
	GetIscsiTargetextent(ctx echo.Context, params GetIscsiTargetextentParams) error

	// (POST /iscsi/targetextent)
	PostIscsiTargetextent(ctx echo.Context) error

	// (DELETE /iscsi/targetextent/id/{id})
	DeleteIscsiTargetextentIdId(ctx echo.Context, id int) error

	// (GET /iscsi/targetextent/id/{id})
	GetIscsiTargetextentIdId(ctx echo.Context, id []interface{}, params GetIscsiTargetextentIdIdParams) error

	// (PUT /iscsi/targetextent/id/{id})
	PutIscsiTargetextentIdId(ctx echo.Context, id int) error

	// (GET /jail)
	GetJail(ctx echo.Context, params GetJailParams) error

	// (POST /jail)
	PostJail(ctx echo.Context) error

	// (POST /jail/activate)
	PostJailActivate(ctx echo.Context) error

	// (POST /jail/clean)
	PostJailClean(ctx echo.Context) error

	// (GET /jail/default_configuration)
	GetJailDefaultConfiguration(ctx echo.Context) error

	// (POST /jail/exec)
	PostJailExec(ctx echo.Context) error

	// (POST /jail/export)
	PostJailExport(ctx echo.Context) error

	// (POST /jail/fetch)
	PostJailFetch(ctx echo.Context) error

	// (POST /jail/fstab)
	PostJailFstab(ctx echo.Context) error

	// (GET /jail/get_activated_pool)
	GetJailGetActivatedPool(ctx echo.Context) error

	// (DELETE /jail/id/{id})
	DeleteJailIdId(ctx echo.Context, id string) error

	// (GET /jail/id/{id})
	GetJailIdId(ctx echo.Context, id []interface{}, params GetJailIdIdParams) error

	// (PUT /jail/id/{id})
	PutJailIdId(ctx echo.Context, id string) error

	// (POST /jail/id/{id}/clone)
	PostJailIdIdClone(ctx echo.Context, id string) error

	// (POST /jail/import_image)
	PostJailImportImage(ctx echo.Context) error

	// (GET /jail/interface_choices)
	GetJailInterfaceChoices(ctx echo.Context) error

	// (POST /jail/rc_action)
	PostJailRcAction(ctx echo.Context) error

	// (POST /jail/releases_choices)
	PostJailReleasesChoices(ctx echo.Context) error

	// (POST /jail/restart)
	PostJailRestart(ctx echo.Context) error

	// (POST /jail/start)
	PostJailStart(ctx echo.Context) error

	// (POST /jail/stop)
	PostJailStop(ctx echo.Context) error

	// (POST /jail/update_defaults)
	PostJailUpdateDefaults(ctx echo.Context) error

	// (POST /jail/update_to_latest_patch)
	PostJailUpdateToLatestPatch(ctx echo.Context) error

	// (GET /kerberos)
	GetKerberos(ctx echo.Context) error

	// (PUT /kerberos)
	PutKerberos(ctx echo.Context) error

	// (GET /kerberos/keytab)
	GetKerberosKeytab(ctx echo.Context, params GetKerberosKeytabParams) error

	// (POST /kerberos/keytab)
	PostKerberosKeytab(ctx echo.Context) error

	// (DELETE /kerberos/keytab/id/{id})
	DeleteKerberosKeytabIdId(ctx echo.Context, id int) error

	// (GET /kerberos/keytab/id/{id})
	GetKerberosKeytabIdId(ctx echo.Context, id []interface{}, params GetKerberosKeytabIdIdParams) error

	// (PUT /kerberos/keytab/id/{id})
	PutKerberosKeytabIdId(ctx echo.Context, id int) error

	// (GET /kerberos/keytab/system_keytab_list)
	GetKerberosKeytabSystemKeytabList(ctx echo.Context) error

	// (GET /kerberos/realm)
	GetKerberosRealm(ctx echo.Context, params GetKerberosRealmParams) error

	// (POST /kerberos/realm)
	PostKerberosRealm(ctx echo.Context) error

	// (DELETE /kerberos/realm/id/{id})
	DeleteKerberosRealmIdId(ctx echo.Context, id int) error

	// (GET /kerberos/realm/id/{id})
	GetKerberosRealmIdId(ctx echo.Context, id []interface{}, params GetKerberosRealmIdIdParams) error

	// (PUT /kerberos/realm/id/{id})
	PutKerberosRealmIdId(ctx echo.Context, id int) error

	// (GET /keychaincredential)
	GetKeychaincredential(ctx echo.Context, params GetKeychaincredentialParams) error

	// (POST /keychaincredential)
	PostKeychaincredential(ctx echo.Context) error

	// (GET /keychaincredential/generate_ssh_key_pair)
	GetKeychaincredentialGenerateSshKeyPair(ctx echo.Context) error

	// (DELETE /keychaincredential/id/{id})
	DeleteKeychaincredentialIdId(ctx echo.Context, id int) error

	// (GET /keychaincredential/id/{id})
	GetKeychaincredentialIdId(ctx echo.Context, id []interface{}, params GetKeychaincredentialIdIdParams) error

	// (PUT /keychaincredential/id/{id})
	PutKeychaincredentialIdId(ctx echo.Context, id int) error

	// (POST /keychaincredential/remote_ssh_host_key_scan)
	PostKeychaincredentialRemoteSshHostKeyScan(ctx echo.Context) error

	// (POST /keychaincredential/remote_ssh_semiautomatic_setup)
	PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx echo.Context) error

	// (POST /keychaincredential/used_by)
	PostKeychaincredentialUsedBy(ctx echo.Context) error

	// (GET /ldap)
	GetLdap(ctx echo.Context) error

	// (PUT /ldap)
	PutLdap(ctx echo.Context) error

	// (GET /ldap/get_state)
	GetLdapGetState(ctx echo.Context) error

	// (GET /ldap/idmap_backend_choices)
	GetLdapIdmapBackendChoices(ctx echo.Context) error

	// (GET /ldap/schema_choices)
	GetLdapSchemaChoices(ctx echo.Context) error

	// (GET /ldap/ssl_choices)
	GetLdapSslChoices(ctx echo.Context) error

	// (GET /lldp)
	GetLldp(ctx echo.Context) error

	// (PUT /lldp)
	PutLldp(ctx echo.Context) error

	// (GET /mail)
	GetMail(ctx echo.Context) error

	// (PUT /mail)
	PutMail(ctx echo.Context) error

	// (POST /mail/send)
	PostMailSend(ctx echo.Context) error

	// (GET /multipath)
	GetMultipath(ctx echo.Context, params GetMultipathParams) error

	// (GET /multipath/id/{id})
	GetMultipathIdId(ctx echo.Context, id []interface{}, params GetMultipathIdIdParams) error

	// (GET /network/configuration)
	GetNetworkConfiguration(ctx echo.Context) error

	// (PUT /network/configuration)
	PutNetworkConfiguration(ctx echo.Context) error

	// (GET /network/general/summary)
	GetNetworkGeneralSummary(ctx echo.Context) error

	// (GET /nfs)
	GetNfs(ctx echo.Context) error

	// (PUT /nfs)
	PutNfs(ctx echo.Context) error

	// (GET /nis)
	GetNis(ctx echo.Context) error

	// (PUT /nis)
	PutNis(ctx echo.Context) error

	// (GET /nis/get_state)
	GetNisGetState(ctx echo.Context) error

	// (GET /plugin)
	GetPlugin(ctx echo.Context, params GetPluginParams) error

	// (POST /plugin)
	PostPlugin(ctx echo.Context) error

	// (POST /plugin/available)
	PostPluginAvailable(ctx echo.Context) error

	// (POST /plugin/branches_choices)
	PostPluginBranchesChoices(ctx echo.Context) error

	// (POST /plugin/defaults)
	PostPluginDefaults(ctx echo.Context) error

	// (DELETE /plugin/id/{id})
	DeletePluginIdId(ctx echo.Context, id string) error

	// (GET /plugin/id/{id})
	GetPluginIdId(ctx echo.Context, id []interface{}, params GetPluginIdIdParams) error

	// (PUT /plugin/id/{id})
	PutPluginIdId(ctx echo.Context, id string) error

	// (GET /plugin/official_repositories)
	GetPluginOfficialRepositories(ctx echo.Context) error

	// (GET /plugin/retrieve_versions_for_repos)
	GetPluginRetrieveVersionsForRepos(ctx echo.Context) error

	// (GET /pool)
	GetPool(ctx echo.Context, params GetPoolParams) error

	// (POST /pool)
	PostPool(ctx echo.Context) error

	// (GET /pool/dataset)
	GetPoolDataset(ctx echo.Context, params GetPoolDatasetParams) error

	// (POST /pool/dataset)
	PostPoolDataset(ctx echo.Context) error

	// (DELETE /pool/dataset/id/{id})
	DeletePoolDatasetIdId(ctx echo.Context, id string) error

	// (GET /pool/dataset/id/{id})
	GetPoolDatasetIdId(ctx echo.Context, id []interface{}, params GetPoolDatasetIdIdParams) error

	// (PUT /pool/dataset/id/{id})
	PutPoolDatasetIdId(ctx echo.Context, id string) error

	// (POST /pool/dataset/id/{id}/attachments)
	PostPoolDatasetIdIdAttachments(ctx echo.Context, id string) error

	// (POST /pool/dataset/id/{id}/permission)
	PostPoolDatasetIdIdPermission(ctx echo.Context, id string) error

	// (POST /pool/dataset/id/{id}/processes)
	PostPoolDatasetIdIdProcesses(ctx echo.Context, id string) error

	// (POST /pool/dataset/id/{id}/promote)
	PostPoolDatasetIdIdPromote(ctx echo.Context, id string) error

	// (POST /pool/dataset/recommended_zvol_blocksize)
	PostPoolDatasetRecommendedZvolBlocksize(ctx echo.Context) error

	// (POST /pool/filesystem_choices)
	PostPoolFilesystemChoices(ctx echo.Context) error

	// (GET /pool/id/{id})
	GetPoolIdId(ctx echo.Context, id []interface{}, params GetPoolIdIdParams) error

	// (PUT /pool/id/{id})
	PutPoolIdId(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/attachments)
	PostPoolIdIdAttachments(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/detach)
	PostPoolIdIdDetach(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/download_encryption_key)
	PostPoolIdIdDownloadEncryptionKey(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/export)
	PostPoolIdIdExport(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/get_disks)
	PostPoolIdIdGetDisks(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/is_upgraded)
	PostPoolIdIdIsUpgraded(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/lock)
	PostPoolIdIdLock(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/offline)
	PostPoolIdIdOffline(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/online)
	PostPoolIdIdOnline(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/passphrase)
	PostPoolIdIdPassphrase(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/processes)
	PostPoolIdIdProcesses(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/recoverykey_rm)
	PostPoolIdIdRecoverykeyRm(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/rekey)
	PostPoolIdIdRekey(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/remove)
	PostPoolIdIdRemove(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/replace)
	PostPoolIdIdReplace(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/scrub)
	PostPoolIdIdScrub(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/unlock)
	PostPoolIdIdUnlock(ctx echo.Context, id int) error

	// (POST /pool/id/{id}/upgrade)
	PostPoolIdIdUpgrade(ctx echo.Context, id int) error

	// (POST /pool/import_disk)
	PostPoolImportDisk(ctx echo.Context) error

	// (POST /pool/import_disk_autodetect_fs_type)
	PostPoolImportDiskAutodetectFsType(ctx echo.Context) error

	// (GET /pool/import_disk_msdosfs_locales)
	GetPoolImportDiskMsdosfsLocales(ctx echo.Context) error

	// (GET /pool/import_find)
	GetPoolImportFind(ctx echo.Context) error

	// (POST /pool/import_pool)
	PostPoolImportPool(ctx echo.Context) error

	// (GET /pool/resilver)
	GetPoolResilver(ctx echo.Context) error

	// (PUT /pool/resilver)
	PutPoolResilver(ctx echo.Context) error

	// (GET /pool/scrub)
	GetPoolScrub(ctx echo.Context, params GetPoolScrubParams) error

	// (POST /pool/scrub)
	PostPoolScrub(ctx echo.Context) error

	// (DELETE /pool/scrub/id/{id})
	DeletePoolScrubIdId(ctx echo.Context, id int) error

	// (GET /pool/scrub/id/{id})
	GetPoolScrubIdId(ctx echo.Context, id []interface{}, params GetPoolScrubIdIdParams) error

	// (PUT /pool/scrub/id/{id})
	PutPoolScrubIdId(ctx echo.Context, id int) error

	// (POST /pool/scrub/run)
	PostPoolScrubRun(ctx echo.Context) error

	// (GET /pool/snapshottask)
	GetPoolSnapshottask(ctx echo.Context, params GetPoolSnapshottaskParams) error

	// (POST /pool/snapshottask)
	PostPoolSnapshottask(ctx echo.Context) error

	// (DELETE /pool/snapshottask/id/{id})
	DeletePoolSnapshottaskIdId(ctx echo.Context, id int) error

	// (GET /pool/snapshottask/id/{id})
	GetPoolSnapshottaskIdId(ctx echo.Context, id []interface{}, params GetPoolSnapshottaskIdIdParams) error

	// (PUT /pool/snapshottask/id/{id})
	PutPoolSnapshottaskIdId(ctx echo.Context, id int) error

	// (POST /pool/snapshottask/id/{id}/run)
	PostPoolSnapshottaskIdIdRun(ctx echo.Context, id int) error

	// (POST /pool/unlock_services_restart_choices)
	PostPoolUnlockServicesRestartChoices(ctx echo.Context) error

	// (GET /replication)
	GetReplication(ctx echo.Context, params GetReplicationParams) error

	// (POST /replication)
	PostReplication(ctx echo.Context) error

	// (POST /replication/count_eligible_manual_snapshots)
	PostReplicationCountEligibleManualSnapshots(ctx echo.Context) error

	// (POST /replication/create_dataset)
	PostReplicationCreateDataset(ctx echo.Context) error

	// (DELETE /replication/id/{id})
	DeleteReplicationIdId(ctx echo.Context, id int) error

	// (GET /replication/id/{id})
	GetReplicationIdId(ctx echo.Context, id []interface{}, params GetReplicationIdIdParams) error

	// (PUT /replication/id/{id})
	PutReplicationIdId(ctx echo.Context, id int) error

	// (POST /replication/id/{id}/run)
	PostReplicationIdIdRun(ctx echo.Context, id int) error

	// (POST /replication/list_datasets)
	PostReplicationListDatasets(ctx echo.Context) error

	// (GET /replication/list_naming_schemas)
	GetReplicationListNamingSchemas(ctx echo.Context) error

	// (POST /replication/target_unmatched_snapshots)
	PostReplicationTargetUnmatchedSnapshots(ctx echo.Context) error

	// (GET /reporting)
	GetReporting(ctx echo.Context) error

	// (PUT /reporting)
	PutReporting(ctx echo.Context) error

	// (POST /reporting/get_data)
	PostReportingGetData(ctx echo.Context) error

	// (GET /reporting/graphs)
	GetReportingGraphs(ctx echo.Context, params GetReportingGraphsParams) error

	// (POST /route/ipv4gw_reachable)
	PostRouteIpv4gwReachable(ctx echo.Context) error

	// (GET /route/system_routes)
	GetRouteSystemRoutes(ctx echo.Context, params GetRouteSystemRoutesParams) error

	// (GET /rsyncd)
	GetRsyncd(ctx echo.Context) error

	// (PUT /rsyncd)
	PutRsyncd(ctx echo.Context) error

	// (GET /rsyncmod)
	GetRsyncmod(ctx echo.Context, params GetRsyncmodParams) error

	// (POST /rsyncmod)
	PostRsyncmod(ctx echo.Context) error

	// (DELETE /rsyncmod/id/{id})
	DeleteRsyncmodIdId(ctx echo.Context, id int) error

	// (GET /rsyncmod/id/{id})
	GetRsyncmodIdId(ctx echo.Context, id []interface{}, params GetRsyncmodIdIdParams) error

	// (PUT /rsyncmod/id/{id})
	PutRsyncmodIdId(ctx echo.Context, id int) error

	// (GET /rsynctask)
	GetRsynctask(ctx echo.Context, params GetRsynctaskParams) error

	// (POST /rsynctask)
	PostRsynctask(ctx echo.Context) error

	// (DELETE /rsynctask/id/{id})
	DeleteRsynctaskIdId(ctx echo.Context, id int) error

	// (GET /rsynctask/id/{id})
	GetRsynctaskIdId(ctx echo.Context, id []interface{}, params GetRsynctaskIdIdParams) error

	// (PUT /rsynctask/id/{id})
	PutRsynctaskIdId(ctx echo.Context, id int) error

	// (POST /rsynctask/id/{id}/run)
	PostRsynctaskIdIdRun(ctx echo.Context, id int) error

	// (GET /s3)
	GetS3(ctx echo.Context) error

	// (PUT /s3)
	PutS3(ctx echo.Context) error

	// (GET /service)
	GetService(ctx echo.Context, params GetServiceParams) error

	// (GET /service/id/{id})
	GetServiceIdId(ctx echo.Context, id []interface{}, params GetServiceIdIdParams) error

	// (PUT /service/id/{id})
	PutServiceIdId(ctx echo.Context, id string) error

	// (POST /service/reload)
	PostServiceReload(ctx echo.Context) error

	// (POST /service/restart)
	PostServiceRestart(ctx echo.Context) error

	// (POST /service/start)
	PostServiceStart(ctx echo.Context) error

	// (GET /service/started)
	GetServiceStarted(ctx echo.Context) error

	// (POST /service/stop)
	PostServiceStop(ctx echo.Context) error

	// (POST /service/terminate_process)
	PostServiceTerminateProcess(ctx echo.Context) error

	// (GET /sharing/afp)
	GetSharingAfp(ctx echo.Context, params GetSharingAfpParams) error

	// (POST /sharing/afp)
	PostSharingAfp(ctx echo.Context) error

	// (DELETE /sharing/afp/id/{id})
	DeleteSharingAfpIdId(ctx echo.Context, id int) error

	// (GET /sharing/afp/id/{id})
	GetSharingAfpIdId(ctx echo.Context, id []interface{}, params GetSharingAfpIdIdParams) error

	// (PUT /sharing/afp/id/{id})
	PutSharingAfpIdId(ctx echo.Context, id int) error

	// (GET /sharing/nfs)
	GetSharingNfs(ctx echo.Context, params GetSharingNfsParams) error

	// (POST /sharing/nfs)
	PostSharingNfs(ctx echo.Context) error

	// (DELETE /sharing/nfs/id/{id})
	DeleteSharingNfsIdId(ctx echo.Context, id int) error

	// (GET /sharing/nfs/id/{id})
	GetSharingNfsIdId(ctx echo.Context, id []interface{}, params GetSharingNfsIdIdParams) error

	// (PUT /sharing/nfs/id/{id})
	PutSharingNfsIdId(ctx echo.Context, id int) error

	// (GET /sharing/smb)
	GetSharingSmb(ctx echo.Context, params GetSharingSmbParams) error

	// (POST /sharing/smb)
	PostSharingSmb(ctx echo.Context) error

	// (DELETE /sharing/smb/id/{id})
	DeleteSharingSmbIdId(ctx echo.Context, id int) error

	// (GET /sharing/smb/id/{id})
	GetSharingSmbIdId(ctx echo.Context, id []interface{}, params GetSharingSmbIdIdParams) error

	// (PUT /sharing/smb/id/{id})
	PutSharingSmbIdId(ctx echo.Context, id int) error

	// (GET /sharing/smb/vfsobjects_choices)
	GetSharingSmbVfsobjectsChoices(ctx echo.Context) error

	// (GET /sharing/webdav)
	GetSharingWebdav(ctx echo.Context, params GetSharingWebdavParams) error

	// (POST /sharing/webdav)
	PostSharingWebdav(ctx echo.Context) error

	// (DELETE /sharing/webdav/id/{id})
	DeleteSharingWebdavIdId(ctx echo.Context, id int) error

	// (GET /sharing/webdav/id/{id})
	GetSharingWebdavIdId(ctx echo.Context, id []interface{}, params GetSharingWebdavIdIdParams) error

	// (PUT /sharing/webdav/id/{id})
	PutSharingWebdavIdId(ctx echo.Context, id int) error

	// (GET /smart)
	GetSmart(ctx echo.Context) error

	// (PUT /smart)
	PutSmart(ctx echo.Context) error

	// (GET /smart/test)
	GetSmartTest(ctx echo.Context, params GetSmartTestParams) error

	// (POST /smart/test)
	PostSmartTest(ctx echo.Context) error

	// (DELETE /smart/test/id/{id})
	DeleteSmartTestIdId(ctx echo.Context, id int) error

	// (GET /smart/test/id/{id})
	GetSmartTestIdId(ctx echo.Context, id []interface{}, params GetSmartTestIdIdParams) error

	// (PUT /smart/test/id/{id})
	PutSmartTestIdId(ctx echo.Context, id int) error

	// (GET /smart/test/results)
	GetSmartTestResults(ctx echo.Context, params GetSmartTestResultsParams) error

	// (GET /smb)
	GetSmb(ctx echo.Context) error

	// (PUT /smb)
	PutSmb(ctx echo.Context) error

	// (GET /smb/bindip_choices)
	GetSmbBindipChoices(ctx echo.Context) error

	// (GET /smb/domain_choices)
	GetSmbDomainChoices(ctx echo.Context) error

	// (GET /smb/sharesec)
	GetSmbSharesec(ctx echo.Context, params GetSmbSharesecParams) error

	// (POST /smb/sharesec)
	PostSmbSharesec(ctx echo.Context) error

	// (POST /smb/sharesec/getacl)
	PostSmbSharesecGetacl(ctx echo.Context) error

	// (DELETE /smb/sharesec/id/{id})
	DeleteSmbSharesecIdId(ctx echo.Context, id string) error

	// (GET /smb/sharesec/id/{id})
	GetSmbSharesecIdId(ctx echo.Context, id []interface{}, params GetSmbSharesecIdIdParams) error

	// (PUT /smb/sharesec/id/{id})
	PutSmbSharesecIdId(ctx echo.Context, id int) error

	// (GET /smb/sharesec/synchronize_acls)
	GetSmbSharesecSynchronizeAcls(ctx echo.Context) error

	// (GET /smb/unixcharset_choices)
	GetSmbUnixcharsetChoices(ctx echo.Context) error

	// (GET /snmp)
	GetSnmp(ctx echo.Context) error

	// (PUT /snmp)
	PutSnmp(ctx echo.Context) error

	// (GET /ssh)
	GetSsh(ctx echo.Context) error

	// (PUT /ssh)
	PutSsh(ctx echo.Context) error

	// (GET /ssh/bindiface_choices)
	GetSshBindifaceChoices(ctx echo.Context) error

	// (GET /staticroute)
	GetStaticroute(ctx echo.Context, params GetStaticrouteParams) error

	// (POST /staticroute)
	PostStaticroute(ctx echo.Context) error

	// (DELETE /staticroute/id/{id})
	DeleteStaticrouteIdId(ctx echo.Context, id int) error

	// (GET /staticroute/id/{id})
	GetStaticrouteIdId(ctx echo.Context, id []interface{}, params GetStaticrouteIdIdParams) error

	// (PUT /staticroute/id/{id})
	PutStaticrouteIdId(ctx echo.Context, id int) error

	// (POST /stats/get_data)
	PostStatsGetData(ctx echo.Context) error

	// (POST /stats/get_dataset_info)
	PostStatsGetDatasetInfo(ctx echo.Context) error

	// (GET /stats/get_sources)
	GetStatsGetSources(ctx echo.Context) error

	// (GET /support)
	GetSupport(ctx echo.Context) error

	// (PUT /support)
	PutSupport(ctx echo.Context) error

	// (POST /support/fetch_categories)
	PostSupportFetchCategories(ctx echo.Context) error

	// (GET /support/fields)
	GetSupportFields(ctx echo.Context) error

	// (GET /support/is_available)
	GetSupportIsAvailable(ctx echo.Context) error

	// (GET /support/is_available_and_enabled)
	GetSupportIsAvailableAndEnabled(ctx echo.Context) error

	// (POST /support/new_ticket)
	PostSupportNewTicket(ctx echo.Context) error

	// (GET /system/advanced)
	GetSystemAdvanced(ctx echo.Context) error

	// (PUT /system/advanced)
	PutSystemAdvanced(ctx echo.Context) error

	// (GET /system/advanced/serial_port_choices)
	GetSystemAdvancedSerialPortChoices(ctx echo.Context) error

	// (GET /system/boot_id)
	GetSystemBootId(ctx echo.Context) error

	// (POST /system/feature_enabled)
	PostSystemFeatureEnabled(ctx echo.Context) error

	// (GET /system/general)
	GetSystemGeneral(ctx echo.Context) error

	// (PUT /system/general)
	PutSystemGeneral(ctx echo.Context) error

	// (GET /system/general/country_choices)
	GetSystemGeneralCountryChoices(ctx echo.Context) error

	// (GET /system/general/kbdmap_choices)
	GetSystemGeneralKbdmapChoices(ctx echo.Context) error

	// (GET /system/general/language_choices)
	GetSystemGeneralLanguageChoices(ctx echo.Context) error

	// (GET /system/general/local_url)
	GetSystemGeneralLocalUrl(ctx echo.Context) error

	// (GET /system/general/timezone_choices)
	GetSystemGeneralTimezoneChoices(ctx echo.Context) error

	// (GET /system/general/ui_address_choices)
	GetSystemGeneralUiAddressChoices(ctx echo.Context) error

	// (GET /system/general/ui_certificate_choices)
	GetSystemGeneralUiCertificateChoices(ctx echo.Context) error

	// (GET /system/general/ui_restart)
	GetSystemGeneralUiRestart(ctx echo.Context) error

	// (GET /system/general/ui_v6address_choices)
	GetSystemGeneralUiV6addressChoices(ctx echo.Context) error

	// (GET /system/info)
	GetSystemInfo(ctx echo.Context) error

	// (GET /system/is_freenas)
	GetSystemIsFreenas(ctx echo.Context) error

	// (GET /system/legacy_ui_enabled)
	GetSystemLegacyUiEnabled(ctx echo.Context) error

	// (POST /system/license_update)
	PostSystemLicenseUpdate(ctx echo.Context) error

	// (GET /system/ntpserver)
	GetSystemNtpserver(ctx echo.Context, params GetSystemNtpserverParams) error

	// (POST /system/ntpserver)
	PostSystemNtpserver(ctx echo.Context) error

	// (DELETE /system/ntpserver/id/{id})
	DeleteSystemNtpserverIdId(ctx echo.Context, id int) error

	// (GET /system/ntpserver/id/{id})
	GetSystemNtpserverIdId(ctx echo.Context, id []interface{}, params GetSystemNtpserverIdIdParams) error

	// (PUT /system/ntpserver/id/{id})
	PutSystemNtpserverIdId(ctx echo.Context, id int) error

	// (GET /system/ntpserver/test_ntp_server)
	GetSystemNtpserverTestNtpServer(ctx echo.Context) error

	// (GET /system/product_name)
	GetSystemProductName(ctx echo.Context) error

	// (GET /system/ready)
	GetSystemReady(ctx echo.Context) error

	// (POST /system/reboot)
	PostSystemReboot(ctx echo.Context) error

	// (POST /system/shutdown)
	PostSystemShutdown(ctx echo.Context) error

	// (GET /system/state)
	GetSystemState(ctx echo.Context) error

	// (GET /system/version)
	GetSystemVersion(ctx echo.Context) error

	// (GET /systemdataset)
	GetSystemdataset(ctx echo.Context) error

	// (PUT /systemdataset)
	PutSystemdataset(ctx echo.Context) error

	// (GET /tftp)
	GetTftp(ctx echo.Context) error

	// (PUT /tftp)
	PutTftp(ctx echo.Context) error

	// (GET /tunable)
	GetTunable(ctx echo.Context, params GetTunableParams) error

	// (POST /tunable)
	PostTunable(ctx echo.Context) error

	// (DELETE /tunable/id/{id})
	DeleteTunableIdId(ctx echo.Context, id int) error

	// (GET /tunable/id/{id})
	GetTunableIdId(ctx echo.Context, id []interface{}, params GetTunableIdIdParams) error

	// (PUT /tunable/id/{id})
	PutTunableIdId(ctx echo.Context, id int) error

	// (POST /update/check_available)
	PostUpdateCheckAvailable(ctx echo.Context) error

	// (GET /update/download)
	GetUpdateDownload(ctx echo.Context) error

	// (POST /update/get_pending)
	PostUpdateGetPending(ctx echo.Context) error

	// (GET /update/get_trains)
	GetUpdateGetTrains(ctx echo.Context) error

	// (POST /update/manual)
	PostUpdateManual(ctx echo.Context) error

	// (POST /update/set_train)
	PostUpdateSetTrain(ctx echo.Context) error

	// (POST /update/update)
	PostUpdateUpdate(ctx echo.Context) error

	// (GET /ups)
	GetUps(ctx echo.Context) error

	// (PUT /ups)
	PutUps(ctx echo.Context) error

	// (GET /ups/driver_choices)
	GetUpsDriverChoices(ctx echo.Context) error

	// (GET /ups/port_choices)
	GetUpsPortChoices(ctx echo.Context) error

	// (GET /user)
	GetUser(ctx echo.Context, params GetUserParams) error

	// (POST /user)
	PostUser(ctx echo.Context) error

	// (GET /user/get_next_uid)
	GetUserGetNextUid(ctx echo.Context) error

	// (POST /user/get_user_obj)
	PostUserGetUserObj(ctx echo.Context) error

	// (GET /user/has_root_password)
	GetUserHasRootPassword(ctx echo.Context) error

	// (DELETE /user/id/{id})
	DeleteUserIdId(ctx echo.Context, id int) error

	// (GET /user/id/{id})
	GetUserIdId(ctx echo.Context, id []interface{}, params GetUserIdIdParams) error

	// (PUT /user/id/{id})
	PutUserIdId(ctx echo.Context, id int) error

	// (POST /user/id/{id}/pop_attribute)
	PostUserIdIdPopAttribute(ctx echo.Context, id int) error

	// (POST /user/id/{id}/set_attribute)
	PostUserIdIdSetAttribute(ctx echo.Context, id int) error

	// (GET /user/shell_choices)
	GetUserShellChoices(ctx echo.Context) error

	// (GET /vm)
	GetVm(ctx echo.Context, params GetVmParams) error

	// (POST /vm)
	PostVm(ctx echo.Context) error

	// (GET /vm/device)
	GetVmDevice(ctx echo.Context, params GetVmDeviceParams) error

	// (POST /vm/device)
	PostVmDevice(ctx echo.Context) error

	// (DELETE /vm/device/id/{id})
	DeleteVmDeviceIdId(ctx echo.Context, id int) error

	// (GET /vm/device/id/{id})
	GetVmDeviceIdId(ctx echo.Context, id []interface{}, params GetVmDeviceIdIdParams) error

	// (PUT /vm/device/id/{id})
	PutVmDeviceIdId(ctx echo.Context, id int) error

	// (GET /vm/device/nic_attach_choices)
	GetVmDeviceNicAttachChoices(ctx echo.Context) error

	// (GET /vm/device/vnc_bind_choices)
	GetVmDeviceVncBindChoices(ctx echo.Context) error

	// (GET /vm/flags)
	GetVmFlags(ctx echo.Context) error

	// (POST /vm/get_attached_iface)
	PostVmGetAttachedIface(ctx echo.Context) error

	// (POST /vm/get_available_memory)
	PostVmGetAvailableMemory(ctx echo.Context) error

	// (POST /vm/get_console)
	PostVmGetConsole(ctx echo.Context) error

	// (GET /vm/get_vmemory_in_use)
	GetVmGetVmemoryInUse(ctx echo.Context) error

	// (POST /vm/get_vnc)
	PostVmGetVnc(ctx echo.Context) error

	// (GET /vm/get_vnc_ipv4)
	GetVmGetVncIpv4(ctx echo.Context) error

	// (DELETE /vm/id/{id})
	DeleteVmIdId(ctx echo.Context, id int) error

	// (GET /vm/id/{id})
	GetVmIdId(ctx echo.Context, id []interface{}, params GetVmIdIdParams) error

	// (PUT /vm/id/{id})
	PutVmIdId(ctx echo.Context, id int) error

	// (POST /vm/id/{id}/clone)
	PostVmIdIdClone(ctx echo.Context, id int) error

	// (POST /vm/id/{id}/restart)
	PostVmIdIdRestart(ctx echo.Context, id int) error

	// (POST /vm/id/{id}/start)
	PostVmIdIdStart(ctx echo.Context, id int) error

	// (POST /vm/id/{id}/status)
	PostVmIdIdStatus(ctx echo.Context, id int) error

	// (POST /vm/id/{id}/stop)
	PostVmIdIdStop(ctx echo.Context, id int) error

	// (GET /vm/identify_hypervisor)
	GetVmIdentifyHypervisor(ctx echo.Context) error

	// (GET /vm/random_mac)
	GetVmRandomMac(ctx echo.Context) error

	// (GET /vm/vnc_port_wizard)
	GetVmVncPortWizard(ctx echo.Context) error

	// (GET /vmware)
	GetVmware(ctx echo.Context, params GetVmwareParams) error

	// (POST /vmware)
	PostVmware(ctx echo.Context) error

	// (POST /vmware/dataset_has_vms)
	PostVmwareDatasetHasVms(ctx echo.Context) error

	// (POST /vmware/get_datastores)
	PostVmwareGetDatastores(ctx echo.Context) error

	// (POST /vmware/get_virtual_machines)
	PostVmwareGetVirtualMachines(ctx echo.Context) error

	// (DELETE /vmware/id/{id})
	DeleteVmwareIdId(ctx echo.Context, id int) error

	// (GET /vmware/id/{id})
	GetVmwareIdId(ctx echo.Context, id []interface{}, params GetVmwareIdIdParams) error

	// (PUT /vmware/id/{id})
	PutVmwareIdId(ctx echo.Context, id int) error

	// (POST /vmware/match_datastores_with_datasets)
	PostVmwareMatchDatastoresWithDatasets(ctx echo.Context) error

	// (GET /webdav)
	GetWebdav(ctx echo.Context) error

	// (PUT /webdav)
	PutWebdav(ctx echo.Context) error

	// (GET /webui/image)
	GetWebuiImage(ctx echo.Context, params GetWebuiImageParams) error

	// (DELETE /webui/image/id/{id})
	DeleteWebuiImageIdId(ctx echo.Context, id int) error

	// (GET /webui/image/id/{id})
	GetWebuiImageIdId(ctx echo.Context, id []interface{}, params GetWebuiImageIdIdParams) error

	// (GET /zfs/snapshot)
	GetZfsSnapshot(ctx echo.Context, params GetZfsSnapshotParams) error

	// (POST /zfs/snapshot)
	PostZfsSnapshot(ctx echo.Context) error

	// (POST /zfs/snapshot/clone)
	PostZfsSnapshotClone(ctx echo.Context) error

	// (DELETE /zfs/snapshot/id/{id})
	DeleteZfsSnapshotIdId(ctx echo.Context, id string) error

	// (GET /zfs/snapshot/id/{id})
	GetZfsSnapshotIdId(ctx echo.Context, id []interface{}, params GetZfsSnapshotIdIdParams) error

	// (POST /zfs/snapshot/remove)
	PostZfsSnapshotRemove(ctx echo.Context) error

	// (POST /zfs/snapshot/rollback)
	PostZfsSnapshotRollback(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAcmeDnsAuthenticator converts echo context to params.
func (w *ServerInterfaceWrapper) GetAcmeDnsAuthenticator(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAcmeDnsAuthenticatorParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAcmeDnsAuthenticator(ctx, params)
	return err
}

// PostAcmeDnsAuthenticator converts echo context to params.
func (w *ServerInterfaceWrapper) PostAcmeDnsAuthenticator(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAcmeDnsAuthenticator(ctx)
	return err
}

// GetAcmeDnsAuthenticatorAuthenticatorSchemas converts echo context to params.
func (w *ServerInterfaceWrapper) GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAcmeDnsAuthenticatorAuthenticatorSchemas(ctx)
	return err
}

// DeleteAcmeDnsAuthenticatorIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAcmeDnsAuthenticatorIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAcmeDnsAuthenticatorIdId(ctx, id)
	return err
}

// GetAcmeDnsAuthenticatorIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAcmeDnsAuthenticatorIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAcmeDnsAuthenticatorIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAcmeDnsAuthenticatorIdId(ctx, id, params)
	return err
}

// PutAcmeDnsAuthenticatorIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutAcmeDnsAuthenticatorIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAcmeDnsAuthenticatorIdId(ctx, id)
	return err
}

// GetActivedirectory converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectory(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectory(ctx)
	return err
}

// PutActivedirectory converts echo context to params.
func (w *ServerInterfaceWrapper) PutActivedirectory(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutActivedirectory(ctx)
	return err
}

// GetActivedirectoryChangeTrustAccountPw converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectoryChangeTrustAccountPw(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectoryChangeTrustAccountPw(ctx)
	return err
}

// GetActivedirectoryDomainInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectoryDomainInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectoryDomainInfo(ctx)
	return err
}

// GetActivedirectoryGetSpnList converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectoryGetSpnList(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectoryGetSpnList(ctx)
	return err
}

// GetActivedirectoryGetState converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectoryGetState(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectoryGetState(ctx)
	return err
}

// GetActivedirectoryIdmapBackendChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectoryIdmapBackendChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectoryIdmapBackendChoices(ctx)
	return err
}

// PostActivedirectoryLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostActivedirectoryLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostActivedirectoryLeave(ctx)
	return err
}

// GetActivedirectoryNssInfoChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectoryNssInfoChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectoryNssInfoChoices(ctx)
	return err
}

// GetActivedirectorySaslWrappingChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectorySaslWrappingChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectorySaslWrappingChoices(ctx)
	return err
}

// GetActivedirectorySslChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectorySslChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectorySslChoices(ctx)
	return err
}

// GetActivedirectoryStarted converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivedirectoryStarted(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivedirectoryStarted(ctx)
	return err
}

// GetAfp converts echo context to params.
func (w *ServerInterfaceWrapper) GetAfp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAfp(ctx)
	return err
}

// PutAfp converts echo context to params.
func (w *ServerInterfaceWrapper) PutAfp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAfp(ctx)
	return err
}

// GetAfpBindipChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetAfpBindipChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAfpBindipChoices(ctx)
	return err
}

// PostAlertDismiss converts echo context to params.
func (w *ServerInterfaceWrapper) PostAlertDismiss(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAlertDismiss(ctx)
	return err
}

// GetAlertList converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertList(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertList(ctx)
	return err
}

// GetAlertListCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertListCategories(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertListCategories(ctx)
	return err
}

// GetAlertListPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertListPolicies(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertListPolicies(ctx)
	return err
}

// PostAlertRestore converts echo context to params.
func (w *ServerInterfaceWrapper) PostAlertRestore(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAlertRestore(ctx)
	return err
}

// GetAlertclasses converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertclasses(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertclasses(ctx)
	return err
}

// PutAlertclasses converts echo context to params.
func (w *ServerInterfaceWrapper) PutAlertclasses(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAlertclasses(ctx)
	return err
}

// GetAlertservice converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertservice(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlertserviceParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertservice(ctx, params)
	return err
}

// PostAlertservice converts echo context to params.
func (w *ServerInterfaceWrapper) PostAlertservice(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAlertservice(ctx)
	return err
}

// DeleteAlertserviceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAlertserviceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAlertserviceIdId(ctx, id)
	return err
}

// GetAlertserviceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertserviceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlertserviceIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertserviceIdId(ctx, id, params)
	return err
}

// PutAlertserviceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutAlertserviceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAlertserviceIdId(ctx, id)
	return err
}

// GetAlertserviceListTypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertserviceListTypes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertserviceListTypes(ctx)
	return err
}

// PostAlertserviceTest converts echo context to params.
func (w *ServerInterfaceWrapper) PostAlertserviceTest(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAlertserviceTest(ctx)
	return err
}

// PostAuthCheckUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthCheckUser(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthCheckUser(ctx)
	return err
}

// PostAuthGenerateToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthGenerateToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthGenerateToken(ctx)
	return err
}

// GetAuthSessions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthSessions(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthSessionsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuthSessions(ctx, params)
	return err
}

// GetBackup converts echo context to params.
func (w *ServerInterfaceWrapper) GetBackup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBackup(ctx)
	return err
}

// PostBackup converts echo context to params.
func (w *ServerInterfaceWrapper) PostBackup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBackup(ctx)
	return err
}

// PostBackupAzureGetBuckets converts echo context to params.
func (w *ServerInterfaceWrapper) PostBackupAzureGetBuckets(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBackupAzureGetBuckets(ctx)
	return err
}

// PostBackupB2GetBuckets converts echo context to params.
func (w *ServerInterfaceWrapper) PostBackupB2GetBuckets(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBackupB2GetBuckets(ctx)
	return err
}

// GetBackupCredential converts echo context to params.
func (w *ServerInterfaceWrapper) GetBackupCredential(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBackupCredentialParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBackupCredential(ctx, params)
	return err
}

// PostBackupCredential converts echo context to params.
func (w *ServerInterfaceWrapper) PostBackupCredential(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBackupCredential(ctx)
	return err
}

// DeleteBackupCredentialIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBackupCredentialIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBackupCredentialIdId(ctx, id)
	return err
}

// GetBackupCredentialIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBackupCredentialIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBackupCredentialIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBackupCredentialIdId(ctx, id, params)
	return err
}

// PutBackupCredentialIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutBackupCredentialIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutBackupCredentialIdId(ctx, id)
	return err
}

// PostBackupGcsGetBuckets converts echo context to params.
func (w *ServerInterfaceWrapper) PostBackupGcsGetBuckets(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBackupGcsGetBuckets(ctx)
	return err
}

// DeleteBackupIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBackupIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBackupIdId(ctx, id)
	return err
}

// GetBackupIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBackupIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBackupIdId(ctx, id)
	return err
}

// PutBackupIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutBackupIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutBackupIdId(ctx, id)
	return err
}

// PostBackupS3GetBuckets converts echo context to params.
func (w *ServerInterfaceWrapper) PostBackupS3GetBuckets(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBackupS3GetBuckets(ctx)
	return err
}

// PostBootAttach converts echo context to params.
func (w *ServerInterfaceWrapper) PostBootAttach(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBootAttach(ctx)
	return err
}

// PostBootDetach converts echo context to params.
func (w *ServerInterfaceWrapper) PostBootDetach(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBootDetach(ctx)
	return err
}

// GetBootGetDisks converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootGetDisks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBootGetDisks(ctx)
	return err
}

// GetBootGetScrubInterval converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootGetScrubInterval(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBootGetScrubInterval(ctx)
	return err
}

// GetBootGetState converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootGetState(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBootGetState(ctx)
	return err
}

// PostBootReplace converts echo context to params.
func (w *ServerInterfaceWrapper) PostBootReplace(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBootReplace(ctx)
	return err
}

// GetBootScrub converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootScrub(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBootScrub(ctx)
	return err
}

// PostBootSetScrubInterval converts echo context to params.
func (w *ServerInterfaceWrapper) PostBootSetScrubInterval(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBootSetScrubInterval(ctx)
	return err
}

// GetBootenv converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootenv(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBootenvParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBootenv(ctx, params)
	return err
}

// PostBootenv converts echo context to params.
func (w *ServerInterfaceWrapper) PostBootenv(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBootenv(ctx)
	return err
}

// DeleteBootenvIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBootenvIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBootenvIdId(ctx, id)
	return err
}

// GetBootenvIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootenvIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBootenvIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBootenvIdId(ctx, id, params)
	return err
}

// PutBootenvIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutBootenvIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutBootenvIdId(ctx, id)
	return err
}

// PostBootenvIdIdActivate converts echo context to params.
func (w *ServerInterfaceWrapper) PostBootenvIdIdActivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBootenvIdIdActivate(ctx, id)
	return err
}

// PostBootenvIdIdSetAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PostBootenvIdIdSetAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBootenvIdIdSetAttribute(ctx, id)
	return err
}

// GetCertificate converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCertificate(ctx, params)
	return err
}

// PostCertificate converts echo context to params.
func (w *ServerInterfaceWrapper) PostCertificate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCertificate(ctx)
	return err
}

// GetCertificateAcmeServerChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificateAcmeServerChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCertificateAcmeServerChoices(ctx)
	return err
}

// GetCertificateEcCurveChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificateEcCurveChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCertificateEcCurveChoices(ctx)
	return err
}

// DeleteCertificateIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCertificateIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCertificateIdId(ctx, id)
	return err
}

// GetCertificateIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificateIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCertificateIdId(ctx, id, params)
	return err
}

// PutCertificateIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCertificateIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCertificateIdId(ctx, id)
	return err
}

// GetCertificateKeyTypeChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificateKeyTypeChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCertificateKeyTypeChoices(ctx)
	return err
}

// GetCertificateauthority converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificateauthority(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateauthorityParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCertificateauthority(ctx, params)
	return err
}

// PostCertificateauthority converts echo context to params.
func (w *ServerInterfaceWrapper) PostCertificateauthority(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCertificateauthority(ctx)
	return err
}

// PostCertificateauthorityCaSignCsr converts echo context to params.
func (w *ServerInterfaceWrapper) PostCertificateauthorityCaSignCsr(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCertificateauthorityCaSignCsr(ctx)
	return err
}

// DeleteCertificateauthorityIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCertificateauthorityIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCertificateauthorityIdId(ctx, id)
	return err
}

// GetCertificateauthorityIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificateauthorityIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateauthorityIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCertificateauthorityIdId(ctx, id, params)
	return err
}

// PutCertificateauthorityIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCertificateauthorityIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCertificateauthorityIdId(ctx, id)
	return err
}

// GetCloudsync converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloudsync(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCloudsyncParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloudsync(ctx, params)
	return err
}

// PostCloudsync converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloudsync(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloudsync(ctx)
	return err
}

// GetCloudsyncCommonTaskSchema converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloudsyncCommonTaskSchema(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloudsyncCommonTaskSchema(ctx)
	return err
}

// GetCloudsyncCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloudsyncCredentials(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCloudsyncCredentialsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloudsyncCredentials(ctx, params)
	return err
}

// PostCloudsyncCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloudsyncCredentials(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloudsyncCredentials(ctx)
	return err
}

// DeleteCloudsyncCredentialsIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCloudsyncCredentialsIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCloudsyncCredentialsIdId(ctx, id)
	return err
}

// GetCloudsyncCredentialsIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloudsyncCredentialsIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCloudsyncCredentialsIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloudsyncCredentialsIdId(ctx, id, params)
	return err
}

// PutCloudsyncCredentialsIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCloudsyncCredentialsIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCloudsyncCredentialsIdId(ctx, id)
	return err
}

// PostCloudsyncCredentialsVerify converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloudsyncCredentialsVerify(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloudsyncCredentialsVerify(ctx)
	return err
}

// DeleteCloudsyncIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCloudsyncIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCloudsyncIdId(ctx, id)
	return err
}

// GetCloudsyncIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloudsyncIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCloudsyncIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloudsyncIdId(ctx, id, params)
	return err
}

// PutCloudsyncIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCloudsyncIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCloudsyncIdId(ctx, id)
	return err
}

// PostCloudsyncIdIdAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloudsyncIdIdAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloudsyncIdIdAbort(ctx, id)
	return err
}

// PostCloudsyncIdIdSync converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloudsyncIdIdSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloudsyncIdIdSync(ctx, id)
	return err
}

// PostCloudsyncListBuckets converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloudsyncListBuckets(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloudsyncListBuckets(ctx)
	return err
}

// PostCloudsyncListDirectory converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloudsyncListDirectory(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloudsyncListDirectory(ctx)
	return err
}

// PostCloudsyncOnedriveListDrives converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloudsyncOnedriveListDrives(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloudsyncOnedriveListDrives(ctx)
	return err
}

// GetCloudsyncProviders converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloudsyncProviders(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloudsyncProviders(ctx)
	return err
}

// PostConfigReset converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfigReset(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostConfigReset(ctx)
	return err
}

// PostCoreBulk converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoreBulk(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCoreBulk(ctx)
	return err
}

// PostCoreDebug converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoreDebug(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCoreDebug(ctx)
	return err
}

// PostCoreDownload converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoreDownload(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCoreDownload(ctx)
	return err
}

// GetCoreGetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoreGetEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCoreGetEvents(ctx)
	return err
}

// GetCoreGetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoreGetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoreGetJobsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCoreGetJobs(ctx, params)
	return err
}

// PostCoreGetMethods converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoreGetMethods(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCoreGetMethods(ctx)
	return err
}

// GetCoreGetServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoreGetServices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCoreGetServices(ctx)
	return err
}

// PostCoreJobAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoreJobAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCoreJobAbort(ctx)
	return err
}

// PostCoreJobUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoreJobUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCoreJobUpdate(ctx)
	return err
}

// PostCoreJobWait converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoreJobWait(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCoreJobWait(ctx)
	return err
}

// GetCorePing converts echo context to params.
func (w *ServerInterfaceWrapper) GetCorePing(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCorePing(ctx)
	return err
}

// GetCoreSessions converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoreSessions(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoreSessionsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCoreSessions(ctx, params)
	return err
}

// GetCronjob converts echo context to params.
func (w *ServerInterfaceWrapper) GetCronjob(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCronjobParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCronjob(ctx, params)
	return err
}

// PostCronjob converts echo context to params.
func (w *ServerInterfaceWrapper) PostCronjob(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCronjob(ctx)
	return err
}

// DeleteCronjobIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCronjobIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCronjobIdId(ctx, id)
	return err
}

// GetCronjobIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCronjobIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCronjobIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCronjobIdId(ctx, id, params)
	return err
}

// PutCronjobIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCronjobIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCronjobIdId(ctx, id)
	return err
}

// PostCronjobRun converts echo context to params.
func (w *ServerInterfaceWrapper) PostCronjobRun(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCronjobRun(ctx)
	return err
}

// PostDeviceGetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) PostDeviceGetInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDeviceGetInfo(ctx)
	return err
}

// GetDirectoryservicesGetState converts echo context to params.
func (w *ServerInterfaceWrapper) GetDirectoryservicesGetState(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDirectoryservicesGetState(ctx)
	return err
}

// GetDisk converts echo context to params.
func (w *ServerInterfaceWrapper) GetDisk(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiskParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDisk(ctx, params)
	return err
}

// PostDiskGetEncrypted converts echo context to params.
func (w *ServerInterfaceWrapper) PostDiskGetEncrypted(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDiskGetEncrypted(ctx)
	return err
}

// PostDiskGetUnused converts echo context to params.
func (w *ServerInterfaceWrapper) PostDiskGetUnused(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDiskGetUnused(ctx)
	return err
}

// GetDiskIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiskIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiskIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDiskIdId(ctx, id, params)
	return err
}

// PutDiskIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiskIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDiskIdId(ctx, id)
	return err
}

// PostDiskTemperatures converts echo context to params.
func (w *ServerInterfaceWrapper) PostDiskTemperatures(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDiskTemperatures(ctx)
	return err
}

// PostDiskWipe converts echo context to params.
func (w *ServerInterfaceWrapper) PostDiskWipe(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDiskWipe(ctx)
	return err
}

// GetDnsQuery converts echo context to params.
func (w *ServerInterfaceWrapper) GetDnsQuery(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDnsQueryParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDnsQuery(ctx, params)
	return err
}

// GetDyndns converts echo context to params.
func (w *ServerInterfaceWrapper) GetDyndns(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDyndns(ctx)
	return err
}

// PutDyndns converts echo context to params.
func (w *ServerInterfaceWrapper) PutDyndns(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDyndns(ctx)
	return err
}

// GetDyndnsProviderChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetDyndnsProviderChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDyndnsProviderChoices(ctx)
	return err
}

// PostFilesystemAclIsTrivial converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemAclIsTrivial(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemAclIsTrivial(ctx)
	return err
}

// PostFilesystemChown converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemChown(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemChown(ctx)
	return err
}

// GetFilesystemDefaultAclChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetFilesystemDefaultAclChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFilesystemDefaultAclChoices(ctx)
	return err
}

// PostFilesystemGetDefaultAcl converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemGetDefaultAcl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemGetDefaultAcl(ctx)
	return err
}

// PostFilesystemGetacl converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemGetacl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemGetacl(ctx)
	return err
}

// PostFilesystemListdir converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemListdir(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemListdir(ctx)
	return err
}

// PostFilesystemSetacl converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemSetacl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemSetacl(ctx)
	return err
}

// PostFilesystemSetperm converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemSetperm(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemSetperm(ctx)
	return err
}

// PostFilesystemStat converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemStat(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemStat(ctx)
	return err
}

// PostFilesystemStatfs converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesystemStatfs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFilesystemStatfs(ctx)
	return err
}

// GetFtp converts echo context to params.
func (w *ServerInterfaceWrapper) GetFtp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFtp(ctx)
	return err
}

// PutFtp converts echo context to params.
func (w *ServerInterfaceWrapper) PutFtp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutFtp(ctx)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroup(ctx, params)
	return err
}

// PostGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGroup(ctx)
	return err
}

// PostGroupGetGroupObj converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroupGetGroupObj(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGroupGetGroupObj(ctx)
	return err
}

// GetGroupGetNextGid converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupGetNextGid(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupGetNextGid(ctx)
	return err
}

// DeleteGroupIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroupIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroupIdId(ctx, id)
	return err
}

// GetGroupIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupIdId(ctx, id, params)
	return err
}

// PutGroupIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutGroupIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutGroupIdId(ctx, id)
	return err
}

// GetIdmapAd converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapAd(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapAdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapAd(ctx, params)
	return err
}

// PostIdmapAd converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapAd(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapAd(ctx)
	return err
}

// DeleteIdmapAdIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapAdIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapAdIdId(ctx, id)
	return err
}

// GetIdmapAdIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapAdIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapAdIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapAdIdId(ctx, id, params)
	return err
}

// PutIdmapAdIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapAdIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapAdIdId(ctx, id)
	return err
}

// GetIdmapAutorid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapAutorid(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapAutoridParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapAutorid(ctx, params)
	return err
}

// PostIdmapAutorid converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapAutorid(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapAutorid(ctx)
	return err
}

// DeleteIdmapAutoridIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapAutoridIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapAutoridIdId(ctx, id)
	return err
}

// GetIdmapAutoridIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapAutoridIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapAutoridIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapAutoridIdId(ctx, id, params)
	return err
}

// PutIdmapAutoridIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapAutoridIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapAutoridIdId(ctx, id)
	return err
}

// GetIdmapClearIdmapCache converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapClearIdmapCache(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapClearIdmapCache(ctx)
	return err
}

// GetIdmapDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapDomain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapDomainParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapDomain(ctx, params)
	return err
}

// PostIdmapDomain converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapDomain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapDomain(ctx)
	return err
}

// DeleteIdmapDomainIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapDomainIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapDomainIdId(ctx, id)
	return err
}

// GetIdmapDomainIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapDomainIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapDomainIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapDomainIdId(ctx, id, params)
	return err
}

// PutIdmapDomainIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapDomainIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapDomainIdId(ctx, id)
	return err
}

// GetIdmapDomaintobackend converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapDomaintobackend(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapDomaintobackendParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapDomaintobackend(ctx, params)
	return err
}

// PostIdmapDomaintobackend converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapDomaintobackend(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapDomaintobackend(ctx)
	return err
}

// DeleteIdmapDomaintobackendIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapDomaintobackendIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapDomaintobackendIdId(ctx, id)
	return err
}

// GetIdmapDomaintobackendIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapDomaintobackendIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapDomaintobackendIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapDomaintobackendIdId(ctx, id, params)
	return err
}

// PutIdmapDomaintobackendIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapDomaintobackendIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapDomaintobackendIdId(ctx, id)
	return err
}

// GetIdmapGetConfiguredIdmapDomains converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapGetConfiguredIdmapDomains(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapGetConfiguredIdmapDomains(ctx)
	return err
}

// PostIdmapGetOrCreateIdmapByDomain converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapGetOrCreateIdmapByDomain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapGetOrCreateIdmapByDomain(ctx)
	return err
}

// GetIdmapLdap converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapLdap(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapLdapParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapLdap(ctx, params)
	return err
}

// PostIdmapLdap converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapLdap(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapLdap(ctx)
	return err
}

// DeleteIdmapLdapIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapLdapIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapLdapIdId(ctx, id)
	return err
}

// GetIdmapLdapIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapLdapIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapLdapIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapLdapIdId(ctx, id, params)
	return err
}

// PutIdmapLdapIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapLdapIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapLdapIdId(ctx, id)
	return err
}

// GetIdmapNss converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapNss(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapNssParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapNss(ctx, params)
	return err
}

// PostIdmapNss converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapNss(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapNss(ctx)
	return err
}

// DeleteIdmapNssIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapNssIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapNssIdId(ctx, id)
	return err
}

// GetIdmapNssIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapNssIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapNssIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapNssIdId(ctx, id, params)
	return err
}

// PutIdmapNssIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapNssIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapNssIdId(ctx, id)
	return err
}

// GetIdmapRfc2307 converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapRfc2307(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapRfc2307Params
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapRfc2307(ctx, params)
	return err
}

// PostIdmapRfc2307 converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapRfc2307(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapRfc2307(ctx)
	return err
}

// DeleteIdmapRfc2307IdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapRfc2307IdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapRfc2307IdId(ctx, id)
	return err
}

// GetIdmapRfc2307IdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapRfc2307IdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapRfc2307IdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapRfc2307IdId(ctx, id, params)
	return err
}

// PutIdmapRfc2307IdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapRfc2307IdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapRfc2307IdId(ctx, id)
	return err
}

// GetIdmapRid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapRid(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapRidParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapRid(ctx, params)
	return err
}

// PostIdmapRid converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapRid(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapRid(ctx)
	return err
}

// DeleteIdmapRidIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapRidIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapRidIdId(ctx, id)
	return err
}

// GetIdmapRidIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapRidIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapRidIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapRidIdId(ctx, id, params)
	return err
}

// PutIdmapRidIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapRidIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapRidIdId(ctx, id)
	return err
}

// GetIdmapScript converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapScript(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapScriptParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapScript(ctx, params)
	return err
}

// PostIdmapScript converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapScript(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapScript(ctx)
	return err
}

// DeleteIdmapScriptIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapScriptIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapScriptIdId(ctx, id)
	return err
}

// GetIdmapScriptIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapScriptIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapScriptIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapScriptIdId(ctx, id, params)
	return err
}

// PutIdmapScriptIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapScriptIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapScriptIdId(ctx, id)
	return err
}

// GetIdmapTdb converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapTdb(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapTdbParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapTdb(ctx, params)
	return err
}

// PostIdmapTdb converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdmapTdb(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdmapTdb(ctx)
	return err
}

// DeleteIdmapTdbIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdmapTdbIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdmapTdbIdId(ctx, id)
	return err
}

// GetIdmapTdbIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdmapTdbIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdmapTdbIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdmapTdbIdId(ctx, id, params)
	return err
}

// PutIdmapTdbIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIdmapTdbIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIdmapTdbIdId(ctx, id)
	return err
}

// GetInitshutdownscript converts echo context to params.
func (w *ServerInterfaceWrapper) GetInitshutdownscript(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInitshutdownscriptParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInitshutdownscript(ctx, params)
	return err
}

// PostInitshutdownscript converts echo context to params.
func (w *ServerInterfaceWrapper) PostInitshutdownscript(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInitshutdownscript(ctx)
	return err
}

// DeleteInitshutdownscriptIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInitshutdownscriptIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteInitshutdownscriptIdId(ctx, id)
	return err
}

// GetInitshutdownscriptIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetInitshutdownscriptIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInitshutdownscriptIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInitshutdownscriptIdId(ctx, id, params)
	return err
}

// PutInitshutdownscriptIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutInitshutdownscriptIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutInitshutdownscriptIdId(ctx, id)
	return err
}

// GetInterface converts echo context to params.
func (w *ServerInterfaceWrapper) GetInterface(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInterfaceParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInterface(ctx, params)
	return err
}

// PostInterface converts echo context to params.
func (w *ServerInterfaceWrapper) PostInterface(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInterface(ctx)
	return err
}

// PostInterfaceBridgeMembersChoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostInterfaceBridgeMembersChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInterfaceBridgeMembersChoices(ctx)
	return err
}

// GetInterfaceCheckin converts echo context to params.
func (w *ServerInterfaceWrapper) GetInterfaceCheckin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInterfaceCheckin(ctx)
	return err
}

// GetInterfaceCheckinWaiting converts echo context to params.
func (w *ServerInterfaceWrapper) GetInterfaceCheckinWaiting(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInterfaceCheckinWaiting(ctx)
	return err
}

// PostInterfaceChoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostInterfaceChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInterfaceChoices(ctx)
	return err
}

// PostInterfaceCommit converts echo context to params.
func (w *ServerInterfaceWrapper) PostInterfaceCommit(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInterfaceCommit(ctx)
	return err
}

// GetInterfaceHasPendingChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetInterfaceHasPendingChanges(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInterfaceHasPendingChanges(ctx)
	return err
}

// DeleteInterfaceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInterfaceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteInterfaceIdId(ctx, id)
	return err
}

// GetInterfaceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetInterfaceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInterfaceIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInterfaceIdId(ctx, id, params)
	return err
}

// PutInterfaceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutInterfaceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutInterfaceIdId(ctx, id)
	return err
}

// PostInterfaceIpInUse converts echo context to params.
func (w *ServerInterfaceWrapper) PostInterfaceIpInUse(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInterfaceIpInUse(ctx)
	return err
}

// PostInterfaceLagPortsChoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostInterfaceLagPortsChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInterfaceLagPortsChoices(ctx)
	return err
}

// GetInterfaceRollback converts echo context to params.
func (w *ServerInterfaceWrapper) GetInterfaceRollback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInterfaceRollback(ctx)
	return err
}

// GetInterfaceVlanParentInterfaceChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetInterfaceVlanParentInterfaceChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInterfaceVlanParentInterfaceChoices(ctx)
	return err
}

// GetIpmi converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpmi(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIpmiParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIpmi(ctx, params)
	return err
}

// GetIpmiChannels converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpmiChannels(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIpmiChannels(ctx)
	return err
}

// GetIpmiIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpmiIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIpmiIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIpmiIdId(ctx, id, params)
	return err
}

// PutIpmiIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIpmiIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIpmiIdId(ctx, id)
	return err
}

// PostIpmiIdentify converts echo context to params.
func (w *ServerInterfaceWrapper) PostIpmiIdentify(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIpmiIdentify(ctx)
	return err
}

// GetIpmiIsLoaded converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpmiIsLoaded(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIpmiIsLoaded(ctx)
	return err
}

// GetIscsiAuth converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiAuthParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiAuth(ctx, params)
	return err
}

// PostIscsiAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PostIscsiAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIscsiAuth(ctx)
	return err
}

// DeleteIscsiAuthIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiAuthIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiAuthIdId(ctx, id)
	return err
}

// GetIscsiAuthIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiAuthIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiAuthIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiAuthIdId(ctx, id, params)
	return err
}

// PutIscsiAuthIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIscsiAuthIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIscsiAuthIdId(ctx, id)
	return err
}

// GetIscsiExtent converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiExtent(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiExtentParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiExtent(ctx, params)
	return err
}

// PostIscsiExtent converts echo context to params.
func (w *ServerInterfaceWrapper) PostIscsiExtent(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIscsiExtent(ctx)
	return err
}

// PostIscsiExtentDiskChoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostIscsiExtentDiskChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIscsiExtentDiskChoices(ctx)
	return err
}

// DeleteIscsiExtentIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiExtentIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiExtentIdId(ctx, id)
	return err
}

// GetIscsiExtentIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiExtentIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiExtentIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiExtentIdId(ctx, id, params)
	return err
}

// PutIscsiExtentIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIscsiExtentIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIscsiExtentIdId(ctx, id)
	return err
}

// GetIscsiGlobal converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiGlobal(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiGlobal(ctx)
	return err
}

// PutIscsiGlobal converts echo context to params.
func (w *ServerInterfaceWrapper) PutIscsiGlobal(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIscsiGlobal(ctx)
	return err
}

// GetIscsiGlobalSessions converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiGlobalSessions(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiGlobalSessionsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiGlobalSessions(ctx, params)
	return err
}

// GetIscsiInitiator converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiInitiator(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiInitiatorParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiInitiator(ctx, params)
	return err
}

// PostIscsiInitiator converts echo context to params.
func (w *ServerInterfaceWrapper) PostIscsiInitiator(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIscsiInitiator(ctx)
	return err
}

// DeleteIscsiInitiatorIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiInitiatorIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiInitiatorIdId(ctx, id)
	return err
}

// GetIscsiInitiatorIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiInitiatorIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiInitiatorIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiInitiatorIdId(ctx, id, params)
	return err
}

// PutIscsiInitiatorIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIscsiInitiatorIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIscsiInitiatorIdId(ctx, id)
	return err
}

// GetIscsiPortal converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiPortal(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiPortalParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiPortal(ctx, params)
	return err
}

// PostIscsiPortal converts echo context to params.
func (w *ServerInterfaceWrapper) PostIscsiPortal(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIscsiPortal(ctx)
	return err
}

// DeleteIscsiPortalIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiPortalIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiPortalIdId(ctx, id)
	return err
}

// GetIscsiPortalIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiPortalIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiPortalIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiPortalIdId(ctx, id, params)
	return err
}

// PutIscsiPortalIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIscsiPortalIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIscsiPortalIdId(ctx, id)
	return err
}

// GetIscsiPortalListenIpChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiPortalListenIpChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiPortalListenIpChoices(ctx)
	return err
}

// GetIscsiTarget converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiTarget(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiTargetParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiTarget(ctx, params)
	return err
}

// PostIscsiTarget converts echo context to params.
func (w *ServerInterfaceWrapper) PostIscsiTarget(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIscsiTarget(ctx)
	return err
}

// DeleteIscsiTargetIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiTargetIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiTargetIdId(ctx, id)
	return err
}

// GetIscsiTargetIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiTargetIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiTargetIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiTargetIdId(ctx, id, params)
	return err
}

// PutIscsiTargetIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIscsiTargetIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIscsiTargetIdId(ctx, id)
	return err
}

// GetIscsiTargetextent converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiTargetextent(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiTargetextentParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiTargetextent(ctx, params)
	return err
}

// PostIscsiTargetextent converts echo context to params.
func (w *ServerInterfaceWrapper) PostIscsiTargetextent(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIscsiTargetextent(ctx)
	return err
}

// DeleteIscsiTargetextentIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIscsiTargetextentIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIscsiTargetextentIdId(ctx, id)
	return err
}

// GetIscsiTargetextentIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIscsiTargetextentIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIscsiTargetextentIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIscsiTargetextentIdId(ctx, id, params)
	return err
}

// PutIscsiTargetextentIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutIscsiTargetextentIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIscsiTargetextentIdId(ctx, id)
	return err
}

// GetJail converts echo context to params.
func (w *ServerInterfaceWrapper) GetJail(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJailParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJail(ctx, params)
	return err
}

// PostJail converts echo context to params.
func (w *ServerInterfaceWrapper) PostJail(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJail(ctx)
	return err
}

// PostJailActivate converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailActivate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailActivate(ctx)
	return err
}

// PostJailClean converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailClean(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailClean(ctx)
	return err
}

// GetJailDefaultConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetJailDefaultConfiguration(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJailDefaultConfiguration(ctx)
	return err
}

// PostJailExec converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailExec(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailExec(ctx)
	return err
}

// PostJailExport converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailExport(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailExport(ctx)
	return err
}

// PostJailFetch converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailFetch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailFetch(ctx)
	return err
}

// PostJailFstab converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailFstab(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailFstab(ctx)
	return err
}

// GetJailGetActivatedPool converts echo context to params.
func (w *ServerInterfaceWrapper) GetJailGetActivatedPool(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJailGetActivatedPool(ctx)
	return err
}

// DeleteJailIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJailIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJailIdId(ctx, id)
	return err
}

// GetJailIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetJailIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJailIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJailIdId(ctx, id, params)
	return err
}

// PutJailIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutJailIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJailIdId(ctx, id)
	return err
}

// PostJailIdIdClone converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailIdIdClone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailIdIdClone(ctx, id)
	return err
}

// PostJailImportImage converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailImportImage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailImportImage(ctx)
	return err
}

// GetJailInterfaceChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetJailInterfaceChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJailInterfaceChoices(ctx)
	return err
}

// PostJailRcAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailRcAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailRcAction(ctx)
	return err
}

// PostJailReleasesChoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailReleasesChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailReleasesChoices(ctx)
	return err
}

// PostJailRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailRestart(ctx)
	return err
}

// PostJailStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailStart(ctx)
	return err
}

// PostJailStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailStop(ctx)
	return err
}

// PostJailUpdateDefaults converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailUpdateDefaults(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailUpdateDefaults(ctx)
	return err
}

// PostJailUpdateToLatestPatch converts echo context to params.
func (w *ServerInterfaceWrapper) PostJailUpdateToLatestPatch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJailUpdateToLatestPatch(ctx)
	return err
}

// GetKerberos converts echo context to params.
func (w *ServerInterfaceWrapper) GetKerberos(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKerberos(ctx)
	return err
}

// PutKerberos converts echo context to params.
func (w *ServerInterfaceWrapper) PutKerberos(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutKerberos(ctx)
	return err
}

// GetKerberosKeytab converts echo context to params.
func (w *ServerInterfaceWrapper) GetKerberosKeytab(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKerberosKeytabParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKerberosKeytab(ctx, params)
	return err
}

// PostKerberosKeytab converts echo context to params.
func (w *ServerInterfaceWrapper) PostKerberosKeytab(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostKerberosKeytab(ctx)
	return err
}

// DeleteKerberosKeytabIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteKerberosKeytabIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteKerberosKeytabIdId(ctx, id)
	return err
}

// GetKerberosKeytabIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetKerberosKeytabIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKerberosKeytabIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKerberosKeytabIdId(ctx, id, params)
	return err
}

// PutKerberosKeytabIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutKerberosKeytabIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutKerberosKeytabIdId(ctx, id)
	return err
}

// GetKerberosKeytabSystemKeytabList converts echo context to params.
func (w *ServerInterfaceWrapper) GetKerberosKeytabSystemKeytabList(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKerberosKeytabSystemKeytabList(ctx)
	return err
}

// GetKerberosRealm converts echo context to params.
func (w *ServerInterfaceWrapper) GetKerberosRealm(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKerberosRealmParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKerberosRealm(ctx, params)
	return err
}

// PostKerberosRealm converts echo context to params.
func (w *ServerInterfaceWrapper) PostKerberosRealm(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostKerberosRealm(ctx)
	return err
}

// DeleteKerberosRealmIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteKerberosRealmIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteKerberosRealmIdId(ctx, id)
	return err
}

// GetKerberosRealmIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetKerberosRealmIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKerberosRealmIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKerberosRealmIdId(ctx, id, params)
	return err
}

// PutKerberosRealmIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutKerberosRealmIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutKerberosRealmIdId(ctx, id)
	return err
}

// GetKeychaincredential converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeychaincredential(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeychaincredentialParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKeychaincredential(ctx, params)
	return err
}

// PostKeychaincredential converts echo context to params.
func (w *ServerInterfaceWrapper) PostKeychaincredential(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostKeychaincredential(ctx)
	return err
}

// GetKeychaincredentialGenerateSshKeyPair converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeychaincredentialGenerateSshKeyPair(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKeychaincredentialGenerateSshKeyPair(ctx)
	return err
}

// DeleteKeychaincredentialIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteKeychaincredentialIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteKeychaincredentialIdId(ctx, id)
	return err
}

// GetKeychaincredentialIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeychaincredentialIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeychaincredentialIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKeychaincredentialIdId(ctx, id, params)
	return err
}

// PutKeychaincredentialIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutKeychaincredentialIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutKeychaincredentialIdId(ctx, id)
	return err
}

// PostKeychaincredentialRemoteSshHostKeyScan converts echo context to params.
func (w *ServerInterfaceWrapper) PostKeychaincredentialRemoteSshHostKeyScan(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostKeychaincredentialRemoteSshHostKeyScan(ctx)
	return err
}

// PostKeychaincredentialRemoteSshSemiautomaticSetup converts echo context to params.
func (w *ServerInterfaceWrapper) PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostKeychaincredentialRemoteSshSemiautomaticSetup(ctx)
	return err
}

// PostKeychaincredentialUsedBy converts echo context to params.
func (w *ServerInterfaceWrapper) PostKeychaincredentialUsedBy(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostKeychaincredentialUsedBy(ctx)
	return err
}

// GetLdap converts echo context to params.
func (w *ServerInterfaceWrapper) GetLdap(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLdap(ctx)
	return err
}

// PutLdap converts echo context to params.
func (w *ServerInterfaceWrapper) PutLdap(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutLdap(ctx)
	return err
}

// GetLdapGetState converts echo context to params.
func (w *ServerInterfaceWrapper) GetLdapGetState(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLdapGetState(ctx)
	return err
}

// GetLdapIdmapBackendChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetLdapIdmapBackendChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLdapIdmapBackendChoices(ctx)
	return err
}

// GetLdapSchemaChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetLdapSchemaChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLdapSchemaChoices(ctx)
	return err
}

// GetLdapSslChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetLdapSslChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLdapSslChoices(ctx)
	return err
}

// GetLldp converts echo context to params.
func (w *ServerInterfaceWrapper) GetLldp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLldp(ctx)
	return err
}

// PutLldp converts echo context to params.
func (w *ServerInterfaceWrapper) PutLldp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutLldp(ctx)
	return err
}

// GetMail converts echo context to params.
func (w *ServerInterfaceWrapper) GetMail(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMail(ctx)
	return err
}

// PutMail converts echo context to params.
func (w *ServerInterfaceWrapper) PutMail(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMail(ctx)
	return err
}

// PostMailSend converts echo context to params.
func (w *ServerInterfaceWrapper) PostMailSend(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMailSend(ctx)
	return err
}

// GetMultipath converts echo context to params.
func (w *ServerInterfaceWrapper) GetMultipath(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMultipathParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMultipath(ctx, params)
	return err
}

// GetMultipathIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMultipathIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMultipathIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMultipathIdId(ctx, id, params)
	return err
}

// GetNetworkConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkConfiguration(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkConfiguration(ctx)
	return err
}

// PutNetworkConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) PutNetworkConfiguration(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutNetworkConfiguration(ctx)
	return err
}

// GetNetworkGeneralSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkGeneralSummary(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkGeneralSummary(ctx)
	return err
}

// GetNfs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNfs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNfs(ctx)
	return err
}

// PutNfs converts echo context to params.
func (w *ServerInterfaceWrapper) PutNfs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutNfs(ctx)
	return err
}

// GetNis converts echo context to params.
func (w *ServerInterfaceWrapper) GetNis(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNis(ctx)
	return err
}

// PutNis converts echo context to params.
func (w *ServerInterfaceWrapper) PutNis(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutNis(ctx)
	return err
}

// GetNisGetState converts echo context to params.
func (w *ServerInterfaceWrapper) GetNisGetState(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNisGetState(ctx)
	return err
}

// GetPlugin converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlugin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPluginParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlugin(ctx, params)
	return err
}

// PostPlugin converts echo context to params.
func (w *ServerInterfaceWrapper) PostPlugin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPlugin(ctx)
	return err
}

// PostPluginAvailable converts echo context to params.
func (w *ServerInterfaceWrapper) PostPluginAvailable(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPluginAvailable(ctx)
	return err
}

// PostPluginBranchesChoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostPluginBranchesChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPluginBranchesChoices(ctx)
	return err
}

// PostPluginDefaults converts echo context to params.
func (w *ServerInterfaceWrapper) PostPluginDefaults(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPluginDefaults(ctx)
	return err
}

// DeletePluginIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePluginIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePluginIdId(ctx, id)
	return err
}

// GetPluginIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPluginIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPluginIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPluginIdId(ctx, id, params)
	return err
}

// PutPluginIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPluginIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPluginIdId(ctx, id)
	return err
}

// GetPluginOfficialRepositories converts echo context to params.
func (w *ServerInterfaceWrapper) GetPluginOfficialRepositories(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPluginOfficialRepositories(ctx)
	return err
}

// GetPluginRetrieveVersionsForRepos converts echo context to params.
func (w *ServerInterfaceWrapper) GetPluginRetrieveVersionsForRepos(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPluginRetrieveVersionsForRepos(ctx)
	return err
}

// GetPool converts echo context to params.
func (w *ServerInterfaceWrapper) GetPool(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPool(ctx, params)
	return err
}

// PostPool converts echo context to params.
func (w *ServerInterfaceWrapper) PostPool(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPool(ctx)
	return err
}

// GetPoolDataset converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolDataset(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolDatasetParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolDataset(ctx, params)
	return err
}

// PostPoolDataset converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolDataset(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolDataset(ctx)
	return err
}

// DeletePoolDatasetIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePoolDatasetIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePoolDatasetIdId(ctx, id)
	return err
}

// GetPoolDatasetIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolDatasetIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolDatasetIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolDatasetIdId(ctx, id, params)
	return err
}

// PutPoolDatasetIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPoolDatasetIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPoolDatasetIdId(ctx, id)
	return err
}

// PostPoolDatasetIdIdAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolDatasetIdIdAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolDatasetIdIdAttachments(ctx, id)
	return err
}

// PostPoolDatasetIdIdPermission converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolDatasetIdIdPermission(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolDatasetIdIdPermission(ctx, id)
	return err
}

// PostPoolDatasetIdIdProcesses converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolDatasetIdIdProcesses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolDatasetIdIdProcesses(ctx, id)
	return err
}

// PostPoolDatasetIdIdPromote converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolDatasetIdIdPromote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolDatasetIdIdPromote(ctx, id)
	return err
}

// PostPoolDatasetRecommendedZvolBlocksize converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolDatasetRecommendedZvolBlocksize(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolDatasetRecommendedZvolBlocksize(ctx)
	return err
}

// PostPoolFilesystemChoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolFilesystemChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolFilesystemChoices(ctx)
	return err
}

// GetPoolIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolIdId(ctx, id, params)
	return err
}

// PutPoolIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPoolIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPoolIdId(ctx, id)
	return err
}

// PostPoolIdIdAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdAttachments(ctx, id)
	return err
}

// PostPoolIdIdDetach converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdDetach(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdDetach(ctx, id)
	return err
}

// PostPoolIdIdDownloadEncryptionKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdDownloadEncryptionKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdDownloadEncryptionKey(ctx, id)
	return err
}

// PostPoolIdIdExport converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdExport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdExport(ctx, id)
	return err
}

// PostPoolIdIdGetDisks converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdGetDisks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdGetDisks(ctx, id)
	return err
}

// PostPoolIdIdIsUpgraded converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdIsUpgraded(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdIsUpgraded(ctx, id)
	return err
}

// PostPoolIdIdLock converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdLock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdLock(ctx, id)
	return err
}

// PostPoolIdIdOffline converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdOffline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdOffline(ctx, id)
	return err
}

// PostPoolIdIdOnline converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdOnline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdOnline(ctx, id)
	return err
}

// PostPoolIdIdPassphrase converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdPassphrase(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdPassphrase(ctx, id)
	return err
}

// PostPoolIdIdProcesses converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdProcesses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdProcesses(ctx, id)
	return err
}

// PostPoolIdIdRecoverykeyRm converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdRecoverykeyRm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdRecoverykeyRm(ctx, id)
	return err
}

// PostPoolIdIdRekey converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdRekey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdRekey(ctx, id)
	return err
}

// PostPoolIdIdRemove converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdRemove(ctx, id)
	return err
}

// PostPoolIdIdReplace converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdReplace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdReplace(ctx, id)
	return err
}

// PostPoolIdIdScrub converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdScrub(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdScrub(ctx, id)
	return err
}

// PostPoolIdIdUnlock converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdUnlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdUnlock(ctx, id)
	return err
}

// PostPoolIdIdUpgrade converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolIdIdUpgrade(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolIdIdUpgrade(ctx, id)
	return err
}

// PostPoolImportDisk converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolImportDisk(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolImportDisk(ctx)
	return err
}

// PostPoolImportDiskAutodetectFsType converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolImportDiskAutodetectFsType(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolImportDiskAutodetectFsType(ctx)
	return err
}

// GetPoolImportDiskMsdosfsLocales converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolImportDiskMsdosfsLocales(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolImportDiskMsdosfsLocales(ctx)
	return err
}

// GetPoolImportFind converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolImportFind(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolImportFind(ctx)
	return err
}

// PostPoolImportPool converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolImportPool(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolImportPool(ctx)
	return err
}

// GetPoolResilver converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolResilver(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolResilver(ctx)
	return err
}

// PutPoolResilver converts echo context to params.
func (w *ServerInterfaceWrapper) PutPoolResilver(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPoolResilver(ctx)
	return err
}

// GetPoolScrub converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolScrub(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolScrubParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolScrub(ctx, params)
	return err
}

// PostPoolScrub converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolScrub(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolScrub(ctx)
	return err
}

// DeletePoolScrubIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePoolScrubIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePoolScrubIdId(ctx, id)
	return err
}

// GetPoolScrubIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolScrubIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolScrubIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolScrubIdId(ctx, id, params)
	return err
}

// PutPoolScrubIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPoolScrubIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPoolScrubIdId(ctx, id)
	return err
}

// PostPoolScrubRun converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolScrubRun(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolScrubRun(ctx)
	return err
}

// GetPoolSnapshottask converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolSnapshottask(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolSnapshottaskParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolSnapshottask(ctx, params)
	return err
}

// PostPoolSnapshottask converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolSnapshottask(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolSnapshottask(ctx)
	return err
}

// DeletePoolSnapshottaskIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePoolSnapshottaskIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePoolSnapshottaskIdId(ctx, id)
	return err
}

// GetPoolSnapshottaskIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolSnapshottaskIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolSnapshottaskIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolSnapshottaskIdId(ctx, id, params)
	return err
}

// PutPoolSnapshottaskIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPoolSnapshottaskIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPoolSnapshottaskIdId(ctx, id)
	return err
}

// PostPoolSnapshottaskIdIdRun converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolSnapshottaskIdIdRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolSnapshottaskIdIdRun(ctx, id)
	return err
}

// PostPoolUnlockServicesRestartChoices converts echo context to params.
func (w *ServerInterfaceWrapper) PostPoolUnlockServicesRestartChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPoolUnlockServicesRestartChoices(ctx)
	return err
}

// GetReplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetReplication(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReplicationParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReplication(ctx, params)
	return err
}

// PostReplication converts echo context to params.
func (w *ServerInterfaceWrapper) PostReplication(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReplication(ctx)
	return err
}

// PostReplicationCountEligibleManualSnapshots converts echo context to params.
func (w *ServerInterfaceWrapper) PostReplicationCountEligibleManualSnapshots(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReplicationCountEligibleManualSnapshots(ctx)
	return err
}

// PostReplicationCreateDataset converts echo context to params.
func (w *ServerInterfaceWrapper) PostReplicationCreateDataset(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReplicationCreateDataset(ctx)
	return err
}

// DeleteReplicationIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReplicationIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteReplicationIdId(ctx, id)
	return err
}

// GetReplicationIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReplicationIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReplicationIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReplicationIdId(ctx, id, params)
	return err
}

// PutReplicationIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutReplicationIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutReplicationIdId(ctx, id)
	return err
}

// PostReplicationIdIdRun converts echo context to params.
func (w *ServerInterfaceWrapper) PostReplicationIdIdRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReplicationIdIdRun(ctx, id)
	return err
}

// PostReplicationListDatasets converts echo context to params.
func (w *ServerInterfaceWrapper) PostReplicationListDatasets(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReplicationListDatasets(ctx)
	return err
}

// GetReplicationListNamingSchemas converts echo context to params.
func (w *ServerInterfaceWrapper) GetReplicationListNamingSchemas(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReplicationListNamingSchemas(ctx)
	return err
}

// PostReplicationTargetUnmatchedSnapshots converts echo context to params.
func (w *ServerInterfaceWrapper) PostReplicationTargetUnmatchedSnapshots(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReplicationTargetUnmatchedSnapshots(ctx)
	return err
}

// GetReporting converts echo context to params.
func (w *ServerInterfaceWrapper) GetReporting(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReporting(ctx)
	return err
}

// PutReporting converts echo context to params.
func (w *ServerInterfaceWrapper) PutReporting(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutReporting(ctx)
	return err
}

// PostReportingGetData converts echo context to params.
func (w *ServerInterfaceWrapper) PostReportingGetData(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReportingGetData(ctx)
	return err
}

// GetReportingGraphs converts echo context to params.
func (w *ServerInterfaceWrapper) GetReportingGraphs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReportingGraphsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReportingGraphs(ctx, params)
	return err
}

// PostRouteIpv4gwReachable converts echo context to params.
func (w *ServerInterfaceWrapper) PostRouteIpv4gwReachable(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRouteIpv4gwReachable(ctx)
	return err
}

// GetRouteSystemRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) GetRouteSystemRoutes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRouteSystemRoutesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRouteSystemRoutes(ctx, params)
	return err
}

// GetRsyncd converts echo context to params.
func (w *ServerInterfaceWrapper) GetRsyncd(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRsyncd(ctx)
	return err
}

// PutRsyncd converts echo context to params.
func (w *ServerInterfaceWrapper) PutRsyncd(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutRsyncd(ctx)
	return err
}

// GetRsyncmod converts echo context to params.
func (w *ServerInterfaceWrapper) GetRsyncmod(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRsyncmodParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRsyncmod(ctx, params)
	return err
}

// PostRsyncmod converts echo context to params.
func (w *ServerInterfaceWrapper) PostRsyncmod(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRsyncmod(ctx)
	return err
}

// DeleteRsyncmodIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRsyncmodIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRsyncmodIdId(ctx, id)
	return err
}

// GetRsyncmodIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRsyncmodIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRsyncmodIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRsyncmodIdId(ctx, id, params)
	return err
}

// PutRsyncmodIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRsyncmodIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutRsyncmodIdId(ctx, id)
	return err
}

// GetRsynctask converts echo context to params.
func (w *ServerInterfaceWrapper) GetRsynctask(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRsynctaskParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRsynctask(ctx, params)
	return err
}

// PostRsynctask converts echo context to params.
func (w *ServerInterfaceWrapper) PostRsynctask(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRsynctask(ctx)
	return err
}

// DeleteRsynctaskIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRsynctaskIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRsynctaskIdId(ctx, id)
	return err
}

// GetRsynctaskIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRsynctaskIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRsynctaskIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRsynctaskIdId(ctx, id, params)
	return err
}

// PutRsynctaskIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRsynctaskIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutRsynctaskIdId(ctx, id)
	return err
}

// PostRsynctaskIdIdRun converts echo context to params.
func (w *ServerInterfaceWrapper) PostRsynctaskIdIdRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRsynctaskIdIdRun(ctx, id)
	return err
}

// GetS3 converts echo context to params.
func (w *ServerInterfaceWrapper) GetS3(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetS3(ctx)
	return err
}

// PutS3 converts echo context to params.
func (w *ServerInterfaceWrapper) PutS3(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutS3(ctx)
	return err
}

// GetService converts echo context to params.
func (w *ServerInterfaceWrapper) GetService(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetService(ctx, params)
	return err
}

// GetServiceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceIdId(ctx, id, params)
	return err
}

// PutServiceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutServiceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutServiceIdId(ctx, id)
	return err
}

// PostServiceReload converts echo context to params.
func (w *ServerInterfaceWrapper) PostServiceReload(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostServiceReload(ctx)
	return err
}

// PostServiceRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostServiceRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostServiceRestart(ctx)
	return err
}

// PostServiceStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostServiceStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostServiceStart(ctx)
	return err
}

// GetServiceStarted converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceStarted(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceStarted(ctx)
	return err
}

// PostServiceStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostServiceStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostServiceStop(ctx)
	return err
}

// PostServiceTerminateProcess converts echo context to params.
func (w *ServerInterfaceWrapper) PostServiceTerminateProcess(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostServiceTerminateProcess(ctx)
	return err
}

// GetSharingAfp converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingAfp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharingAfpParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingAfp(ctx, params)
	return err
}

// PostSharingAfp converts echo context to params.
func (w *ServerInterfaceWrapper) PostSharingAfp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSharingAfp(ctx)
	return err
}

// DeleteSharingAfpIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSharingAfpIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSharingAfpIdId(ctx, id)
	return err
}

// GetSharingAfpIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingAfpIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharingAfpIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingAfpIdId(ctx, id, params)
	return err
}

// PutSharingAfpIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSharingAfpIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSharingAfpIdId(ctx, id)
	return err
}

// GetSharingNfs converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingNfs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharingNfsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingNfs(ctx, params)
	return err
}

// PostSharingNfs converts echo context to params.
func (w *ServerInterfaceWrapper) PostSharingNfs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSharingNfs(ctx)
	return err
}

// DeleteSharingNfsIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSharingNfsIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSharingNfsIdId(ctx, id)
	return err
}

// GetSharingNfsIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingNfsIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharingNfsIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingNfsIdId(ctx, id, params)
	return err
}

// PutSharingNfsIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSharingNfsIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSharingNfsIdId(ctx, id)
	return err
}

// GetSharingSmb converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingSmb(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharingSmbParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingSmb(ctx, params)
	return err
}

// PostSharingSmb converts echo context to params.
func (w *ServerInterfaceWrapper) PostSharingSmb(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSharingSmb(ctx)
	return err
}

// DeleteSharingSmbIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSharingSmbIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSharingSmbIdId(ctx, id)
	return err
}

// GetSharingSmbIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingSmbIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharingSmbIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingSmbIdId(ctx, id, params)
	return err
}

// PutSharingSmbIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSharingSmbIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSharingSmbIdId(ctx, id)
	return err
}

// GetSharingSmbVfsobjectsChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingSmbVfsobjectsChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingSmbVfsobjectsChoices(ctx)
	return err
}

// GetSharingWebdav converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingWebdav(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharingWebdavParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingWebdav(ctx, params)
	return err
}

// PostSharingWebdav converts echo context to params.
func (w *ServerInterfaceWrapper) PostSharingWebdav(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSharingWebdav(ctx)
	return err
}

// DeleteSharingWebdavIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSharingWebdavIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSharingWebdavIdId(ctx, id)
	return err
}

// GetSharingWebdavIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharingWebdavIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharingWebdavIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharingWebdavIdId(ctx, id, params)
	return err
}

// PutSharingWebdavIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSharingWebdavIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSharingWebdavIdId(ctx, id)
	return err
}

// GetSmart converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmart(ctx)
	return err
}

// PutSmart converts echo context to params.
func (w *ServerInterfaceWrapper) PutSmart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSmart(ctx)
	return err
}

// GetSmartTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmartTest(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmartTestParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmartTest(ctx, params)
	return err
}

// PostSmartTest converts echo context to params.
func (w *ServerInterfaceWrapper) PostSmartTest(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSmartTest(ctx)
	return err
}

// DeleteSmartTestIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSmartTestIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSmartTestIdId(ctx, id)
	return err
}

// GetSmartTestIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmartTestIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmartTestIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmartTestIdId(ctx, id, params)
	return err
}

// PutSmartTestIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSmartTestIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSmartTestIdId(ctx, id)
	return err
}

// GetSmartTestResults converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmartTestResults(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmartTestResultsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmartTestResults(ctx, params)
	return err
}

// GetSmb converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmb(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmb(ctx)
	return err
}

// PutSmb converts echo context to params.
func (w *ServerInterfaceWrapper) PutSmb(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSmb(ctx)
	return err
}

// GetSmbBindipChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmbBindipChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmbBindipChoices(ctx)
	return err
}

// GetSmbDomainChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmbDomainChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmbDomainChoices(ctx)
	return err
}

// GetSmbSharesec converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmbSharesec(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmbSharesecParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmbSharesec(ctx, params)
	return err
}

// PostSmbSharesec converts echo context to params.
func (w *ServerInterfaceWrapper) PostSmbSharesec(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSmbSharesec(ctx)
	return err
}

// PostSmbSharesecGetacl converts echo context to params.
func (w *ServerInterfaceWrapper) PostSmbSharesecGetacl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSmbSharesecGetacl(ctx)
	return err
}

// DeleteSmbSharesecIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSmbSharesecIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSmbSharesecIdId(ctx, id)
	return err
}

// GetSmbSharesecIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmbSharesecIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmbSharesecIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmbSharesecIdId(ctx, id, params)
	return err
}

// PutSmbSharesecIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSmbSharesecIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSmbSharesecIdId(ctx, id)
	return err
}

// GetSmbSharesecSynchronizeAcls converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmbSharesecSynchronizeAcls(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmbSharesecSynchronizeAcls(ctx)
	return err
}

// GetSmbUnixcharsetChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSmbUnixcharsetChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSmbUnixcharsetChoices(ctx)
	return err
}

// GetSnmp converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnmp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSnmp(ctx)
	return err
}

// PutSnmp converts echo context to params.
func (w *ServerInterfaceWrapper) PutSnmp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSnmp(ctx)
	return err
}

// GetSsh converts echo context to params.
func (w *ServerInterfaceWrapper) GetSsh(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSsh(ctx)
	return err
}

// PutSsh converts echo context to params.
func (w *ServerInterfaceWrapper) PutSsh(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSsh(ctx)
	return err
}

// GetSshBindifaceChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSshBindifaceChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSshBindifaceChoices(ctx)
	return err
}

// GetStaticroute converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaticroute(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStaticrouteParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStaticroute(ctx, params)
	return err
}

// PostStaticroute converts echo context to params.
func (w *ServerInterfaceWrapper) PostStaticroute(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostStaticroute(ctx)
	return err
}

// DeleteStaticrouteIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStaticrouteIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteStaticrouteIdId(ctx, id)
	return err
}

// GetStaticrouteIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaticrouteIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStaticrouteIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStaticrouteIdId(ctx, id, params)
	return err
}

// PutStaticrouteIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutStaticrouteIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutStaticrouteIdId(ctx, id)
	return err
}

// PostStatsGetData converts echo context to params.
func (w *ServerInterfaceWrapper) PostStatsGetData(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostStatsGetData(ctx)
	return err
}

// PostStatsGetDatasetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) PostStatsGetDatasetInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostStatsGetDatasetInfo(ctx)
	return err
}

// GetStatsGetSources converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatsGetSources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatsGetSources(ctx)
	return err
}

// GetSupport converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupport(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupport(ctx)
	return err
}

// PutSupport converts echo context to params.
func (w *ServerInterfaceWrapper) PutSupport(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSupport(ctx)
	return err
}

// PostSupportFetchCategories converts echo context to params.
func (w *ServerInterfaceWrapper) PostSupportFetchCategories(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSupportFetchCategories(ctx)
	return err
}

// GetSupportFields converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupportFields(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupportFields(ctx)
	return err
}

// GetSupportIsAvailable converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupportIsAvailable(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupportIsAvailable(ctx)
	return err
}

// GetSupportIsAvailableAndEnabled converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupportIsAvailableAndEnabled(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupportIsAvailableAndEnabled(ctx)
	return err
}

// PostSupportNewTicket converts echo context to params.
func (w *ServerInterfaceWrapper) PostSupportNewTicket(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSupportNewTicket(ctx)
	return err
}

// GetSystemAdvanced converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemAdvanced(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemAdvanced(ctx)
	return err
}

// PutSystemAdvanced converts echo context to params.
func (w *ServerInterfaceWrapper) PutSystemAdvanced(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSystemAdvanced(ctx)
	return err
}

// GetSystemAdvancedSerialPortChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemAdvancedSerialPortChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemAdvancedSerialPortChoices(ctx)
	return err
}

// GetSystemBootId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemBootId(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemBootId(ctx)
	return err
}

// PostSystemFeatureEnabled converts echo context to params.
func (w *ServerInterfaceWrapper) PostSystemFeatureEnabled(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSystemFeatureEnabled(ctx)
	return err
}

// GetSystemGeneral converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneral(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneral(ctx)
	return err
}

// PutSystemGeneral converts echo context to params.
func (w *ServerInterfaceWrapper) PutSystemGeneral(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSystemGeneral(ctx)
	return err
}

// GetSystemGeneralCountryChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralCountryChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralCountryChoices(ctx)
	return err
}

// GetSystemGeneralKbdmapChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralKbdmapChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralKbdmapChoices(ctx)
	return err
}

// GetSystemGeneralLanguageChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralLanguageChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralLanguageChoices(ctx)
	return err
}

// GetSystemGeneralLocalUrl converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralLocalUrl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralLocalUrl(ctx)
	return err
}

// GetSystemGeneralTimezoneChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralTimezoneChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralTimezoneChoices(ctx)
	return err
}

// GetSystemGeneralUiAddressChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralUiAddressChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralUiAddressChoices(ctx)
	return err
}

// GetSystemGeneralUiCertificateChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralUiCertificateChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralUiCertificateChoices(ctx)
	return err
}

// GetSystemGeneralUiRestart converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralUiRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralUiRestart(ctx)
	return err
}

// GetSystemGeneralUiV6addressChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemGeneralUiV6addressChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemGeneralUiV6addressChoices(ctx)
	return err
}

// GetSystemInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemInfo(ctx)
	return err
}

// GetSystemIsFreenas converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemIsFreenas(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemIsFreenas(ctx)
	return err
}

// GetSystemLegacyUiEnabled converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemLegacyUiEnabled(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemLegacyUiEnabled(ctx)
	return err
}

// PostSystemLicenseUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostSystemLicenseUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSystemLicenseUpdate(ctx)
	return err
}

// GetSystemNtpserver converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemNtpserver(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSystemNtpserverParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemNtpserver(ctx, params)
	return err
}

// PostSystemNtpserver converts echo context to params.
func (w *ServerInterfaceWrapper) PostSystemNtpserver(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSystemNtpserver(ctx)
	return err
}

// DeleteSystemNtpserverIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSystemNtpserverIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSystemNtpserverIdId(ctx, id)
	return err
}

// GetSystemNtpserverIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemNtpserverIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSystemNtpserverIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemNtpserverIdId(ctx, id, params)
	return err
}

// PutSystemNtpserverIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSystemNtpserverIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSystemNtpserverIdId(ctx, id)
	return err
}

// GetSystemNtpserverTestNtpServer converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemNtpserverTestNtpServer(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemNtpserverTestNtpServer(ctx)
	return err
}

// GetSystemProductName converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemProductName(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemProductName(ctx)
	return err
}

// GetSystemReady converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemReady(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemReady(ctx)
	return err
}

// PostSystemReboot converts echo context to params.
func (w *ServerInterfaceWrapper) PostSystemReboot(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSystemReboot(ctx)
	return err
}

// PostSystemShutdown converts echo context to params.
func (w *ServerInterfaceWrapper) PostSystemShutdown(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSystemShutdown(ctx)
	return err
}

// GetSystemState converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemState(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemState(ctx)
	return err
}

// GetSystemVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemVersion(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemVersion(ctx)
	return err
}

// GetSystemdataset converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemdataset(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemdataset(ctx)
	return err
}

// PutSystemdataset converts echo context to params.
func (w *ServerInterfaceWrapper) PutSystemdataset(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSystemdataset(ctx)
	return err
}

// GetTftp converts echo context to params.
func (w *ServerInterfaceWrapper) GetTftp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTftp(ctx)
	return err
}

// PutTftp converts echo context to params.
func (w *ServerInterfaceWrapper) PutTftp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTftp(ctx)
	return err
}

// GetTunable converts echo context to params.
func (w *ServerInterfaceWrapper) GetTunable(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTunableParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTunable(ctx, params)
	return err
}

// PostTunable converts echo context to params.
func (w *ServerInterfaceWrapper) PostTunable(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTunable(ctx)
	return err
}

// DeleteTunableIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTunableIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTunableIdId(ctx, id)
	return err
}

// GetTunableIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTunableIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTunableIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTunableIdId(ctx, id, params)
	return err
}

// PutTunableIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTunableIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTunableIdId(ctx, id)
	return err
}

// PostUpdateCheckAvailable converts echo context to params.
func (w *ServerInterfaceWrapper) PostUpdateCheckAvailable(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUpdateCheckAvailable(ctx)
	return err
}

// GetUpdateDownload converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpdateDownload(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUpdateDownload(ctx)
	return err
}

// PostUpdateGetPending converts echo context to params.
func (w *ServerInterfaceWrapper) PostUpdateGetPending(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUpdateGetPending(ctx)
	return err
}

// GetUpdateGetTrains converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpdateGetTrains(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUpdateGetTrains(ctx)
	return err
}

// PostUpdateManual converts echo context to params.
func (w *ServerInterfaceWrapper) PostUpdateManual(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUpdateManual(ctx)
	return err
}

// PostUpdateSetTrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostUpdateSetTrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUpdateSetTrain(ctx)
	return err
}

// PostUpdateUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostUpdateUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUpdateUpdate(ctx)
	return err
}

// GetUps converts echo context to params.
func (w *ServerInterfaceWrapper) GetUps(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUps(ctx)
	return err
}

// PutUps converts echo context to params.
func (w *ServerInterfaceWrapper) PutUps(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUps(ctx)
	return err
}

// GetUpsDriverChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpsDriverChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUpsDriverChoices(ctx)
	return err
}

// GetUpsPortChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpsPortChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUpsPortChoices(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, params)
	return err
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// GetUserGetNextUid converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGetNextUid(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserGetNextUid(ctx)
	return err
}

// PostUserGetUserObj converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserGetUserObj(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserGetUserObj(ctx)
	return err
}

// GetUserHasRootPassword converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserHasRootPassword(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserHasRootPassword(ctx)
	return err
}

// DeleteUserIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserIdId(ctx, id)
	return err
}

// GetUserIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserIdId(ctx, id, params)
	return err
}

// PutUserIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUserIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUserIdId(ctx, id)
	return err
}

// PostUserIdIdPopAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserIdIdPopAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserIdIdPopAttribute(ctx, id)
	return err
}

// PostUserIdIdSetAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserIdIdSetAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserIdIdSetAttribute(ctx, id)
	return err
}

// GetUserShellChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserShellChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserShellChoices(ctx)
	return err
}

// GetVm converts echo context to params.
func (w *ServerInterfaceWrapper) GetVm(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVmParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVm(ctx, params)
	return err
}

// PostVm converts echo context to params.
func (w *ServerInterfaceWrapper) PostVm(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVm(ctx)
	return err
}

// GetVmDevice converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmDevice(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVmDeviceParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmDevice(ctx, params)
	return err
}

// PostVmDevice converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmDevice(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmDevice(ctx)
	return err
}

// DeleteVmDeviceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmDeviceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVmDeviceIdId(ctx, id)
	return err
}

// GetVmDeviceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmDeviceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVmDeviceIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmDeviceIdId(ctx, id, params)
	return err
}

// PutVmDeviceIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutVmDeviceIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutVmDeviceIdId(ctx, id)
	return err
}

// GetVmDeviceNicAttachChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmDeviceNicAttachChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmDeviceNicAttachChoices(ctx)
	return err
}

// GetVmDeviceVncBindChoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmDeviceVncBindChoices(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmDeviceVncBindChoices(ctx)
	return err
}

// GetVmFlags converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmFlags(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmFlags(ctx)
	return err
}

// PostVmGetAttachedIface converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmGetAttachedIface(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmGetAttachedIface(ctx)
	return err
}

// PostVmGetAvailableMemory converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmGetAvailableMemory(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmGetAvailableMemory(ctx)
	return err
}

// PostVmGetConsole converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmGetConsole(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmGetConsole(ctx)
	return err
}

// GetVmGetVmemoryInUse converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmGetVmemoryInUse(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmGetVmemoryInUse(ctx)
	return err
}

// PostVmGetVnc converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmGetVnc(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmGetVnc(ctx)
	return err
}

// GetVmGetVncIpv4 converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmGetVncIpv4(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmGetVncIpv4(ctx)
	return err
}

// DeleteVmIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVmIdId(ctx, id)
	return err
}

// GetVmIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVmIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmIdId(ctx, id, params)
	return err
}

// PutVmIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutVmIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutVmIdId(ctx, id)
	return err
}

// PostVmIdIdClone converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmIdIdClone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmIdIdClone(ctx, id)
	return err
}

// PostVmIdIdRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmIdIdRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmIdIdRestart(ctx, id)
	return err
}

// PostVmIdIdStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmIdIdStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmIdIdStart(ctx, id)
	return err
}

// PostVmIdIdStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmIdIdStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmIdIdStatus(ctx, id)
	return err
}

// PostVmIdIdStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmIdIdStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmIdIdStop(ctx, id)
	return err
}

// GetVmIdentifyHypervisor converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmIdentifyHypervisor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmIdentifyHypervisor(ctx)
	return err
}

// GetVmRandomMac converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmRandomMac(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmRandomMac(ctx)
	return err
}

// GetVmVncPortWizard converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmVncPortWizard(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmVncPortWizard(ctx)
	return err
}

// GetVmware converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmware(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVmwareParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmware(ctx, params)
	return err
}

// PostVmware converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmware(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmware(ctx)
	return err
}

// PostVmwareDatasetHasVms converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmwareDatasetHasVms(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmwareDatasetHasVms(ctx)
	return err
}

// PostVmwareGetDatastores converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmwareGetDatastores(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmwareGetDatastores(ctx)
	return err
}

// PostVmwareGetVirtualMachines converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmwareGetVirtualMachines(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmwareGetVirtualMachines(ctx)
	return err
}

// DeleteVmwareIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVmwareIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVmwareIdId(ctx, id)
	return err
}

// GetVmwareIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetVmwareIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVmwareIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVmwareIdId(ctx, id, params)
	return err
}

// PutVmwareIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutVmwareIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutVmwareIdId(ctx, id)
	return err
}

// PostVmwareMatchDatastoresWithDatasets converts echo context to params.
func (w *ServerInterfaceWrapper) PostVmwareMatchDatastoresWithDatasets(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVmwareMatchDatastoresWithDatasets(ctx)
	return err
}

// GetWebdav converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebdav(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWebdav(ctx)
	return err
}

// PutWebdav converts echo context to params.
func (w *ServerInterfaceWrapper) PutWebdav(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutWebdav(ctx)
	return err
}

// GetWebuiImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebuiImage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWebuiImageParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWebuiImage(ctx, params)
	return err
}

// DeleteWebuiImageIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWebuiImageIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWebuiImageIdId(ctx, id)
	return err
}

// GetWebuiImageIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebuiImageIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWebuiImageIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWebuiImageIdId(ctx, id, params)
	return err
}

// GetZfsSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) GetZfsSnapshot(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetZfsSnapshotParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZfsSnapshot(ctx, params)
	return err
}

// PostZfsSnapshot converts echo context to params.
func (w *ServerInterfaceWrapper) PostZfsSnapshot(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostZfsSnapshot(ctx)
	return err
}

// PostZfsSnapshotClone converts echo context to params.
func (w *ServerInterfaceWrapper) PostZfsSnapshotClone(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostZfsSnapshotClone(ctx)
	return err
}

// DeleteZfsSnapshotIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteZfsSnapshotIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteZfsSnapshotIdId(ctx, id)
	return err
}

// GetZfsSnapshotIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetZfsSnapshotIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []interface{}

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetZfsSnapshotIdIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZfsSnapshotIdId(ctx, id, params)
	return err
}

// PostZfsSnapshotRemove converts echo context to params.
func (w *ServerInterfaceWrapper) PostZfsSnapshotRemove(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostZfsSnapshotRemove(ctx)
	return err
}

// PostZfsSnapshotRollback converts echo context to params.
func (w *ServerInterfaceWrapper) PostZfsSnapshotRollback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostZfsSnapshotRollback(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/acme/dns/authenticator", wrapper.GetAcmeDnsAuthenticator)
	router.POST(baseURL+"/acme/dns/authenticator", wrapper.PostAcmeDnsAuthenticator)
	router.GET(baseURL+"/acme/dns/authenticator/authenticator_schemas", wrapper.GetAcmeDnsAuthenticatorAuthenticatorSchemas)
	router.DELETE(baseURL+"/acme/dns/authenticator/id/:id", wrapper.DeleteAcmeDnsAuthenticatorIdId)
	router.GET(baseURL+"/acme/dns/authenticator/id/:id", wrapper.GetAcmeDnsAuthenticatorIdId)
	router.PUT(baseURL+"/acme/dns/authenticator/id/:id", wrapper.PutAcmeDnsAuthenticatorIdId)
	router.GET(baseURL+"/activedirectory", wrapper.GetActivedirectory)
	router.PUT(baseURL+"/activedirectory", wrapper.PutActivedirectory)
	router.GET(baseURL+"/activedirectory/change_trust_account_pw", wrapper.GetActivedirectoryChangeTrustAccountPw)
	router.GET(baseURL+"/activedirectory/domain_info", wrapper.GetActivedirectoryDomainInfo)
	router.GET(baseURL+"/activedirectory/get_spn_list", wrapper.GetActivedirectoryGetSpnList)
	router.GET(baseURL+"/activedirectory/get_state", wrapper.GetActivedirectoryGetState)
	router.GET(baseURL+"/activedirectory/idmap_backend_choices", wrapper.GetActivedirectoryIdmapBackendChoices)
	router.POST(baseURL+"/activedirectory/leave", wrapper.PostActivedirectoryLeave)
	router.GET(baseURL+"/activedirectory/nss_info_choices", wrapper.GetActivedirectoryNssInfoChoices)
	router.GET(baseURL+"/activedirectory/sasl_wrapping_choices", wrapper.GetActivedirectorySaslWrappingChoices)
	router.GET(baseURL+"/activedirectory/ssl_choices", wrapper.GetActivedirectorySslChoices)
	router.GET(baseURL+"/activedirectory/started", wrapper.GetActivedirectoryStarted)
	router.GET(baseURL+"/afp", wrapper.GetAfp)
	router.PUT(baseURL+"/afp", wrapper.PutAfp)
	router.GET(baseURL+"/afp/bindip_choices", wrapper.GetAfpBindipChoices)
	router.POST(baseURL+"/alert/dismiss", wrapper.PostAlertDismiss)
	router.GET(baseURL+"/alert/list", wrapper.GetAlertList)
	router.GET(baseURL+"/alert/list_categories", wrapper.GetAlertListCategories)
	router.GET(baseURL+"/alert/list_policies", wrapper.GetAlertListPolicies)
	router.POST(baseURL+"/alert/restore", wrapper.PostAlertRestore)
	router.GET(baseURL+"/alertclasses", wrapper.GetAlertclasses)
	router.PUT(baseURL+"/alertclasses", wrapper.PutAlertclasses)
	router.GET(baseURL+"/alertservice", wrapper.GetAlertservice)
	router.POST(baseURL+"/alertservice", wrapper.PostAlertservice)
	router.DELETE(baseURL+"/alertservice/id/:id", wrapper.DeleteAlertserviceIdId)
	router.GET(baseURL+"/alertservice/id/:id", wrapper.GetAlertserviceIdId)
	router.PUT(baseURL+"/alertservice/id/:id", wrapper.PutAlertserviceIdId)
	router.GET(baseURL+"/alertservice/list_types", wrapper.GetAlertserviceListTypes)
	router.POST(baseURL+"/alertservice/test", wrapper.PostAlertserviceTest)
	router.POST(baseURL+"/auth/check_user", wrapper.PostAuthCheckUser)
	router.POST(baseURL+"/auth/generate_token", wrapper.PostAuthGenerateToken)
	router.GET(baseURL+"/auth/sessions", wrapper.GetAuthSessions)
	router.GET(baseURL+"/backup", wrapper.GetBackup)
	router.POST(baseURL+"/backup", wrapper.PostBackup)
	router.POST(baseURL+"/backup/azure/get_buckets", wrapper.PostBackupAzureGetBuckets)
	router.POST(baseURL+"/backup/b2/get_buckets", wrapper.PostBackupB2GetBuckets)
	router.GET(baseURL+"/backup/credential", wrapper.GetBackupCredential)
	router.POST(baseURL+"/backup/credential", wrapper.PostBackupCredential)
	router.DELETE(baseURL+"/backup/credential/id/:id", wrapper.DeleteBackupCredentialIdId)
	router.GET(baseURL+"/backup/credential/id/:id", wrapper.GetBackupCredentialIdId)
	router.PUT(baseURL+"/backup/credential/id/:id", wrapper.PutBackupCredentialIdId)
	router.POST(baseURL+"/backup/gcs/get_buckets", wrapper.PostBackupGcsGetBuckets)
	router.DELETE(baseURL+"/backup/id/:id", wrapper.DeleteBackupIdId)
	router.GET(baseURL+"/backup/id/:id", wrapper.GetBackupIdId)
	router.PUT(baseURL+"/backup/id/:id", wrapper.PutBackupIdId)
	router.POST(baseURL+"/backup/s3/get_buckets", wrapper.PostBackupS3GetBuckets)
	router.POST(baseURL+"/boot/attach", wrapper.PostBootAttach)
	router.POST(baseURL+"/boot/detach", wrapper.PostBootDetach)
	router.GET(baseURL+"/boot/get_disks", wrapper.GetBootGetDisks)
	router.GET(baseURL+"/boot/get_scrub_interval", wrapper.GetBootGetScrubInterval)
	router.GET(baseURL+"/boot/get_state", wrapper.GetBootGetState)
	router.POST(baseURL+"/boot/replace", wrapper.PostBootReplace)
	router.GET(baseURL+"/boot/scrub", wrapper.GetBootScrub)
	router.POST(baseURL+"/boot/set_scrub_interval", wrapper.PostBootSetScrubInterval)
	router.GET(baseURL+"/bootenv", wrapper.GetBootenv)
	router.POST(baseURL+"/bootenv", wrapper.PostBootenv)
	router.DELETE(baseURL+"/bootenv/id/:id", wrapper.DeleteBootenvIdId)
	router.GET(baseURL+"/bootenv/id/:id", wrapper.GetBootenvIdId)
	router.PUT(baseURL+"/bootenv/id/:id", wrapper.PutBootenvIdId)
	router.POST(baseURL+"/bootenv/id/:id/activate", wrapper.PostBootenvIdIdActivate)
	router.POST(baseURL+"/bootenv/id/:id/set_attribute", wrapper.PostBootenvIdIdSetAttribute)
	router.GET(baseURL+"/certificate", wrapper.GetCertificate)
	router.POST(baseURL+"/certificate", wrapper.PostCertificate)
	router.GET(baseURL+"/certificate/acme_server_choices", wrapper.GetCertificateAcmeServerChoices)
	router.GET(baseURL+"/certificate/ec_curve_choices", wrapper.GetCertificateEcCurveChoices)
	router.DELETE(baseURL+"/certificate/id/:id", wrapper.DeleteCertificateIdId)
	router.GET(baseURL+"/certificate/id/:id", wrapper.GetCertificateIdId)
	router.PUT(baseURL+"/certificate/id/:id", wrapper.PutCertificateIdId)
	router.GET(baseURL+"/certificate/key_type_choices", wrapper.GetCertificateKeyTypeChoices)
	router.GET(baseURL+"/certificateauthority", wrapper.GetCertificateauthority)
	router.POST(baseURL+"/certificateauthority", wrapper.PostCertificateauthority)
	router.POST(baseURL+"/certificateauthority/ca_sign_csr", wrapper.PostCertificateauthorityCaSignCsr)
	router.DELETE(baseURL+"/certificateauthority/id/:id", wrapper.DeleteCertificateauthorityIdId)
	router.GET(baseURL+"/certificateauthority/id/:id", wrapper.GetCertificateauthorityIdId)
	router.PUT(baseURL+"/certificateauthority/id/:id", wrapper.PutCertificateauthorityIdId)
	router.GET(baseURL+"/cloudsync", wrapper.GetCloudsync)
	router.POST(baseURL+"/cloudsync", wrapper.PostCloudsync)
	router.GET(baseURL+"/cloudsync/common_task_schema", wrapper.GetCloudsyncCommonTaskSchema)
	router.GET(baseURL+"/cloudsync/credentials", wrapper.GetCloudsyncCredentials)
	router.POST(baseURL+"/cloudsync/credentials", wrapper.PostCloudsyncCredentials)
	router.DELETE(baseURL+"/cloudsync/credentials/id/:id", wrapper.DeleteCloudsyncCredentialsIdId)
	router.GET(baseURL+"/cloudsync/credentials/id/:id", wrapper.GetCloudsyncCredentialsIdId)
	router.PUT(baseURL+"/cloudsync/credentials/id/:id", wrapper.PutCloudsyncCredentialsIdId)
	router.POST(baseURL+"/cloudsync/credentials/verify", wrapper.PostCloudsyncCredentialsVerify)
	router.DELETE(baseURL+"/cloudsync/id/:id", wrapper.DeleteCloudsyncIdId)
	router.GET(baseURL+"/cloudsync/id/:id", wrapper.GetCloudsyncIdId)
	router.PUT(baseURL+"/cloudsync/id/:id", wrapper.PutCloudsyncIdId)
	router.POST(baseURL+"/cloudsync/id/:id/abort", wrapper.PostCloudsyncIdIdAbort)
	router.POST(baseURL+"/cloudsync/id/:id/sync", wrapper.PostCloudsyncIdIdSync)
	router.POST(baseURL+"/cloudsync/list_buckets", wrapper.PostCloudsyncListBuckets)
	router.POST(baseURL+"/cloudsync/list_directory", wrapper.PostCloudsyncListDirectory)
	router.POST(baseURL+"/cloudsync/onedrive_list_drives", wrapper.PostCloudsyncOnedriveListDrives)
	router.GET(baseURL+"/cloudsync/providers", wrapper.GetCloudsyncProviders)
	router.POST(baseURL+"/config/reset", wrapper.PostConfigReset)
	router.POST(baseURL+"/core/bulk", wrapper.PostCoreBulk)
	router.POST(baseURL+"/core/debug", wrapper.PostCoreDebug)
	router.POST(baseURL+"/core/download", wrapper.PostCoreDownload)
	router.GET(baseURL+"/core/get_events", wrapper.GetCoreGetEvents)
	router.GET(baseURL+"/core/get_jobs", wrapper.GetCoreGetJobs)
	router.POST(baseURL+"/core/get_methods", wrapper.PostCoreGetMethods)
	router.GET(baseURL+"/core/get_services", wrapper.GetCoreGetServices)
	router.POST(baseURL+"/core/job_abort", wrapper.PostCoreJobAbort)
	router.POST(baseURL+"/core/job_update", wrapper.PostCoreJobUpdate)
	router.POST(baseURL+"/core/job_wait", wrapper.PostCoreJobWait)
	router.GET(baseURL+"/core/ping", wrapper.GetCorePing)
	router.GET(baseURL+"/core/sessions", wrapper.GetCoreSessions)
	router.GET(baseURL+"/cronjob", wrapper.GetCronjob)
	router.POST(baseURL+"/cronjob", wrapper.PostCronjob)
	router.DELETE(baseURL+"/cronjob/id/:id", wrapper.DeleteCronjobIdId)
	router.GET(baseURL+"/cronjob/id/:id", wrapper.GetCronjobIdId)
	router.PUT(baseURL+"/cronjob/id/:id", wrapper.PutCronjobIdId)
	router.POST(baseURL+"/cronjob/run", wrapper.PostCronjobRun)
	router.POST(baseURL+"/device/get_info", wrapper.PostDeviceGetInfo)
	router.GET(baseURL+"/directoryservices/get_state", wrapper.GetDirectoryservicesGetState)
	router.GET(baseURL+"/disk", wrapper.GetDisk)
	router.POST(baseURL+"/disk/get_encrypted", wrapper.PostDiskGetEncrypted)
	router.POST(baseURL+"/disk/get_unused", wrapper.PostDiskGetUnused)
	router.GET(baseURL+"/disk/id/:id", wrapper.GetDiskIdId)
	router.PUT(baseURL+"/disk/id/:id", wrapper.PutDiskIdId)
	router.POST(baseURL+"/disk/temperatures", wrapper.PostDiskTemperatures)
	router.POST(baseURL+"/disk/wipe", wrapper.PostDiskWipe)
	router.GET(baseURL+"/dns/query", wrapper.GetDnsQuery)
	router.GET(baseURL+"/dyndns", wrapper.GetDyndns)
	router.PUT(baseURL+"/dyndns", wrapper.PutDyndns)
	router.GET(baseURL+"/dyndns/provider_choices", wrapper.GetDyndnsProviderChoices)
	router.POST(baseURL+"/filesystem/acl_is_trivial", wrapper.PostFilesystemAclIsTrivial)
	router.POST(baseURL+"/filesystem/chown", wrapper.PostFilesystemChown)
	router.GET(baseURL+"/filesystem/default_acl_choices", wrapper.GetFilesystemDefaultAclChoices)
	router.POST(baseURL+"/filesystem/get_default_acl", wrapper.PostFilesystemGetDefaultAcl)
	router.POST(baseURL+"/filesystem/getacl", wrapper.PostFilesystemGetacl)
	router.POST(baseURL+"/filesystem/listdir", wrapper.PostFilesystemListdir)
	router.POST(baseURL+"/filesystem/setacl", wrapper.PostFilesystemSetacl)
	router.POST(baseURL+"/filesystem/setperm", wrapper.PostFilesystemSetperm)
	router.POST(baseURL+"/filesystem/stat", wrapper.PostFilesystemStat)
	router.POST(baseURL+"/filesystem/statfs", wrapper.PostFilesystemStatfs)
	router.GET(baseURL+"/ftp", wrapper.GetFtp)
	router.PUT(baseURL+"/ftp", wrapper.PutFtp)
	router.GET(baseURL+"/group", wrapper.GetGroup)
	router.POST(baseURL+"/group", wrapper.PostGroup)
	router.POST(baseURL+"/group/get_group_obj", wrapper.PostGroupGetGroupObj)
	router.GET(baseURL+"/group/get_next_gid", wrapper.GetGroupGetNextGid)
	router.DELETE(baseURL+"/group/id/:id", wrapper.DeleteGroupIdId)
	router.GET(baseURL+"/group/id/:id", wrapper.GetGroupIdId)
	router.PUT(baseURL+"/group/id/:id", wrapper.PutGroupIdId)
	router.GET(baseURL+"/idmap/ad", wrapper.GetIdmapAd)
	router.POST(baseURL+"/idmap/ad", wrapper.PostIdmapAd)
	router.DELETE(baseURL+"/idmap/ad/id/:id", wrapper.DeleteIdmapAdIdId)
	router.GET(baseURL+"/idmap/ad/id/:id", wrapper.GetIdmapAdIdId)
	router.PUT(baseURL+"/idmap/ad/id/:id", wrapper.PutIdmapAdIdId)
	router.GET(baseURL+"/idmap/autorid", wrapper.GetIdmapAutorid)
	router.POST(baseURL+"/idmap/autorid", wrapper.PostIdmapAutorid)
	router.DELETE(baseURL+"/idmap/autorid/id/:id", wrapper.DeleteIdmapAutoridIdId)
	router.GET(baseURL+"/idmap/autorid/id/:id", wrapper.GetIdmapAutoridIdId)
	router.PUT(baseURL+"/idmap/autorid/id/:id", wrapper.PutIdmapAutoridIdId)
	router.GET(baseURL+"/idmap/clear_idmap_cache", wrapper.GetIdmapClearIdmapCache)
	router.GET(baseURL+"/idmap/domain", wrapper.GetIdmapDomain)
	router.POST(baseURL+"/idmap/domain", wrapper.PostIdmapDomain)
	router.DELETE(baseURL+"/idmap/domain/id/:id", wrapper.DeleteIdmapDomainIdId)
	router.GET(baseURL+"/idmap/domain/id/:id", wrapper.GetIdmapDomainIdId)
	router.PUT(baseURL+"/idmap/domain/id/:id", wrapper.PutIdmapDomainIdId)
	router.GET(baseURL+"/idmap/domaintobackend", wrapper.GetIdmapDomaintobackend)
	router.POST(baseURL+"/idmap/domaintobackend", wrapper.PostIdmapDomaintobackend)
	router.DELETE(baseURL+"/idmap/domaintobackend/id/:id", wrapper.DeleteIdmapDomaintobackendIdId)
	router.GET(baseURL+"/idmap/domaintobackend/id/:id", wrapper.GetIdmapDomaintobackendIdId)
	router.PUT(baseURL+"/idmap/domaintobackend/id/:id", wrapper.PutIdmapDomaintobackendIdId)
	router.GET(baseURL+"/idmap/get_configured_idmap_domains", wrapper.GetIdmapGetConfiguredIdmapDomains)
	router.POST(baseURL+"/idmap/get_or_create_idmap_by_domain", wrapper.PostIdmapGetOrCreateIdmapByDomain)
	router.GET(baseURL+"/idmap/ldap", wrapper.GetIdmapLdap)
	router.POST(baseURL+"/idmap/ldap", wrapper.PostIdmapLdap)
	router.DELETE(baseURL+"/idmap/ldap/id/:id", wrapper.DeleteIdmapLdapIdId)
	router.GET(baseURL+"/idmap/ldap/id/:id", wrapper.GetIdmapLdapIdId)
	router.PUT(baseURL+"/idmap/ldap/id/:id", wrapper.PutIdmapLdapIdId)
	router.GET(baseURL+"/idmap/nss", wrapper.GetIdmapNss)
	router.POST(baseURL+"/idmap/nss", wrapper.PostIdmapNss)
	router.DELETE(baseURL+"/idmap/nss/id/:id", wrapper.DeleteIdmapNssIdId)
	router.GET(baseURL+"/idmap/nss/id/:id", wrapper.GetIdmapNssIdId)
	router.PUT(baseURL+"/idmap/nss/id/:id", wrapper.PutIdmapNssIdId)
	router.GET(baseURL+"/idmap/rfc2307", wrapper.GetIdmapRfc2307)
	router.POST(baseURL+"/idmap/rfc2307", wrapper.PostIdmapRfc2307)
	router.DELETE(baseURL+"/idmap/rfc2307/id/:id", wrapper.DeleteIdmapRfc2307IdId)
	router.GET(baseURL+"/idmap/rfc2307/id/:id", wrapper.GetIdmapRfc2307IdId)
	router.PUT(baseURL+"/idmap/rfc2307/id/:id", wrapper.PutIdmapRfc2307IdId)
	router.GET(baseURL+"/idmap/rid", wrapper.GetIdmapRid)
	router.POST(baseURL+"/idmap/rid", wrapper.PostIdmapRid)
	router.DELETE(baseURL+"/idmap/rid/id/:id", wrapper.DeleteIdmapRidIdId)
	router.GET(baseURL+"/idmap/rid/id/:id", wrapper.GetIdmapRidIdId)
	router.PUT(baseURL+"/idmap/rid/id/:id", wrapper.PutIdmapRidIdId)
	router.GET(baseURL+"/idmap/script", wrapper.GetIdmapScript)
	router.POST(baseURL+"/idmap/script", wrapper.PostIdmapScript)
	router.DELETE(baseURL+"/idmap/script/id/:id", wrapper.DeleteIdmapScriptIdId)
	router.GET(baseURL+"/idmap/script/id/:id", wrapper.GetIdmapScriptIdId)
	router.PUT(baseURL+"/idmap/script/id/:id", wrapper.PutIdmapScriptIdId)
	router.GET(baseURL+"/idmap/tdb", wrapper.GetIdmapTdb)
	router.POST(baseURL+"/idmap/tdb", wrapper.PostIdmapTdb)
	router.DELETE(baseURL+"/idmap/tdb/id/:id", wrapper.DeleteIdmapTdbIdId)
	router.GET(baseURL+"/idmap/tdb/id/:id", wrapper.GetIdmapTdbIdId)
	router.PUT(baseURL+"/idmap/tdb/id/:id", wrapper.PutIdmapTdbIdId)
	router.GET(baseURL+"/initshutdownscript", wrapper.GetInitshutdownscript)
	router.POST(baseURL+"/initshutdownscript", wrapper.PostInitshutdownscript)
	router.DELETE(baseURL+"/initshutdownscript/id/:id", wrapper.DeleteInitshutdownscriptIdId)
	router.GET(baseURL+"/initshutdownscript/id/:id", wrapper.GetInitshutdownscriptIdId)
	router.PUT(baseURL+"/initshutdownscript/id/:id", wrapper.PutInitshutdownscriptIdId)
	router.GET(baseURL+"/interface", wrapper.GetInterface)
	router.POST(baseURL+"/interface", wrapper.PostInterface)
	router.POST(baseURL+"/interface/bridge_members_choices", wrapper.PostInterfaceBridgeMembersChoices)
	router.GET(baseURL+"/interface/checkin", wrapper.GetInterfaceCheckin)
	router.GET(baseURL+"/interface/checkin_waiting", wrapper.GetInterfaceCheckinWaiting)
	router.POST(baseURL+"/interface/choices", wrapper.PostInterfaceChoices)
	router.POST(baseURL+"/interface/commit", wrapper.PostInterfaceCommit)
	router.GET(baseURL+"/interface/has_pending_changes", wrapper.GetInterfaceHasPendingChanges)
	router.DELETE(baseURL+"/interface/id/:id", wrapper.DeleteInterfaceIdId)
	router.GET(baseURL+"/interface/id/:id", wrapper.GetInterfaceIdId)
	router.PUT(baseURL+"/interface/id/:id", wrapper.PutInterfaceIdId)
	router.POST(baseURL+"/interface/ip_in_use", wrapper.PostInterfaceIpInUse)
	router.POST(baseURL+"/interface/lag_ports_choices", wrapper.PostInterfaceLagPortsChoices)
	router.GET(baseURL+"/interface/rollback", wrapper.GetInterfaceRollback)
	router.GET(baseURL+"/interface/vlan_parent_interface_choices", wrapper.GetInterfaceVlanParentInterfaceChoices)
	router.GET(baseURL+"/ipmi", wrapper.GetIpmi)
	router.GET(baseURL+"/ipmi/channels", wrapper.GetIpmiChannels)
	router.GET(baseURL+"/ipmi/id/:id", wrapper.GetIpmiIdId)
	router.PUT(baseURL+"/ipmi/id/:id", wrapper.PutIpmiIdId)
	router.POST(baseURL+"/ipmi/identify", wrapper.PostIpmiIdentify)
	router.GET(baseURL+"/ipmi/is_loaded", wrapper.GetIpmiIsLoaded)
	router.GET(baseURL+"/iscsi/auth", wrapper.GetIscsiAuth)
	router.POST(baseURL+"/iscsi/auth", wrapper.PostIscsiAuth)
	router.DELETE(baseURL+"/iscsi/auth/id/:id", wrapper.DeleteIscsiAuthIdId)
	router.GET(baseURL+"/iscsi/auth/id/:id", wrapper.GetIscsiAuthIdId)
	router.PUT(baseURL+"/iscsi/auth/id/:id", wrapper.PutIscsiAuthIdId)
	router.GET(baseURL+"/iscsi/extent", wrapper.GetIscsiExtent)
	router.POST(baseURL+"/iscsi/extent", wrapper.PostIscsiExtent)
	router.POST(baseURL+"/iscsi/extent/disk_choices", wrapper.PostIscsiExtentDiskChoices)
	router.DELETE(baseURL+"/iscsi/extent/id/:id", wrapper.DeleteIscsiExtentIdId)
	router.GET(baseURL+"/iscsi/extent/id/:id", wrapper.GetIscsiExtentIdId)
	router.PUT(baseURL+"/iscsi/extent/id/:id", wrapper.PutIscsiExtentIdId)
	router.GET(baseURL+"/iscsi/global", wrapper.GetIscsiGlobal)
	router.PUT(baseURL+"/iscsi/global", wrapper.PutIscsiGlobal)
	router.GET(baseURL+"/iscsi/global/sessions", wrapper.GetIscsiGlobalSessions)
	router.GET(baseURL+"/iscsi/initiator", wrapper.GetIscsiInitiator)
	router.POST(baseURL+"/iscsi/initiator", wrapper.PostIscsiInitiator)
	router.DELETE(baseURL+"/iscsi/initiator/id/:id", wrapper.DeleteIscsiInitiatorIdId)
	router.GET(baseURL+"/iscsi/initiator/id/:id", wrapper.GetIscsiInitiatorIdId)
	router.PUT(baseURL+"/iscsi/initiator/id/:id", wrapper.PutIscsiInitiatorIdId)
	router.GET(baseURL+"/iscsi/portal", wrapper.GetIscsiPortal)
	router.POST(baseURL+"/iscsi/portal", wrapper.PostIscsiPortal)
	router.DELETE(baseURL+"/iscsi/portal/id/:id", wrapper.DeleteIscsiPortalIdId)
	router.GET(baseURL+"/iscsi/portal/id/:id", wrapper.GetIscsiPortalIdId)
	router.PUT(baseURL+"/iscsi/portal/id/:id", wrapper.PutIscsiPortalIdId)
	router.GET(baseURL+"/iscsi/portal/listen_ip_choices", wrapper.GetIscsiPortalListenIpChoices)
	router.GET(baseURL+"/iscsi/target", wrapper.GetIscsiTarget)
	router.POST(baseURL+"/iscsi/target", wrapper.PostIscsiTarget)
	router.DELETE(baseURL+"/iscsi/target/id/:id", wrapper.DeleteIscsiTargetIdId)
	router.GET(baseURL+"/iscsi/target/id/:id", wrapper.GetIscsiTargetIdId)
	router.PUT(baseURL+"/iscsi/target/id/:id", wrapper.PutIscsiTargetIdId)
	router.GET(baseURL+"/iscsi/targetextent", wrapper.GetIscsiTargetextent)
	router.POST(baseURL+"/iscsi/targetextent", wrapper.PostIscsiTargetextent)
	router.DELETE(baseURL+"/iscsi/targetextent/id/:id", wrapper.DeleteIscsiTargetextentIdId)
	router.GET(baseURL+"/iscsi/targetextent/id/:id", wrapper.GetIscsiTargetextentIdId)
	router.PUT(baseURL+"/iscsi/targetextent/id/:id", wrapper.PutIscsiTargetextentIdId)
	router.GET(baseURL+"/jail", wrapper.GetJail)
	router.POST(baseURL+"/jail", wrapper.PostJail)
	router.POST(baseURL+"/jail/activate", wrapper.PostJailActivate)
	router.POST(baseURL+"/jail/clean", wrapper.PostJailClean)
	router.GET(baseURL+"/jail/default_configuration", wrapper.GetJailDefaultConfiguration)
	router.POST(baseURL+"/jail/exec", wrapper.PostJailExec)
	router.POST(baseURL+"/jail/export", wrapper.PostJailExport)
	router.POST(baseURL+"/jail/fetch", wrapper.PostJailFetch)
	router.POST(baseURL+"/jail/fstab", wrapper.PostJailFstab)
	router.GET(baseURL+"/jail/get_activated_pool", wrapper.GetJailGetActivatedPool)
	router.DELETE(baseURL+"/jail/id/:id", wrapper.DeleteJailIdId)
	router.GET(baseURL+"/jail/id/:id", wrapper.GetJailIdId)
	router.PUT(baseURL+"/jail/id/:id", wrapper.PutJailIdId)
	router.POST(baseURL+"/jail/id/:id/clone", wrapper.PostJailIdIdClone)
	router.POST(baseURL+"/jail/import_image", wrapper.PostJailImportImage)
	router.GET(baseURL+"/jail/interface_choices", wrapper.GetJailInterfaceChoices)
	router.POST(baseURL+"/jail/rc_action", wrapper.PostJailRcAction)
	router.POST(baseURL+"/jail/releases_choices", wrapper.PostJailReleasesChoices)
	router.POST(baseURL+"/jail/restart", wrapper.PostJailRestart)
	router.POST(baseURL+"/jail/start", wrapper.PostJailStart)
	router.POST(baseURL+"/jail/stop", wrapper.PostJailStop)
	router.POST(baseURL+"/jail/update_defaults", wrapper.PostJailUpdateDefaults)
	router.POST(baseURL+"/jail/update_to_latest_patch", wrapper.PostJailUpdateToLatestPatch)
	router.GET(baseURL+"/kerberos", wrapper.GetKerberos)
	router.PUT(baseURL+"/kerberos", wrapper.PutKerberos)
	router.GET(baseURL+"/kerberos/keytab", wrapper.GetKerberosKeytab)
	router.POST(baseURL+"/kerberos/keytab", wrapper.PostKerberosKeytab)
	router.DELETE(baseURL+"/kerberos/keytab/id/:id", wrapper.DeleteKerberosKeytabIdId)
	router.GET(baseURL+"/kerberos/keytab/id/:id", wrapper.GetKerberosKeytabIdId)
	router.PUT(baseURL+"/kerberos/keytab/id/:id", wrapper.PutKerberosKeytabIdId)
	router.GET(baseURL+"/kerberos/keytab/system_keytab_list", wrapper.GetKerberosKeytabSystemKeytabList)
	router.GET(baseURL+"/kerberos/realm", wrapper.GetKerberosRealm)
	router.POST(baseURL+"/kerberos/realm", wrapper.PostKerberosRealm)
	router.DELETE(baseURL+"/kerberos/realm/id/:id", wrapper.DeleteKerberosRealmIdId)
	router.GET(baseURL+"/kerberos/realm/id/:id", wrapper.GetKerberosRealmIdId)
	router.PUT(baseURL+"/kerberos/realm/id/:id", wrapper.PutKerberosRealmIdId)
	router.GET(baseURL+"/keychaincredential", wrapper.GetKeychaincredential)
	router.POST(baseURL+"/keychaincredential", wrapper.PostKeychaincredential)
	router.GET(baseURL+"/keychaincredential/generate_ssh_key_pair", wrapper.GetKeychaincredentialGenerateSshKeyPair)
	router.DELETE(baseURL+"/keychaincredential/id/:id", wrapper.DeleteKeychaincredentialIdId)
	router.GET(baseURL+"/keychaincredential/id/:id", wrapper.GetKeychaincredentialIdId)
	router.PUT(baseURL+"/keychaincredential/id/:id", wrapper.PutKeychaincredentialIdId)
	router.POST(baseURL+"/keychaincredential/remote_ssh_host_key_scan", wrapper.PostKeychaincredentialRemoteSshHostKeyScan)
	router.POST(baseURL+"/keychaincredential/remote_ssh_semiautomatic_setup", wrapper.PostKeychaincredentialRemoteSshSemiautomaticSetup)
	router.POST(baseURL+"/keychaincredential/used_by", wrapper.PostKeychaincredentialUsedBy)
	router.GET(baseURL+"/ldap", wrapper.GetLdap)
	router.PUT(baseURL+"/ldap", wrapper.PutLdap)
	router.GET(baseURL+"/ldap/get_state", wrapper.GetLdapGetState)
	router.GET(baseURL+"/ldap/idmap_backend_choices", wrapper.GetLdapIdmapBackendChoices)
	router.GET(baseURL+"/ldap/schema_choices", wrapper.GetLdapSchemaChoices)
	router.GET(baseURL+"/ldap/ssl_choices", wrapper.GetLdapSslChoices)
	router.GET(baseURL+"/lldp", wrapper.GetLldp)
	router.PUT(baseURL+"/lldp", wrapper.PutLldp)
	router.GET(baseURL+"/mail", wrapper.GetMail)
	router.PUT(baseURL+"/mail", wrapper.PutMail)
	router.POST(baseURL+"/mail/send", wrapper.PostMailSend)
	router.GET(baseURL+"/multipath", wrapper.GetMultipath)
	router.GET(baseURL+"/multipath/id/:id", wrapper.GetMultipathIdId)
	router.GET(baseURL+"/network/configuration", wrapper.GetNetworkConfiguration)
	router.PUT(baseURL+"/network/configuration", wrapper.PutNetworkConfiguration)
	router.GET(baseURL+"/network/general/summary", wrapper.GetNetworkGeneralSummary)
	router.GET(baseURL+"/nfs", wrapper.GetNfs)
	router.PUT(baseURL+"/nfs", wrapper.PutNfs)
	router.GET(baseURL+"/nis", wrapper.GetNis)
	router.PUT(baseURL+"/nis", wrapper.PutNis)
	router.GET(baseURL+"/nis/get_state", wrapper.GetNisGetState)
	router.GET(baseURL+"/plugin", wrapper.GetPlugin)
	router.POST(baseURL+"/plugin", wrapper.PostPlugin)
	router.POST(baseURL+"/plugin/available", wrapper.PostPluginAvailable)
	router.POST(baseURL+"/plugin/branches_choices", wrapper.PostPluginBranchesChoices)
	router.POST(baseURL+"/plugin/defaults", wrapper.PostPluginDefaults)
	router.DELETE(baseURL+"/plugin/id/:id", wrapper.DeletePluginIdId)
	router.GET(baseURL+"/plugin/id/:id", wrapper.GetPluginIdId)
	router.PUT(baseURL+"/plugin/id/:id", wrapper.PutPluginIdId)
	router.GET(baseURL+"/plugin/official_repositories", wrapper.GetPluginOfficialRepositories)
	router.GET(baseURL+"/plugin/retrieve_versions_for_repos", wrapper.GetPluginRetrieveVersionsForRepos)
	router.GET(baseURL+"/pool", wrapper.GetPool)
	router.POST(baseURL+"/pool", wrapper.PostPool)
	router.GET(baseURL+"/pool/dataset", wrapper.GetPoolDataset)
	router.POST(baseURL+"/pool/dataset", wrapper.PostPoolDataset)
	router.DELETE(baseURL+"/pool/dataset/id/:id", wrapper.DeletePoolDatasetIdId)
	router.GET(baseURL+"/pool/dataset/id/:id", wrapper.GetPoolDatasetIdId)
	router.PUT(baseURL+"/pool/dataset/id/:id", wrapper.PutPoolDatasetIdId)
	router.POST(baseURL+"/pool/dataset/id/:id/attachments", wrapper.PostPoolDatasetIdIdAttachments)
	router.POST(baseURL+"/pool/dataset/id/:id/permission", wrapper.PostPoolDatasetIdIdPermission)
	router.POST(baseURL+"/pool/dataset/id/:id/processes", wrapper.PostPoolDatasetIdIdProcesses)
	router.POST(baseURL+"/pool/dataset/id/:id/promote", wrapper.PostPoolDatasetIdIdPromote)
	router.POST(baseURL+"/pool/dataset/recommended_zvol_blocksize", wrapper.PostPoolDatasetRecommendedZvolBlocksize)
	router.POST(baseURL+"/pool/filesystem_choices", wrapper.PostPoolFilesystemChoices)
	router.GET(baseURL+"/pool/id/:id", wrapper.GetPoolIdId)
	router.PUT(baseURL+"/pool/id/:id", wrapper.PutPoolIdId)
	router.POST(baseURL+"/pool/id/:id/attachments", wrapper.PostPoolIdIdAttachments)
	router.POST(baseURL+"/pool/id/:id/detach", wrapper.PostPoolIdIdDetach)
	router.POST(baseURL+"/pool/id/:id/download_encryption_key", wrapper.PostPoolIdIdDownloadEncryptionKey)
	router.POST(baseURL+"/pool/id/:id/export", wrapper.PostPoolIdIdExport)
	router.POST(baseURL+"/pool/id/:id/get_disks", wrapper.PostPoolIdIdGetDisks)
	router.POST(baseURL+"/pool/id/:id/is_upgraded", wrapper.PostPoolIdIdIsUpgraded)
	router.POST(baseURL+"/pool/id/:id/lock", wrapper.PostPoolIdIdLock)
	router.POST(baseURL+"/pool/id/:id/offline", wrapper.PostPoolIdIdOffline)
	router.POST(baseURL+"/pool/id/:id/online", wrapper.PostPoolIdIdOnline)
	router.POST(baseURL+"/pool/id/:id/passphrase", wrapper.PostPoolIdIdPassphrase)
	router.POST(baseURL+"/pool/id/:id/processes", wrapper.PostPoolIdIdProcesses)
	router.POST(baseURL+"/pool/id/:id/recoverykey_rm", wrapper.PostPoolIdIdRecoverykeyRm)
	router.POST(baseURL+"/pool/id/:id/rekey", wrapper.PostPoolIdIdRekey)
	router.POST(baseURL+"/pool/id/:id/remove", wrapper.PostPoolIdIdRemove)
	router.POST(baseURL+"/pool/id/:id/replace", wrapper.PostPoolIdIdReplace)
	router.POST(baseURL+"/pool/id/:id/scrub", wrapper.PostPoolIdIdScrub)
	router.POST(baseURL+"/pool/id/:id/unlock", wrapper.PostPoolIdIdUnlock)
	router.POST(baseURL+"/pool/id/:id/upgrade", wrapper.PostPoolIdIdUpgrade)
	router.POST(baseURL+"/pool/import_disk", wrapper.PostPoolImportDisk)
	router.POST(baseURL+"/pool/import_disk_autodetect_fs_type", wrapper.PostPoolImportDiskAutodetectFsType)
	router.GET(baseURL+"/pool/import_disk_msdosfs_locales", wrapper.GetPoolImportDiskMsdosfsLocales)
	router.GET(baseURL+"/pool/import_find", wrapper.GetPoolImportFind)
	router.POST(baseURL+"/pool/import_pool", wrapper.PostPoolImportPool)
	router.GET(baseURL+"/pool/resilver", wrapper.GetPoolResilver)
	router.PUT(baseURL+"/pool/resilver", wrapper.PutPoolResilver)
	router.GET(baseURL+"/pool/scrub", wrapper.GetPoolScrub)
	router.POST(baseURL+"/pool/scrub", wrapper.PostPoolScrub)
	router.DELETE(baseURL+"/pool/scrub/id/:id", wrapper.DeletePoolScrubIdId)
	router.GET(baseURL+"/pool/scrub/id/:id", wrapper.GetPoolScrubIdId)
	router.PUT(baseURL+"/pool/scrub/id/:id", wrapper.PutPoolScrubIdId)
	router.POST(baseURL+"/pool/scrub/run", wrapper.PostPoolScrubRun)
	router.GET(baseURL+"/pool/snapshottask", wrapper.GetPoolSnapshottask)
	router.POST(baseURL+"/pool/snapshottask", wrapper.PostPoolSnapshottask)
	router.DELETE(baseURL+"/pool/snapshottask/id/:id", wrapper.DeletePoolSnapshottaskIdId)
	router.GET(baseURL+"/pool/snapshottask/id/:id", wrapper.GetPoolSnapshottaskIdId)
	router.PUT(baseURL+"/pool/snapshottask/id/:id", wrapper.PutPoolSnapshottaskIdId)
	router.POST(baseURL+"/pool/snapshottask/id/:id/run", wrapper.PostPoolSnapshottaskIdIdRun)
	router.POST(baseURL+"/pool/unlock_services_restart_choices", wrapper.PostPoolUnlockServicesRestartChoices)
	router.GET(baseURL+"/replication", wrapper.GetReplication)
	router.POST(baseURL+"/replication", wrapper.PostReplication)
	router.POST(baseURL+"/replication/count_eligible_manual_snapshots", wrapper.PostReplicationCountEligibleManualSnapshots)
	router.POST(baseURL+"/replication/create_dataset", wrapper.PostReplicationCreateDataset)
	router.DELETE(baseURL+"/replication/id/:id", wrapper.DeleteReplicationIdId)
	router.GET(baseURL+"/replication/id/:id", wrapper.GetReplicationIdId)
	router.PUT(baseURL+"/replication/id/:id", wrapper.PutReplicationIdId)
	router.POST(baseURL+"/replication/id/:id/run", wrapper.PostReplicationIdIdRun)
	router.POST(baseURL+"/replication/list_datasets", wrapper.PostReplicationListDatasets)
	router.GET(baseURL+"/replication/list_naming_schemas", wrapper.GetReplicationListNamingSchemas)
	router.POST(baseURL+"/replication/target_unmatched_snapshots", wrapper.PostReplicationTargetUnmatchedSnapshots)
	router.GET(baseURL+"/reporting", wrapper.GetReporting)
	router.PUT(baseURL+"/reporting", wrapper.PutReporting)
	router.POST(baseURL+"/reporting/get_data", wrapper.PostReportingGetData)
	router.GET(baseURL+"/reporting/graphs", wrapper.GetReportingGraphs)
	router.POST(baseURL+"/route/ipv4gw_reachable", wrapper.PostRouteIpv4gwReachable)
	router.GET(baseURL+"/route/system_routes", wrapper.GetRouteSystemRoutes)
	router.GET(baseURL+"/rsyncd", wrapper.GetRsyncd)
	router.PUT(baseURL+"/rsyncd", wrapper.PutRsyncd)
	router.GET(baseURL+"/rsyncmod", wrapper.GetRsyncmod)
	router.POST(baseURL+"/rsyncmod", wrapper.PostRsyncmod)
	router.DELETE(baseURL+"/rsyncmod/id/:id", wrapper.DeleteRsyncmodIdId)
	router.GET(baseURL+"/rsyncmod/id/:id", wrapper.GetRsyncmodIdId)
	router.PUT(baseURL+"/rsyncmod/id/:id", wrapper.PutRsyncmodIdId)
	router.GET(baseURL+"/rsynctask", wrapper.GetRsynctask)
	router.POST(baseURL+"/rsynctask", wrapper.PostRsynctask)
	router.DELETE(baseURL+"/rsynctask/id/:id", wrapper.DeleteRsynctaskIdId)
	router.GET(baseURL+"/rsynctask/id/:id", wrapper.GetRsynctaskIdId)
	router.PUT(baseURL+"/rsynctask/id/:id", wrapper.PutRsynctaskIdId)
	router.POST(baseURL+"/rsynctask/id/:id/run", wrapper.PostRsynctaskIdIdRun)
	router.GET(baseURL+"/s3", wrapper.GetS3)
	router.PUT(baseURL+"/s3", wrapper.PutS3)
	router.GET(baseURL+"/service", wrapper.GetService)
	router.GET(baseURL+"/service/id/:id", wrapper.GetServiceIdId)
	router.PUT(baseURL+"/service/id/:id", wrapper.PutServiceIdId)
	router.POST(baseURL+"/service/reload", wrapper.PostServiceReload)
	router.POST(baseURL+"/service/restart", wrapper.PostServiceRestart)
	router.POST(baseURL+"/service/start", wrapper.PostServiceStart)
	router.GET(baseURL+"/service/started", wrapper.GetServiceStarted)
	router.POST(baseURL+"/service/stop", wrapper.PostServiceStop)
	router.POST(baseURL+"/service/terminate_process", wrapper.PostServiceTerminateProcess)
	router.GET(baseURL+"/sharing/afp", wrapper.GetSharingAfp)
	router.POST(baseURL+"/sharing/afp", wrapper.PostSharingAfp)
	router.DELETE(baseURL+"/sharing/afp/id/:id", wrapper.DeleteSharingAfpIdId)
	router.GET(baseURL+"/sharing/afp/id/:id", wrapper.GetSharingAfpIdId)
	router.PUT(baseURL+"/sharing/afp/id/:id", wrapper.PutSharingAfpIdId)
	router.GET(baseURL+"/sharing/nfs", wrapper.GetSharingNfs)
	router.POST(baseURL+"/sharing/nfs", wrapper.PostSharingNfs)
	router.DELETE(baseURL+"/sharing/nfs/id/:id", wrapper.DeleteSharingNfsIdId)
	router.GET(baseURL+"/sharing/nfs/id/:id", wrapper.GetSharingNfsIdId)
	router.PUT(baseURL+"/sharing/nfs/id/:id", wrapper.PutSharingNfsIdId)
	router.GET(baseURL+"/sharing/smb", wrapper.GetSharingSmb)
	router.POST(baseURL+"/sharing/smb", wrapper.PostSharingSmb)
	router.DELETE(baseURL+"/sharing/smb/id/:id", wrapper.DeleteSharingSmbIdId)
	router.GET(baseURL+"/sharing/smb/id/:id", wrapper.GetSharingSmbIdId)
	router.PUT(baseURL+"/sharing/smb/id/:id", wrapper.PutSharingSmbIdId)
	router.GET(baseURL+"/sharing/smb/vfsobjects_choices", wrapper.GetSharingSmbVfsobjectsChoices)
	router.GET(baseURL+"/sharing/webdav", wrapper.GetSharingWebdav)
	router.POST(baseURL+"/sharing/webdav", wrapper.PostSharingWebdav)
	router.DELETE(baseURL+"/sharing/webdav/id/:id", wrapper.DeleteSharingWebdavIdId)
	router.GET(baseURL+"/sharing/webdav/id/:id", wrapper.GetSharingWebdavIdId)
	router.PUT(baseURL+"/sharing/webdav/id/:id", wrapper.PutSharingWebdavIdId)
	router.GET(baseURL+"/smart", wrapper.GetSmart)
	router.PUT(baseURL+"/smart", wrapper.PutSmart)
	router.GET(baseURL+"/smart/test", wrapper.GetSmartTest)
	router.POST(baseURL+"/smart/test", wrapper.PostSmartTest)
	router.DELETE(baseURL+"/smart/test/id/:id", wrapper.DeleteSmartTestIdId)
	router.GET(baseURL+"/smart/test/id/:id", wrapper.GetSmartTestIdId)
	router.PUT(baseURL+"/smart/test/id/:id", wrapper.PutSmartTestIdId)
	router.GET(baseURL+"/smart/test/results", wrapper.GetSmartTestResults)
	router.GET(baseURL+"/smb", wrapper.GetSmb)
	router.PUT(baseURL+"/smb", wrapper.PutSmb)
	router.GET(baseURL+"/smb/bindip_choices", wrapper.GetSmbBindipChoices)
	router.GET(baseURL+"/smb/domain_choices", wrapper.GetSmbDomainChoices)
	router.GET(baseURL+"/smb/sharesec", wrapper.GetSmbSharesec)
	router.POST(baseURL+"/smb/sharesec", wrapper.PostSmbSharesec)
	router.POST(baseURL+"/smb/sharesec/getacl", wrapper.PostSmbSharesecGetacl)
	router.DELETE(baseURL+"/smb/sharesec/id/:id", wrapper.DeleteSmbSharesecIdId)
	router.GET(baseURL+"/smb/sharesec/id/:id", wrapper.GetSmbSharesecIdId)
	router.PUT(baseURL+"/smb/sharesec/id/:id", wrapper.PutSmbSharesecIdId)
	router.GET(baseURL+"/smb/sharesec/synchronize_acls", wrapper.GetSmbSharesecSynchronizeAcls)
	router.GET(baseURL+"/smb/unixcharset_choices", wrapper.GetSmbUnixcharsetChoices)
	router.GET(baseURL+"/snmp", wrapper.GetSnmp)
	router.PUT(baseURL+"/snmp", wrapper.PutSnmp)
	router.GET(baseURL+"/ssh", wrapper.GetSsh)
	router.PUT(baseURL+"/ssh", wrapper.PutSsh)
	router.GET(baseURL+"/ssh/bindiface_choices", wrapper.GetSshBindifaceChoices)
	router.GET(baseURL+"/staticroute", wrapper.GetStaticroute)
	router.POST(baseURL+"/staticroute", wrapper.PostStaticroute)
	router.DELETE(baseURL+"/staticroute/id/:id", wrapper.DeleteStaticrouteIdId)
	router.GET(baseURL+"/staticroute/id/:id", wrapper.GetStaticrouteIdId)
	router.PUT(baseURL+"/staticroute/id/:id", wrapper.PutStaticrouteIdId)
	router.POST(baseURL+"/stats/get_data", wrapper.PostStatsGetData)
	router.POST(baseURL+"/stats/get_dataset_info", wrapper.PostStatsGetDatasetInfo)
	router.GET(baseURL+"/stats/get_sources", wrapper.GetStatsGetSources)
	router.GET(baseURL+"/support", wrapper.GetSupport)
	router.PUT(baseURL+"/support", wrapper.PutSupport)
	router.POST(baseURL+"/support/fetch_categories", wrapper.PostSupportFetchCategories)
	router.GET(baseURL+"/support/fields", wrapper.GetSupportFields)
	router.GET(baseURL+"/support/is_available", wrapper.GetSupportIsAvailable)
	router.GET(baseURL+"/support/is_available_and_enabled", wrapper.GetSupportIsAvailableAndEnabled)
	router.POST(baseURL+"/support/new_ticket", wrapper.PostSupportNewTicket)
	router.GET(baseURL+"/system/advanced", wrapper.GetSystemAdvanced)
	router.PUT(baseURL+"/system/advanced", wrapper.PutSystemAdvanced)
	router.GET(baseURL+"/system/advanced/serial_port_choices", wrapper.GetSystemAdvancedSerialPortChoices)
	router.GET(baseURL+"/system/boot_id", wrapper.GetSystemBootId)
	router.POST(baseURL+"/system/feature_enabled", wrapper.PostSystemFeatureEnabled)
	router.GET(baseURL+"/system/general", wrapper.GetSystemGeneral)
	router.PUT(baseURL+"/system/general", wrapper.PutSystemGeneral)
	router.GET(baseURL+"/system/general/country_choices", wrapper.GetSystemGeneralCountryChoices)
	router.GET(baseURL+"/system/general/kbdmap_choices", wrapper.GetSystemGeneralKbdmapChoices)
	router.GET(baseURL+"/system/general/language_choices", wrapper.GetSystemGeneralLanguageChoices)
	router.GET(baseURL+"/system/general/local_url", wrapper.GetSystemGeneralLocalUrl)
	router.GET(baseURL+"/system/general/timezone_choices", wrapper.GetSystemGeneralTimezoneChoices)
	router.GET(baseURL+"/system/general/ui_address_choices", wrapper.GetSystemGeneralUiAddressChoices)
	router.GET(baseURL+"/system/general/ui_certificate_choices", wrapper.GetSystemGeneralUiCertificateChoices)
	router.GET(baseURL+"/system/general/ui_restart", wrapper.GetSystemGeneralUiRestart)
	router.GET(baseURL+"/system/general/ui_v6address_choices", wrapper.GetSystemGeneralUiV6addressChoices)
	router.GET(baseURL+"/system/info", wrapper.GetSystemInfo)
	router.GET(baseURL+"/system/is_freenas", wrapper.GetSystemIsFreenas)
	router.GET(baseURL+"/system/legacy_ui_enabled", wrapper.GetSystemLegacyUiEnabled)
	router.POST(baseURL+"/system/license_update", wrapper.PostSystemLicenseUpdate)
	router.GET(baseURL+"/system/ntpserver", wrapper.GetSystemNtpserver)
	router.POST(baseURL+"/system/ntpserver", wrapper.PostSystemNtpserver)
	router.DELETE(baseURL+"/system/ntpserver/id/:id", wrapper.DeleteSystemNtpserverIdId)
	router.GET(baseURL+"/system/ntpserver/id/:id", wrapper.GetSystemNtpserverIdId)
	router.PUT(baseURL+"/system/ntpserver/id/:id", wrapper.PutSystemNtpserverIdId)
	router.GET(baseURL+"/system/ntpserver/test_ntp_server", wrapper.GetSystemNtpserverTestNtpServer)
	router.GET(baseURL+"/system/product_name", wrapper.GetSystemProductName)
	router.GET(baseURL+"/system/ready", wrapper.GetSystemReady)
	router.POST(baseURL+"/system/reboot", wrapper.PostSystemReboot)
	router.POST(baseURL+"/system/shutdown", wrapper.PostSystemShutdown)
	router.GET(baseURL+"/system/state", wrapper.GetSystemState)
	router.GET(baseURL+"/system/version", wrapper.GetSystemVersion)
	router.GET(baseURL+"/systemdataset", wrapper.GetSystemdataset)
	router.PUT(baseURL+"/systemdataset", wrapper.PutSystemdataset)
	router.GET(baseURL+"/tftp", wrapper.GetTftp)
	router.PUT(baseURL+"/tftp", wrapper.PutTftp)
	router.GET(baseURL+"/tunable", wrapper.GetTunable)
	router.POST(baseURL+"/tunable", wrapper.PostTunable)
	router.DELETE(baseURL+"/tunable/id/:id", wrapper.DeleteTunableIdId)
	router.GET(baseURL+"/tunable/id/:id", wrapper.GetTunableIdId)
	router.PUT(baseURL+"/tunable/id/:id", wrapper.PutTunableIdId)
	router.POST(baseURL+"/update/check_available", wrapper.PostUpdateCheckAvailable)
	router.GET(baseURL+"/update/download", wrapper.GetUpdateDownload)
	router.POST(baseURL+"/update/get_pending", wrapper.PostUpdateGetPending)
	router.GET(baseURL+"/update/get_trains", wrapper.GetUpdateGetTrains)
	router.POST(baseURL+"/update/manual", wrapper.PostUpdateManual)
	router.POST(baseURL+"/update/set_train", wrapper.PostUpdateSetTrain)
	router.POST(baseURL+"/update/update", wrapper.PostUpdateUpdate)
	router.GET(baseURL+"/ups", wrapper.GetUps)
	router.PUT(baseURL+"/ups", wrapper.PutUps)
	router.GET(baseURL+"/ups/driver_choices", wrapper.GetUpsDriverChoices)
	router.GET(baseURL+"/ups/port_choices", wrapper.GetUpsPortChoices)
	router.GET(baseURL+"/user", wrapper.GetUser)
	router.POST(baseURL+"/user", wrapper.PostUser)
	router.GET(baseURL+"/user/get_next_uid", wrapper.GetUserGetNextUid)
	router.POST(baseURL+"/user/get_user_obj", wrapper.PostUserGetUserObj)
	router.GET(baseURL+"/user/has_root_password", wrapper.GetUserHasRootPassword)
	router.DELETE(baseURL+"/user/id/:id", wrapper.DeleteUserIdId)
	router.GET(baseURL+"/user/id/:id", wrapper.GetUserIdId)
	router.PUT(baseURL+"/user/id/:id", wrapper.PutUserIdId)
	router.POST(baseURL+"/user/id/:id/pop_attribute", wrapper.PostUserIdIdPopAttribute)
	router.POST(baseURL+"/user/id/:id/set_attribute", wrapper.PostUserIdIdSetAttribute)
	router.GET(baseURL+"/user/shell_choices", wrapper.GetUserShellChoices)
	router.GET(baseURL+"/vm", wrapper.GetVm)
	router.POST(baseURL+"/vm", wrapper.PostVm)
	router.GET(baseURL+"/vm/device", wrapper.GetVmDevice)
	router.POST(baseURL+"/vm/device", wrapper.PostVmDevice)
	router.DELETE(baseURL+"/vm/device/id/:id", wrapper.DeleteVmDeviceIdId)
	router.GET(baseURL+"/vm/device/id/:id", wrapper.GetVmDeviceIdId)
	router.PUT(baseURL+"/vm/device/id/:id", wrapper.PutVmDeviceIdId)
	router.GET(baseURL+"/vm/device/nic_attach_choices", wrapper.GetVmDeviceNicAttachChoices)
	router.GET(baseURL+"/vm/device/vnc_bind_choices", wrapper.GetVmDeviceVncBindChoices)
	router.GET(baseURL+"/vm/flags", wrapper.GetVmFlags)
	router.POST(baseURL+"/vm/get_attached_iface", wrapper.PostVmGetAttachedIface)
	router.POST(baseURL+"/vm/get_available_memory", wrapper.PostVmGetAvailableMemory)
	router.POST(baseURL+"/vm/get_console", wrapper.PostVmGetConsole)
	router.GET(baseURL+"/vm/get_vmemory_in_use", wrapper.GetVmGetVmemoryInUse)
	router.POST(baseURL+"/vm/get_vnc", wrapper.PostVmGetVnc)
	router.GET(baseURL+"/vm/get_vnc_ipv4", wrapper.GetVmGetVncIpv4)
	router.DELETE(baseURL+"/vm/id/:id", wrapper.DeleteVmIdId)
	router.GET(baseURL+"/vm/id/:id", wrapper.GetVmIdId)
	router.PUT(baseURL+"/vm/id/:id", wrapper.PutVmIdId)
	router.POST(baseURL+"/vm/id/:id/clone", wrapper.PostVmIdIdClone)
	router.POST(baseURL+"/vm/id/:id/restart", wrapper.PostVmIdIdRestart)
	router.POST(baseURL+"/vm/id/:id/start", wrapper.PostVmIdIdStart)
	router.POST(baseURL+"/vm/id/:id/status", wrapper.PostVmIdIdStatus)
	router.POST(baseURL+"/vm/id/:id/stop", wrapper.PostVmIdIdStop)
	router.GET(baseURL+"/vm/identify_hypervisor", wrapper.GetVmIdentifyHypervisor)
	router.GET(baseURL+"/vm/random_mac", wrapper.GetVmRandomMac)
	router.GET(baseURL+"/vm/vnc_port_wizard", wrapper.GetVmVncPortWizard)
	router.GET(baseURL+"/vmware", wrapper.GetVmware)
	router.POST(baseURL+"/vmware", wrapper.PostVmware)
	router.POST(baseURL+"/vmware/dataset_has_vms", wrapper.PostVmwareDatasetHasVms)
	router.POST(baseURL+"/vmware/get_datastores", wrapper.PostVmwareGetDatastores)
	router.POST(baseURL+"/vmware/get_virtual_machines", wrapper.PostVmwareGetVirtualMachines)
	router.DELETE(baseURL+"/vmware/id/:id", wrapper.DeleteVmwareIdId)
	router.GET(baseURL+"/vmware/id/:id", wrapper.GetVmwareIdId)
	router.PUT(baseURL+"/vmware/id/:id", wrapper.PutVmwareIdId)
	router.POST(baseURL+"/vmware/match_datastores_with_datasets", wrapper.PostVmwareMatchDatastoresWithDatasets)
	router.GET(baseURL+"/webdav", wrapper.GetWebdav)
	router.PUT(baseURL+"/webdav", wrapper.PutWebdav)
	router.GET(baseURL+"/webui/image", wrapper.GetWebuiImage)
	router.DELETE(baseURL+"/webui/image/id/:id", wrapper.DeleteWebuiImageIdId)
	router.GET(baseURL+"/webui/image/id/:id", wrapper.GetWebuiImageIdId)
	router.GET(baseURL+"/zfs/snapshot", wrapper.GetZfsSnapshot)
	router.POST(baseURL+"/zfs/snapshot", wrapper.PostZfsSnapshot)
	router.POST(baseURL+"/zfs/snapshot/clone", wrapper.PostZfsSnapshotClone)
	router.DELETE(baseURL+"/zfs/snapshot/id/:id", wrapper.DeleteZfsSnapshotIdId)
	router.GET(baseURL+"/zfs/snapshot/id/:id", wrapper.GetZfsSnapshotIdId)
	router.POST(baseURL+"/zfs/snapshot/remove", wrapper.PostZfsSnapshotRemove)
	router.POST(baseURL+"/zfs/snapshot/rollback", wrapper.PostZfsSnapshotRollback)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z9a5PbNvIoDn8VPHpOVZI68via7K6rTtWRR7KtzdxW0ti/ZJXiQCQkIUMCXACUrOzJ",
	"d/8XLiRBCSCpGY0tx5MXmfEQ1+5Go7vRl/92QpqklCAieOf1fzsM8ZQSjtQ/xlkYIq5+jRAPGU4FpqTz",
	"unOZIgbl74DLJihCUefPbueawEwsKcN/oGi30wUF+Wfdd04ZEEvMASJRSjERnT//7HZ4uEQJVJPCMEFB",
	"RHgg+yEicAgFZUHIEBQoeKaaRBGWg8H4itEUMYHl0ucw5qjbidAcZrHovP7vn91Oan3/bwcKwfAsE+Zf",
	"zlEEy1C3IzYp6rzu0NnvKBRyl5XFyN6mBRcMk4VsQWCCHB/+7HYEFrH8k29THdd8bihkaSSh8PwLQeEu",
	"e9RLdu9R4BWKMEOhoGwTxAiu7onhFHK+pixyYijjiDXvQK8CRm1WbNBxP6KMY7pWqNajcWt5M0pjBIma",
	"WjUTLOMCRUFEE0+7GSaRZ5P6Y7p2fgrliuYSZ6oryeIYziRAKqSAiUALxFQHRbuSkWQCuY9EhLkcI5gz",
	"hAjkQQjDJXIvW+5f4ATRTFgNrOkimkBMvDtDRK/WNTaOEpgGMxjeIqIoA5Es6bz+d6fX73Q7vevJ5Wgo",
	"f3s7uh5OOt3OWb931el2LsbjTrczenv64uWzv8nfVKPx6Wh4Nen81t1dwy1iM8QoD1KGSYhTGNdA0tGN",
	"IRgn7YAfRzANOORxsGYwTeVI1r6uznrDC7nW4Tv1Y9A7cy6YIDHDlMMYa9aLBVJk9WfRFjIGN1ZTL/yt",
	"78HM3YLzAJM5tRc6fnst1/f2+sUzC9S/dZuBxnEtnVoNeWzPePn2bafbuVRgmfRGk2ByNnbCppYYM44C",
	"c6QDTZhuylvBGCsOYZ0uz7ldITajHAUxXSwMOrcbWUzKzYicLGueHoRNSdaBU5tKHDDbIppwmdAoYOg/",
	"GeKiQqCjwXgw+jBQNHp+dSZ/Gb67uBwNnLgIKSEolKvmQYwT7GMRsxSKpXNli5jOYBzA7JP7c77AXbyo",
	"T4G8Opw9JWeBYczt3Y2G795PJO84v+zLnV1cXrj2ZaOzQJIThTFiIogwTzDnGot5xyzD1kVVLkt3YYgL",
	"ytAeXcIYco74QSjGjLWnkGFDRW2iuiQvfDhiKxyiLy0n6nsoctNSjFaowo2GF28vFYFMhqeSUj72RhfD",
	"i3edbmcwGl2OOt3O6Wg4GZ72zuRFdTYYyetpcD4YvRtcnP7i5uk+Dq3/UCf5aHhXAdkIbyGPxyO0PxO0",
	"v7D8/03AOxPLIFyi8Lbg+n4d438xNO+87vz/n5YK9VOjyz7dGih4vq2D7NP5md5Lw2K3OH0+l4vb7yzO",
	"6ljs0NdxgQhikhAFvUVkF0SSxHirLVZH0jASIr5L3zoQ7TRVhgpzRH569swhcRpYyMW4JHD36hsOVOVU",
	"FoSpgOVYudRYsjSAf2QMBQskglkW3iKxJQLYt7m1PtN59uKuPQ9ykbKFW1K8Bw8KGYoQEVhrVw4pEG4S",
	"SjxyYAQ3a4Ru3d9sw5VTm2VaCK1Istfj951u5+r6zK1i1XJMREK22Z7Q+T2oNWxY7TiMhbPNHMdIaWdN",
	"ky5p5hF1McmEm/v6Ae6VyAWDhM8RCxIaoYpO+MvFqbwaLq9+USL0hwbZWZNrzfkpCeZLC4fe2ytldIUj",
	"fdkUxonz3q9KT+39ej2S1+eb3unPb856v8rf352eXV732wDmiXVeWsHoOE2MRwCjRcjvykv5y7v2PAg2",
	"HrnwIxf+clyYUhFAIWC43BUUI7RqEvWs/lLE63aoAhvfp99zt2hYHdo6k3JZDjKqDnmPE4k+pZBEDTa+",
	"fJ++hUdov4UzlMYwRHdHghlAC+kxnKF4r27PapBQtrE2o6do2E5Vc6nbP0ci4CHLZoHkU2wF4y1GbP7q",
	"ZseUCkRWgTK8wsoBrG5FNjqEmOG9BznNWNig61YX4qMg2UICpbgG7kfUtwilTWbr8sKpWdMh7rzmd77q",
	"bK71WEb7g6D0dDxyX8Pqrbe05TPc5oVu9zsWG/cHmiSe2zSkGRHM001vObes5DfD6WA0Gb4dnvYmg+B0",
	"NJA/hheTwehCmXFcX8+vLkeTQd/9VQKltpu/Re/03PNewFmAI49ggheIiwDGC8qwWCaVS+9973mnK3+8",
	"ePHK/PLjT/qXl383f/nx+QvnpBHhQVK+xe1nVwuDMGOrCpzfMIhJSml89ePzFyO5rvIvL//+ausvL378",
	"Sf1lPDiVv//83C0HJRDHTmTfok0QI7KoyAkW2OT3bUoYjXudbmdw6pwqxnMkcOUQWsN5uRtlC0iMr0hj",
	"A6mtECw8Ig/n6ZJB7tMmFBu/RW7aZ4igdRDBDXevn0Oy31MYR8wrK3PEVogpt4kA3WZugZDjBUHRbOMZ",
	"Qvi4gqCeB8cti2kxmMUidxlgE5uMUIxy1l1wQsMZ81HnVN5fXceS7JE+zyWwO2PDDo0zk9gEIQwkTgLJ",
	"bO73Tga9zEqOLSf3Nmixw3KZ7bf2eNnll13Pdcf1XFdbteX5oD/sTY7oenq8Yr7pK+ZruD1KBnQI5l/H",
	"Vr2HfTx8d6EETt+5vT83rrlmYppFfEPCAM4oE04Vs2xzrO8zs3XhorNNu2WjHU+hwpzoOQ1/bbMg+hTG",
	"mTbAtT/vrW2Jc6p8R/kmiTG59Rxor4kwpVzZTXDq4YIM1X3m4RJFmXbNrCXTLZsUTdx4pm731UPaS11W",
	"Kk5gypfU4yR2PzNq2Z+38f602YnkBoHFDurZinXKvoqnsBo+Wtn41qbaA+FreOt6cCCsEMPzzRejhHvt",
	"Va+9fq8x5p6nN3skzzPc1jCl4nLEfhGeK/QI37ncCI55PUIpQRHDK2RQIn/l93VVxYhsyXWW3Ke/chQy",
	"JDxisnGD8hOwa9H125T/a5ABj/V1+FEGfJQBH2XAY5IBKZnjRcAQR/f01mZoRt0gaPd0HVKGglkW3+6+",
	"QydILGmjW20xgPYGSCGDCW/fyeMKYI9qSQhmSc6YlHJE29j979+6lTiqwqVWLdPB9eQ4EZpli12AILLA",
	"BLXamxphL/8Iq1sdTPKBbZY6+TCWLPWX/uBDp9sZDc4vJ4Pgqv9G0bXZsFm7D3L5xPeMSApgFDETreyM",
	"dgzSqiXFuk6WlLvZVUxDGAdeZlgnBywZgpHvNllDbHvC3OP8RHRNYgojh+e1uc2bMW+G0N4c+T2yX9cX",
	"ioO2P7VFx2d1BFc2an8Qrd20OIwKSL6jWG7Omr6Aj28BCyQCvUYjivr8yU0Agneg3+lMm/9aeQkWXYxV",
	"cYcecDvMlENoHvI7nT0ph9ynex0vqcyy9+buxy1SRhc5p7hbOJoFk7oNqlPeanuMEtnhEJaYkCZJ1aOs",
	"vUdlrQT8VxHdRIQY82xRRNVAX+ubJ+7TFr8YJUGJRidpGESzjNzpgJbd9eHktzgNTGz9Xr19Z7MyQXvC",
	"1UPWvPRXF+p88TdDHeTB5/EMHO8ZiJAKu5PXJCZzWhUox4PRUL2s94fjn20hUg3TdSaWuFVjGbUXRfdj",
	"nxnJOLqHP26xHj3QVnzZ1qn4nWISpJAJvDWenQ5DDihQolLuZKy4wracWxpFvZ1xjNJE14jleup+/T08",
	"xDVRvSXDQENvY1cYc81sA7VzMfgwGHW6BRHl/x6fDQZXOr3DRf+NVLmH/bOBTVXl7n2kdRC7WkgzLnC4",
	"ExbbH457b86U08j58GJ4fn0ufxv0h/qX3v+oP7lMBDBa6bUvEuEZ8Xmn2/nplfzlxd/U//8u//+PF51u",
	"58WPr9zP2gwLHNYmK9nLCDefI4ZI2DKNDCJhTHnG9uWuJEtmFb5k+zPEVPicE7YJdxlFXEBifCOKwKKz",
	"j71fxkDFFv0oIfhMAlD+76X830/PFGzV//+uPr3S39T/Xz5zwlnyPZYYr5J2wFFGRfeNxhPIhKXqO2zS",
	"i0WMVLMGxmaRvJe5rXF6t8iBorfmPK2ZjuqidFO+IWGROahdvxc1TMqspTlowF6GRRr/uh6e/tzpdt5e",
	"n52ZH8God9G/PLd5TC17MWu02dmWklhs2Xk5bEiZLuqeesMShVJI8xo78gbaR7W+CY/dAkSYcUGTIJKL",
	"9k9kNaqZrMy2095IXmuaTxHD1OPPU/M0WSQWcstLLRKl2Uh0Hbs5jhHfcIGSAIZxgHkgGF7h7agVBdCu",
	"+wXOdA+XdE3uRycLraY0cyyLI+3BzBkKM8bxCnlN6yvEOPLxsZ0nZR+RZe22YaHJAiNdE8T4EqcN2JJy",
	"YJ4cSmKuKgx2Lq8GF5bYYv45Gowno+Gp9iV9f3k+kNLw5XlveBGof/1m536KA59gXF0GDGNX+goNnDpO",
	"ujOMUTxxksZ4jpu1zt0BPHKja6b9qLsYv4adlut28VNrsBhzEWF2b6iZcTTY/pMhtnkyx7FAzVkxHIM8",
	"Lwdpadt3DPKiEf7lmvdDQLnMago5nwW0Cg73m+bO4vfjJ8rT2/Nk+0mYLICNqeN00yCkRKBPom0XBvd+",
	"Ll8gz2Jrkp3R+Zwj3zcWIRZoibYmp1/K0Bx/apdFD8VyrXXj/bmN4Rp92UIxt079XW+nyDC69r4GD3yf",
	"hZBQInUq/IfnSmu48STkU7OrY70P5fIacZsilnwm0SNXLRqJ+UFklK8BYxIZmHOpujcgTkCx9z0gO815",
	"y27iMFkp5TnLYdWId9lYCueztZtt5t+j2NdiBgnxaUHKSczruaR2wKjPeSTCLIH81utL5//4KfUlvUW+",
	"KxCnVkJN94LVE3gdrIoGfmDFdIEJFAIlqeeeSiD/T90DPiXxRiJlk9DM47Ikm6i1eD7XGEikWohXKKVM",
	"8AR+8qiAdqNKmle7kdfHgCGeJd4rQLGEiHi2JqlFwdDDcHgsYh7snbe5NrGtiH3xPjEPaCoCnYbaeEQy",
	"RNCCCgy3geztGFER1Oyp2jhFbDvxqqOtDvgLlBccQ//JMPO94+Q9pN69R3P9NhREGC4a9og+SUrQMUIR",
	"FLC+NU5z75WWCyFUD20l1K1tLA/eJpgzuEi2WJO7PUfqbggYynhb4HARIbJaQVYzfEpjHFbMq+oCovN5",
	"p9tRcOp2/n/mJ8zUhREKFpsf/9t8Ub/bzf63/bv+UJuiprxzXLffgtFDJb3TlJ6lsY59W2APDBd7xpF1",
	"OzyLqN/oxF0ysH24ffK6vXc/bOzY7jtL6nqMYrV3e27T61kgEejf6Oz3g8iYuyBT4zcb8ypL8a/4IM9K",
	"fznq0un5YXSQw1fah/cQ7X2Q0ivTQ6pbw/zqhWClQw3ZbIOAQbJAwRIvPKHR+ntMPZKWNvvsOB6XpQvs",
	"PPuup6mM4E+BnaDfQQKyScpwAtlG03rD+d1Cay3mD3EwHjH/9WE+E5Thb/ng4wXRfuQ4Fj6h+J4koj7z",
	"qiGqoqHASCpR7XBaQVgzYr/dc/0XRawBxCEObP9i3Aj9ZsnLsazG1R+CKr/Y6gU1hYy+Za75AAWdup2J",
	"CWBpha1tNLRH2zfME78mtEmVriw7aJa+yXdd9R/S2Oj6IKWKdR3Ey9+ZFGunSNrXRhcKPjPIURC5fQpV",
	"g4zFNR85Yr7e9xWx71RAbIf+LCLwE53eyyF84R8p5a9NKVJle7SX3AlROwAvYVkP70crxeeDN5uH8ro/",
	"CI3rOGAoljvWi+1YYdnGW+qvkaeGpCzh6Xji/Xo57k6Jyy2eur3rrc+lO29F4FMBGk96Z+7qiPfl5XaD",
	"+uQcX4Tra5t6EJJW6nn1NDSfmkdO9Rk5FX58uTgUvNuYoL5tu+Lnh7cO93ok8bs/0XjyIu1gowLpRoQ8",
	"noFjQYiIZo/H40AcqYRlPbwfqf+zwJtgwZeZiOiaHPAesDI1NEdU1GdmyI9y4zj1bo/bmcAvz897F5aZ",
	"2SXAr5eIbBW1H14ow/XV5Xhifh2/v570Lz9eNBh+CBZBDugWbGcXLQdOoPGIljuhRSA2hyEKZgxHCxQk",
	"KJkhxoNwSXGIGhJDuavyl2NWBrmzKaSyMF+E1E4iSkcEDSZtWsVwoTKweaZaxVClwvC4qrfzBrRARJME",
	"i0NERJOgljAZjeMZDG8PsuiDuJxiyBHfLwZqlxZqELmV9qHxXJusPwGdz1U2tRCmcIZjnK/YEYUJcUxV",
	"HaS7bKbobWezqJmksAQ2O8wXfVbLtqFIZRfMRAbju+0Jp6tXQbQMfREe6eon5bjhiR20j177YHnVjVFB",
	"Q1qxa531Tq863c7b3vDsUidaObvs9d/0znoXqrj/6PL6oj+6fDO8UCX/PTa9RGTtIOiv3lKX8mLrvngz",
	"GvbfycWdDS9+Dnrv3o0G73qToTLOfTjrXTiXaPGkoDilzul0y7AlGanWAi6axLItxlDPPHAaYBJk/N5h",
	"VBsvjb3yU18NXcaY3AY1gTkxpamPg+qCNDhsMo2mDZy1OAGHuYAP4739yKgfGfU3z6i/Bh6bJjhQQZT3",
	"Lo6hCx66GR0KKYl4w3rr5Ei5zIMYQ7zku4ACraG7iBlO6+I3CRLewNXaJzmJxz3DnCUgnADiIce6tuYh",
	"JO0UIVaTAFp+9j4g1yWOdtNsm+SLOxtsgMJBkul+zVBQaT0OY8iCK4jjQCwZ4ksat7xzZjENb/1+21KJ",
	"rerD1exh9zfPqJh97/yYcBRmDAUiDd39/WWL2kbipy4YVEKfPX9PKwUxry9+vrj8qJ7ax/1Ot/PjK5WA",
	"728v1I/nz57pnz/Kn785s5rkFROb7VRbqoXKVNrtvB2eue/PT6jxZX+XGBtpVodP7mYnKm6YuqRAjpF0",
	"BneGErq6U3dPUid305qUqGYFruRM7lXfqbxwdSjMb6t6QVPW+Nwu5pD/7IEPoiY88pVHvvI5+MoipjMY",
	"HyYVS5x5Eh7MIEf+ZzBeJHzcUwFKKY2DO5yUbVhVYOAHFSZYYCjKmID7QUtKKgSJNWW3+2277hwXa2yy",
	"ErTQkZybbgOegzDAvxp4pIIP44O9ntYw8pCuENsoUXgP20m1Y1nTpciufXkx6HQ7p+9VSI78EZxfT657",
	"Z57K3Fwgso8RZRu0FXg1gvVQr5+PYNVgFZAtkDjc01Srq1CBdU/L23bg+3B8Oh7K+/O00+28uZy8d8Kx",
	"RWDmLhgaodVG0G0STs1QBzM1fwuAP6A+r4fypDPLSFursl5XqxvEsYWW+z0cuR1QcWkFwM8BsN+lWAhD",
	"gVc71aak3Oh66VFdQgmganWSnsrz/s/eUP6YDM6vznoTZUgfnA1640pq5oh7MzOb0Sm5r+ntdiGvgT1F",
	"ZUbTRplnicNbuUpPFpDMWR23WoiSoECN4EPIQaJ5IEf+ZaqcZ+5PSyFSX+HThwIqQzGC3JNuaUmZL4kb",
	"StIYemr+NGOi5r1AoeEQmby8jxp7rAN9QuGuMctyQ6uzRxUj6PzYOUm067JPocyylyeHtj2sxWeqJ2GL",
	"E5iFb1FPfpIMBHbpyV7LPZC3pFz4A93UJM0m92bspkUZw3sI5SkzaQlhvKAMi2XFVPPrUArOZ7+e95wC",
	"xxajuMMu5kiEy3uKwGGIUs9JnzFIwnbGLWVea+A3NTxO7aYxV0mzia22mMZ9WaK/8Mf96XHOBZztspvW",
	"jEP1359z6G7Pa1hHPnBb3pGPeC+S3K6T3uv3TS3fD1q4uTrrnWrfqbHb0TZCXGAC/ZWgssQdazvndb4B",
	"c57bRB32mwjV5Ol1kxTNWIjuRzk4UZwMJ3CBPis/azyNHv7W2mS+BxBYGGiq2ardN+mNlEf15PLK1DGR",
	"f6jUKxGVjONb1Gz4Afc8xjheioRbpTGjcQG3i+fWnqb929P0ji9wRf89RRbV5VkNBzEN9tnCXRVHLRw0",
	"qoqa2ur0mDjzpIG2S+6Wk3np0qzFTFXrH+9YVKEUqpurYQ5BAymVcxGkUOhb+453iXtAfbmYb+ntgt9n",
	"rLobxzt9WwryzllDU/a+XJR1i9gMMcqDW7SRF9whlEUpM90xN5t7OS4S2W55CEPKARfuPz9FS5XA4TDm",
	"3ijBxMr4UCMI3kZhUwtd/7DdcL4kFC7I2PttAZiDmGP/WoA5yItxmhZcG2af3Gk88KyhjWsbHAmByYLX",
	"0v4mXEJMQoaUk+eBHuegEAzPMoH43lWgvLqZRx6ubFxvJtjZTcutH8IiFEIewugeNiHHurS4F3C+DJTN",
	"4hZtAh5Ccl8pXJU/qY/xkvO5Reuq2a4OHb7l7797jhIMM0ETKHAo6TtL7wkDnC6rSXlUPp7eSGVg7I0n",
	"uhy3rivsLBvcBog1Lj21ZgRttr9FG897Ab1FbqXTly+oXVFOF+IckG+JvoNcGwfnJ4dkG6rY+WxTFRzt",
	"OBr7+cfKbXjvmk8zTDxOaDD7hGMM2SZIIYMJEtU4VyvjF+TIkztKjl7zKV23yQ/WyjlAhd7MGUIE8qAo",
	"cuxIHkZ4/UHTjnmehw/IAw6TGQy03uBpRbnISaYu7teXxLVIyKrStro4RnE9pwyTEKfQfVSrwkg7UJYb",
	"202Bb357M3Tn4bpr/q5adKxgjBWlW0TRVPDEOiCu4xfH0WHOjyqOyTzxHEREiIe+mL3QZ+2zt1Gu07WN",
	"RBkgDO1UF6Y+JYhzuGg0pRTDmLLilqGgdU+PhmwPfT/ODcNlTeWlMNzTs20JCUFx+zqkwRLByLC/vW6O",
	"pUjaTaMCqVZtq9n/J0OZLw4q05M74WCKr+6ZO4LuA12LfitUWEse91PwGU1Q4jPfyq/+yLpMLKhUb/yv",
	"JV5zuL9UnfLOxqJSp+vqrDfUbtDK98HDCXkiUn/doHpukdRb+KzP9zQEPYK7BbiNx20QUjLHi4wpdn8Q",
	"+NekENWf9nT+tqWVncb5x2BW/9kE/XobuZeyFCJNGf3ki4hcvaqPmFz9VPddLkxT2vOG7y8avr/0xWSu",
	"Ic6rGnqE6LwRTu/IRI1PvYuOnHQ3P5BFSRVHI5T4K61KAX6/bXU7iZSYoiCmC/eY5nt+2JtvQpaGMQ1v",
	"9+zCBdxrFiuqwvFRDaZX4d1YFtVwmihIIIELVYLOl9/nle/vwS2beb+tXtI1cdf9tGisJBonSWH+0Iyr",
	"TudKINmE0Fek00RC5U60rgY7ATF1x63crAsU+qlNh8oohfOeKaRyj5VdDdivwJo1MJRSjgV1qh/Whsq1",
	"mo41ZkPTQq8LtUz2YS3E5eSihzyIu2J7B596Dx2zpqbvtRBu46FjP4raYKgBfZu314NCaufxeF8wMDRn",
	"iC/vbqs20xzJQ7gOhXMqnFuNDpKnFOXlR7d8iHRipcFo+PaXTldZUtr4sCASsk26ZVhoExYqaEpjutjs",
	"mcGz4FLtox3yYs7te5grtX0HnkKG+L7iVnVU++iWyPYSjNwVR6Id4eSND/JIFsbb8SNXvfF48n50ef3u",
	"vfEiGg1PJ56nByg1/x3CM/TmuJU44ohwLPBqS+EaDy7Gw8lQebwNL+x/nQ//x/vukWyDqvIx9+/aNSqe",
	"/fqq0+280y5e8seT5/kv/+h0O7+eKXe7X//5xjNvWk3JZFuS9zqRDmuR9sNuBU7lGhT4Y6y9x/U/Ga2U",
	"RK9YhqiAroxQO23WkBE5XmPJw1Z7YSikLMr3knf58fmLTrfz/OdOt/NC/u+V/N/f5f+e/yT//1L99Sf1",
	"5+cv1IcXP6ovPz5Xn54/e/HqZ8+E8xow5F8bIFE0awCGvOIQW23bbCttGhrwJWQo2A5Sfze4GIyGp51u",
	"Z3zuJlZOYBrhyvPih+F4+EaR+Pthvz9wJ9+TXJD7ZOINCT3vlb2zj71fxk0vltvbeDs8G4x/GU8G5/KQ",
	"XJ5dn7tj7lc0ruQVuDOdeAb35UzYZudVFtzI1h80ykOdnYxxvGp68K8up3HVKWIJ1g6y9/Rwjve7gP21",
	"gfK7qlGSsdya95BHagHZVcOnZjeOSCEGpaLoRcL2rptNhB5sNCOO0RBxjlrIECmjyou3saHkz/K2jVAU",
	"/LGicVCcw3YhfZXBDvIc/2CSixRA3g9Gw8kXEzqaVnAQ8aN+Eq8gUt+tSSTZS/KAZHM577z+t6O1Fe7s",
	"Xc1vLlHlAGPWyjb14HlQKadp6r3lnYPAav4wKDiERNVCMqqH6V5yUP1QDyB8IKlL3o/JxnCG7h61p5dB",
	"10Slsy2NC8r5ruqg3lmgGJ/cImUDzCMfcKyTFfmuExPW+FCukjquitGNT+rS8SqSynDY6FPSBCcVU7jh",
	"AiW+XGg+KbnGSmHmlh94x5O3SSXMwPy2RlowUVd5brJtG5TcfpOvx/Y42lkk0vEKy717v9TxaUHL8L+d",
	"/i9M/1wR2auzx1vFsUW7NLUGk4+Wq+Nb/eb+RAaOXd0l4MYCY5tdvazsKkdgm+XBTNAICRSKwOzqLiBS",
	"v98vt4h6LQoa3YIW7vD+Bl/adMncQbXbfFzvxw9zHmTpgsGo8jS81UgK4VV6sZbgAySdz2N83+wXB7ga",
	"KDmKZZQQO0RcSb07dYU+DhIRqrfQrPFJ0XOF2EbevSx54J3usXSGCmngOJaT0NWXp0mG0hiG900kjj0Z",
	"v2tsSb61t+dtzVvjOF4hdhCfgBla1LoEeLxqEHGfzzVCt5F2B9qWqnaKYbleae39eQHAQ5aZpAGe0O2r",
	"3nU1m5E/cNsa8TAPipWaFftBVdl+PIUelyjKtIfGHva4iCYeP7W1x1Msc3sFJphknhw+CSVi2bLgXyW5",
	"aZOaZiOlgRZYRnbl6lzIaBRNizG0TF1Z5B6d66RaewpL1qjVzuyRbT3m5Y+WYlKs1eU1ZQ1zkLoKj7T9",
	"eWmbwJQvqRCQ3x4ogWVM10FNXjFjGbnDfbBbaK9F2Rc8RwInKMgIFjY3f395Pep0O/3eL51u5+Ng8HOn",
	"2zm/vJi873Q7vwx6I09GUTPaCsYZ8sbwYbLYjR2qGBhrXzDuRqv+W3ZfKvZdvA9L3Tb5IoZphMOCOvei",
	"YsOoW7Q8TN7QR3p/pPfPTO8ZKW0Kd86MWacq6FcQo4r6fW6VBdTYWNt6STapHmZv28NXDa4NwbN6oIOI",
	"Iwf13Xt0wbufC56xtTmXJ7Vxg6hAxWwGKMYLPItRkECSwZL3c4d9XDPpRhv1HpNoQX+HOx5q9Oc6GHdp",
	"BaMfdPUvjbsE4XkExaFG9qQF3Q+09VRX9aVxvarsB+pWs1VRfb8pX1QMD+P3Ksrt/f++GExOeypo/PK0",
	"dyZ/Dt71Tn+xrRAlypzvy/sQQE08wDbhOUNw7MkOplnMGU2kapNnFHOkNIg5DUy97WDn/LUXpfwlKHMP",
	"Ep/k5vEw0b4lV8N3v8ofZ78Or1pdGhFmaCf/5NW1Ioqr6zN37QOUzPx2tUMLnVIjDVJEIgVqm8u6bJds",
	"gbRjkqfBfSTYRmDuSrTNgWExXSzkzmK0QpXkB/3Bm+t3ymfg7aVcU290MbyQfxiMRpft1lOXYfauhEuQ",
	"CKHQ6dxRwHHVAStnHaPB+eVk0G6ROwMGurZGYJWzvMso6q0wgZ9a1k71DYDJXgNIybcYIc/Ls89OKIk3",
	"QSI5UI6iXH9x2KR2ZHupevK9rNfbnNDl57Dr7jQeTBSa/3U9HCmP/XcXl6OBz+WpTkOTIjjDoQi+UVVN",
	"QkDIq46SIKUxDqtwvrweqdS/p9fjyeV5XZlghgTzugV+s8DVOYcDWwZvz+x4ilAUxDjBbcN8d2XmtiVK",
	"gjpbTkVW3k908z7T7YpQnSbJWQta1kKdis5e8nxlSK3W3EfxqA734u56RnWg5y3Uiu2d2H4tBjBNUvP2",
	"pA8vp2/D64BiubzFK+euSiz3wHJlZK2s3gnJ1XGeNeN4u8OD42d7pwdEj8+SbbfJS2ARJY+gqNbKYWsS",
	"bTHgn8Cwgl3ufYCh72veqBn6lZuhH2Dku/OymkFfNtN8LYpqlMac9RVk0UDqtfhqZSPZJpZ6K0ktqC3e",
	"vYXMu+/i5cOzi1rCPCDvONzb1qPF5dHi8mhxebS4PFpcHi0ujxaXR4vLo8VFpcNiQrKifI27ytaCwXTZ",
	"RmfZGklrVeXf/5MhnZVpz2H89pDdCevf/fMkhXpDTpF9d/L7iJ2LBUOLaj3PFn7hqcmD7Ezex9wkdAAv",
	"qSrxVJBWC/7D5KYmc8ySgLEoqI2DDNMswCRIEQsREVVA2cFUEsWBF476c0pxNRpruwUWDdEH20BwAopm",
	"AgUqPeg6YAiGyzIXX+H9k65eBXl2UBfz5xsSRodJlZnnyd8rb629Z3stzg3LBgmNDvNWXrvcutr9/rwe",
	"KsWrUgn3zz3LI0Q2e2YRhZ+kpOims+2sEiOpDYw+ykN7uU8p9bLy3x0qaG5hrBapB1HHH5F6PEg9nMM8",
	"C5dePSC3a/hC32O40ZTlb4GEP3A+dEurbvOHquuurCBO80e9jUMwuG8S4SoxnF/2r1XSh7FnAV6cpzrJ",
	"BIJCMI/GaFqkiCW+lCgYiTskduqaCpze6kj6c0K31NntBt7Nmc/+vOl/kcAXnPhI3FuXuygqwrag58r8",
	"oM50YB3q+oPvfZkpWhyE4T+yhkfW8MgavgbWwF8eRs0IQ8T5ViW3ajktnPorbXlxPWN0zZGHxveuxMVR",
	"yJDwrpILyuACBR7KtJ8DX9YoRCYCJGAoptBR/8h8bzKNVIcxb9b6b09CSgSj8Z5DeCwrOxNZmmq+1q67",
	"iH9l8HuQDyUoz5jnTwjqwa/Vcg1rTXuuQ7IN0Vr4FPaYeyI0r0V+H4zqMRpR6ih73gqn+fB/daQeBqX3",
	"R2grdN4Nmd8OKl0V+/fGpK7Bfw9E6rr/fzas9A5ozKv5/6WxKBBLMFEV5HXeoV2Upjhqi42d0Uwai7Kk",
	"3N1GaUCwa1o7jZYn/LNuPjvLxfNnlgOP2UrdeIfQ6fxVcBx4rhGOllASdgDn6eGCqxpqmcLskyoSy/e2",
	"P24bCl0Bq1saVkv1ce7ttqS+I+q2ebY1crrcP7wuJTRCK0/ef8oF9OiNfpWONhWvb9qSJPMEhktMPMCx",
	"GgQ1uWizBHryVmUpw549r0yuvvY51QyZl1TedBYO5vb2eBYez8JXfBbInB/qXogw414TpJfMaym1qBa5",
	"z8tRCuM4KF6yGl3GTIfcBtSmPaNU7DeD6tF6ClMvdM+dyxOwZ5c6myStqbFn6v3coYKlobuS7JqI80CM",
	"+pE4H4nzsMTJk8NkaYQzz60Cs088mYWUzN2GXEbX3F8p885kvcgQF/S27qNxZ3UdiS8vP9S8c4SbMEYz",
	"TPYkqiWM6DqkqS/B0ZKulziKEFFp3xtFBM89P+eaxlqXkTSEWNJhE7UehJU+UusjtT44ta7RLIKrg7DX",
	"OsraHyv+5103PiwAmD3p0m+tQXCIM/vVgSCBTAQCcXEo1WSnJkY7Hwa+r5TzxZ/K93kP3yrbd3apAqTG",
	"7y9V9urTy4sPg196Fyp+4vLt27OhM3LCPuEabQ3v3yVuDyTZP+L2uHB7EH/12kKdEZ7PEUMk9LifYzKn",
	"LIF6Yl8TgdjK9zWla8S2vYcuBh8GIwnEs8HgSqV371303/zS6XaG/bNW4Kux0iczzRU5Cg/C8zSL3btY",
	"o+7muRMq+5ltLbdxVwskzHK2HsnaFf1xjGVi/ytL3ncIT6IId1P7/bCc1fWE6FzsPdDJEKexjou8R2mq",
	"yrIOwX3vRGUeMqo/HAfxmVKVRdpbRkonqvaXRFNa+ggzrxHYVDLiyey5x26PY+TtrXQd55eYhjBOIBc+",
	"v66YLnYCqFWgZLdzPrwYnl/ryMnRuYqOe6u9OHWE9W9uA9EMUw5jDPne4dGyp/9poPwezNwtRJysngcw",
	"E54UBJKYLJbjqALITYJbh5sgwZ/CJWS+OMM1Zbf+CIo/EKNb6rHzSbegdudZIEl6oIiwJMkIFr4YESJg",
	"6CcnL33bpLR7r9YBXjCYeqS41Uvf3xWit4UdSbb9H5W403OXZ3xZX9hJfmd41ZD4Om/FqE5GkU/fG6hK",
	"kYNxqwD+1UtlefWS/B849r152URTkoWTavjyMAV6JEecw3DPJBRbSTd2EXmL2Awxyv3Hto5yclz6ezNK",
	"RUwXPlMKn4s0iOkimMMQx+ZMWNTU7w3OVR7v67GSAHvXKs5ThQs/y395nv/yIv/lZf7Lq/yXH/Nffsp/",
	"+Zu7FGm+oB223Ol2/nU9VOkD3vYmih/rjBZFqosPg9Gby/Gg4NDm54v8l5fuGu5hOl97TGwiTFvELZY0",
	"5qRAAQUOdazm5yhtFCEuMPHzqTwYtF7K3Vl009Y+R2Wbz7w1XhO6rr4/mePYiBa10ndlLCO7q7/FmIs9",
	"e/vE9u1WreLVrVU4NKLtZd/LpSvy+MH7ws65QGnTubNx0AgTjkQg1WMHLlWqh/3wkI9mnPxalF/19H/e",
	"Bp/WbLYmptfddYLVPZedEcxTjZVniucFcyTCZRBCgRY0zw+yWx4jlyRqd+4ZUZ8EWwa40yi+E+Fvb0Gh",
	"mH0PSOwWKlVQqBmBoHUgcHibZ9S8sx6nSr0GEZplHkF9RiOPXKuX7/lojE4+oRglEMcezW2FGSV3MbLX",
	"1RddUoLqsuR5Ra9SXtASwNtBb3LtSTBUI33aNQsK3HVqqOwQMmYdlIt3wGanaT/IvVDlKKQkgmwT+NdQ",
	"tvFOUDZpM1UNKj1fbN5fgbsTM7oIOYxWkIToQCkuzGC5gdTxFkwoUdzX91QsqMh8T4szSoWuSedWIkNK",
	"OI1Rgkjme0vWDfjC9ygwyxa3iJGKmmrbWf4TkaDOEBCjBQw3QYbdnxMqPCearhGLIEp8ihBHkVZNPYKC",
	"xKDx08lPuNFJznvjycBdnIsjhmFsoOKt0YRhvCXlb4+g8jnZU//jp2dS/Xn+jxfq58u/v1I/f/yb+fvz",
	"H+UH55LWMKUkYtWQVzurE4MhmkFfJsIsjSmMQgZ5U1Cm+wDUHJU5giJjKDDcppoYtT/oX19Jhjp8Mxqc",
	"vu9dXAykCvbP3vBMKv0fzu1Un2Yk55Wo51ogghiMD/RkAvkyKDLmtOOSt7MogW5zVQzJIqtm+Nm2ku1o",
	"p2+DwflgpG6coHc2UG9Nb4PT0VD/MhiN1M8yG+Pb4OJyMlTPUG8Do8C+DXLF9W0wHAd+O6NehIq6Zh4O",
	"mqA/fCw4w3ZiwfbGjAwHe8fBZjhYCpFyf9xt3oIhHTnvIXsc1A6x+uluW+JwgYKQxnEZs79HsFFOxRwJ",
	"SXm85nDFOESEowrB58OYbzXHhYhUY/swbgElqHZN/xnjHhzUlNvGNd0S+CmlsccummDi/5gyNHdb7m35",
	"TNQ6e2/D7yBP798c/BhSssk9DVdxxTbjVOnVdE/0dDXr4ctMRHRNPtuK8gn9a8o17UPcaHmV5kYbuir5",
	"Z6VHbuzgl+2qe67uxrVrMReHeY/RbN+nmnpzfxC0rnHjq7Wa+y8Sf5hKK13RgokTZJl+53xo575at9Fd",
	"B5leX8nRo9NOtzP+ZXw6cWfv3i5wa39pyBhW3XgdaB7a6e8rBI0BSbhE4W0AVxDHZZrHu4JIMOjMz2st",
	"TE/7RE37pJi2ZoELJIp868/q8vQr/0qXPUaPY8osVsOY67tITqW2VO2ld+nvdgjuZa4qNz21hbIbqvww",
	"7LXpUUWqosxv9iNU4PmmJjOVZI3cnznRBPs7HNFUtuM5Rj6nv60UVlrN73bGZ70PboNeQknqsR8klHhT",
	"HREqOcYaMpLnLGjWa+ruF/MtS3nU5v7ZNpJIKePuybD8lxtLKMGCMp9zvBFwKvzv45veRGqw6odTEzXd",
	"wiRqJ3+Y9hLSzJN0K9NnwKm/0cJAeYcgp/JIOQ8cP5R6JQTDs0wUyoJjlAp4yjUUu2sE5DyLY78ldtsX",
	"p5J/mGaFxO9JcUyzlDeGf3imlh+CLQNpxYXm1nf9JjhklNO5CGCoSu/6wp3rXg7MxyDCvOam50sUe8zc",
	"fJlmM5O3q5mcs4j6DBaRR8ZsJUlaxOilVZ2e8L5P7mqMbXrZ071SLUfV7JG/0Nnv9ztA94SdvRDvalOa",
	"BsVBrb7oSeR7nouUpFF0230SNXRT9465O4x+By1kyD07e2qFO6e5yyZ1HSlINpfzzut/754YB54c52HX",
	"CeG/WyzFMh9rUOSrOYjF5vhZ8iPDPWaGu0qCMKZk6xD5PAdk64OkqBd020Nm67kwpjDaehUbvB12uupH",
	"cDo+73Q770bXb5zCW7O/1QqHiO8XSLFgmYqFxYt2QfgoqZp+7NJIvrOUy+nb5aOuJ6du/TxMM95g6Ctw",
	"5kG/BsaXFhCjbRvFxfC00+30h+OfO93OaX+kav18uJB/HPU+OqFBWVSb8MDCwCpphFoFLvWwO4TAwuA6",
	"mGPfa+4fKxo3iDHby6lf8he+fL5OdC+0/ABV8UblNb1VlMSdky7vWZi4NG/QfQv4GngXUukKMam+Y+u5",
	"wHaU12MaF4B9lrEiYdvmVrpWFzgOkRWz3OWdhXS9EpFx/zrztI8+YOsXLA+cD1O/4/HGO5Ybb12Gqt/T",
	"AgkF5IIy987UI456QfPaEO/mRNhO7qvsswYQ+YPYEvJglfA7l413D5dXNLOS4d9hEI8vsXfKdrXdvZNZ",
	"3cuVu5mDGqHwR5a0wO9HU5+HLJ6EDEW8hirURYGZyGAcmKwh2wlYbz23huqv6nXaQFljsdyqzf6Vg+gg",
	"gSFfNQep5jO536svYoLzuJ00txR5XNhWaOub3tiIke8G44mnHkidzs+ooCGtOMC9n0yuOl31Y2x+6t89",
	"MVf+dwrz0Wyz5v6qwNUF+D/mvKxwq9X3+19kkol5XmDyuRpclysral73oW5gtKeH/k6xZxcdVL2i2is2",
	"DXVfzJnaejx0x39W4NQIzsMYzZvdqmoE8cp6GEro6gHRq9Ya1FUyapHzorrY5j3ROM49mKsrbU6n7hxI",
	"i0ct82W4R/DIRr7pPHqfFZ3smeUeaKzxD2wsk2Q+a55y50QZVh7JsYSmiX2GHKtjqCCsBlV/KbovhUg7",
	"f/5p8s/YsHvLELrojcFoMJ7Msxj0rqSmtkJMR0R3Vi9ODGoRgSnuvO68PHl28qxjZc18CsMEPY0Ifypv",
	"M0QEDqF5xV5ompcwVEGhw6jzuvMOiV6YoD7hvUp7OSSDCRLKW+Hf/+1guYC8Cq0+BB1dsllnPEqg+/5x",
	"96TzuZaf9++qTe+Onhbu3D25vEQdHYsz/Juqk55SwjUqXzx75js+Rbun40yVWJJ4efXseXP7ayIxQxn+",
	"A0WazuBCgrgjMXcSEX5SxdxvytVB36EVhbxzqng4gKB/MQYV9E3JlBRfeYpCPMfhbjOg0jdggskCMPSf",
	"DDMUAWt2TAmIkIA45mBOGRBLBDjE0ZSkjK5whBgQFHANgHkWxxtgavEDKZkDLORCOt0tmrui3Ed0chWI",
	"izcmLk+uz/imwbSoo/30d64NEiUm6zichGsQER5U4FpKCn+qs3iMiP+z6zvP1X8ZqYNbp7xKKe+Q0MjT",
	"7RQyYRwrishRycEaARMophr0Ts8HqsXpEsYxIgsEIInUOHJTKBR4hUBprp2SgobmmrYkJUjaElT2SsB6",
	"iWMETK00+QFWx9+hFA93qvxjbPb+1aEQR0//i6M/S7+CXbz11d8dB5fOwQ2ObpzHS3dywW0YDSMPZzcu",
	"g4ZTqks8x2YulVp8s87Ge7xcdJ8LsAZUf/FLsHsXirBe4n1+rGodJv/AbtH/I757MwdDvVZa9J4H8yoT",
	"X/hUfrbLtTBjHfvlKu+wSkiFn0lUm37hTVUX00Snuj0oOgD9AJPpLZ5MyU1EE4iJJLQbICU5Rdr6j0D+",
	"VRK2vPk1GEC/GEm3OZEEfzPDJNJD5LZA+Usk7/8UsTlliRoDE4FhnI/+O7W7p+sbkFvTPJ3xTm9wzRF7",
	"UkilEQgZUu7SMOYAsnIVdCbFXQBBnkgK6FwFXSmahMspwdw5KQxF5lox5/ENQFzAWYz5EozHZ08nZ+Mn",
	"KaMChUIuxAhBlHAjBYH+KQeYyF+npBaaVvToDTjr9644CGOMiADWFznqzGxQSV3lpydTMoN8V6LXk4Ne",
	"P58NDOeVfqrXlGx344BQUVAOirpg3BufgXfjce9qCCTyOFjjOJbrMcBDkd5KUR7Xmobf5JoJ4mC9RGKp",
	"1Ykc7iqUggNKgI5FnBK7M1BonJyNAdcJw9QuTLxKV34IRoN/nQ5GExChRMqtmAOOxMmUTKQgrIasABJz",
	"YBgkitRghG5/L+hLalh4DiCYwcjXqKslbr06+QEnCYowFCjegKKQnATQcA5yd7DqylVi+XzhwLtuLXir",
	"hXfBLBNKtEeMUaapHy8IZQUqEJtRjoKYLhaYLG4AJlIT4giYv4AoY0poXyKb4IGpeKdHyTgKjG0m0I1u",
	"gKkhWCLT9FYRD0p10J57YAlXaErk+ClDT9aYRHTNwYtnz55VOE7KUIpIpE+jbC0HAsb37gR8XCIyJQXG",
	"ywZpiqCckIOpTuWJuWBKK+4ABjWZLSGZkmln8D+986uzwTR79uzZ36pN1TYVAgLBMglbuVF+Y2isoimZ",
	"Bmb1XFGPWErEFJe6xKK9VknV8qNEYJTAFMxgeIvkEQqSjItAHqLyqE2JnAbBcLk1V7dQyfQoIQwllSxp",
	"FkdqiBjBAvV6N/KyNnXcbxpw3ZWsgyZQZbuJN1OiI7iN4IOIYBjxHX5SmAoueuMCFHL/BZEr5MvzazpU",
	"sATk/oEOa4o3AEaRRCmjKcNbM2uoFDNN5DQVgDOkg9siwxwnLFP2tfc9c5AMNZuFBXOGEIE8UFC8ydfL",
	"8+szVE+WC3kV9vo7ZH0yJZIkraNMSbwxzdSIkQTVGhPJKr+TcBPykowN0iBDU7LCHEvqwgS8ux6CiNE0",
	"omtJUn01rFKaq6up7nNKMAFWmiGuLTEQxJBJBT6Rh0fuQK3L3GJY3jC9PpC/yG/qMswBKyeAIEHJDDEX",
	"kCWJPJmSCJkrr4F9GM6az4b5DpkrtpnNCBIKXttrsS8gRUaisqQpsRjAd33No568xYyLJ2Ms0JMLmKDv",
	"TqTYTp/oRRv+rNBVXFxTYm3EJXQo0OVyRMAQjJOb6oINs8YcqFSo8lrZAZ+6ZssjBlKaZjHcgqNT5hnO",
	"C6gsoRyHFEAtQWTYAxT6wxJykGSxwGmMShnInAUNTs2Yi29qXzmay2VqBhLlxCUHf5LbGaekIl1K7p1x",
	"BMSSclScu/bwb4Z9yjAJcQrjm3Ldxd/y6ZVFq/+EIQXdKSkEfA5oJjiOFOWPYTKDJ6A3V9jZkVO7mtjm",
	"GMWRQl4FDhXAlQuAnNMQV5v1+sA4QEyJudEqbFNtkHCuMtFZV+uSrsFHzUEAQ5ILrhAHkqTBWJd4BcMy",
	"qT0QVCGDC5aFAkB16L+ToyS2MiBpRGU9BcrvfJtKlVSskIPmc2P1wx5toK9hdarXGyOW35Nc09V57kOf",
	"L1fbIq8J/gS+H7+9/kEJusZOqaFg6ujeAPMLUPEOqpvhpTlSQYlTswfdNIGbKSFICxIzVEg8ih87mOUS",
	"L5ZAjkhCrBcooajSIIeGZFQ7QxhhsVkOKCtYLckkx5REpdspTOQNT8AZXaPigBfrBCGUxKo9D3MRWFAw",
	"hzg2dxXhQQ1I5PX4nwypi9nLQaZEsxALRvKEx5xKSVMyTkWHg8nHy9HPwWR4Pri8nuT3fBxJOUOd8Kkq",
	"DaTXJf8ccMjjYM1gmirRMkJzTCzpXnUVDM7nOCxUBY4XxIjU5ldJj4iEbJNKpH7PEYxR9MOJJo28u2Jq",
	"EUVaK6EML5Q8PSVzRhN9joGRULnmARIWRlmRE8l/ZiRGnAMs5P5FRgiKY8UcJN9WKpdRxdRbgdTRM4HY",
	"zS7dX7IFJPgPU0pC0rN1eRG0VgSkOucCrBbN9cBaPpPy/eU10IY4fa3DCKjtCJoq2qVC0EQRn8T6qH/B",
	"T8A4hnyJOPh+2nk67fwwJYXCCzmIkDJPKu4e41sEbk7NOvjTsWbFTy964xutXUgZlMvhpuT7aWc6nXZ+",
	"AJZGjHgIUwTCJWQwlEMoZUOCH0oRwQi0lJ2AN/lAUkhTKoiUdVKGJEKhKO8glRlKS1EJXixF/gwFIppp",
	"aUfKvSt5Lf0ngxHL0jh/UIC3yDAkBb2PhSiQc2cwiyG57Urwg1ro16jjmoDA5bWmAyVkB0ZUv8lVPbn5",
	"NM4kA1X7nMNQH8acU5sraAXZBpOFVMuNrC8oUI5aYDzsP81w9HSBI5Do4wOEEj41ZkLK5JqASZ0kxa1U",
	"jUD1obSYmFNoilAa041FaDtbNRXClbYpIFOIUrcgrBqL8jsvvwLyfmvIcy4TbywhONdPzE25LRxwJDi4",
	"0ZrRjYTHjRTSDT1uL3JKKqukaSqRNy/7S/FwCclC0+vNWxhzOZYWlbanlpStF6W1ZptPFiNKTqym0+tS",
	"+5H6tlL0QEbMdIUoigBXrKeU/dTNaXzeDQL6ThG5a9ulbtFGwFkhExC0jjdPcnrt9afEiA85QcuZcu0s",
	"OgFDURzc/K1vnolMqhiKiz6VEogiVqjlrwJNHLEnXjua9miJTtym7V0D6UPYmyuzlG6CR2Bo3rbJOizM",
	"TzW9aJNCHkcYpGvvy+1bykIEIDGkWphhC/mxIIDcamqu9RCSwjAoxUCG5gxxzRR+3hFSCy1e0+13HGgX",
	"UUOHJ+6X2crWTtXOJnJjPb2kq3XnK8CIPoFFsmsnFkZIZIxosWhO45iutWZSStpwRg0LCTPGEBHxRh3q",
	"wlLzWl0gWrpVML4BwytgcqNJtJp+wGoimZhm5bnlQuu/RGnaJ9sjAm17lyJgbrJvPZgaa6SV2J8ryl85",
	"i5Tj1cvWzdiMiOV88v9cwCTVC/q5f1rssBhJ/rF5fmtYoB9HbwqwWH/UMlH/1AAAKnOR+zCY6+DmpFxl",
	"C1LWWoxUpL4GAl4gEfCUFOnxaygYyDaSLop7Znx1URjyGFpgLlDuwFFhBxpCU9K3npCqIpXhO1KJkSIh",
	"Q/NYSixqFFGyLn2HqzFz1G5dem2YzTskxik506n4vw4MCZNBxImej1JnQgzMM6LvY4mA74oRjNjDT4qR",
	"vjsBOVNSAsYumH0SXlvwCu0ffPTArcjkQbikeUhaLSfPD0IRPrllhm8DpaHs8UZ3ODXzfgUAixHUnrFu",
	"r8Iz+dn7zqsPudLdtTBY8IEp0X6xmjv3+kqkVO8PgKEYrSARVU0CRFBA1VrbhrTdS41vtEBeEUCVIFu+",
	"BMSbJynDKxwjKe5LufVEOT3e5eFX2/L8D79qqzA2ynghtp94XBsr8Fbw/EzSsELt1yMM5wbOe5xay1wI",
	"zChtju4F5/J6/4pObcW0tjfAZG+Q994HUGPI44+m39cELR7vDaPx+GwvyPD4awKINj94gTHkPEMAAkKf",
	"aKOa5OvKb0Jyz4xJcdsoltoojefqzyoAQtkECUGx5e9i+k3JjpVcG2/kDQJjvELKWKEfpsIl0PbYJIVK",
	"dIQErGeSQ4An4mRKzGtebvfP/TUKMzjm4KdnQNfM4Nr0ZNRgGP2un81nRlRKZq9O5G1kP3N85xv3/3zX",
	"hh4MhI+RGOZprWvbPP3Cq56njS5svbdXha0xTyBfuo3h9Ea/U+eHeXilrKsKnbKroCdASzbKKgy+R0kq",
	"Nqr5D0VDQQGM4ykpr5dh/gIgZUwYxrx81FjStewghUZlgS3exlLEEqy8fpReb7lRGTlFDjkavns/GYMn",
	"6unrCRebuNJxSs4v+wPwBPROz/iUXFxeyH/0qVKtEpjqV4llQqPAEGu5sLyEhTVefvrMqwmS4pF6wpLD",
	"n0zJ1WgwHow+yDmuGFIKGvj17Rj0Tgda7iIwyRdve/JQBq4ux8P/kePov4EE8tspGQ/Pr87kcNoqZC8F",
	"Wn5WxVMGJBug0qMCLlDKp2T47uJypNZjbUKPZXpXfJucBklD1g8gds3TYzI8qtNjzvlTfRoaL78zc06U",
	"Z15+7SlUl1YpxEubTXFElpWj6L4o5+kbtYrjuB9L8MSIiacR5pKg/ApQXzdQftxA9fHI+fKTafxQhCan",
	"CMyKj4LW5IIq4Ky1Oikqg3EMxCZFmhvKThxgEsZZVHoz5VhBkWU/zU3SyhLtpjQ52hFYgZxQ2aoGuA+A",
	"gC5WyG1nIm2Pl/IMlrJaPTxOy6mPETIpjXHYCi4aHHn7XFsnkXF+XiIwVwePhJv8bUSTWD18rvIFHBl0",
	"GCoSd7iZ00g3sJiTgckSRmCGtP+hPkk1XMuM8qBcy2zlKLlWGEPOK+TnJpW83Zdffb6SJjE591joaTaS",
	"C8pO+Wh7hw9ECWaKY5KYqhAtyMIINY1kkbd7DJL/MqjL4d8cGk/MQcidI+m8CDqJwI3c2o3S74aFE0l0",
	"0wVYnhwS8VxaMfEHllut7qo8we3xT/zx7lW6ebDDZqY4puj2Ksa2D9seYdA7qJSX4Ikv/tma45uIe94+",
	"GG042GOU87cV5bzDPOsMbu1OWy5IfP6j9sAc9IhCmBs4qFKplAK5h55p/PJRVIiKxh9fqxPGbm5deUXs",
	"QpM+bkaSU07Uoo4aeAJp+cEtR4wRiQAEspHRtrQf+b3u/wkyBosHpmC56mOVADKxfKprtOWFptwI+IAY",
	"nm/KeHJIosK5yw3oTCxP5cDXctwHgnImloG1+i8P4UwsbcjmnsCBoLeI+KH7Lo/nhEC13I4mr4aAm3gc",
	"ESu3aCkfq6BKnCAwoeAMr1AXYJK/v2kXbj1sHuuBSR4JHuX+4+WL4ZQsIdc2DExMkKNahPb9WyiJVsfu",
	"Kkd/E9QqBOPm8ccUGAZpxlLKEdAOKU8jrMaHbCP3t6Rx5HHdVIs98ZJVDq2JAuoDktYW+o6OvExQ+x7+",
	"GiZXVCaWeUS8Rt/gE0zSWIkXTHsoqnAk5Sz77ykBAID/6h/yv2kHR9POazDtXGyWb57/88fV71e/Dz/8",
	"/cXm159CeP38xfuz3vMZ7f8z/PXiY/bhX+evlv/6mOHN9cfzd79O/ngxiPvp3365/fvfommnaw+rw4f0",
	"0M//8eLk+U9/P3l28vL1q2cv//Fiq63lkqQ7TC5/HlxsNcpje2ULFYWwPYQ8AgEU8vt/p53/JY+E/P35",
	"j69+/PurF69e/PTsb8/+1H3+nJLf8iikfOab/IK+ub4Y/k8wvjz9eTC56YKb0eXlJJicXll/moyuBxe9",
	"cXBx2R/If59dvhteBFe98fjj5ah/AygDN2oPN908rkQF3hCwXkKxnT0iQWJJIxXuIdlErj1vaAbWkAgV",
	"J6Qr7Cp5owxytjJhFG5Ukj66IFSCiXIeNYNLUaP0s4ZskanwPJss/l0C9N82vLtg2vk/8seEZeg33ei3",
	"KfnNKa5kYjnOafnRmPMl+coMhrdZrZfCG93iiy7YrNK2O+1eFdZCD38/6BUckXmnAEmJxafwj4wh5fU8",
	"y8JbJCqPrT6A9WQniWfT5UHhp1YYWCs8HlCeqLVVATp7sS8037z4XKCcvThSOM5eVIFYXp/NbKb0I368",
	"F74YAi2EteG4FZw9LO818xwdG66CzEn7bnu7y4K+DdVvwYrupry2vOLRnP5NmdM9bCpzcalMfMHj9DlY",
	"4fGYyxtY4SLk+wpT70L+uaSpRciPVJxahLwKyD0vkm/n+mhxZxwMGEe7/3o2+FdgfsfG8aqnk7/cl8uN",
	"X34uJsdfHimP4y9zIFIqnuqirP7Xk576DiCIML/NnYRkT5BSGneByBjRVQ6knJSqLEgUQJBgxijTzxfo",
	"UwpJdAN0kRn9UBIhnR4WlWlxdQoYPVEKmcBl6xkqLaGqYQI/4SRLrCDJonRHggDHf6A8w1cegC+HdT97",
	"vKFU6G0+FEVQmle/PQIqoFTYBBChegLoq+9ggVeIgJsIrW60abugAT9QddeHBKpe/FEcri2wqsqWmN82",
	"vx+pVrlfdw1UJeOiVLxDoq/GPbrt8pBls0C9Uqwq9qfdOi29PNEmGMtOYGg65Yn6CIjghtfBQPXLux0h",
	"LGozYdipdnL+ZCe2sBmsFUUSx2AVoRXvgrJKmHIWyKuD1gLsy+e62AYUQ2kMw9pAANUA6BrM4CaGMxTf",
	"AEpKAOl3NMWX/IzIjPOQnCjfy9ExInUqvZSoj58NUC8NqabHRUDcyXV8Xk53Zzs5HY1dfOeBCGp3b0d4",
	"zSGy8pLWvzLENoppSdCBwU4K2puK4etGcTLzN1OO8MZLjHLix0eLL4J+CfoW9fqkKK+Yip220zgWqhxu",
	"uVeFp6lK6MlVpbU8fQ2AQBWzVN42hCqtYbtfF9zouMLCeySFXPtwTJZI5Z90TkfnZlkqY5vJQamXu9O2",
	"mGG2UQtSefJ0htYB4RlDOgTdjKfIOu8BmakNtzuqbF3DezTFPxS7QWR1TA89BZlZjGaPIAoVOLgNYJPa",
	"Q2d0MrKXoqbCU8fn9GssfHoZD2nVOcJT/kVY++Mb07f1xmTfKjXRGs5jrdOAmhoNkrUXiX01nzWXjSum",
	"47Of6Ifj3Udkp63j3Tplk1GNPQZH04I77l13cE55QUpM5v2/dowWkDpyjEo9paiPW6t+cauOrge5qqZz",
	"kRtDJf28uUUovSm76ioOMV37gv8tWhgj0SuW9pXTQwXOx3fQrWptdZ5np1azR/3ts+PMxlJLHc7CmDqd",
	"dn1CVV8ihpzrWPOMRIhZPu06Di/Puk+Q3ANkG3CLNmvKdGmIQkHTdbFMFZJAh56Vh15Qo5Rtl+aWDVVm",
	"8eoyn/+gjTsExvYOwPZ/TwA4HYwmw7fD095kEJyOBvLH8GIyGF30zuRIL34Aw8REEd5hpPOry9Fk0Jcj",
	"vfyhMsDY1GcZmUR8DSOdjkdykFee5WyPVr+cfLQff9AV0Os25l+S7CpHeVMUEekWqnOokgpkHIHRuCcx",
	"rquiQQIGcSwpLQSnGVsh8DPaWLq+yktgFPcyiUEelqkKYm22iaMoE3aDwiCUg25dF4QKa7A87ffuOkyB",
	"izy9iKBToi0A084bBjFJKY2vXv791ej5tAPUROrC6mkiVCUsY10fzmRgrCDIBBnrcqWUVEldB5IxpEOJ",
	"inJJqmTBTQQFvDG184rQMhiGlEWYLGJd3GqOia4luF2rM4GRNatOeG6WKaf2h3NWefVD3G3WSo/I+lBl",
	"kluXmy4GrdO7Nyag65dBeXRuyt4xfeJMYaKCtDGzipVdj4YAkSilWGnUyvy1RiDCPI3hZrtgJSbgeujS",
	"pi0E9sIE6SmPIl9dPYjzY7wnfMto78GpPp7uBzELLINQHf6vACbtjV/28c8zGhhTq7J5VbkDJJoeNYOw",
	"PnYrLYsKSDiOgVBBplPC0Ireop1RZ6Z0ojaLfsfzSm9lYUA5oT5CXYDnkuXPIVYlsgD6FKI0L13EINZV",
	"mo0IsbV2ydc1MKIdIx54T9con+BmTpX1VVcZlsLEREr22+OZsUx5NSshHVohIsfhNEG66DCgoXq4Vcbp",
	"WHLuFb3N6x3Zw1Y3PTZVnh0cV2PPos2v2n3M5uwarMegsmyLvy20lEdT5DdlitxRkGrMkQ5GK0/2JYk3",
	"2ihZCqF5oaq8PpxL4srEX/HwH49hsv5+zfWKO8sct2hjFF6pYNhl/JuEkJ/RZrJJvwIhxPQRm5YWnrL9",
	"o6nnS2KyxMP+Nh/QyztvWX+KD7itIagQhT6bJQhAe/E+m1CxQ8vY0dvHFFQ/QNUCpFaQoEjV+fcNsruC",
	"80F/2Jsoa8upZWHZ3qfEhW1zkbK4MWe0NL8oC0hhg5mSXSMMeAAbjLL650aY0v4CDmd+KcF7N0OMLvH7",
	"hcwvNiN94Au7mOo4DTI2K/PdTk9DGHC8IEHIa5JujfGCgNPxSBKLm1CkTBfCwIh1efvvTHGIMquUjXCl",
	"OWJxkvcsyydrK85pT1XhrmagMpW6pwSqBal5OQvkuGoM3RV9wlzwasL4vYjnFMo9nHL2WamoxMXXSErt",
	"zS6whooMCTXr/MXE30IgoVdC2Ue0fNTPv1X9fEuqrVHUGw/mQVT2L3F2PxMTP0olfod/xzSL+IaELTzS",
	"T2VbMN6QEEwgv72n1+JpMfOjnvv5KaIAfpNyy412q3oEsouqCr2pEcEtxD7IYcvHPyZh24Jn5VjJcRJK",
	"AgH5bVDuz3tZ5/1OVTd5zMa607Fur8w82W5fVvvHc//lEHliI67RwGVxfguBZZpd7Z5ocu1GFVuv9ic2",
	"fhnmUd7k/M3LKhdrtawlRgNkHtdVDz09OLvJ5zpG1rOFUu853UM9c+O9qcCGCznfhGrmPVz7sMVH3ezb",
	"0s38HLlOOdvzYEql68ueys/FmI9I69qbMa9USYPGkgd4Diq3bhG7o16AiptTvS+Va8vt+3e5WvXEn/WC",
	"1bD4ei7Y1pcq31Gl2l2m39QN2iaK8oHMEY/377d5/zbduUXw8+7ZzdOpQAEb7t6/yIV7hJesjyE/hTNJ",
	"9/7ISfnZ8GSg8CqgL+dZBY2q418Alxo+XwEicyu1J+tRRrYP6O90po5nV+E19zOOaQhjlfwJCKoSGwjU",
	"At1jv6X6a8K2AuIRI1tVrGuVmrLAzhnmD5ycsgSfvbzjtjurlRbBMf5zo+r/GSjpMvPmTAC9TfC0DLHJ",
	"IyJMA+PGyU1L3gXyJKhUMJRwwbLCrWhNtWPVtKObTjtPp505jSPEph0VrWXpMyf2HBFFxg1KT1Y/V+75",
	"VAx9i0xA9O4c9gK4FUZUFJMrFysbGGior1LPMoxDQuRKrgTpelW6EtH4Ze4wNSU3uqfs+LSY5anKryCb",
	"9hlNZ/ST1d7RqFrgSVlZtV0VRxplTnuAx9xq6i3laUlzdbCBB0o66Rfk9FnOWQGI4z5plKCI4RUyi5a/",
	"8vrzpmLxrSysuk8e84uZ5RKtM4ie45BRTucCXBLUl61BuGWHr8fepVmjwqJe4UOj0AWW40ZkfhKas4/C",
	"on5d8diBt4unFqMpPG4rqyfbx9o8DqrT/c/x5QXQ/9Z+8ZaJr2Ripuhi+bDo7Cu/73QyTNSwEqM5mnx+",
	"Rd4wE/Q17UgRRjLBebGnHda/XbIPAsmJ45K7eOv2SR6nq+X1znu/Xl4Ep2eX1/2gPxp+GGyVzlOik2mb",
	"wD8oMVBVBO2vxWegIztapeG2FlL2NFlCN3qiMMaIiABX6wKWrcuxHYP5lt0rjxc4VROAYd85gR4hyMXJ",
	"QA6jJErvZJvUzKXV+mlnt+Wf1T/92b0rVDgKmbwfDwEZCyQ/o82XA0b5z9+8BEUla5EDkyyOK63McZDf",
	"5jvFHfXHwNr1GyNgVMm8PNGKZn8riz3WGq6uCvZ1XPxVFYqWPZGoS1or2Y3UymaQIyOmqALTmiaMezvP",
	"RdAbhmaUCsXBJA3oKpFS41Pijv5qR6PCuUAMYKnqU8mlRO6cD0GEYqjeqp8/m5K8Rq37PlVrUmt9qPtT",
	"zRAoaB3FbanWU6CSoaezLL714/GjhH5MaQoosa5JZSUsAhi0UKNLenZNeVedDt+0nxJ5ryrZXkBsvjHE",
	"s1goKUlHE98irZGM9IdczlWZ7hHncIHM2OXjhykjOkNyyBDGMYq6U6JKCWsWobNk6glUzeK86DnXAxcz",
	"29NNSRGA7SEbht5IsD0UzTAUKLQcAbkUBQoVsURoli1q81tlKUhwFMVoDZl5wspVP9l3gclCIRmRBSZK",
	"vQLgCbiafBi/BlcbsaQEfMA8gzEYiyzC1Hz/pT/4UDTooxX4fhDGOOXo6dXmdAlZ8oNuOBqcX04GwVX/",
	"zWsw0vOuIMFxDMFV/w34nq4QA5PTK8Cp4uw/yLWYhwSzFn0Lvi6Kj6s9yAXqz0vKxWuQX1r6o1xdV31R",
	"+iSdG6uUBHYm+dT3EVqhWFISWFN2y4WiC7Nm1TaQ+q97XKUZy3/bgNW5VCVFb0+FThYn4OmSJuhpxhF7",
	"OmcIEcifchY+tUawf9frEEuGYISi14BlxKBL8lhiXAb1d4AJF/InnauUAEKxB+856SuKecCDokny+E4K",
	"XZOYwsh/WCR0wBLFkijk/ah0SHXlJZDdGhLIhzGMscyYL9vhqMgrdT06q7b3IyRf2EPiJJ/j6NCyQCJQ",
	"VNusFCZIQGVWlnBFK8Q2IKWcY6nha8JHCRZF2o01mmmeYpJ6uF8lqap8O9ArODrI/E5nvLZkhTa4k4Xk",
	"EOoalz3qdvpPOeKjY+hRYFcLS7xOaFeF+U278gBoTs82lonLpMLR5gfzjxtQoFmK8fpWhbGJDFWvxXm4",
	"spTv5lpM03aFfDwv23qHxLlZ/wMyLgtMxyGt72LRQGofoxZUGtQCc4GU6GBGqDu343yWo9r/73QW7Lz/",
	"uunln3SWv+g+GLUUyzlGWpGL0+/6rYClnSIeGlpmQUcJrDXE7ejqI8QPTlZyMcdIVam83Hyc51rgGItN",
	"rpVrVfv3jAujt3Mw7aSULKadkyk5NaGF5hXrFqE0f8qScJPrEfQWEQBjvEK21qFeBadk2kmVDRCkjAoa",
	"0ji3Enj52pVc/FGBkyPOpepZK3SFZS7oFJGKoKl7ezc8zod/lMC+KKoZJb/TWW1AlWnyiKjPjygD+pZp",
	"gWRzqfYY0VdEiLG8vo2IaCa0o3blES6PlMJzcCNYhm66gKGUIS61SFUmZ43AmmZxBGJ8q8zlPEtlAz4l",
	"XEASQZZbSZ+C4g80E2kmrPQ/cV0YZ0FhD3Jx6dGPKY6qQKt1BPfJIKp7NAZH6WbfhDe3dVAa+Nij0/W3",
	"5XRts9C6ZJFNZ+oqE5//QD0cNzwiv2onN2QZ8VuD/klnyqM2IwXelPOJH3nlLTPKyANfNHLpRwZVXaBV",
	"GWkwmVM/ZKVQL1sUSTIhJnl5V+Uq5ioBMx6Mhr0z5ciT+yS5UdBXA71DYigX8TBY0IsN8q0ew32vl5Sj",
	"Inc1zG1dLeoR3/SH496bs0H/BhSOkUWePOVSyiVj1k8xN29712cTb1tEVNMumGVCubu+H/TOJu9/OQEj",
	"tMJoDWK6qKZQiwCMERNTYpRYlR9NvW0pmynmPEMghNojVifQ07PpNGrqkc6sSVdR1ss8G/Q+DC/eeZaJ",
	"iVSeJfyVr5ugaZq/z97883J40b4nZKLoafbaBBq5+xhykWdGD5covAVLyPNilS6ttr+N2OMo6rxDbwUd",
	"8ts6ta8vvz/qfF8AX/zWQpF+FiQh26QCRfWMG8YxWKAYlw6hyoVJgAQvlkKeRUgAIgIzVaviFqhnjlQe",
	"EOX5ROc6VeecITTj0ZM/5tzNxjG/fYfEoFjVA3FyzG+DyvaPgpk78JORjNch571+SjfGR0HBwmBLjsC1",
	"mi01c8mOMQEZR12AsK6fuykKzk9VhlVgPJsyjpgqCO5xIDNIutZLe2AMaQAcI3osrbqO0z1qhd+UVmio",
	"pF4l1CyyWqEFfRIMmvdjDgjSLwRFamz5j/F5bzSxigJR8p087AzBaJMLyCqP86ZaARvMNlNywxPIRBE+",
	"blz3saoldNMFN1KkZQnUz9fGthfh+RwxRPL61YaacvsezT0LlRSnXSP1GlVWcOP7iqIpwTqhstq3QIk6",
	"JxlTujHnJioZco4XRO50yRBf0lg7AyEYLu1k32Xi6bywzUZNZzz9lTezzmWtltI368jXLJuq5xfIq/64",
	"gwTiWHuxLUCMVigGZ5fvgtPRcKJkPymLRmCtyoT5tlECtG7I4cXby/ZDVvFS1POxmqpQBTVAuIREStGz",
	"TRV3EVowhMApijnOOOCYhNoTVImiDGnC0ajT/+LKF9lpq2hgakdfVlNdLcdjpNi+VizMNnqtcJsOuHEu",
	"KaJ6tG6tqiDzGxNWWCZiH5+cn/RORieTE3CT0jViCY3Qjf/Gn9jrekDMVPZ/dNhZ47Sm1O0VYvKwcgCB",
	"bGidzJsIrVRQaFHj0OSYL0slSPjn7rj/uh6e/vwahOo1RTXDjAswR+tSg0zQAs42QodsGVe9QuCWreTE",
	"eri312dnr8GaYYHAekljw4lV6MAfiNHveNkuGPUu+pfnvuYMkogmQE3spZWPEkoPSCMKC0dFG4Q/1eJR",
	"fQbaC5igagHAu6Z66RP+LyOPPSrSnxvxpDB1bEhEapOG9nWLL7tevYZGqXRDYIJDEBFeGNoqAUxaaEwR",
	"wzS6AZhEphjwkq4BnQukWdXwSkW0L1F4iyKpdObRSPrtmMc3qqCeFteUQAASeIs44FKYURrr+8nkaixH",
	"KQolqKwYhaNMHvatnY6NEJqVGW6mpH8xBgyFlEVuGabEygOwKDV4LmIcg+aa478k2SJOuLHqlcqtUEYE",
	"9w2RSADnBs4iaM/NqdSEeZujqHVVAcgcx0jH1z2FYRxgHgiGVxjGzdLXhGUIGN2md3qWX+3zLI43AH1S",
	"vgxa1YBATqPueMX3aSZATLVPFyQbANXOAMtixLuAsnxUFQazkz/i4u149UrOyMH3SkfSQctTAnUHFbYm",
	"knTOQbm7H9yy3duiQS+Mh3xi9v4wR6NcTVCF9TEck3Jxu5QRLum65tnwVClegK4JYhJ7C0azVMplCutQ",
	"gBuJF6N1Zzgy9/xC/qZF8o3yszEDGNEQx7q6kjbYTcmtrtgEZ8qFhjJwQQkyyq6qESPFSB0AT0kxhKnB",
	"NCVaOzRPOQyFGeN4hW5AWkitmrkWn+KNfsuR9DclkgAFg1J0QRZZgURe80BXLC4iW/OGZqPWbEpXz7UQ",
	"s3jF3SWEp6Qg0LzgbMOEDTR9qvD24MSsFn/sNGzMHerkNXH9d0hYiqSuyiU5nH6pdbH5EuZ93b4XxkfB",
	"7OtAskAisMDSzPFhBRoRShGJVMQtMaZzuLDL18824EaCWxcYU0cDEgCjBBPDI1QFtjkmxVnQDylsAxYM",
	"ElNJWd0oKpCY0VgdjCmZIZDGMJTXiw5REjTNOUfv9KzpYMiLucDTwx+QLUAf+1FZINGCHBQNKB1fB4NL",
	"Hn+iK4YlaawpgBWEw5dSgiJaoE0sVEkGnEh5WMUMxXChHtduJqPeh8FoPLgBPJvPcahSbDC8WAquJWfD",
	"GWGZ96l8eldBq3lGLM3xR4Nef6+x5HLUOOoWqQ52ftkfvh3+0jBeV/XvalOCHjChkbzsoLndBv/J8ArG",
	"yiWUmo8BR8L4G1yfnQWnlxeT0eXZjXrWkqDCxgHcKm1u/qz+DiKqQDDHQolamABKCntLytATc+AAL9Fk",
	"jat5nD6NU6JuUXn6JKL0wcyD5vO4fL0QotYXQo44WMuP6nSC6/FgFFy++WcXvBtdXl/pXyUgBh8Go18u",
	"LwbaDKAu/v/b1Uzh/3a1PYcS9H8lsUxJSAnHXCASbnT7BRJzGOowM65/V6KC2SmcU4YSRCS5yo1KhgRj",
	"IEk/V6u64DscfQeSjAvFTIxCJkUKXVyRAEyWiGHFg1CSio21qt7pQIkiqWSA+nWCUPLESHNaNJWAZ5EO",
	"9EVEFWIHHzGJ6JpPCfqUolBHhHPA0AKqkooVPJjpIQnRCZgslRuFhD/mKrp+lQehXkwUcnJ0TIl6KnkD",
	"dIIXrg3s3+FPBPLvAIfJDIIPb8eS2LLY9s44AR8RgDGnZnjJeJeIKW8TuKJYHah5JhfXgrvCz8RW5TxH",
	"zUulGBFhVu9gYPR7K4FfNWHfAIZLg35zkGOT84+rXGR0riynBCboey7YD69BnpQgF4PlZ8mgzWc44zTO",
	"hNGwTDs1gWzIEIxdjeXfd3uA7/EcjH85Pxte/KzSG0gOYrr2h6PB6eRy9Av4f+Dt8Gww/mU8GZyD/5e3",
	"B/8PXE7eD0ayG8d/oO8xET+8Vr/urEpqj+Z7oU0+LU+MbJLhyLRQr/g6tZ6Bm2Qxss2iaGNEELsRWetG",
	"MIy/n1Ea//AaoE9CH3J5yjAHuQ8/JWoZDUfhzKD/wc9CTmdHfRh4g2AxRsIpVYCJMpFVXwxKw+/rKdEa",
	"pr6rFIUKaiWEpExfuOpajWAY34Bpp7z/ph01q+J26hEpv/IsjVU94OpiweB62LfPliI2df9Ytwj4XvdQ",
	"Qt8PRrrVVKmtGRV9dLE9xbutKRSttpqjEKx3JrHV0DSNN4UEZqm8OiFdob5WFVCpfs5oRiKdK+/7X9+O",
	"Vb4nnmdVueGC4fRGMqYVYkZnkgKRuhdP8iOU35N4XlZcbjQYTYm2GIFtg5F5zIeEEhzCGP+BbgBD+u7N",
	"xRa5XE61ebV4M8dELjSEqpsWS9WzuKTImXq312pNmboxomEm5Qqtop+Pn/Qnv1yBFyevTn4E3/dOz354",
	"lIX+GrJQA1cffyYBR/PLY1cXORISWXX6ohIoKzepwldpKiiUx+Ec3Ki3eOX2XnwvDGWGJWgdRAFZ05x6",
	"91Cc3+SeMNlYeTbL7wHJBCo2C/1ycpO/NEqmMCV5lfITcC6n4ksVozdTKYMTqJK/QJ6nGitC+mDu6ElD",
	"AeMpsal3hnO98a9ykyg2r65Rg3uNkTnEiqlDUic16au6OyUZiSUTt0YrU5ZOWIZ2bi2jmCiW4jDTgoqN",
	"1lxMU1LeWCdbt5s9nqLHcInjqLjScnok1CZJJLp56Ke17Il6yVNg2+Z+U5KTq7kWDcFaTU5Aj9RdjopJ",
	"tnlO2b0cmzmZOrufg5XJiY6elwkoGg1f+VkyFnnZ5/sXPxgHJC22mhePJujL2R4e9AKKrwHu8+Y8RbKZ",
	"OatbSHAZIkcQc+NUBMApjOMBY5R9P7i4HPx/7L2Lcxs3kjD+r6Bc9VXs+9GUH0l2z1Vb9SmW7Ogiy/pE",
	"Obnd4xYJzoAkohlgFsBIZrb2f/8VuhsYDMWX90JpHOmuamNx8OxuNLob/Ti7fMaeM0j7DtYyzyN2QNbU",
	"3g26prabCHPVJm+Pd66658cOV23185i6apN/B4mKmFdbtX1+SWDwdwPKIvyzLOuSqbqc4MOllWVdOK6E",
	"rm2UOrnXWL1AceKi062/AV6/will1fh2bJ54rm/WzZwM4UVndnLOeJ77O6M1L4jEL2g88Y+aF7CUWoGP",
	"VLjfnSwFpDWQ7elwR0zmhWC+TeLfwibCaxqxCQTP0aKiAqq1K/RMqg1Zy0FEb5yng5cMSeaWQX9/CfrB",
	"SBmQlmLqCq/Awry14TPhxbaM1zbakqwXGqRbMCNjAnetioXXHRelru0YkeUxQL+wd5fnOCm5rNHtSj44",
	"jY1h6dlLaZU8ek+4UsLQtkNm21zaquAL3CSm9MTdeeHOUrpj0FYtHhD0rPC07/W5jDsBuCUJLQ4HOG42",
	"kIyJi/HHuuT2atxQcnjWS8VWf50pcVMsGGZ4CFI14mmyiJ28Lv3iT38i64o0/9bYqZC+eQYjbF2K6EZF",
	"CPNoCgcOigL5RnCKjKkrkLkMV3baQOFzteyKlTh1gaXA834m/htFX3Yecg6lNvP3ge68sBaInoiPWybd",
	"UJXRdkUOW9d14TtNCrCt+4V7ETUD536eBbqkvRtIkQ2nwq9UKAvOzrA+D0WkG8Buj811mZIkkaq0GE4M",
	"T6oiD841vs9QEUUGNoIy/81ciIKYUy6U23ZeN8Dw5Oj47DKlWa8ngd6OXvGgicAkOSwGnu8o06QO9aA8",
	"WnuYH9wLxJRNUCpGjIpAVnL7D2J6kXVV9aSQWcIOmTZN2t5WpQQ5bVFRxsHpI9ZamRtdz+aMD9XZ4SX5",
	"l+O8gAMPzskNQarSVjrMYXWbjTcQCny1rgrNczbhKr+RufNN2E8/HNglDPeHil6tPap+E0YnY0UWfnu0",
	"p43E5DdIZNjOzv5saSt58e9uJmSC/b22s2K8L9iQ54N7Q03DZO8IPWE3e8NO3NFQoS1i/xhyhd2Fvyzx",
	"lRi72pJ8/EUReTPIBsRnrD+3mTBOTmEUii5LBA2MMYjl69O2QVwMmZfxyShtIUMEu+dZkjx9XWFHSaNx",
	"3O6o0oXMFmPyfQG7JASlhndAowswuChR9LDOXfxrot08/IW+kooiWulHSn//7vJ8qChbHJh2mc6y2jDI",
	"hj4YnB5cng6aBenKjRBuo1zy2TqEICp6mMrgWpiJtqJYNFLYXBTVtC6wpTO69iLbXGswHHMwXhOqSPaq",
	"Epk32NRCekCeQwWeqavyp39+ljz3oD3KbwSFrUSiX+nuHNSSPWhtruqQozNqP15Pg1t8SzAGtPmCMAx2",
	"CNwGvSW5F1f8p1L+BoDroYiBzB2HbuxefiQSjEmqAfS/xxUAo0jkaEqn4IXeuZehzk4GPXZ6dHgO1H6I",
	"cZBNnokwiVRZUefocw9LJzHBxvhL3Aob//MbiDb95g375zdWcJPNR7nNeDYX37wBQ96//tW2Pq/0+IPV",
	"P8af3D2ZI3HvmLoPrd3hYQGM4yRkxpLrKLjz2umSQ/hqsfCaThGqy3jSUeKzgxe1mA6b7mOvfIzyGhmI",
	"GMEEpJHk4JKcOZKpIRAR0vzNucH4U+tF0Jkk7RhkeGKFwfmU3BgsewpFimP0Lx4a6NIH7I3X+LcHKt0H",
	"94N9dSj9XyCMyAHBwRVXqSe/bndvjZXgFmnZmiQEmV6toFYlm5mqKYcDKG6ZAILbevyMLjkGEM5+WIC8",
	"YKkncJ8NGAz85uPk170iswWw7uLUH0d/1rYWLoBzG88s1EUB+K9l6O+FOxOf3XuK3O7QvndPY4kkFbMr",
	"XM4FG2OXEfEYugnxRyxliTYnEK3n/JqKceFI3FJNy8rIkgfRYV12TADjV53KDw8AQexld85A71Gc27M4",
	"95it5kFlq0kkyQ0PRk3l1VBZLgSbreGD57X7ozDB7iQKSS9EmZe8OuD5prfIE9/mMH9U0O4eVYCePs93",
	"0NFCtBd5WkJPNuHZlVA5c6RnjWslP49I+EDxdMxOpo3PTVswodcMO5fgvDQVLpsHB0Hf2N896aF+OpP5",
	"GbyjPsMYtXdQ9nXrwBkvsrqAx6tryaH58Al1wPN/NHyyNBtpen4/ylpIpAqPUBBKfSPVRKo8lD91Ropr",
	"SlQET3h2Lgr081x651m3tWQ7SVD14RG2Q8gXPLvCl5LBu08pWEBBLSff9jOtpqn1bexEWRVgF/ULIvEi",
	"/ujXlkszjrmmyGUMiHWEflRHZPeEObDQNUiegP8Rz4PXXW3J6ggHwLPcW/JC4zAKujLkV0W/tUZt63sh",
	"mN6OJiJkAPSTX7x7++r1iz+FRYQI81T4ID9V9urFi9fs4lVIExii/70G+EnJz+zp4N2nZzRQf6jeaQMQ",
	"fd1/4bu87n/HqkJwC6G+2npaGbz7NHzSw7xh7z6xV/0Xq5q8ejF80mdeiJ+IOb+WGt7pNhAmmFmd0WDB",
	"oDSHt08QiU+rdc6Gee7jaglY7pDpIGFZ6QXzBUoXsi6nI/cqOWTW9RiQ+RpdieD8ECoJtC6FLZf2oxj+",
	"oMTwtrywSRLfLi7gcVspk9/9Ydsj6+yOYL6addZOG7mDgE7tHqX0+8IbIeB3EdU3yBIRz3s8FThH96SK",
	"COJb5+Nu5Auc6wEJGQlN78J9HsWNhyhupIxvzzLHnR/AfbPYzkkfK1hsVghuRrhueA1Y+1g4cLrCaNBe",
	"CAnzmCZzTI69+y6fgAN0D0ufhA7TorZz/OMbS++4ZG5oQgfpmUXk5NQ9lYoX8jd4XQZ6otTVK18mgIbe",
	"+t3gv2Av9w/0FrBzXXKptop7R9jsUdq7p3NCaNrRd+bk6MPhOcM+YIGygv6y6FE4AcPSP+oQlA3csHkn",
	"bLvUVLoiaymegV81uldwdduoh7PAS9/wCbjTMGdqi76msIDhk6Vg0cCfD4/WRvdcQoIHdL4xoglMoAgy",
	"GvkNOxqMLv96fjw6fHt58vNxTGHSix/w9TL8dXQMRZhGRx8/HJ6c4TxLY7JMG0RS4lOEJ98K56SaWVYr",
	"SFiwBIrwVMpVzgYffhiqpcqfkN98HHM73TTGyhc0OTge+ZZHZ4MR/jTCTkdng1aeGML0eik+Ht/93TC0",
	"wK7J8PHgLLO8L5DgeUAIigsMfqao8dWkGF3VhCmlW1n9LZHzETsPR8xPmNkOl86jkP8Ahfz0vtsk47dP",
	"5lpB/s5P2J65bNfE+LVc1mlSuHaUMJv2j6LmveKyQcR6mXMAuT+XFGvMpUASyVCN8V/jNS66dHzTJ1/2",
	"I7dMK/Hc6edaCWZEgSmG5rJCGSw9CiFJVB8iHv3vsJB8jIX79HRZ79fwNh3cf+M6h4okaLQZ+O9xbdAy",
	"KeW0ypIgMW9TTHkOrkZbJbKU3PfNNOJcHZXRUopby0buxO66hJuHJpi1j/6XMO1HUe3BimpL98UGmW3z",
	"udwmw93HqbwrvtxNqW41X54JN2picEfphtZn5w9JxUOQFMfs8CGQFymDBumzw/RbuIxBNBgqjCT+DDl0",
	"6YJeWi3dy+B0B5m3GksOEBu1SqdfvuiHCrf1T2r8L3otZVBbRlpmsbbMhFvszm0WctRB0kT8oMP7AzNc",
	"zcR6U/F74d7G5SQ0b7tmNPbI1ybIESR2LUaNLXlztNaS/SxCaZMdjD290eYKHOCegXNk4BpIBJhJzs2F",
	"Ed94AWwJ262HoCbYCxYyVIBVygF3I2KVdzKmerGuHU4Yw5LYpNDZFQqZlvLOQ7YruUn0ey/cR4PSJvz9",
	"w+IOzHMbUdYZUbBFZUXOq61q46lv9Kgr3tMNASjaswcKYXh/R8NvonM6EUG2fRruRPvx8H44Kk+k4K1c",
	"5lG5eYDKTcPg9utpcseHbq+stGtqzC1WqqzdKlecWfsoVtwXxjyC9ixVIH73dxKUtZ2TKRCsrXNwJxLF",
	"mbUPR6AItLuNuzyKEw9QnIiMbb/SxN0euH2y0K7JEsss1EyzV69f/GmrOHFB7R5FintCXEDUvydWjKj7",
	"rQj3oRqDzItpMpu8kFDYlB6gIWab8mji8zN5XWZ+LgxpnsDEacuQ5WyoKBL4lq8lWg3ZU54/w+JX1nGV",
	"P+eFViIdihJZS5WP/NGHVEJYvnkqY35jbrI5WGLZDThbQky2nvwqMhfDryHXfoDLhgko0D/YWddNQdHM",
	"XzKHX9UoU2NKLJOpJLGaVNYJDgk+a5mnGdforR+2BLZkiaAOWal5UY6pDBL7v/Cnx1OmoCel53nKVU6p",
	"liRmdxtlijxZn4UBKcGODYTRvIlQIugaSn0sbS06wC4jGD9T+mTKTedx6/RQherbzcsHQdXpmOh8/ZhE",
	"gDQmrcrU1rW8LexQ3cxlIdiVECDp8aJgF+/eMjgKRmTa5FgiSlFRXxo38jh4r4EDxoteK6e4tM1KMdUa",
	"+f828MhqY4RyYXtOE9YBdDR7cgRrU7SgvPY8EECbRbYJFVp+ujhFTxZY4AqkpRN7YshV+/ADsR2dUbZa",
	"yIwK47XSabcIMO0dibC20T96KUsCZCVsErhC1qdwjadgyNQojDbDXLU30s2Hagk+fidha+u1puYa29+1",
	"T6y2c9pTc4Pcuv7vRIsi2D8cTSq9sncRrh41qgeoUbXkuv1qVXd/APfNYrumXa1ksTskI7h4TERwj0j7",
	"t5MQjIzMdzbYXuw5CUEXExAsR8beVeKBi4eUdGCnhAMXj8kGHqZ4cTeJBi7+EEkGuphgYJmFIv62ShQD",
	"bPYoVNwT2ghNv1ceUuw5ZtO6KKDKaKgCiB+YBnvrzPAS01kGF9BQRBHuTbtBOon0sr/ThUvtnIwSMbV8",
	"xu5EUkG4PxxhJTkXO/CvR5HlAYosKevcr9Ry54dvz6y1a7LLCtbq8slW2eUynzwKLveFM4+gPbuuIX73",
	"dxpcPumclIFgbZ2DO5EvLvPJwxEuAu1u4y6PYsUDFCsiY9uvTHG3B26fLLRr0kTCQpV0dl67XN+oHewh",
	"t1s/Shd3j8PbWNhFzEi7BWOH4/aKCggvKjFO6jPLKcRJlyVXOdMmdGjSYYrPIqshE6Bj45u5ULFQXSs/",
	"XzbXUDlsqg01e+ObvXzGzi+OT85OLtnz6LgiuCkiw5horO8J/ksTMdV+2KKINfhh1ANmMlqaxZJ3kNdT",
	"5EP16hk7/zi4XJoCqpusmgHcZEqNwei7zvH6GRv8+Ony6OMvZ8kcWrEAZwQt1rfHqqBqS4lv39gv0IpM",
	"q9zSd9dkIyQM3HDpojsb4kJqNVR6Sms9IOT12UmKNqU9zsCyxdmcm5zB4aRcPbRUqIzTRMOT1yH4630c",
	"9JjVAK6h4ktzJekciTw8MAKI0OsrmXPtFDA/ZFPNGc9zqWboFxaW16rRubQEq5kfmqrEKAvDY2EaF1Zl",
	"GbcsFxYcpGjdSjtAjTF15RJfS1rSNxYXvUYYX8UY93Kn3JqoS/L5Ksa0+pb5EoldSXcQGZfnWP6IQmXM",
	"deL6rekehOC++lrY/S5/lOUfliy/RozYlK9njQix/kB6Wf4+T+OdcOAOiffrObATZsqz9QnUsQLtSWi3",
	"exXalTls4nSP+sE9EEEA/la14FoaV/OCyQbtT0+lumKHs5kRMyoj/PPp4dkzL8q+04b9cHFy9P6YkcLg",
	"JaSpLgp9A372TQSGjR7ob9jEyHwmRlTgrh9GOj05+2l0+P79xfH7w8uTj2dbxrSgVTSjFnw2qrRxtjdU",
	"8G+jnc50Ecf3y/7CMa8LrkYVN0K5UYRJb6jgd8dnQP/YKKvWiYIN6e+H/9D4nRL8GoprcZuDNupHpA1u",
	"ywuVpFWKQ7U1yfa44+XinDIHbQvSNCXJ0bFXMqbTDJm3V3H9LU56kBI3Q7Xcegu+f4DmH3BFb2mj+6aB",
	"1fDtNk1kc5FdtQpNtGngEEoLJCyJCmvAWfVqHqRRx/uJxoqaIYTzlMLNdc6UELmlqJuMF4VX6nwnUP+5",
	"i31QGXWaVUZcC+WY/49xIdInlPVA6waq+F7BBdUSQ3GuhWmChsJqb/xQ3LKq4EoFPdNZdqPNlVSz/sZ7",
	"8y3BqNsoHN1w6eG0FpUhzdsNhhv5Q6Ydu0EDEXVGEDrd4HIuGJwN4XHoPLwCUIeKLEFuLhbIu6lEKs+u",
	"+kP1M9hUJESiKSgH7I9+sKXQGd8J8r/QzjqLgC2MlBgQpFaMzDRAszlbFK+5xE2h+AfVzw0XfnN7j+PN",
	"u9Ty1oUOjXyP5F5d6gOXNH5JOO1QjcVnaIBWs5gmMuEKlRFT+dkTDtb7gbTPaksnOPhkDfOkOBHUO9/C",
	"3e+KoX8dHByY8Abig+8HHh4LVlEezNsMnWIedVH44zv2zNKreOwpRYY+oyra1CByVqlYxi0xgSmXBcSP",
	"+sk8DQTelJpdg/EwtaxKh8O3LKmBB2VgataMZ1dK3xQinwk0Qa64luYQL+w5fMPsYzVvz9z67GQaR45p",
	"wbFbciVJyyphpIa4ZVht6zrxa52JcDttJ1jE0d7pFabpNrnOuR0RFY4InNtvrLkIBcbpPWM9HZOMEe4s",
	"vOU23zI/cnuO472lBXUUdrvbaePetptnqeE+7UCd1MXv0PDyaMx9YMbcls1ngw13h2MKRts7P6P7vKW6",
	"ZKFdy2mrkVSj2or1ctV74eAN/OT8+lt2wE6q6+9R0vA/XvNC5snt1GMoQoNzGwj4PeZ4BZxEVFyGvBVa",
	"Vyh+obCFBpjwa2Ir4XluhLVBbONq0e5yI4s84yZvGrKnL/rw/zDnmzfPsKd13MmMEnQI5c9ajiORTn0j",
	"Qg4LGBjbM1l9k75Kw1jhtm5k/VxmzrLnTMzYc9/if4aKMcb+if/x/zcE8hs+ecOGT07Oji+/Hz7ppV9p",
	"+dhgKv784s2b71589+2b6fTNVLz8/s23nGdLXZRwJbdXvsv33+KHf/W2Trxp3pf/+ar/8vs/91++etV/",
	"+e2f18/36tvWl4nRPM+4dbeHefXdd8MnzeL+vll8PKlO1Ce7fyNmpPpui5BR5f39TJiJFr2b9fL08P2u",
	"pstW0y2Kwimfnftl3JWGewuU3cZ80D7XawxBPd2g6G4U1cIAXVUBVj6KpOdggyK1/RisHD09Ehth93PB",
	"1Tl0Xmmp6Q40q1JueXrFi/3DCfMaoRLF7orAahD5GR9fX+8e8x7uDdIPMsLm1oOCIkwsLwKkEDo3x2gt",
	"rgPVPOnU7hPzwd2S/qP++7D0X6S7zaovCFZIZ0tVxb3QVZEATo8HpE5V5IEb6qFD+j6nvSKiROZC8DiM",
	"mr5fDNWYpPQoy9l6ooRj/jfGrdWZ5PEdM5keO+fzrKKVEEm0HYanrFbWjya4omeNZIwea2aHUzPjTtzw",
	"xTjWfLfCrVb8N5+df0vnJy52l05aVSm7pPTf4opCOTldrFciLv2VoFW8BayVloVurJCzucMHac3g9tDT",
	"KQt5QF8wbtmYnjnGa6R/QDOtYo84CEvuhIy/jAU7KjTPRb71MaA5g/A+hQeRfPZB4p8yPyLLxbXM4P0Z",
	"B15/O9lTnLkzALGZlQe+3cb4H9/qsAYW8ChY3jW2PPD7gKKdwn0Gbwcn7DCOxQ5hHRTtw2fjJCikVvIf",
	"tWC81JTZNy2FuHqcYAa0IjPC0S1TCWHCDzQ6BMwUQs3cnE2EuxFCsZevnr/8nhXCOcihrLKitvKabk0/",
	"BqalvjUkvMJRLmy0EIIJMSzWn8SyBn/Gtz8envdXrgcf/YfKylIWHPxOwh7WcMqE5vfCJv34I4/WLjn0",
	"pbTW5g9fErmxmnS2vg8GiD+IqI32qd7KeR/1moel1ywx/U3BGV962ry0fw9Hba8stEMy/2oWKj6H/W48",
	"6sfY7FHMuie8EZp2F7QQYSDC/OKFkhBQHQNi352cHveSCInxVBbCyt+wEZgV0EOYGVEZYf16Ex/WycIJ",
	"22/1mg6Vl2Z+E0YnshxnZV04WRX4wA9liaGDl4e4m5NRIdYHaFaEhghct180t7BoWtZQJbHfS2G10act",
	"06WXJnNhGGe/clkwozVBJRl9IrysRoA5Ohn81IsGl7/9/PGUaQO/JrsKYh/ZapQVWW3EyFXL78hUx4Li",
	"3SV3GmS8yaLi1q/RlLwIVTE88zG6gA3ST1wtmM24gtGGynEzE65dIuNzpqsFi8fWMu3mwtxISzWgMSq5",
	"PQUu+7NQm0w6kVRAyZRT9t8CyoogtJBC0JKEJBc3GPwoCRTpKOTSTt0iRMBp4Mag/zWYsKRlp5/ONojA",
	"kSPtj4PjoeucGBx5wTIXP8ilvdr+IHyMnszk4kB/eHxA9klABaK4qe6Rj3671gVWx+8NFQ+BS7H4h9NQ",
	"iQXtilDHxomSaUVvwtvQeCTt1Z7fe1OMpnD6GvD6pSoOAjVKWv44nuC/Ww2+sYEB3vBWgoV4PYzRGX0c",
	"8hfQUcZf0R246eWvgo06FM76BxDtAhkhLrpGPr1dRLlHve0B6m2pFLlVc1tiImvVtT/aqe6ayrbiWpgV",
	"esKLrUrbe2zWgT3QgtcS3pgXNSdZVOnnugJfnHdGiLPDwXrSSza4L6LAlQei6IysEAG6TBQHVljr1YC1",
	"j0jgtBv9U6mSXbFgplYKpD44/WGYUMYNA9lsIrNzyJvn9REs+DZU8Ms8mu/pSVpqxU6O1vicNVgchHU/",
	"2hi6Q1MR21t5zUls+Yi/e8Jfg6zdzUQnbZ09DmFvhayGYz/X1sF5JzMBN4I1y0pqfMY5LoPRQqPJwv/v",
	"UFXaWol+mGHOHmstgHSOQkwdE2XlFuToX7v5iCKHl1Z5cn7w9uToIvH4T9bop8YF1hCrKRNmBhGRvChC",
	"RDLE9g8VxdFhT6rNOZWiyBNLULK89Vpuejr2d1fF7XTOZJGS5gru8sUKbkOOu7zdReg/nAe8Ni/YjXM/",
	"qoQPUCVcujS2aoU7nLwgnd/Hsds/a+2aeriatVbauB00xHNs9iiy3RPyCE3b5TWmxA2dQMQZeeVKm+lr",
	"YRbw2kzF7ZNcZ6BGv/3x8By0Nf+P0YdPl58OTzfIKpEm9neacNudk1IiNpbP0RfLJwjD7ZIJtns4YklC",
	"7zvwpUeB5AEKJClL3CqNbDxnQQ6580O2Z7bZNQlkPdv0erlQI1ntGJ1pWbQKtEOTYZy+rJI4TC9/4jQs",
	"C0aNnJ6b19sakRZOYbyTqhuhmeuAiMbVrTIcmlceZbj7whyhaXebG9nDQIADkW3Z2AY/QuYIqRU3Mtqx",
	"yOuISTXVpgRSYEYUELYFdi1IJsvGSEzj1J427pHpDJNRkje7/2EcYjylZcG/iD4knl8xAG2NV6cfjtKk",
	"Web0UK3ObBilzEi1+2OXuJnOSZmRXpZP+hdLmQjDlpsHfAcqaFMbK/mVsCykM8HhweJ52ET+YdNAbLUV",
	"qcsIUe0maRab/AEuWqIchFJ3LtqE0+xwIzxKzw9Qek4vo63S8xL/WCtA/9HOddcE6LU3wo7O+Zdp40c5",
	"8F6x+AWO+rduXkqAVit/64YAf1477UW9jBfFgnFr5UyJHEJ8XagTFYMQJ9xCKCK4YYxxReOtUpjYvyt1",
	"CpyOSmQr/KzSD18gnd1C7E6vlCku/jC8tuUp2zWOu6vH7I6YeZSq/thS1Y7es19w+tsC1h/z6HdT2Gox",
	"+1+5LHbICOWb/S8zQf2Xn+lRQrtz1AOGt8lklmIEV8tLhLp9nBo/aYeEIgJWOBkHPHPymrsNeYAPqYWH",
	"YKU1pv6UOuMzwWrLZ6JH9kEeG3oB1Qjr1gM7DLpPoIf1dBHsGZy49TUtCsi05RkTQTrnjlvhIMI+tyM4",
	"geuAC733Ss5+gi6ClYzUoyxNubbpXcpIcS2CbZu1uqV0DrfDWqZ/hN1bed6edAou4rPI1lPbibU1HO9Y",
	"WVlZmYutHPPYj7pHMoNVd47GxOfK34cbInD9dwxIh9x9ZQX+yutiKBtoVnjP7hGefoYuntupcNl8PUjf",
	"+c8CMwkUgltIQ10V9Uyq9fCETvsEJyy6k9C0jk/WQ/MDV7KqC3Q9Q7kXe6yFJH3dHyRhgs7BcSZcFCLy",
	"kZd9tro4QDm50AXFJTmluj5QrV/0PO2eaSXW3SbvhQvSUX7u5+wUTHYwlF3CaySl5EDR0DqjF5bJtU+M",
	"fuO/t3L8Kwr1d1T/Awi5O6awqBTdjd77aDl7UJazRuVeZSsbCBfPf2U8vayMn6rdH+TUd8cKtoZbH2SF",
	"v3ASiWD1Re9x8bbAu+l3Q4jVtcnE6B7wArvuJFpKEMRlyWcbDC8nZaNIQOKeZVUCXhTDj15j5cVMG+nm",
	"5fgNiBghbXCoRVrKPC/EDYdUq1BJsP0AmXt8l1KJoUI3oZWDhyjL1nvk0toY2GB9P4i+jFnCMl1JKq48",
	"1bXKe4yroRKfMwG7hvAGLm3IvRVziPkpcmlE5rSBTKxYlpehSiNyhFIhr4XtsxOXeqthNirU4wHiNhhT",
	"1usOCPoTwM8eCTSlgy4qEl9agMVz/ejZuGhVw40+v0RYGP4LecawtrYRkN76AJipVLMtNpduVWBZBpzJ",
	"QHHQG0x8R1pYyqIuRc6wuT9NJov55Z5OtHZ/0eoZAmMtuV5kh1k0Ou2JVuOWukioZBbYoWDWqbSOSWUd",
	"1Gj3ulhTNCiM0qbRXN+odRnWIwKo537TnCEelrbaTXRYxzfZyG6piNRjtYrYQBmH3St0YYouAvVLQboD",
	"QAf7BmeHgamrL4KlrraBUlf7haSuugdG0nyCtLUeouQ+ER5aSCuUFANE0llS/MaIkkuqgAGlBqOpotTX",
	"XjrwsmJfMMXdaMKzK6HytajBuY/CGvevCAZwdJHwaYlOjwqvF7hRxTea3hF4qaQSHjawP4P+rBDXYsNL",
	"EY5yqU+hzznfs2V+zSa7hIwrYSbCaLvJ//en0OZeFx1XuiHBW1VFmuf15zHjec4aA4KnluGTpNHwCbOU",
	"PIzKjV6ZyXf9TKtpotkWcrJ91KTR1lFXmaBaMP79yTEAr0M55hJ8poR4cCUW9Gy0jR5/wpaPrk73hrs+",
	"IWuH3BKhC8MuffapQm2GfoCjYaNHeinMLOjkkO95YZ0oh4oaY7r1A+GyAzhcNCicVz/QmE2+/1aoTOME",
	"ramHauyhPMY6w/5WX2qw8vq4RXR7Paa4kA75a93G+IpD+wXu60sgZ5MFkzl6cE21ybwSPBOKkMD0dKiQ",
	"AgL5rHm/a2PpIeS8WHUUd2Ocj29lD+qtbCXP3uBivvKEbpRd7vzQ7Z8Bd+dJbTcGjEwyrL6Q1m01lRPc",
	"vKzaYrHs6fL1+mylFbyN/QEMgf8+9dN3GWhG8KLcRdK8gIaPgub9IRBRtWMOs8i6oBdll14d61hpdEHL",
	"WY7FFN1cDFWuwezzq5aKVUZD8gmpIJ4yc/JasKP4BijUtTRalUK5PvupNXFMWW0Ey7gVz61QVvr+PTap",
	"wc33Wqjw3ug0lnesrWB1VQnz3PcBkfZYORNsVFd51mM8L6UaWWGuhUGh6ari1t7k9Bs8bCrtYo62PhTn",
	"cHOxgE+1ivvu+V9VAzIAk1/D0dmAWXPNjMi0yTHfRkgFR0+txgOB4ZSQxFsw9NDxm5lzkz/3ArhvXPod",
	"hgjSocpr4ZscHjErnWAxw1wCwTm3TEHJ6UxUwJ2WQT/0wBQheXhSE7p5XmaVMFNtSqpF3ZrLg22owJcd",
	"dPQwcdv5uvW4TOvtb1QQAq/Y6/UE9NVF9SCc09t89guUA750gr3scXK0TeYHwD8okb9hijtdYI8C/8MU",
	"+JO7c4O8v+rQyfzrvjw3aSt3zS72fht0UFdp3waLbM6lyoyA+vibMwf/dLv1o/h9D4i8hYUdRPCAO/Y2",
	"dvNS7KbvXr7jasH89vtDdQwC2qp2XizkjAy4sYYk+G857YU7J9WslnbOpENvRahUaftD5cXTqQ5VBbEo",
	"HboA2rpC9703Q8X+g40Hgx9HPx3/dXR+eHIxHirG2C8w0zgmhrRQmP0NfPsPNq4MRnheicU4/lZPCpnB",
	"T+xpy5NHl9I5Kn3q5rW95f1o5LXIcfU0stfJn8HIh44VglvHtBJJosokHzOoDGEbby+Oj47PLk8OTwc7",
	"7WSurWu2oI0bs6fhtfzVq2fhS22FQRzEr0Zr92wVQNjTVYg8OYqNjSi1EyM/NXVY6BqABenhbhNhn3pY",
	"O4+9RjbjasxyHSV8Jpv1ZLKaCzN+A1DTUzYeXB6eHR1eHI17bPzucHA5hniY8dHJ4PCH0+OjMXtaeCAT",
	"TOndmReBVKiCpXZzNhj8yILW5TUK5v8vK6RQyfRYpWjkZCl0ncL05YtnHl1rNIoVPHA/F8nyRJ1SLVbw",
	"oNUXygE9GSBleKKouDQbilRha8YZHtaD5LQx39WjZnsr9rS2YlpjRHqbeQBDW43hlZdcmGxg5z+Jxblf",
	"/VcD/N31u1X8AF76yLsjg1QmK6EWVL7l2b9yQe7W+etOBNcaGWB3we1R7XxgaudqmXGj6rk7RzjHwGul",
	"nUBrH8kK3ziWzbmaCZLsfNvDwmr4XtbW0VALNq2Loi0AQUVy32EgMJwj11ntldImAcMYL8Qxw9TG6C6Y",
	"ZEjWilV8UWiehwcVu/per90fn3l1SRPd/f5aJ1RuiJ0IkiZn2BkK13m5ANIkr/16W2BIxfQvEQgvYOCB",
	"nf+InwfZ3jKurMDzOoh9bWJjsg8rShnVsZEVrt7gn32OrwvMd3oee4FGkNQlhUGQm4EuGkrOspJncwhy",
	"G6rfZyQIOctinqkVCmC2mr2KPKjUwFLTqChIHQIrgIrt7QlvDVKbYoxqkBNlpQ03CyjcyMZOXwk17rOP",
	"qxbOeJ7bJa3R6VhOsVE3v7GpRmxpuKG6tdVGNbbM1tmccRu1QIwov6WThfLzTSyUZTeiwCpIX3oeBykd",
	"DYCM7uNYriDnr+1weiocTRbrT2FwZAiVDfTkV5E5eguMZTgT68GOuPxkRf7D4u7QRhvtNH6KnFebzLan",
	"/vu9Lh1WuN5FPFSWHTdVZ6uklGur9qyestOjw/PwwA3MLkQkY0alslYQ18ykYtrkAgoWVkZMhREqE332",
	"jssCZAB4ndBZVhs7VJiKJZTFTicBY6aibcpr8kCHR2g1jqyJ4pDJhOS/sqOzEA59MxcqvHtLNWMeIEMV",
	"MUXv9NAJxOJllsfZUWNFFTk74yXsz69ySBIvLUuqfMOypMq/fFnU6UtWNlQAwHRlXGnlhxrD1P6vRanR",
	"0Dr39IxHFttaW4yZsI5PCmnnbDA4Pbg8HTyvjHYicyJPLuAYxp1g7Kl91h+q94PB4fkJs3KG5c0ty6XF",
	"4Fmttowpp0MVn97aKwy2bQqxF8Z5XQj0EL8ES3ZGlnxhWE8Y7m4vXiafng8VujOsAgNUXvGXb9LBpri9",
	"mQu4up0OaGTZXGRXloFk4mExVGlnePRjl6eDUOcdQvApprjnP4wujv/f2+OLS5YLzPdmvYhDpno6EOnW",
	"yMgtrBM5DKb08veYpVwbOGecTbxKtrpRD91CKLGAtEyWpcgld6JYMExBwF1wngkIba8ci03TwtnadQ9V",
	"XDg+X/KiYMIYbfAFQs6UDqb7cftdb+zhSEynGV5aVugMVocvtFF5hNmA3bQKNA4OB6eMyHSJyIioSUlJ",
	"aHtpOZWRKpMVL8bNU3H8LZzzpbmGauNkNI/H5e1tJ9FeQ+WZr/aAI/dE8luCHPSBEYFc5/+obsbo54QS",
	"7FAFinWa6YmDkL65YE5mV8IxJfzV40VVv/iVMEJIRFGxORWMM0Y/M/ZUKsasyLTK7TPGpx4b4eWnKNCF",
	"yi5UNjdaeXYEoD48P6H3dT7RxjEJZB1uOqT5TMjrQB25sqMVC8H94EL8OlYuA97nK10UT189O7CiEJl7",
	"+upZ8irGA2fyPxsSrKSCF3h/tymNacWkW8BdwHQllGflffZOG6ZskeUob91eGQPzXntxHiLxdghMUc0C",
	"lTSpNgKhAK3jz8WCybLiKOqJoSqEmnnNaIqzgfjXYtYyEwwd6SZiqo1gUy4LCOIElzY9VJxW5mkBun26",
	"OKGi9XnJqxDiOQ4cBHLRQv6/JMOEB8svEu6fcCiuuVlINfP8FwaAi8Q6v4bBydFBLfODmcxZyasKdu8Z",
	"Dd2IjZedczBELioYgXzSEheKNqPw6pWHlagKvUA20VzOnkfQ2nBnHodJtI2/WQEAbW84jtgE/w6UBwiu",
	"CKQ5tyPLywkfoZg7bjK5tO6PMChMNOFNuXyPxZxXlpes4tbmE0YAg1uHCpMNPvwQyv87jav0+mFwBJwK",
	"7mojkOPC251fMtYYy4CIBzApkgWss8kSE8GK/IlECyK+Vca8KPD+/iqCh0SH4vVIsA5aAGQltI5SNq98",
	"X/vF8KoShk1rlUVD6jfxTBPp2H4c6Zs+C8ocXGBAiv4DBVIm6PA0t+pJzePjvXADF5I6dwZeLQ6ycyKb",
	"oKU02UFgnHAu7FognPhmP2CrTuSmWYYHkvn/AhDpAaZR1kJjAM26CQdbfDEQBoPT7Vu2Ref2W+SbrQf+",
	"+/0u1q9g23PV6enRORuQQNHKth1SodXKmQUV3HQ3mhXCeSHsZPCRvX75/feMWjBwj2+J6TA2SPZg8EVv",
	"E4pDp19xXEWu9rxIvIDoiYtcMVk1X1iZ8aIZkALS53plUvy6wcAerrMi79R1hpj2ZFm2S3PcIssPoSrD",
	"vS223JjnksjSL3MTWU6NLoUfaRxd5sCoYoXKQfZHK1giQvrGQeGMcSGeSkMXGM7i8Lp2My3VDNvHbHnB",
	"nMa0YSfncRLPxD5cRrNXNFfExSgcnGw0IquNdHik3KICgUCozCww3CQXNnq+jW3pKjp79ISPD7whr4tX",
	"Naxwy0kJYTlLyuqce11BqJgJDTRML22OD8ZeQh2jg3I8wsmrg9I3K4/Yh/3V+CiTpCMdOGJlk2akhGRH",
	"QuXrzfgD0GqA5LDGcNQS8kCIoAERuTnx2TUF7ND4RyWKf7z8cEpjfODmKtc3ipJ7qVz44fBb0IWOn8PJ",
	"caKsCu68KvNXcj+sanAvMMyPkIw6nruyGKPVAv4JNfLqouh5BRkafjj5cMwqblzjOp/nuDycD3bhB+DO",
	"8Wzu9Tcs0QyP+qFQM6Sz1KWEICTk3Y2ynsvMpY6fQ3UtOfvx8vKc1ZBcAbw6n7O54Lkw9qkfEV0S2XNw",
	"r39qnYk/wBlp/QImJfvUT/MMRwqxotRsqP5nqNg//bfhE5pl+OQN+x8Y4Z84zhCcF/zPwydvsf/zS8OV",
	"nQrz/Fhl2p/34ZNeaI3OGNB8wq34/tvhE/j0r97WUReVWD1QeqR05oR7bp0RvExa42Z9c5qhNYUT1vXd",
	"Z0drYf/CJfn//XsP90+wwfb5+59/yw/1X6D9v4bq7+COgilJw+tqyH8Btg5pmVdzKy2VI0U2/h0tYbzo",
	"sQr9X+CNwXf9Lz2xMd+MVOwXMbEazFqH5ycrHFly4VYntDzXFnjTAHNY7Y0/ARfoFG+CpLDczTc4ijoW",
	"W1ny2xbS+PNg6xLdy1e7eH6Igz+GL9w9kiPwlzCd+qruDeOPfo8Pyu9xmdiUcDfaXB2sqwF1i3DOsEOH",
	"yjfRFvrtLWzTQ2gfbRUkKibZbcVEVtffzrgTN9wL+FMUzklDkco6waPwE2Q2ap4UJV6wox/fnuOA8HwP",
	"isXLMb73yZKbBYa0Jy9bTbtX+NwUjf/rW75GIU0YJ1c1nDtXVUZ/XiQeSPE1O64WHiahGQUvpi+2BHWW",
	"vI3jGoS74dKNSBdZUnGa2TarOWH0YH1F+VRph4laGXdDNdHasVoVYGIPOQPA5uY0q4J1ofGa8IIl4IrF",
	"RcoKPSxWqkBrKf33Fzlou+1KbB3SkdYdsZSDYFRLcWDr0pPx9jpy1KHloAy+AORwQvAHslqVMR0f88Rn",
	"XlaFeLPuoqNRMGSlGNDiOgFNAkCA43Rjesuz6T1bSP36tjLVd4NNth1yURozI/Cly3mFtJygR1JwYHKa",
	"vEOh0y+eQ4zBgWGktDJaO+KCrsekQ9cGy5RWz/03VnqBIThgBK4FQ+eNP5AMppdgqj45/wYe1ZAr+W0A",
	"wwGWgVQZRuwzWBFWnK+VFe5AlJVb9KAXdvBDDRUviuQdIPIhcmT5dtwwvyQryI1g9ka6bI6xe2fvBtev",
	"/Sb8P74NXUfXr/WNEmb1EJQfKZrCcAzoYOeyYqXOBTp1twe9MhMyVWBuO78fO+fwNqnhFZqqczUx8OSa",
	"AJCIW8UBAQ/5CIMz28/sEJqI35/++Rl4U/kpsJ+pMuv4pp6myvrQZGXnQmdXmzs3LW4NsPIamO4r3ama",
	"dinTKZ5v4ERyMyeS982J5A6c6GQjJ8LsD9H8i6bfKfTCT0sMq8Usou/lQWMqDucabMBi5M8Ync5glIUc",
	"PovK05unO6eZEVOoDCPRmOw0BJf7NZC9GXIj1Qqc9biF2GXPpPhQXb49R3oGp5CXL17RMS65WmTcuq1z",
	"B7+PxFkLmAeCP0ewTLkFkxIMjWONaUybZs0HRw5atswEOnEkP7Q8DW/QIUraoUKDt7QUEwULeseLNSkx",
	"At3t4SDKTh1EmRzE+3FgSJG5UqiSthvuCw2s0MFpS+36ppQJNv9f1vI7xzkfbWZ3jnfC9g5pPhBHVCAL",
	"/j1Cz/ol1g8SAjrJNe7cEzwcJ2dHx/+NZnGp2JBmHxlRaSshydsToBnpvrHsvwYfz4aqScwOOfbXTon1",
	"AUDy85JXyRWfiWQx/qgmCTPGldHV8n2Ulg6UQYP2Q9RWGD9kDRk7/CXQJ3hYZue6LnLGixu+AGk6Lmeo",
	"SEGB5y1e8YkspFvgUTn68e15j52cs0O897BA6+FlMn8fak3k86z6y0t2wGT17chfkn8ZPnn5n6/6L7//",
	"c/9F/9XwCTtgiru/vEwx00CUtjiTjn26OMEtTamwcc4dx6DEFKEk3RuusqYKWojgagZm2CJ485GvIAQa",
	"+CHBU/f2apb9EqNLaBohQYK3lxjAj/yYVFP28mX/9fOL49Pjw8Hx6ieNyEn2cb3RdrqTLCOe3oZxH0T1",
	"YUs1qkajiiw8zVqDNJK3yCPF4wboH8YV7BUNcQNdxQQekNXlwdbB7gfqs9+SXgTB5QV2FZDbC/1EW9iK",
	"Uj/NLZTQMoRZNLfDN9azdzkNQjoaS4yYGmHn7diEHlvDZFHwzYO3ucEled4f57i9uk3naM+1g2gXXSob",
	"tAr5u+eZIaljLPPxuuShCNh9JmDonlx312L840Pog3oITTWIDXakjYfzvHZ3fTL3xk+7kw1lFTfV06nM",
	"MGsAXV5ygyP6KSpG2MVrPiFzYkBnOsoGlvCRhrhIJ+0cbOjGFiNSPOxoqg0CapMZF7cYJJCfqe87bWC3",
	"Xdqm1hsdn8/990cbzN0jycN9x1oHf3s3YB5P5BWrK13oWVDyMRUG6XExHo6nKUTHXucfM6GcWfSH6rCA",
	"XKzJr15ifnqdi2v7LAxBb39kaIFgQUrcCtbs4JadPKI5jTU0k8c0fDjSBQNXR+gTQ1xFXkem2x7l4xnT",
	"hv18fHHy7q+shPqotjYU7ak0mxQ6u/IrA1OGtCyMhP4JYVJ8axwqGqgtzsspBG3AUJbN+bVgVpay4AYC",
	"/CG80PbYZEHR9v6/HsHcSItx5BRujHZ3oeIKhwpMIjgwxH3n6G1ekM8n2Y6CO0gwmfGCZdJkdWkdV5lH",
	"oWXSsYwbQA/HxANTmXGFDxdzwRGWZCkBnEbigCd91jjTorerh1jjvRv/759DOB3o13pxeHL0t5fDJz3f",
	"Xtorcvd9kvPwI38V/vF6+OTv/2rG+nsvnSzj2Vxsm21weXFyfrxqtm83jV3o2b+/j+82jWwrbkTT9vvh",
	"k79Hf+C1WYKIi+5FwtC6S6laiW+Fq+XAU5QVbsvTgYcPO8Km/1t9Q+uCRnq8t+4H//2A9G33F7gcYduD",
	"367DBXatCyt/Q4t+KzDO7/QvP388/fThmIVcIV74pBxlE38fogtmEW8mvAz8eP2hGvvDawUR07UukA3D",
	"ZJ4Vh/oBt6brbzzZDbnt7YATlDp20BNELx/4LzDRpBSAuiC6m4isNlZeC/Kb4YXVDIc6yIV1Ri8ghUo2",
	"l0VuhArjWI9ocLJpOdxgTzap7SJtuTa/cILYr1oBTamnOxmFb7GJO78cHi1SD8sideteqjeUmOdrmNJK",
	"I9UfkFF0yF612zVzkIRQbksTmTzuRw94zKhDNTAhFI8mIAdpTMY3KegdWxRFcIEHN4CY2GYujEC92wgo",
	"izRU4OXZY9zCkz/4YGs1leSU3dLQMNsShmG+wcjKJtix0VzAEdiPmsQu0k6wgZra5FMCGlJbDkrlDhxX",
	"Vwc32lyRBvOvofr7NhHHE/hhAuk/Aq2nlPPVkHslTCkhZ92maGrHmnZYOjIyNuRp7Dz5XvLFcr7FoRIS",
	"CJuzSlv5mY3R99KPpJia2utv2ZhnxbjPBhiaDQ7QJHc1Ts1DFaaF4j2Kic+YxpHG4FnRZyeK0rRyKzAt",
	"H1WSHHt6qPw0QxWzQqItaHxpajHeSTz3tNts9w9Bug12vyZWTQXhxJcw6tiHwu9vseg1LHSZiVYy9zzw",
	"1XevXvRuR5HbcpKv46mZ9EwVGGVv1ZD/+ac//enPK8YspZI6GTQr80Iq+nhQW3NQ6IwXBxOpDqAte/6W",
	"Jb8Ll9Hv5En8/Dl5Rf/lRR/+/81/vnjxgj1//o9aCscS3n5F692RsZ9HvPwhzkbczdd0MErtNvhonWMD",
	"9IsrtBJ5m53viGWY5A+CY9hL5zFsRKbL0kuY+chrFKNoeFqP7B9FUQkTio04zWbCsWQgMGrRpa7EDQNN",
	"5WmgBy/GLirB0H71bKcb8qIZ/G/XuvghrvEOULkeQl02dk1lIaje/gp/vtUJ3NqRa8EU1WPiM1S5Jj/X",
	"zSaqgLh3cf49+wZ6VN3ebBcfHG6ndVhpBXo0/zw48892dySt8eVb5uMe43kedHzPXsPLKRzIy3moMZW8",
	"lAfVJD6I62mj58Dr+UYb0lddAQoYRLesRiuYwu9vJaqC28U+TURr2f8dmWPuhno6Z4dZRUC58IvcUA4M",
	"vkMmBXtF5XuJq8g8edwq+EQUMZDGMwc2q2XOIDsXRHV6dG2+/D32cb6vG/EI0y6zjVzfqELzfNQ4No2u",
	"xIZ6REfUIU1QeSUWJK3P5LVQSBeb1TbAMA11HEf6SSy+coSvBmeXKUB8rrxctRbhx/C9JUFQImBuM56H",
	"p2h6hAYVoGF3wVchoYunY7hZ0sSQXocbGwFR4aNwJdG49HNzU4EvHLit6UooiK6EFBzNFH1wsoNn9PSB",
	"/fz44sPh2fHZ5elfWXhlDx5zoM5u50kIi6+bRBHfXabImXAjcFtbT5TvBRaZgWZMYi31yQJwabGijSfU",
	"ds2cELOOneAGW6JN6BNSmqK9VeSbmdh74Y5grb8DUazTP+6eSBoUdJZKIPfCzPBc5NstE0FE1ZgcI3rn",
	"6oZOqDSGl1utC8G44H4Bfhme2mLxjWnBZzZkydjONk7sp7DSr5p1pCDvLF0UOrvaEAuss6vGIXtXScX3",
	"+rpR56HSZZ6vp9NCqg0244/Y4O70D5rw60Y7gbXTmFdbEK/uGO/qD4B21XWsV9zaam643YB59KQ+eAtJ",
	"ng4uRKmvBWs6osqplrh5Hyvdo8dG0thpyGEflAoYC8SA2MSrDTwvpRr53260ydt+2ljFzS8GqqoZHKU9",
	"zXbyOm82/lWTWLPnTpPZrg4ZaV6ckDptpWcG0NhmDO/b2eCOENwtL4NV2DUi09fCLK7EYmTKTSiG4x6a",
	"R3vVKjlw6wG+aCa9KL9uFLfh1+VzbMRGo+SF//zvovPqazc6AnC6jT1//raez99TxDs2Bt6acmFjPOjx",
	"394NRmcfB+dvn7568frVszdM1/gKVvFMYGbNsBAYrtXt6Pjnk7fHT1+9ePmnZ2+Y0szW2TzMK9GA1Opw",
	"cXx+evL2cOC7/Cd2gTLUzAhAt92BNgFuXzlx+j10mzqrgmcbyRMaBPrUCnyGQ0xfmyj/9m4QaZKnVDlU",
	"Y987NsTY6KnEHNY49A4EgUv9yikCNtFlkrCZqScbnBUxAB5C031LqBqN1b9vP5Pgt3FINEde53oKEeCH",
	"F5cYpj24/Hg+fOKpZvjk/PDT4Hj4ZPvdNYBlftXEAPDrMinUarNB8RN8Xyt7jBs9qa1NwqFvSaTSgm06",
	"vFfEEmqJlBZLqKEuQg6U4nMlqE74kowri5DNItbjAlUGMzUcjPDXAyZUjrW5YvZq8IGjt7eltKHNS5zG",
	"ZxJo1GRoJtP6TDjLEHqwmQGXOY4xEfS8gjnsqOoccFRsP1peQfDKQ5h+HdXGwiFFAvnK3Z9U1+3H9C6x",
	"4Zxig/azj9PL7z3Lbz0Mnnq2s2Ia/mv3csNNdA/LJbxZexlpPYZPoBGJUj02WbBMV1AtWDobizs6nUpv",
	"63EKgx35Cff5oJbsq8tAH/Ha6Vw4kbnR1I6QKNfh4TC2ZY1fNbrsY0ZSD/xk8PGumGgGfmcv/RLuBjMr",
	"Nt9J7/BkxaXNtZ3aEcRZbUh4B24U8WKn1oAlGgHRlpTwkmoVAtclJGhw9wHHO6UFdRFyU4kFfHeAFLiZ",
	"JKEOHmI4Cl4gS5VsUUx4M1T+AuiBftiDygm17cWqIFuA+E5S4dKugS2k2dvClOHeneo6+FO0qMiDfhwE",
	"Xs7GMe19E7Eb5crgnoNdY71jKv9205iA1oreN3PIyA/9QzXu9hsSBuxyBwG7LVlbCZFjFveJlz4hmSwu",
	"4LY03dBC21cySvboQDJarpGcpJTrtZzpqNKTEU1VlLw28FThIYOeXQFAQ2XE89RFBUxi9g3ZqM4+Hp9d",
	"sueYgsTrHYCbr0y8BhTuOwNZQudd5PtGWFlcC7MtLOgitLv/cLO45LVhK6H0kkD6DGtn50ZqI11zhCYC",
	"sps7WULkwQyejKEmkfLnKw+fQqUzSefDeO6M1YsEy/mix0R/1veneiYV+wsbPnn5n29evBg+6QFx+x9e",
	"fAc/YH+pMgPUDScvbIhVtD40YsMQ/r7QCiYZqlo5WTAYKbjGKvHZ+Y/Is26EuMr5YkzXh2WZ0crxydPv",
	"nmHkt2Uvnv+JPX3BtGF/8lse1OrZxuibFuL3ZtPDOTpUDmmZ0uKBica9Tadlk2ntMcvevtGGKNohRyya",
	"Xx23VxSA0Njl3dwIO9dFPsYbyIayZaVUsqxLxrHkoz+GwCKUP4UW0nigwOvlh1jgYKjCbP5SNLVifBbq",
	"va29oAIV7dl82rHUeQF77RP3BWnzEqwGU/qGVHYA5DsMMezK0djKvh4DgR9eHriEc24IB97lgJH0cNen",
	"a6+MsmPJ39YwSlNvSH11oqST6eUHD0n46ERq85QV3Dr6fMPThN2lxlzdiqX3I9x7eM31N99lF7Xa/3Xm",
	"999VBCle2bl2/uhsFSHTto+S5D1hMEXCLmUfhZE6lxkL2GOXHB0ztjRJijE6fiVYmNiig1EwY40p+8mY",
	"cZf+7IGY1wUkfLsI6YGTQcgSg5Je7s94mkV4WvAZVhpAcw/7q66hy1h8zoo6F7GmdYZJhWMSlqECTTVM",
	"1B+qQZwzWNp47XTJIZF/sQihkyJnfOogf14mjONSLQnUvVY9zKEaF3Iq/IcR6LGU2Tb+WCvpxiun99SW",
	"M55l2oR6x57TSTUbIemNqQQEvFKPrTNTP+L4eSGvBHOirAqPOK8fhG2SR45fAaS28BzM72D8f/467rHx",
	"/ynhf3P43x9ppf/nw5aHiqXzvj8mmczTOdG/fdxW8s0vUATWHjawrEaS9gLMlnzXKXIejq6wzPx2va4e",
	"NYcHqDncuik3KBBfeDAHAoNtbtv4x8jAxuF9BV7SlJdWsY1WrOILSDhBHNRusnXe0zG/C07fNd3lCzj9",
	"Zo3m+LPI6k00tV5FXXHzgptsrf5AiO+QOrQG51u89rakcWAlryoIqUt8Cxv3aAviF3hZ2/AoqxLHw6HS",
	"il3roi4FuRuuJxT0xRvQJBc4wB3kF9wCoI49K1J8gqMU3OuEhouk2aN6e+cIS7G0g2KbYOu2Srv8MVFm",
	"q9rOmTasqosCohsandRp/wH0RyMge+9cW9cHLek/gjUqKIFeN/O/wA2frB2skNA+l0aQr3zTKeaWQ+Gi",
	"KNj4/NPgR8jTPj7/dHo6bhYEozjDla109FomucLzlmbhvs1UGPCF+A82HvgBw482aXgtORsMfvSih8K1",
	"kcMDjRrKNIEfirgWZnEDOfAmtWO5FujQzbO5FNcUTAQP1MEgx1WIMRpbO/e6HHA9XthxSKMXakRJUVDp",
	"prmkDYCzx9OfxCKbe931bezNTo5ikly/t9Hbi+Oj47PLk8PTwfhZs+f/7+z48u3h5ZjVEOOqGieYZr/o",
	"iMEdj/AhCHgmDBl1Es8wZ2rruyvhbrS5srg3z76b6owMl53aBpjhaiaQkMZKuIy7Ec+cvBYjK3MxAveL",
	"Ep759YYG/DNujoUCjpUA+XFFj/EmqBdWt4tz+XvA6CKBCsHw9OPbw9NxpGbROhLgTecPRGh8/P7w7V8J",
	"2IWY8WzROgdCzaQS6EHgx3lnhDg7HLCXL/uvgbKtrk0mQlrhQCJKq+eirNwiOqeFBhjQRktLiNqvDo8K",
	"N5DnJ1ikZFIdBmJZapd0k8rpPjtxaDGB7J+QMwcGYR6qMGhilQKzSTRAQcqumEC0FBxirDm6G64zu/0H",
	"GzfF48cRE4Er3IhQU9IK1WQMT6rh80KrGWklLT5R0YxR1hp5FmOXYh1Cq8ZyBIzo5IhEEW4EQ7zYNosJ",
	"R9Ujf5nb9dlHf3CAsy5/i5a+CbjKeSysXILtBx6b2sFaa8dvjAQRWBEw8WRKGMMT/EgqQNPoiwds7wEH",
	"rJ0eM47+K60Nanw4b9kTtWLB+AlBc2BUxN2v3joehmAvxSXGEWiKNSCnpd0GuicQXbuleT3y2lAH7AAl",
	"N3MS2XuxIHOjZmHhJ4uBMcuTIlFu2qj1W7F99k4bJrAIBNRaWJBxF9axriuQpwcFXEvs5XeslKp2UNq1",
	"dsi6V0GK2s91bYDEjhWfQLrXse8yKrnL5oFCcJ9wK+N4K7gNrAN6pUjTxm9kBdSIIgt9M/J8amQz4/vG",
	"JINNcbzEwN7iQnTfhJXAdtwcss+CpRsHZHLqWSdcv6HS77oBYfXC0kFf4iNG8NxvPjInC6uUCkEamXFo",
	"F5jTIgofx5e0OxuS2q3qD8wch/iLVnRMplJJOw/JeFvnEMa+OP5/n04ujmMqRaxv7OeI2ZvXTQbElc4Y",
	"1k1Dn7w/+xhH5tda5iiaXEkF0tZEzPm19Hj+Dzae6yIfVULlQDkBftS5MuJaKHcLvIivicBVFsKRsCC8",
	"Uga2oWmLeqdcFsBvwdKvS1i+JZ4Ue40qXchskcqYc33jd0wZLLW/TdaQQsTZx08Xb4/H1MUuk7u/FfjE",
	"QjZlFfcFNyR0f/tpcPnxw8buusijG+MODyc08NnHM7+qIHmGnJxqsUS0XtMwAsrrjFn4Q1iQda0zgpd9",
	"dhi924FsPVD95yh6IhuuhMhHoNiNGfwH/H8xvvGLRys8pLE8wrjHxqKciJy2GxeZYz3Ta26kri1qJDAH",
	"PoIFCyOFKpRcsd+mFsSDcSAEA7JEg39VlxMMyaWP9BbuT7THGnhYL1OayNc+BrUV430YFZLFdOgFqK2R",
	"LlkSDkARH4lCzuSkEKOSq5o3lq4NRqK38KroD2npKTlyrtYLa/OuSndNW5Dp74IsmOiYFvgB1hdfI+8C",
	"kVsA1HX8Ih0mVbE310eO5VxUsB4ghxyqwywTlbMJTjFuJtXtPVMAzbzR3rza+3QKGT7Vc9C+GvbybCf8",
	"w8r2W/J4xckNEOs4fr/k1faWPemL3muT3g/hqXbZkLeDvfXxffZBvc/eMvVufJnd8fDdyZvs/Rzl/bLt",
	"7jzE7sSwNz++XtTqNsFsfHBdQunX/NaaYrUTr6ybEVpIG621G+TlU2ldo8pvEK/2LE75dYTa9ncgTbWh",
	"8zWgsqWirA/SB3zyoli2v4ZXl9sWwNQCFm2cK+PLl9B1BjMMaEEdhh89XdQKbXP5TnrkXGRXULUZDTpY",
	"r3mxbH3JNdhO4gMHmm92UiAvYeBPYVF3qTxuAEg3jwLG3m/xL6BG9716WsYO0cpxzcxzvgm3UM7b/2Bj",
	"yHJW1SOpRpUwmRe7ZviGMfY34rjHMl0UInNwgLVxlr09/8Rqy2eCzjp1YlJZJ3iOmeR+ldOpFJaSxo1n",
	"hldz6Zae31NTb8g6wbRhJ+f0zEkzw3MvWC8nWDDlPQ3HqqKeSdVPJhnB+ptZIMCSf8YAyxkUCrROG5Ez",
	"aA61Wkqt3Nz2GY0AiQNsTIzYWOPwg1/bUAmezeFRolj0WM6l/8+NEFf+v8JlfRy+z96G/NxuLiD3AL07",
	"08tBMJVntTF+gxG5sGmPr95QWR1TmVmBT+8WjI6Q/FvkPcYV1FD0kOQFG1NJu5Ex+YgmegPpG8gzP5RP",
	"rIzwYO1vkJYTit8Lw8DxOxSmnR6vFms4CG/Tm93H2hgEQsaCPkhvAOvTmLbFYhlDosXoSIaZ6EImj3Ec",
	"s48Nx5DpA4Z6pzFlAIQM480ba1z5tiG/4xjM8mi7ruCMfLxgY0qnhw/jKh+H1+uJGCp/nffg6ploN6fc",
	"kbOZETPQxegFB+s3hp+Xqu1iUmt/UnAtT0V/1melVD1/Jnvw6P5s402G234vQHDbOxVGDHeZCoECdrqn",
	"3mPTR1+4+0efrp04kNX1t7ObkfEnAm0+mxiJP8In59ffMn+wbvgCTum1MHK68EKjdJhDiMbyV6MXHj3M",
	"zZSTgEi1BCjHjofqG3ZpagFSp2cRNHRrJG2Y9jzjRlrB3vHCrgnCvPCbOoE9XcQt7emI+qlGy/DrxHXh",
	"V9bCMtXthj82ZzqjS/8A4NK4qTHsulo/8p8GMMMFTvB4uu8X53ahsnwjO8YW97tiXMM2Wy0ulZE/Ogtq",
	"BJZGRgGg/iwLyc1izLhzRk5q12TlspiRq+IWzDyeHSVSaUOm5KILk/W9rPr0u2cr4/0T0O2Bp8DgXZI8",
	"A5IiXZV6O2X5No884H6Q5WG/i6s7tWWlzusiJgN0c/D8Qx3MUvEnN8eMsGQ47LNz/1Mh1MxBQDFgEc/Z",
	"yxevXnsV0PAMTlVUcyHBAhaP9K2HSqipNhm6K70zQvwwOALPWSgfRCoI5fJDOYBSDPLPYeboRVssKF1h",
	"cL82QdWJSQqHKvN6a1OPHR10la2NaOnjsFvQI0DLEMxpzcA/VhsPKy/pUA7x2njmEsBj59o4YYYK/JHi",
	"RhGwJf+caaXQEVMxIlFMVtbAOyjeYS2Nlm9lWReOK6Frm7hY2z77mzA6wdhQ1YrQgTPPtXUWfAWXvXa5",
	"c8Io8GNDd5Bg7jiQleeRRliLiTPChGrGskJ65ZydTHEgaRk4VveGihcFDIFmAJiytYhcqMXvvQaiTz8I",
	"k3YYDHs9xuFI+dlyoWTIyijSvkrTX42CSY17SGrNz4WYOtzn3d84XqhteOreLp1S513ykmo4WXrxfIF/",
	"xRJ/25YjKzR/EL4U6TWx7R5/9KJ4WF4ULRFim1i+y/kKIvPdHq49cskOuTas4JLbki5dxEaPAvr9IGzX",
	"LEuAKfA16aeuSJkuSy+0SNWcQT7RtWMkvpN0jI7mKK+gc4OXrUAAS2Urk7xyTUmyRU8IMOiApOQFZmiR",
	"yykEf1IZ+CSgtTdUwyeh3f/FDyMI7HvC0CkqEae8iERysc5FS+HAGSAoAClXzVgpsjlX0pYYToVwkX3i",
	"QewDMiA/FDug3waDH+GHdPvIqJonNNoybQK/kuTXCHXNoptgTHj3oqU3mcg/fDz6dHqcTojoaD/7gbbQ",
	"Bh8BGjpC7TvPXQx2BmmZqJ4SOMHs4LUSGuPI8BYvVLaMRz8QDr4ydlhO6SkzbvT80+np8ZGnjPNPgx+P",
	"j1BOXbPgEHIwjutiRuR1Rouy8re4HpgmJqHC8FNQ2ErporrCTTaHuMg4XMmvhEUxmWKxotbXw8dCA/WF",
	"7aIspLqyPa9olhLiNmwPVbbo4yFLYXtsZnRd9TC1FSVixyocBCeQCJMlhBAUaAMxvH47aUwQQFabBe2v",
	"5R5B7SnCJTYljRs3IPyakxnDz/6AyplUtMB0axueqBIWv7ebsGOJtVLO2roLv1Rl2OLcl2gLDyVLVvvS",
	"2ipXPCoMD09h2Ckd1i7HKygLX31qqoZHdkxd2MQjN3tB/5eexMhxQGUrNbK/jT7WrqqxvAm/RivYr3rC",
	"Cj1j4nMmTOXYU38v2oUt9GyTseuPkKSqIYFuuE0vYd++3qQmDl7f7+Ogfb2Vnwxeb3wUhIWMoB4o2Poh",
	"pDbkMOVFNeeqLoWBZK/xuQIkwigJT4S7EUKx7+D3Vy+SlqEIaGaE+30m+TP8/u3tSSZG31hhGumwRyls",
	"UcS+ERN80YheFpRXI4UQCevCOBSGQ0oIrLWd/M5kTjIsCK9R2g3aIKS1kTZauXElzHqhXAzV4HXrdWIV",
	"fyfK+v3Pm33doXdToF84ZoiAtT4X/89f7pirAWsAxuxuWAGsdfmTVxz+pmEIu7qwHOH90chzD6gn0Lfw",
	"n6oh90AHj0L5gxLKGxLcUuKC7k+hnFmQKDfSZgRZ6eDOeIvuYMWCSbrdeIiMQtY/Zkh/dGtgAbGYkG4u",
	"hipMEpJQOW4gZmSitVt9Q2yl2X9T+Atba9DVZhl7uJNwKx1SAlZzJyMKzfMNEZDwHSWBgM40OV0oh45E",
	"czkXbC6KShj0pKitCGGyVhTT/ginG/0P9fr702eYumd5kj4Eg4BLBHaPWVtAOkF3jnQmT8YwBSUPJdtj",
	"Q4QUELJa9SDCw80+2S9FEMQ7Sw8Avk0EgfD9/SgCk73eIolb02ylCenYDXCaKS+KCc+uKGKB+j/987Mt",
	"2Met7xv9OEtH8b8F+4PfFfcrMX/neB/cAda7j3OxvrrzpbCOyekWlEPE6MQrtDTeJrF0QFN2Ehq62nQA",
	"dPU70r+ubpN/e4L9U7+u9k78uuoq7TthSqm8iFYZDROtRf1laMqoKWC8CjbQd9JYh5lWx5fHFx/GzMqZ",
	"4gXIKqrnD9ANR8zFSTENm5Ol0LUbMysyrXLbo1F+OoEEzjBKGkBD0bDgMEsrac4egmtaF8UinQd1SVwX",
	"qJBTXlgsh3Yj2JyDTccTKM66kWQiIM4JZPsln9so6hotzblXJg74tNpoWcVmh9Pq0ThzDyhD6Pc9krb6",
	"4By+O2e+A5lP0Yu6x8bgydxjY6PHPTxG5gYzLhZgM9XoMoOWXnA2sH32Hv4LrXIBp9lR0S+u2P9llRFT",
	"+fm2zzYMn/hPt2Yhd2uVH2gTE4qvObQp2e3lnOIEIz6tOuQX0Mb30jH9At+ASAob/QIaID8Ex4Dls7Sd",
	"4z2aIR+WGXKZ2W4wRW47YOe1u5fTtV9G2SG74FpGqaZ2B3nmbPoY9nuPaPNI2sGn+OzdgA0aicYfluVq",
	"DvgkDF/Ips8xyzNm78nJcxPOao6urBArFQcNcsjSuM0GoqSSJALHaDEIM8TILdB9gR/MOfh3ohfxUA2f",
	"UPeDktur4RP29uTowutT+PjPTqYUkYbpwMJUq2PSltZ4cv6NPQj+0On2N6xvecalMbgREBrXTMyLIpfG",
	"Ljn3Yihg28WXSZWHmikeUk0AGwSbYSVZyM5VT4JfqcQiG2T0LkTmpUyofE01aqxwGyVEPMj7ZHxqajso",
	"IeIJWmJ8XyAhxqO1zXm0gfNDEhIDg9p+jTwKiQ9SSIw32AYhcYcz1siJd3vA9ssuuycn3maXtpzsICcO",
	"ysmjnHh/aPNI2kFOHHz4IZUTnSxFybO5VGKVG+KlLAX7gN/ZhGdXddUU90pFQ6OpO9Xg77HK6LmcSGfZ",
	"jZF+apKudCJgYSJFf7701XJ/KqCVdgtTxnpVHGLxb7TZlhKhkdoO2Ml5iJGLgiCWtFox0+YkB1tG9SuF",
	"CogkYq6cwMuYnM25yqd1MVStUf0AVMwP/HNa4/RaxkNKUeDBIXI2fHJ4ejp80vLcATlTulBJSi2GqlnQ",
	"4elpMq/4nInKRWdTrdqAgncIDwN63kigTrFuU6snv4rslhR+JRYeWRFAsoR8CkZfy1ywa2lcHeKhyFcO",
	"g/csOqTOucoEm9Yqw5QLMsnaYMuJ12RCQTQ4m6CcNAkabDn5FtIxpKkaPIIyfS0MPvA1HrHfWHZ4frJR",
	"oEaOt88bwpaTDgrUyGqWbogvEKgjD9pRoB6Uk4ckUAdOvv2+fRSoH6RAHa/6TTEU289YI1Df7QHbL7vs",
	"nkC9ml02l2RaKH6lf05wC1g25a2/MBkNSRdtmsAIHAUiddgk1IOGG6oVF/BqX59IPT/HzaTl5DsI+Rsx",
	"yfn1DtrML9jwUaG5N+QRqnbQaRBXqVqzrI4k2gi+30PmA6+YQGa22yJ/ErUfhmjX7U1T1GFidLQc6xsl",
	"jJ3LCm21UWVxeqhwR+wpRnVFFwLIeM2ebRQ1Iznuk33i+joocEZSuH2UdxE76UpMyWRHyRO7PCThMzl1",
	"O3HIRxH0QYqgKXPeIIXuduQaQfTOz9vemWn3xNE2My0pHGDtYS+D8/z9LRyWsF3hOby43BQ3DlHU17xY",
	"napVqlAhPmT6EVOpqDy2njqhGKwjZzxz8hqfbjXLQlUlrhbMCevsUN1+VTc1rSHzEkfGi3GPjZOagn5R",
	"4A4YkmRlAv0BW2uE7FxkOSuEwdowtO+lOeV0qCCVkYRi+KIEtNa+kdFgovRfubVypvwS50bYuS7ypoSG",
	"x4vwOxVNzqw+u5yLhYcMrwtIjfUC1zNU6Xu2WKAvpLQgOK0+7+UeYzL82F2KGCf6jeftwBPK1kN36Rs9",
	"6h/3g64+oGin9xR//CCCJib0G8OxW+l9gwcSD3GTKaLUSmKZKEleNy6O5YGD2ehiIIpL8kJjOZ5FBdcr",
	"LsYvnd4NxGeR1S7xTxnR0lqaDeScg3G4vQKupq+9glIUtF6poiHBCpZsT2kXikzl69OWpeS8vwPvt90l",
	"3SUlo/bR/yJTeYu8tqotAdIPQmVpH9StzPRRVXlYqsoSH98qO+5wyoLkcsdHbK8ss0MaygaWaYStC7e5",
	"wpG/l57aZ2zQ/9A/7F/0L/twF/qfqPvqOyplEhc0z6Pg1QX0b/Y7ouf3e1zwju9w65VSJdxEagtpWYJi",
	"FZ1kYobY5UTOaZ7eG22uwIxMKmRrRBIxwW2jScCM2iR2RxlwZMvJy3HwuSnEjGcLWDo6JaOqi+m/ogeP",
	"MF5ITAVJHBGKZZfcunZms1xgnCdmJm52wSpunMxkBdqjVIwzyovGwMk5girXJZdqVOiZVih9xoIc5ECi",
	"hCv0TKoYu+21WV3kwrBfpMr91sJ+5LS9aHBCSmt+LAvc6HGNanMGR5BEbFgE1N30Q5BzDtS7SdE5fKL0",
	"ROeLUKLW36jVzfILA4I/VLKBjpH0gvvQOt+n34TR6AHT6BVhYDllJc8+Dthb2j44AU1EWnuF0OqRvuT6",
	"VGh95clrpX8WxqI3vkOGh/xAqu0TJRUbPmlchYZPDuhP8EV6QoVmwQOqeZ1ccwPvze2meT/uhAYxaRjh",
	"wUSqXFZb34pPW+pmeAaeYp3jBhtOk0bniViqvMF9zEpwGBtHO9FkwY5+fHsO5h3xOSvq3NN+k0Qc79jV",
	"9+vkB9hAN96HW5AlxrIrZLG5ZdeSSllpdiOVB2LeZ+GpHsJGqJDSNH6HSkbW6apalz2jnBzB8B0EE3AF",
	"K7K1APpkBWtpBMg3uYEKXwlrYYdvT20oBw1F5uEuWQeRQZj4USa7DxLoR8SvN4eRsOOxfPj2FIpjUR3q",
	"5j5hv/hLB52B44u5hsfvoTq45uYgn1A50wPLywn/FkluJNVU910+AfkGC2UkchR4v/SHaiBVJhhPZsRb",
	"bsSLG76wI3LyVbBAoj1I3WEEVrpzrhBDlUvrJDqYxgSufs4xWpZIyMJLYkwpWyzjXohBTsjNrC49eCmR",
	"LGwBpbHnsTTF0i2LjXhWjBODoV+nUA7ivp7mEn1e/V/P0IfHr2qq/V3qb+ArsbBv0MonRjdzPbIy91e2",
	"jkjBVIBY/RXdfj5DgQcveFjGo4g0ODlKx8Glf8lAvkeftft7xsdZ3EVMpRsK4y1thJG0N27C4zATrh+/",
	"FFQ8r+cFKRg+1jEJJRygN7xX0L/hCgTRlGSrUCwExeWAGXw2eWeEODscBL4UwIFOIeRbHC2wSIUkmSdl",
	"HNjMcOWaAnWwAS8nemG9P1Tjd59OT8fYCgoi5z08Hb1gtu1RfYpedKEvMCsFHh/0NfEjvf3x8Oz98Zax",
	"fEccz3e5OD48anWA79Q47hiNz+Q+dnh6+vEXrB9ydHx2cny0xmOlxbH3JaYFptQpi2+LVy7fmwcz4XhW",
	"rM8/9LMUN/GQJa+DQLopI0G6jlcp1EIktoU8CMqZACcdKrhrW26A11LcoDCX8aKAkv9Nhz6ucrx8gIGX",
	"8qoS3AwVt2x8phWmF1qSHEFzQhHHU0oj/YDGhp6GlABQF9d4ZwDLgUKkwDs89VFOrDHmIB2zMbX3fM2m",
	"1XnG7zDREWgcKIZ6EUzkAJpQ73OoQu5uUFO2Uu57xNUd0C9RReepd4c3iwtRFTxLKTOEkDSqdHo70yUG",
	"l318VQb5YcoGz18+f/n8xYFnkkP19PhamIVWgj1n7+qiYG+1ckYXz6gMrLQMq8BGJRn1W0yTFU0P+VBR",
	"jEetcmGKBYSfR9pHuRSSuK8KFZnpa2HgxqJZMlwElhtqF/BBjxc6cAgvOHF4zRhGyeN5AT/GP6TKxef1",
	"jzuRPO8+g253JNB70T0e344e2NvRstpT76T1NLktWmkjQdBsH3J8YFqhE8FFCB7B/1udaI3tbH885E7f",
	"r5IrtEsvWJsvUbtQ2dxoJX8DdW+9sWnQNEyIylOZTRxFAtoh/ceEW7pUB55SvrHM1MpfVyD7JMTBvcA/",
	"pQQiMiHahqpIp8YUpxB8aqWrsXt0BrlNdu21JYsqiqHytydSum2vb2kQCdb5pQWFauR93NxQTaF4IGdW",
	"qlkhgrjwBnSUgxefUXAgVZXWwyc2VFHkij55AYUPFYJXqqVpt90KCZYOPTa7SHu1kp+zOTdWuBUmzlW7",
	"+9T06JoZUpWbM3D67/e7Vr+CrW+CZx/ONz0KXr9OCkaGUHzodC2MlzDZ69BwFCwf4x7zf/plgdKOf4Yn",
	"ovCnkdeV0U6TGSv8xK2t5oZb8jqFA4/BYlAQ9fr1eKj8CVQbHDoD6PfA61VZdelZBlEM9GjnG8nRzu+Z",
	"Gu18h0ohzkk1g9xSg8GPLOei1Cp5BwJdfAzPT1OeoS8iPm+EbAKQCwDNFLwoGL/mEkS+5r1pjW9gHUG0",
	"B6qx8y4RDWCCaOYgAnPro9NhhGX6lOdvszhG8mhNKAy4W3l72fkPoWc3uHsDGcedzIyundh4qpJmjy9C",
	"d4+vBPy7+EdDc3ahg1mZnpXZlJeyoJx24xl34oYvQhREU4A5ejOU3IX8eWDxBTMMw8UwE0cfJ8sIgR5o",
	"QuRFclCAVakFU9oJLw3PuMnDU0RrzNV2whYF7oV5NTN0ycDdQv3Skf0Sp+aEJrZ6NDczPAif5qXTtQMT",
	"fDRNPSzT1DL/3aRo7HTQvBh2L6dsv3yzQ1ahlXzTHsyEG+Xc8fVPguDVzB1nlZbKUdoCY3J8tFh/O9n3",
	"wh35kfcHZjuKy+8EgO1K0FrhwJqzqd4Zemz5VoxP0LUSfVdoAIS61aVgVtcmE9vhboU78bPeBfjjFjuK",
	"BoTZDtltFMMcMmjEbGuSNAhzRoYcNqVwRmYBSWvcDgknA1pDd8BTV5XeEnlNTe53zbSIbTfNudEco4Vp",
	"2dGusPq+Sfa2h/OBo3dJ/Y9gTJB/MBUum48y7sQM0nuvZ1LvfEs4EmB0jz2SEwJOItEaSH7Z42gA7DfV",
	"pdAPq3l/p+HocRpcuK7EAlQxCS5dEC+whunhVmB9b5uN7Bevt+DWVfyCS/tWxhcc/iouDajD0I9RDlCV",
	"098gUKH959ZpW838CDe4ig7CR9pRpN+tUAqVh29zGrl8DMAfpDI6rzOHsdHgNIcFj1khM6Gs2ASyExvt",
	"bl2H24irfESG+d8LhuAJuM7WvxJKhyo/pjV0EF5K3IyczK7EhsKnaLAC91Vxw7A1EBMN0h+qS09W0rJc",
	"K0H8FexFBMLK6M8LyBk7VO+0iU6kwUo+EWi5wtoaFyIvpUJY+2kuTQ2ttQo4GdSSjFrpaDGFiHRQqUyo",
	"a2m0KoVy/s9qrhU8/uAtAOY0UXJZJLFNNmYmTkL33yVrGKePSvEGwcHQI3TTWJvuiTNxc4mI2O8N0WC8",
	"g7c/unPw/JqrrHVobx80aHoYWt7vJtA9NC57q+2BXOqo/ab3zkwrqwtRClWn0WshgUxwMvXfGXeMmof8",
	"E7mwQHfsJCa3jvlprOMq5yZnEBc4VI3XBI4wbbLUUCJpp10dc6GH+Dlyi7YsfGe44ZCNxzlRVhjopysn",
	"y+i1gTCYcBsK6mCdcl4UIh+qOTf5TQwCwKjLUS3H5NCLc09iwp0+Ax7r+Y50If5OqLwJFqwtzksBnJ9O",
	"Vgvft6lqDycRJhkFcumSLH6LkFecygMrjOTFCLjJtke698Ilt2f6UDfGYfwo49VXaQsXA2h9rk1HHC82",
	"QWqitRvJfBe1vlbyH7VgvgeTuVBOTiWFVZyA6AEM0sYKVNReXAuziGdIa7cBgj9o7U46wSHbUJoKSLuV",
	"SmibzVBBRAPnd+qNT+7Ei7TxXG/1JQtzvsNOqTy2t+O9tL3uHO82FmZCCcOL7Vfte2rYhWMXFr3jRUtL",
	"33TP1nKUCeNPXwbRa0kIPaWA/vHy8nywXKoDl8NOpmzVCFhAIWae0wqOam+oJGoVray5QQBuVVqIi5s7",
	"V1kjsOBZmjugBGc/WxtBheWKApbKiLRtyH93LQxFXOFO4ndgLM4JM1ShjoQVWW1iCYlajshbJYT4ydH1",
	"981PRtzK5SWr628PZHX9fRJX3aTNKxaJmyQxMXSEJHcZwsov4GJlF7bQM/RFx/sf0g/mvfCpENeiGN+C",
	"hO+Eb+NRHYmOx9AFVm6FchtEgZTq98YqiJy7Jwg05+w2xziA10uz2DlFO7X//9n7+t62ceT/t0L4n7ZA",
	"6mz2fjjsBbg/0iZtjWvSXJykuP3pYNMSHXMjkTqSsusu+t6/4AxJSX6Q3MW6UTYpcL2uxcchORzOw2e8",
	"ENBwYzmiv8UKXbrvGwlyP0kymu9MDyy+Ozn+BeUfDTVSKu4Kesd2poevsDtFProaj4cmMrbHXKU7HJZw",
	"bbjIXJV6Z22MfgS1qJJGxjI9PoTkm8fOcNBCNdvejUq7Ty7DM/ZVit23kK1AbI3d99C16+PR7KHyNt6Z",
	"LDcDuJD9Xbw7cW64c0l7TNSpSGE7Uii8S+WUVGpvShGCpqS6qLcLHd+W5R8TLRXTpo6CvUo/+I4Sp4O9",
	"csqWlALY6s2gwdy5TifX4KMgTpCBv/Mg/v2PHMRb31nnt4/3KWmkxIRqHnvZvxLQ30CK4DXSqfcz16Op",
	"YkzQ9tUfG1UgLoCP7vLz14QGK4ZlMFOM2+dTcK0x8IBh6TbDHFJHv3PD6ByJgvZ2Z2PcaoZwB6EO6t1p",
	"XY1b486TZan0baDVR6h8w7thl9tEMbTDugfhds2YU3O44ttCW4P66yOWw1r7fdLWZ9BV5ZcwOV5a7eqv",
	"i1D0ObDioa6bcrm2R1ecJAmhglxcYxhhgCjy2iqvA0KIIw/OeFgiAHq4oosg0WALk0Jps2L8WlU5WYaN",
	"QhAH5KB4ZssdEM1EAlzNtmE7YPxuZkhO43tmNNi9GE3sBylY1ZzOfBYKSXiWKzln8Ma5Zyy3zPB/BRi7",
	"K3gh2Hsss4wKZ7jjm0auc8YSTYrcGd644TQlZQw2nIADYug93FMslnYGAcGShpQgLieYYlOmxiSj6l6v",
	"6NrcmChAS0yZAoMkqPZomhLpWoQ4OwBPtJM6QEcVuzyWDvFMaiYiAU4H9TESGv+v4BoS2W6lA0FbimL2",
	"ByYSyOuB4FnLmmiP9RBJNBLwnHQJCADKs2aUzLjIZYo5UzIueFZkxP4A2kaOgFuOcDCArNDGdkZJLhcA",
	"0kV+Bn1qChplS9NxRr9Am64H91/QA/3yx3u4A92y8p24gWMnU6niVaMu/OYSobgkwbax8kgQNmfCbnfU",
	"ZDv/oXRJChG2fdNNVOWme7yFAsPoUqTQOi/bdCN9R8xQZVnaIobqxH8SUUObro4dr/rn8KGnFT60Ucpo",
	"MC/ucvCCJekhTt0PYKwdCiXakbFCZgdh8tF3i/7XTJsLkw/Lm6ujk3UOvoha1vbYrqLne8/gBQNZDD05",
	"X1ZUE3V9xKuGR/YlNnWBwGkde/gpRvFQ7OQTXDFT264dYp2UBgMBECR06RSf2ylyBZ12kBZ2Kk3uN/a7",
	"S+GLMwuqKxAhzzJuwJkp6tEkYUnUA/EQHjqwuSLXb9TzkRNRD3uNek1SIva8XxERx9FVBYWeFSaRC7F9",
	"dYazwmhiy/zJC+S7bl6ioR/gXhfJj6Wzy2SoaWe0joVA4eNIRL03nz5dDy7eRz3y2rsqcQ2MBaDJot7V",
	"2cnpf6qf29mPrTb8cHNtGx6dfvp8sdK6JSXsD7dqW3jV0HgVYacI7UCe2kktp8a+1AMqVD07zPZ537oO",
	"ujZzF8rZLqz4gh2YgB/Kjl56Lji4yUsvlxK1IYAa6eQW6nzO7MdaoldR8y8DU66PNvG+faBgqpRyQy57",
	"G7lcHgHpu5b5JqP3rKL+WzCSSPHCEMT6XW8XHd2pwbHyKcEZAYKYkMZn60kanhHV9d0Xv/Wh011T3pcb",
	"yh4MMzWNiHfX9vuDjhpG2Lb7r99dXzanwVoAosEG3DvBzEKqe5KwObgvAK6vcAgIKz6q6MkZYmBDXlOA",
	"3vdpmzYfEufzOkbnU6mWY9A2VnMpaThxZfuRmFFdcZat1t20t8Na/flb2i5Ch3ay2xOwgRHyvXEPuyLP",
	"Nqcfv1CO9DsAeblVcsCTVI3LDBj157Ve6tikh6mkCVOHKiZzqnhZFQMIy3MlRagZkoAcR+LoFfn46eT0",
	"7IrYP6/hb884GMEBYEoP283LX15F4udX5Oot8X+2V1ExFP/bKzL8z/Dt9ceW4jifl7+82vhCKDfvXs41",
	"tt4hzX65Yyqn+zv0+I5ebUp8V+wpKO+rZ7CFRT7r6p+Urr7GnZukq7YzZYWPH36g9scNu6OOr3NDHNdh",
	"PGPxfR3ZYsvdagv6dKiYhowKgq1UIS2UzPyvFWcNbagp9HEk7OV1dfbm06fr0dXZv28GV2enx5WGQEhN",
	"UX0yYUy4zF0JVjy5PRl8PHnz8axapYoGgcVuLioFhVwb5Nbc/7hFYaZ1TI0/f3u4bbFC/i5cms7FrbZL",
	"ErkQVnjZquY5dQUcrX2qVUxEax8tivLNrqRIc1+/17mp3zEzyplILGtvgr7TlZC7nMb39I6VW9nTj2Hm",
	"sqAenDC/wfuROKPxzCH9OxnTtgeRJxr+YX9d5sA6AxmhPS/RcnNAWP8OThwhv9u/CIlKmke9YxL1ivxO",
	"0YRFvQNfwNbHbxOqmdSvj476P5HXUfHTT39jpPztKOrZKt8aDs97Zi4dtfZ6cCrL0tVDY4cI+34HOLnA",
	"P7ECgl6FdCnBmaeiTIOChGqyYGlq/9/MWCTwVzmt1JlIaU9gBXul4Rxa8Q2H3DlyZlQUtCEj3Umep0uC",
	"pTzLB3yqlJGxlRfG/YZ9e46t73XP4ti6ul21364Npi1mKhcv7rVKYvES/YNwX0o3EX3odtt+yR4m1lXK",
	"tzmV+8tRk5d8Cmppf69wQWIaz9gr4BUUTkBYoCbK79Xj3NG9Oyq+FaI35pS5yR+c9+nWR9TN5bBJQw0g",
	"WkIaPl2uZsJHx2dZGALf3QKDbJHw6ZQB6pxtHuzRmsw5JdCct8AsmLLSzHq7RkM9I4Ov65TQqWGqbuFc",
	"U4ELGcssW1AF3r2Igx+iTIKjMyrC0b27OvsF5WbNvRmrTNhUKkZoypRBwAFqMGWurxxTgWhgVvKq3K03",
	"l0Of6xjN3HZkqnlohqUpKvB960bi6NZH5tNi2IngKCOBHt8+VYDrt0/A8Rxy3PgcxpjmxpeoZheNem9O",
	"rq+jXn3scZYEC51zv3ZD5tqDRaE/O46A1fofGM/TNXYBiyunU9+NkQ6yjes10An4Qnjywk7BdVrddlhA",
	"N8M++AO5Dz6lO8WkdMmhDhPFwUt6VyiHMl7WbiqsrT3c3xqIyWYBUJ9CtU7EM9apsQXZatMcOgNIVZmB",
	"rjk11lfw3wVTS4eKBtES45qazwG84G+YHESP++TEHracKQjThDxxCOXmokSAYVQSiEfCmxBtQ7yO1GaP",
	"8Q30D8qbYBj0qXnsNopn9olxMRgekI+nJ5cHRCpygqicp6G874MLsNCDwR8GThTTloNEwgUL4kTI+PcX",
	"7ItR9MUx+f0FJkAdJRokmhfHgPD47RsyOM9CN+9c/RwE9iA7XDcGfgVrnGAL2IYhP1fBkwDH5D0syCYI",
	"pilPUw+hjgnwvxgwwoUHM15CkKZ+jJ5XqAUGXw742dmj4CuE8TpJJkCFrtbyX0Ye1nCl6skW9LwZS9Pg",
	"laKYUZzN/eDBEN+HIp6PuWifEp3UXaEuhPt1XqhcauZx5sG658KeqJpwo6jjG83R2iDz673F9dgBdMji",
	"57ak57qgg7GbZlQ0oP+9Z6bcXWFnHU4VY6Tg23nOe2Yu2Bdzwx9abblh0rAucvJbO4hfwmNIOaVAvWQo",
	"h0D4Wkp/SClhVBEbAocjCRIs7L9a+mDGzYwplLO994m9LSwhyZulrQ/qYabw6bp9xzoqf5r8ts+9WyVW",
	"F3fwjOqRktKE9Jht0ClVH3lbEWkNhhXvl+daIt6xzke3lmk0K55yXJcwsMDMMOtIaMTKJz7OET3qIjHl",
	"SkPHh4Blu/UEfaD6Skpz6afWKcrv7icAFAZrpk9DPMYaI3cxOXkHf6y4eeWKZ/bgQbEyetPeixNmj6HT",
	"q0WCiqWLzIWbZIsngqXpo7aawkl0tDvqzGE8eBbd9yi6PzuKPClHkfLV0KDgrGD2uwzoX7g2jiOqzXqi",
	"vwTv6467yJbr8DCX+SgsT5N4mcm5u+bck4b4J03t0VORP8f3bDneLhDa1b2U+Uno/FGvdI2OXV5wzcwu",
	"Cz5k5g+sNviig0odhSfWv+uTIeLTkXu2/GfUm0oZ9VDt/s+oN6cq6uF9hVeTvap+j3plJ1Hv2P4A1dCn",
	"QUW9b98at9WQmb/ItqqvVuc2VU0F0vaUAbiTMq2erRp0LhW7MxdOv+I1PYiJbX9BdjreKnsMbZvdUBeX",
	"hJpnTTru2+xZ1/njl2ee7aLpvOXKFDQl5zSeccHIy9vzV15DWUzQwjgmGfVqEocNRM0saFRswX48vUPH",
	"FfcjjaFZxyUi4WMQbJHKQYBHyPurmzfg9IPRBj7TODwHVq10OFw72QClBPFFSeKDlQRbVKDwV+bXj8Q7",
	"ytPC1TKG2seGi34iCdNGySU+d2/P0UVBwIvCJcikqX3oVMxTt+c+dGqzFAB7fx+sc551SIk5zwIjOERy",
	"NPODUyzzzBUeYKX6boF2NIO4o+EP++05uG0mZDzPxsE8kmDYkbPZj69OPo/LzIDYjqILPP3c34TuiB5U",
	"xa0+vJr0ODzvQfsKaTK9OQNUfxmjAjs7uRyQGRVJyjS26DM1hA7Bf5Vy7dHI8lzJXIHfAPsSM9QOcOd3",
	"h01IQaaUp3rDBOWUjE8Hw3+tTfDXuUxbJucO7Ne5TDfMMBJWJkOWiGrPal1baVRJO7f6aS5Tzb+yMYqd",
	"W7lROHl74km4XTrFmsoNX+NQ36EtpSWbb4us8hR+1O/6ch27o9isM662q+VZQ/ekNHQrt1qTmm7DUbZM",
	"/pJqXWOqyEyNtMIf/2or+ksArzdso0+uq1eN5+lYZzMGw1+MQ3RH/bed0wsej1DWb33Hb3aVuBi8JSfu",
	"seC3yMYXul/cCx5j+U681LdTZi7i0YSL5A/S5fbiLXnDrQi0E1VuRWxLd5Um0xS+tQLLVzSCIKy9vbwh",
	"UBdoMpkt59vI8A566MxT7Q41bzSesWTEpzRmjQFjKD678iSfLTWPaUoss1G2srPpUXLH50yQO8t1gLk6",
	"0h1j9JZ9yx97fShozdz7HohJ07TaB9fLlT6kQrPygmtG3tGNKQ1Q1n0PKlJoaQCT2xsvXCdk117lMMIQ",
	"tJmxTKpl+2L7pO4eOZpmgPEipxUlJ7blYwODfgTYw3n5gpJzpmKZZdzgO9E+dcByXO0HdEKuQVnmuLg9",
	"1+FqdTgz2EMf2oaXIWwcV/UlGoXB+CZsm68qrenG5tz7Ej4707JvVc8UF4Bl/uu7ITm5eus1Tg65G2qf",
	"Y1l8KMayUHZkBFKtRr25TKnhKYt6QaV04N5roGKLZ1TcMUInqsghEI6ZBYQURwId8cmkMGRAEsYywg25",
	"kzIhTMjibmbHYo9dBZCHxGlhG5OFITO5IFkRz/xcuI5EJSP9ymrLzP4fIMNNUWIqAUUgMXLIJZvSQthN",
	"33QEfTdImj0fwpUt3sVj6NJj73D6XB5tr4LZhblqo45L71NXE9S1UrVyy7duZHtdIjerLq7M3G0aLkaF",
	"3g7GaEV+Iw1NK/zQKabD+RLk/E2IMYTF0hjjTEhdkCgXK+DzVF0Z3bJCvYtL8ppcOZ44wYAo9EbWXAqE",
	"HMA/l1en5DW5LD+F4o4JVlrFsr5Ze+grTW4WY+AvmOhA3GjWLYFmLuL2ozUXcYA821loeWnX69VxTU6p",
	"+HzU27XnjQrCstwsoXbDubsV8X7PnBXzu3jeRDzi+fz/Nad+t4QOV9XgspKEkK/F5tUWbaugWZNfqi32",
	"t+93EQ/sSDtDv+/TXm5XVz4FDChnCt2uNHxWFz4xdWG7nhDk/zKiAEBinWdobA/UHzFSowbJvRqCxOAs",
	"05ABvtog3u4AAXgQCSH98wAy+STQojc927rOPl8R+3A8KmHKXkYJNRTicUrjtSuH7ergRx+JcLHZztBA",
	"dWC/aDDsQ/g1zIneMyuhAJ7goIKzJPzQPIsuJ4YvfQQJxXxOcy4LnS7LV78j0O35ASLd+qY0cHUFbnoJ",
	"XtubCAlQhafucocUBLCkydax4KxDMEmIOhjzZFze8TiWWCrcYIkmRsKAqr6eTisM8Id+CDgHCes5o3Nm",
	"K6w0Dfn1nccCRXVaIAUU3cTBQZf82LXIXVIfr12uh3EqRRPCmP3szeLBlDBGKy3CjaHzOU1JWKFgSofG",
	"E+Qlg+laaCHILTTPmcPUgVgvUWQT+7Yv0Xf8WQFIpW0ypt0lMNjHvFWAXl3dKZUsx9u8izHN8WZprFym",
	"Mnvxo10oT4tOLlTLMg3LRbJn2QXB9EvtZQ1cAjSPB+CN4vWUlpUj4I3XkwGWoDI1IEJbwinuNmlSZzJN",
	"QASpQHygMtXesnaZQSlnm9Uhj96mxl2TluVsbC4SZ0pJRWKZMH3sNRRnF5/Oz85fHv386rjaGISXloNU",
	"hfC8xwfZlWRq2OHDx76/ge5dZUSIW9muAcFyKNe6zV5XTDnFx2tMNnJArm4uLgYX760oObz+dHl5duoL",
	"5Dw5sFcXILVzUBq7ws27wI7zcW8DO4OO7gKZNzE5mbdeRLbQ414emXfvkDJh+HQ5mi1zpuZcy+0wKwNX",
	"lnwIZd1bIoPMv5C2QTBtvBs1Gp7XVZf2z0TKFIMc7em0E6CGA6hxmynV6UdwLOVQuqMIU1QkMhtlNN5K",
	"yuDQimXtSzFo/JpMKJp/wUBn1O8uJJmxLzRhMc9oShJ+x43eTLAr6Oicxt2h01zEI0AlWvCvtCEof2Cc",
	"tlRvgJgAj4/LT1fX8Ez9fPYm/LCBkHCLOPvGQpJ7ttTEjwLq2/9YsIm9Ui7sSwrAATUjCwA6e2FcQC+o",
	"KiZbtuatiC+lMp9xUl2h9oKqFhd4KPHsAP8AiwSUb/V+vz3/DCBvguZ6Jl06J5/rvQTW4wmp5H0/DNng",
	"vWAFjdgfXb7yOC20YZYSLj+585mfv2UCkAcxF+xUOkASV3419w64gJeAQKCMm4EOCTg1TXWZesfToZJL",
	"B8X2cmyozKSGgn6wNrvwK2I2o+YOvfQxFVW9pS0Chdvt+7nqbeOd8jh3O6xkBYc+HdaM6tE80+0YN1HP",
	"ylFRD/CdXG1Yl8oTDu2Qqzu1YQVcerQPVN9mer/LsTrhTq7KHTOjsL9b3kxlOdQ8I9Wb9vt7Zk7LxvdK",
	"7fpEunoIwOSLyvqRU9bvcBJWIvg2cR3i5GqHNTLO78ctC+Ma9W3uf3VW593VNdrdrLzCdtoDY2z7T8Pa",
	"HCSMZvHv2er8xKzOpeTZYHne+VyB/e8HH6q98cgu2QHXuWJGTTyr3rBW9PIyTuMdBgTTa9LDirgPeTMU",
	"R5AI6MxecRlKeAitBQk5wdFJryhrvdtB2cdB5de12tDZXcEg6lSxFOHUZzwP7sa26/7WlEO4587tIEvx",
	"5jM3s1NPjr1ulOal6Ny1umCThM6bVAGfscSDDtmNso014VAbsysraWQs03FAUfNo8/5LxZUcXqhTsD4J",
	"wWKM3JaVXvg8Zn1yC/D1ckqi3ofr60v7v2HUiwRY2DSZSDMj9kfY2PA1NChFmcN2ZsV1GGTMlNE6rT1z",
	"eYIvdvsN0d7Z1kTQDuN+BYV3tWfwV0mY5uGphhMLcPseelGh/8ffIKAcNI0nhZlZgdZhzpeY6JVmMInn",
	"xaeLszIh5wW+9itVK2MEt5g3J8PB21Deo1giIr9A+53T+mFaYKpJnlJ7CXwx6NQyeH82vPYNfKB65l1f",
	"87bGUINi7Ai3ZCjFpUAy4AacsITQidwUUHVZVI/On89v8Ex0CG4/HFLHVwp+yDN6x1qYS8EHUOpZ1/gQ",
	"K1bwPi7S2rLt8tRykHSgAKeGTqhmmG/twKfaQr7EAfYWwFhRNbflEVZuh6fwEKuT/2CHQ/L8IntSL7L1",
	"8/l1qg+DIrU5AQZNUwgEHLri34Gou8mS9etUD0sN7jOr/sFb4etU98PCbzcOXdN7yDbkH+e12CH3CNlg",
	"Ca2b37UdNEt2C2Ou74t9CDpfp3rkJ9QhM8rKiqyezt18c/3ShAUz0uNa7XmxvLvt/lcM3GIfwYLtrlqu",
	"6r7A6lj6VnuHzIRNmXIgWvBvF9CQMh+uESy3W2ShylrtUxiq87c974XuwDWt8dMHuUmf5bknJc+1cSAM",
	"HWpFAH+o+x27/xF3BhLiMVwaSqbphMb3DYvmSuDVvnLdr18cisWF0nzOwuUBmK+A86oDA7K8ZiLlfUbV",
	"vSaZVIwoFjNhiJlRfHNLwSJR5orY3AnezhjP91uhDUn5PSPjyiAmhQ/1SbWsjQar1hueShX7kcO/SSFK",
	"TJayUutW82T9EZvN99W5zfbtoKftSnCzhIthQjWPe8f//7+Wj6FpBm+MQqW9497MmPz48PDoHz/3j/7+",
	"S//o6Kj/j6NDmvPD+c/9n3rf/vvt/wIAAP//X9FOtwg4BgA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

